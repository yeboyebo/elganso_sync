/***************************************************************************
                          mt_masterprocesos.qs
                            -------------------
   begin                : jue ene 20 2005
   copyright            : (C) 2005 by InfoSiAL S.L.
   email                : mail@infosial.com
***************************************************************************/
/***************************************************************************
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; version 2 of the License.               *
 ***************************************************************************/ 
/***************************************************************************
   Este  programa es software libre. Puede redistribuirlo y/o modificarlo
   bajo  los  términos  de  la  Licencia  Pública General de GNU   en  su
   versión 2, publicada  por  la  Free  Software Foundation.
 ***************************************************************************/

/** @file */ 

////////////////////////////////////////////////////////////////////////////
//// DECLARACION ///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

/** @class_declaration interna */
//////////////////////////////////////////////////////////////////
//// INTERNA /////////////////////////////////////////////////////
class interna {
    var ctx:Object;
    function interna( context ) { this.ctx = context; }
    function init() { this.ctx.interna_init(); }
}
//// INTERNA /////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

/** @class_declaration oficial */
//////////////////////////////////////////////////////////////////
//// OFICIAL /////////////////////////////////////////////////////
class oficial extends interna {
	var funciones:Array;
	var sep = "ð";
	var sep2 = "|";
	var relaciones:Array = [];
    function oficial( context ) { interna( context ); } 
	function ejecutarFuncion() { return this.ctx.oficial_ejecutarFuncion(); }
	function recargarFunciones() { return this.ctx.oficial_recargarFunciones(); }
	function actualizarSaldos() { return this.ctx.oficial_actualizarSaldos();}
	function consolidarNumeracion() { return this.ctx.oficial_consolidarNumeracion();}
	function subcuentasDuplicadas() { return this.ctx.oficial_subcuentasDuplicadas();}
	function resolverDuplicidad(codSubcuenta:String, codEjercicio:String, utilProg:FLUtil, mensaje:String) { return this.ctx.oficial_resolverDuplicidad(codSubcuenta, codEjercicio, utilProg, mensaje);}
	function obtenerRelaciones(tabla) { return this.ctx.oficial_obtenerRelaciones(tabla) ;}
	function asientosFacturacionProv() { return this.ctx.oficial_asientosFacturacionProv() ;}
	function asientosFacturacionCli() { return this.ctx.oficial_asientosFacturacionCli() ;}
	function recibosCliQueFaltan() { return this.ctx.oficial_recibosCliQueFaltan() ;}
	function recibosProvQueFaltan() { return this.ctx.oficial_recibosProvQueFaltan() ;}
	function reubicarPartidasPagos() { return this.ctx.oficial_reubicarPartidasPagos() ;}
	function repararPagares() { return this.ctx.oficial_repararPagares() ;}
	function actualizarContabilidadRemesas() { return this.ctx.oficial_actualizarContabilidadRemesas() ;}
	function consolidarStocks() { return this.ctx.oficial_consolidarStocks() ;}
	function subcuentasClientes() { return this.ctx.oficial_subcuentasClientes() ;}
	function consolidarSubcuentasClientes() { return this.ctx.oficial_consolidarSubcuentasClientes() ;}
	function repararAsientosMultiejercicio() { return this.ctx.oficial_repararAsientosMultiejercicio() ;}
	function repararPartidasIVA() { return this.ctx.oficial_repararPartidasIVA() ;}
	function eliminarContabilidadSerie() { return this.ctx.oficial_eliminarContabilidadSerie() ;}
	function subcuentasProv() { return this.ctx.oficial_subcuentasProv() ;}
	function partidasCC() { return this.ctx.oficial_partidasCC() ;}
	function subcuentasCliProv() { return this.ctx.oficial_subcuentasCliProv() ;}
	function stocksFromStockFis() { return this.ctx.oficial_stocksFromStockFis() ;}
	function completarCopiaSubcuentas() { return this.ctx.oficial_completarCopiaSubcuentas() ;}
	function actualizarCodigosBalanceCuenta() { return this.ctx.oficial_actualizarCodigosBalanceCuenta() ;}
	function plazosPago() { return this.ctx.oficial_plazosPago() ;}
	function emparejarSubcuentasClientes() { return this.ctx.oficial_emparejarSubcuentasClientes() ;}
	function actualizarDescripcionesSubctasCli() { return this.ctx.oficial_actualizarDescripcionesSubctasCli() ;}
	function revisaRecibosCli(oParam) { return this.ctx.oficial_revisaRecibosCli(oParam);}
	

	function traspasoSubcta(idSubctaOri:Number, idSubctaDes:Number, codSubctaOri:Number, codSubctaDes:Number) {
		return this.ctx.oficial_traspasoSubcta(idSubctaOri, idSubctaDes, codSubctaOri, codSubctaDes);
	}
	function revisaAsientoPagoRecibosCli(oParam) {
		return this.ctx.oficial_revisaAsientoPagoRecibosCli(oParam);
	}
	function revisaAsientoPagoRemesas(oParam) {
		return this.ctx.oficial_revisaAsientoPagoRemesas(oParam);
	}
	function procesaStocksPtes(oParam) {
		return this.ctx.oficial_procesaStocksPtes(oParam);
	}
	function ejecutaFuncionDefecto(funcion) {
		return this.ctx.oficial_ejecutaFuncionDefecto(funcion);
	}
	function actualizarDescripcionesSubctasProv() { return this.ctx.oficial_actualizarDescripcionesSubctasProv() ;}
	function actualizarTextoRecibosCli(oParam) {
		return this.ctx.oficial_actualizarTextoRecibosCli(oParam);	
	}
	function regenerarBD() {
		return this.ctx.oficial_regenerarBD();
	}	
	function crearEjercicioEmpresa() {
		return this.ctx.oficial_crearEjercicioEmpresa();
	}	
	function creaEjercicio(curEmpresa, fecha) {
		return this.ctx.oficial_creaEjercicio(curEmpresa, fecha);
	}	
	function copiaSeriesEjercicios(codEjerOrigen, codEjerDestino) {
		return this.ctx.oficial_copiaSeriesEjercicios(codEjerOrigen, codEjerDestino);
	}	/*
	function copiaPGCEjercicio(codEjerOrigen, codEjerDestino) {
		return this.ctx.oficial_copiaPGCEjercicio(codEjerOrigen, codEjerDestino);
	}	
	function updateIdSubCuentas(codEjerDestino) {
		return this.ctx.oficial_updateIdSubCuentas(codEjerDestino);
	}	*/
	function lanzarUpdateIdSubCuentas() {
		return this.ctx.oficial_lanzarUpdateIdSubCuentas();
	}
	function cerrarPedidosCli(oParam) {
		return this.ctx.oficial_cerrarPedidosCli(oParam);
	}
	function eliminarSubcuentasVacias() {
		return this.ctx.oficial_eliminarSubcuentasVacias();
	}
	function creaVistas(oParam) {
		return this.ctx.oficial_creaVistas(oParam);
	}
	function dameVistas() {
		return this.ctx.oficial_dameVistas();
	}
	function comprobarStocksMagento() {
		return this.ctx.oficial_comprobarStocksMagento();
	}
	function comprobarStocksMagentoAbanQ(corregir, corregirNegativos, nombreLog) {
		return this.ctx.oficial_comprobarStocksMagentoAbanQ(corregir, corregirNegativos, nombreLog);
	}
	function actualizaSecuencias(oParam) {
		return this.ctx.oficial_actualizaSecuencias(oParam);
	}
}
//// OFICIAL /////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

/** @class_declaration elganso */
/////////////////////////////////////////////////////////////////
//// EL GANSO ///////////////////////////////////////////////////
class elganso extends oficial {
	var curRec_, curAlb_, curLRec_, curLAlb_;
	var oCorreo;
	var inventarios_, ventasAbiertas_, enviosIncompletos_, recepcionesIncompletas_;
    var canStockMal_, canStockMalUser_, canStockMalAuto_;
    var nombreLog_,nombreFile_, silent_, aCx_, mgr_, dateInicio_, cx_;


	function elganso( context ) { oficial ( context ); }
	function init() {
		return this.ctx.elganso_init();
	}
	function ventasIncoherentes(oParam) {
		return this.ctx.elganso_ventasIncoherentes(oParam);
	}
	function stocksBarcodeNulo(oParam) {
		return this.ctx.elganso_stocksBarcodeNulo(oParam);
	}
	function stocksIdSincroNulo(oParam) {
		return this.ctx.elganso_stocksIdSincroNulo(oParam);
	}
	function totalesPagoArqueos(oParam) {
		return this.ctx.elganso_totalesPagoArqueos(oParam);
	}
	function conectar(codTienda) {
		return this.ctx.elganso_conectar(codTienda);
	}
	function totalesPagoArqueos(oParam) {
		return this.ctx.elganso_totalesPagoArqueos(oParam);
	}
	function eg_revisaEnviosCentral(oParam) {
		return this.ctx.elganso_eg_revisaEnviosCentral(oParam);
	}
	function eg_revisaLineasMultiPtes(oParam) {
		return this.ctx.elganso_eg_revisaLineasMultiPtes(oParam);
	}
	function eg_revisaLineasMultiFechaNull(oParam) {
		return this.ctx.elganso_eg_revisaLineasMultiFechaNull(oParam);
	}
	function eg_reconstruyeStock(oParam) {
		return this.ctx.elganso_eg_reconstruyeStock(oParam);
	}
	function eg_ejecutarConsulta(listaTiendas, consulta) {
		return this.ctx.elganso_eg_ejecutarConsulta(listaTiendas, consulta);
	}
	function lanzarConsulta(consulta) {
		return this.ctx.elganso_lanzarConsulta(consulta);
	}
	function conectarMT(codTienda, silent) {
		return this.ctx.elganso_conectarMT(codTienda, silent);
	}
	function eg_activaFacturasPtesTienda(oParam) {
		return this.ctx.elganso_eg_activaFacturasPtesTienda(oParam);
	}
	function activaFacturasPtesTienda(oParam) {
		return this.ctx.elganso_activaFacturasPtesTienda(oParam);
	}
	function eg_actualizaClientes(oParam) {
		return this.ctx.elganso_eg_actualizaClientes(oParam);
	}
	function eg_actualizaDirClientes(oParam) {
		return this.ctx.elganso_eg_actualizaDirClientes(oParam);
	}
	function eg_recalcularSaldoVales(oParam) {
		return this.ctx.elganso_eg_recalcularSaldoVales(oParam);
	}
	function eg_generaBarcodeKits(oParam) {
		return this.ctx.elganso_eg_generaBarcodeKits(oParam);
	}
	function eg_recalculaPreciosPedAlb(oParam) {
		return this.ctx.elganso_eg_recalculaPreciosPedAlb(oParam);
	}
	function eg_publicaArticulosWeb(oParam) {
		return this.ctx.elganso_eg_publicaArticulosWeb(oParam);
	}
	function eg_calculaCosteProduccion(oParam) {
		return this.ctx.elganso_eg_calculaCosteProduccion(oParam);
	}
	function eg_generarArqueosWeb() {
		return this.ctx.elganso_eg_generarArqueosWeb();
	}
  
  function eg_marcaViajesRx() {
    return this.ctx.elganso_eg_marcaViajesRx();
  }
  function marcaViajeRx(oParam) {
    return this.ctx.elganso_marcaViajeRx(oParam);
  }
	function cargaStockWeb(oParam) {
		return this.ctx.elganso_cargaStockWeb(oParam);
	}
	function revisaEstadoLineasTransRx() {
		return this.ctx.elganso_revisaEstadoLineasTransRx();
	}
	function cargaStockMex(oParam) {
		return this.ctx.elganso_cargaStockMex(oParam);
	}
	function arreglaColonias(oParam) {
		return this.ctx.elganso_arreglaColonias(oParam);
	}
	function sincronizaStockTienda(oParam) {
		return this.ctx.elganso_sincronizaStockTienda(oParam);
	}
	function egAsignarPuntosVentasWebSinPuntos(oParam) {
		return this.ctx.elganso_egAsignarPuntosVentasWebSinPuntos(oParam);
	}
	function egGeneraMovistockPacks() {
		return this.ctx.elganso_egGeneraMovistockPacks();
	}
	function egGeneraMovistockHuerfanos(almacenes, paramCorregir) {
		return this.ctx.elganso_egGeneraMovistockHuerfanos(almacenes, paramCorregir);
	}
	function egGeneraMovistockRegStock() {
		return this.ctx.elganso_egGeneraMovistockRegStock();
	}
	function egEnviarMailPedidosWeb() {
		return this.ctx.elganso_egEnviarMailPedidosWeb();
	}
	function egRecalcularPreciosPedidos() {
		return this.ctx.elganso_egRecalcularPreciosPedidos();
	}
	function egTarjetasParaEncuesta(fVentas, dirFTP) {
		return this.ctx.elganso_egTarjetasParaEncuesta(fVentas, dirFTP);
	}
	function egFicheroTCuento(fVentas, dirFTP, codTiendaP) {
		return this.ctx.elganso_egFicheroTCuento(fVentas, dirFTP, codTiendaP);
	}
	function egFicheroTCuentoDH(dh, dirFTP, codTiendaP) {
		return this.ctx.elganso_egFicheroTCuentoDH(dh, dirFTP, codTiendaP);
	}
	function egGeneraBarcodesArticulo() {
		return this.ctx.elganso_egGeneraBarcodesArticulo();
	}
	function egHuecosPortugal(oParam) {
		return this.ctx.elganso_egHuecosPortugal(oParam);
	}
	function huecosPortugal(fechaDesde, codSerie) {
		return this.ctx.elganso_huecosPortugal(fechaDesde, codSerie);
	}
	function egGenerarRecogidas(oParam) {
		return this.ctx.elganso_egGenerarRecogidas(oParam);
	}
	function crearRecogida(idAlbaran) {
		return this.ctx.elganso_crearRecogida(idAlbaran);
	}
	function datosRecogida() {
		return this.ctx.elganso_datosRecogida();
	}
	function crearLineasRecogida(idRecogida, idAlbaran) {
		return this.ctx.elganso_crearLineasRecogida(idRecogida, idAlbaran);
	}
	function datosLineaRecogida() {
		return this.ctx.elganso_datosLineaRecogida();
	}
	function diagnostico() {
		return this.ctx.elganso_diagnostico();
	}
	function limpieza() {
		return this.ctx.elganso_limpieza();
	}
	function egLimpiatpv_almamultitransstock(oP) {
		return this.ctx.elganso_egLimpiatpv_almamultitransstock(oP);
	}
	function egLimpiatpv_artmultitransstock(oP) {
		return this.ctx.elganso_egLimpiatpv_artmultitransstock(oP);
	}
	function egLimpiatpv_barcodemultitransstock(oP) {
		return this.ctx.elganso_egLimpiatpv_barcodemultitransstock(oP);
	}
	function egLimpiamrw_datoenviobin(oP) {
		return this.ctx.elganso_egLimpiamrw_datoenviobin(oP);
	}
	function egCheckSincroStockMagento(oParam) {
		return this.ctx.elganso_egCheckSincroStockMagento(oParam);
	}
	function egCheckSincroEsquema(esquema, horasSinSincro) {
		return this.ctx.elganso_egCheckSincroEsquema(esquema, horasSinSincro);
	}
	function egCheckRangoHorasEsquema(esquema, tiempoActual) {
		return this.ctx.elganso_egCheckRangoHorasEsquema(esquema, tiempoActual);
	}
	function egCheckSincroVentasTpv(oParam) {
		return this.ctx.elganso_egCheckSincroVentasTpv(oParam);
	}
	function egCheckSincroTxPuntos(oParam) {
		return this.ctx.elganso_egCheckSincroTxPuntos(oParam);
	}
	function egCheckSincroStocks(oParam) {
		return this.ctx.elganso_egCheckSincroStocks(oParam);
	}
	function egCheckStockDiffs(oParam) {
		return this.ctx.elganso_egCheckStockDiffs(oParam);
	}
	function egCheckViajesDiffs(oParam) {
		return this.ctx.elganso_egCheckViajesDiffs(oParam);
	}
	function egCheckInventariosDiffs(oParam) {
		return this.ctx.elganso_egCheckInventariosDiffs(oParam);
	}
	function egCheckPuntosDiffs(oParam) {
		return this.ctx.elganso_egCheckPuntosDiffs(oParam);
	}
	function egCheckVentasFacturadas(oParam) {
		return this.ctx.elganso_egCheckVentasFacturadas(oParam);
	}
	function egCheckSincroClientesyPedidos(oParam) {
		return this.ctx.elganso_egCheckSincroClientesyPedidos(oParam);
	}
	function egCheckSincroFicheros(oParam) {
		return this.ctx.elganso_egCheckSincroFicheros(oParam);
	}
	function controlSincroVentas() {
		return this.ctx.elganso_controlSincroVentas();
	}
	function datosCorreoDia() {
		return this.ctx.elganso_datosCorreoDia();
	}
	function enviaCorreoDia(subject, mensaje) {
		return this.ctx.elganso_enviaCorreoDia(subject, mensaje);
	}
	function statusChanged(msg, code) {
		return this.ctx.elganso_statusChanged(msg, code);
	}
	function egInventariosBorrados(oParam) {
		return this.ctx.elganso_egInventariosBorrados(oParam);
	}
	function procesaInventariosBorrados(listaTiendas, corregir) {
		return this.ctx.elganso_procesaInventariosBorrados(listaTiendas, corregir);
	}
	function egCheckStocks(codTienda, paramCorregir) {
		return this.ctx.elganso_egCheckStocks(codTienda, paramCorregir);
	}
	function dameTiendasXEsquema(paramTienda, esquema) {
		return this.ctx.elganso_dameTiendasXEsquema(paramTienda, esquema);
	}
	function compruebaStockBarcode(oParam) {
		return this.ctx.elganso_compruebaStockBarcode(oParam);
	}
	function datosMovCheckStock(qMov, codTienda, corregir, tiendaObjetivo) {
		return this.ctx.elganso_datosMovCheckStock(qMov, codTienda, corregir, tiendaObjetivo);
	}
	function datosRegCheckStock(qReg, codTienda, corregir, tiendaObjetivo) {
		return this.ctx.elganso_datosRegCheckStock(qReg, codTienda, corregir, tiendaObjetivo);
	}
	function serieMYaAlmacenAMAY(oParam) {
		return this.ctx.elganso_serieMYaAlmacenAMAY(oParam);
	}
	function dameFechaActual(oParam) {
		return this.ctx.elganso_dameFechaActual(oParam);
	}
	function reprocesaStockLineasPedido(idPedido) {
		return this.ctx.elganso_reprocesaStockLineasPedido(idPedido);
	}
	function reprocesaStockLineasAlbaran(idAlbaran) {
		return this.ctx.elganso_reprocesaStockLineasAlbaran(idAlbaran);
	}
	function reprocesaPacksAZPR(oParam) {
		return this.ctx.elganso_reprocesaPacksAZPR(oParam);
	}
	function reprocesaStockLineasAlbaranProv(idAlbaran) {
		return this.ctx.elganso_reprocesaStockLineasAlbaranProv(idAlbaran);
	}
	function egPonTiendaJornadas() {
		return this.ctx.elganso_egPonTiendaJornadas();
	}
	function egActualizaTiempoJornadas() {
		return this.ctx.elganso_egActualizaTiempoJornadas();
	}
	function egActualizaCantidadPlanProd() {
		return this.ctx.elganso_egActualizaCantidadPlanProd();
	}
	function egActualizaCantRecibidaPlanProd() {
		return this.ctx.elganso_egActualizaCantRecibidaPlanProd();
	}
	function egSincronizaFicherosTiendas() {
		return this.ctx.elganso_egSincronizaFicherosTiendas();
	}
	function egMantenimientoRegistros() {
		return this.ctx.elganso_egMantenimientoRegistros();
	}
	function egSincronizaFicherosCentral() {
		return this.ctx.elganso_egSincronizaFicherosCentral();
	}
	function egCompruebaInstalacion(nombreLog) {
		return this.ctx.elganso_egCompruebaInstalacion(nombreLog);
	}
	function egSincronizaRxFlfiles() {
		return this.ctx.elganso_egSincronizaRxFlfiles();
	}
	function egConexionCentralInstalacion() {
		return this.ctx.elganso_egConexionCentralInstalacion();
	}
	function egCheckInventarios(tiendas, paramCorregir) {
		return this.ctx.elganso_egCheckInventarios(tiendas, paramCorregir);
	}
	function egCheckViajes(tiendas, paramCorregir) {
		return this.ctx.elganso_egCheckViajes(tiendas, paramCorregir);
	}
	function egSincronizarViajesIncompletos(codTienda, desde, corregir) {
		return this.ctx.elganso_egSincronizarViajesIncompletos(codTienda, desde, corregir);
	}
	function egSincronizarViajesRecepcionIncompletos(codTienda, desde, corregir) {
		return this.ctx.elganso_egSincronizarViajesRecepcionIncompletos(codTienda, desde, corregir);
	}
	function egSincronizarViajesRecepcionTiendaIncompletos(codTienda, desde, corregir) {
		return this.ctx.elganso_egSincronizarViajesRecepcionTiendaIncompletos(codTienda, desde, corregir);
	}
	function egMarcaViajesCancelados() {
		return this.ctx.elganso_egMarcaViajesCancelados();
	}
	function egCheckPuntos(tiendas, paramCorregir) {
		return this.ctx.elganso_egCheckPuntos(tiendas, paramCorregir);
	}
	function egCheckLineasVentaVariosMovs(oParam) {
		return this.ctx.elganso_egCheckLineasVentaVariosMovs(oParam);
	}
	function egCorregirLineasViajesSinMovimiento() {
		return this.ctx.elganso_egCorregirLineasViajesSinMovimiento();
	}
	function egRegularizarStockT14(oParam) {
		return this.ctx.elganso_egRegularizarStockT14(oParam);
	}
	function egComprobarPedidosNoSincronizados() {
		return this.ctx.elganso_egComprobarPedidosNoSincronizados();
	}
	function egCrearSeriesTiendaEnCentral() {
		return this.ctx.elganso_egCrearSeriesTiendaEnCentral();
	}
	function egCheckLineasViajeTransito(oParam) {
		return this.ctx.elganso_egCheckLineasViajeTransito(oParam);
	}
	/*function egGeneraFacturasPortugal(silent) {
		return this.ctx.elganso_egGeneraFacturasPortugal(silent);
	}*/
	function egRellenarHuecosVentasActurus() {
		return this.ctx.elganso_egRellenarHuecosVentasActurus();
	}
	function egComprobarFacturasPortugal(oParam) {
		return this.ctx.elganso_egComprobarFacturasPortugal(oParam);
	}
	function egComprobarPartidasCC(oParam) {
		return this.ctx.elganso_egComprobarPartidasCC(oParam);
    	}
	function egGenerarAsientoDevolValesArqueo(oParam) {
		return this.ctx.elganso_egGenerarAsientoDevolValesArqueo(oParam);
	}
	function ejecutarFuncion() {
		return this.ctx.elganso_ejecutarFuncion();
	}	
	function egCorregirPagosTarjetaArqueo(oParam) { 
		return this.ctx.elganso_egCorregirPagosTarjetaArqueo(oParam);
	}
	function egCorregirArqueoPagos() { 
		return this.ctx.elganso_egCorregirArqueoPagos();
	}	
	function egBorrarFacturasArqueos(oParam) {
		return this.ctx.elganso_egBorrarFacturasArqueos(oParam);
	}
	function egBorrarFacturaRectVentas(oParam) {
		return this.ctx.elganso_egBorrarFacturaRectVentas(oParam);
	}
	function borrarFactura(idFactura) {
		return this.ctx.elganso_borrarFactura(idFactura);
	}
	function actualizaSaldoSubcuentas(subcuentas) {
		return this.ctx.elganso_actualizaSaldoSubcuentas(subcuentas);
	}
	function egCerrarRecepcionViajesTransitoCentral() {
		return this.ctx.elganso_egCerrarRecepcionViajesTransitoCentral();
	}
	function egCargaProveedoresCsv() {
		return this.ctx.elganso_egCargaProveedoresCsv();
	}
	function comprobarProveedorCsv(oProveedor) {
		return this.ctx.elganso_comprobarProveedorCsv(oProveedor);
	}
	function comprobarSubcuentaEjercicioProv(oProveedor) {
		return this.ctx.elganso_comprobarSubcuentaEjercicioProv(oProveedor);
	}
	function comprobarDireccionProv(oProveedor) {
		return this.ctx.elganso_comprobarDireccionProv(oProveedor);
	}
	function comprobarCtaBancoProv(oProveedor) {
		return this.ctx.elganso_comprobarCtaBancoProv(oProveedor);
	}
	function egComprobarVentasTpvWeb() {
		return this.ctx.elganso_egComprobarVentasTpvWeb();
	}
	function incluirGastosEnvioWebVentasFacturas() {
		return this.ctx.elganso_incluirGastosEnvioWebVentasFacturas();
	}
	function insertLineaGastos(q) {
		return this.ctx.elganso_insertLineaGastos(q);
	}
	function totalizarFacturaGastos(idFactura) {
		return this.ctx.elganso_totalizarFacturaGastos(idFactura);
	}
	function recalcularTotalesProduccion() {
		return this.ctx.elganso_recalcularTotalesProduccion();
	}
	function obtenerFechaHoy() {
		return this.ctx.elganso_obtenerFechaHoy();
	}
	function editarPedidosProduccion(idPedido) {
		return this.ctx.elganso_editarPedidosProduccion(idPedido);
	}
	function editarTotalesLineasPedidos(idPedido) {
		return this.ctx.elganso_editarTotalesLineasPedidos(idPedido);
	}
	function editarTotalesPedidos(idPedido) {
		return this.ctx.elganso_editarTotalesPedidos(idPedido);
	}
	function editarAlbaranesProduccion(idPedido) {
		return this.ctx.elganso_editarAlbaranesProduccion(idPedido);
	}
	function editarTotalesLineasAlbaran(idPedido) {
		return this.ctx.elganso_editarTotalesLineasAlbaran(idPedido);
	}
	function editarTotalesAlbaran(idPedido) {
		return this.ctx.elganso_editarTotalesAlbaran(idPedido);
	}
	function recalcularCosteMedioArticulos() {
		return this.ctx.elganso_recalcularCosteMedioArticulos();
	}
	function egCorregirPartidasCentrosCoste() {
		return this.ctx.elganso_egCorregirPartidasCentrosCoste();
	}
	function recalcularLineasFacturasVentas() {
		return this.ctx.elganso_recalcularLineasFacturasVentas();
	}
	function editarLineasVenta(q) {
		return this.ctx.elganso_editarLineasVenta(q);
	}
	function recalcularTotalesFactura(q) {
		return this.ctx.elganso_recalcularTotalesFactura(q);
	}
	function egCorregirVentasWeb() {
		return this.ctx.elganso_egCorregirVentasWeb();
	}
	function egComprobarVentasWebAbiertas() {
		return this.ctx.elganso_egComprobarVentasWebAbiertas();
	}
	function recalcularStocks20161203() {
		return this.ctx.elganso_recalcularStocks20161203();
	}
	function recalcularStocks() {
		return this.ctx.elganso_recalcularStocks();
	}
	function generaVentasPrueba() {
		return this.ctx.elganso_generaVentasPrueba();
	}
	function dameBarcodeViejo(barCode) {
		return this.ctx.elganso_dameBarcodeViejo(barCode);
	}
	function dameBarcodeNuevo(barCode) {
		return this.ctx.elganso_dameBarcodeNuevo(barCode);
	}
}
//// EL GANSO ///////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_declaration sii */
/////////////////////////////////////////////////////////////////
//// SII ////////////////////////////////////////////////////////
class sii extends elganso {
	var curLRFR_;
	var curLRFRIMP_;
	function sii( context ) { elganso ( context ); }
	function init() {
		return this.ctx.sii_init();
	}
	function insertaSIIFacCli(oParam) {
		return this.ctx.sii_insertaSIIFacCli(oParam);
	}
	function insertaSIIFacProv(oParam) {
		return this.ctx.sii_insertaSIIFacProv(oParam);
	}
	function renumerarSSIFacCli() {
		return this.ctx.sii_renumerarSSIFacCli();
	}
	function renumerarSSIFacProv() {
		return this.ctx.sii_renumerarSSIFacProv();
	}
	function actualizarEstadoSIIFacCli(oParam)  {
		return this.ctx.sii_actualizarEstadoSIIFacCli(oParam);
	}
	function actualizarEstadoSIIFacProv(oParam)  {
		return this.ctx.sii_actualizarEstadoSIIFacProv(oParam);
	}
	function insertaSIIFacProv_q(oParam)  {
		return this.ctx.sii_insertaSIIFacProv_q(oParam);
	}
	function crearRegistrosLRFR(idlrfr,idAsiento, idComunicacion,idFactura) {
		return this.ctx.sii_crearRegistrosLRFR(idlrfr,idAsiento, idComunicacion,idFactura);
	}
	function copiaCampoLRFR(nombreCampo, curLRFQ, campoInformado) {
		return this.ctx.sii_copiaCampoLRFR(nombreCampo, curLRFQ, campoInformado);
	}
	function crearRegistroLRFRImp(idlrfr,idlrfrNuevo) {
		return this.ctx.sii_crearRegistroLRFRImp(idlrfr,idlrfrNuevo);
	}
	function copiaCampoLRFRIMP(nombreCampo, curLRFIMPQ, campoInformado) {
		return this.ctx.sii_copiaCampoLRFRIMP(nombreCampo, curLRFIMPQ, campoInformado);
	}
}
//// SII ////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_declaration webservice */
/////////////////////////////////////////////////////////////////
//// WEBSERVICE /////////////////////////////////////////////////
class webservice extends sii {
    function webservice( context ) { sii ( context ); }
    function init() {
    	return this.ctx.webservice_init();
    }
    function testWebService() {
    	return this.ctx.webservice_testWebService();
    }
    function llamaWebService(oArgs, sEntrada) {
    	return this.ctx.webservice_llamaWebService(oArgs, sEntrada);
    }
}
//// WEBSERVICE /////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_declaration saftpt */
/////////////////////////////////////////////////////////////////
//// SAFT PT ////////////////////////////////////////////////////
class saftpt extends webservice {
	function saftpt( context ) { webservice ( context ); }
	function init() {
		return this.ctx.saftpt_init();
	}
	function convertirXmlSaftCsv() {
		return this.ctx.saftpt_convertirXmlSaftCsv();
	}
}
//// SAFT PT ////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_declaration contNav */
/////////////////////////////////////////////////////////////////
//// CONT NAV ///////////////////////////////////////////////////
class contNav extends saftpt
{
  	function contNav(context) {
    	saftpt(context);
  	}
	function init() { 
		this.ctx.contNav_init(); 
	}
	function crearGruposContablesNav() { 
		return this.ctx.contNav_crearGruposContablesNav(); 
	}
	function comprobarPGC() { 
		return this.ctx.contNav_comprobarPGC(); 
	}
	function crearGruposContables() { 
		return this.ctx.contNav_crearGruposContables(); 
	}
	function crearGruposContablesNeg() { 
		return this.ctx.contNav_crearGruposContablesNeg(); 
	}
	function crearGruposContablesPro() { 
		return this.ctx.contNav_crearGruposContablesPro(); 
	}
	function crearGruposContablesExi() { 
		return this.ctx.contNav_crearGruposContablesExi(); 
	}
	function crearGruposContablesIvaNeg() { 
		return this.ctx.contNav_crearGruposContablesIvaNeg(); 
	}
	function crearGruposContablesProNeg() { 
		return this.ctx.contNav_crearGruposContablesProNeg(); 
	}
	function crearGruposContablesIvaProNeg() { 
		return this.ctx.contNav_crearGruposContablesIvaProNeg(); 
	}
	function crearGruposContablesProv() { 
		return this.ctx.contNav_crearGruposContablesProv(); 
	}
	function crearGruposContablesCli() { 
		return this.ctx.contNav_crearGruposContablesCli(); 
	}
	function insertRegistroGrupoContable(oParam) { 
		return this.ctx.contNav_insertRegistroGrupoContable(oParam); 
	}
}
//// CONT NAV ///////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_declaration articuloscomp */
/////////////////////////////////////////////////////////////////
//// ARTICULOSCOMP //////////////////////////////////////////////
class articuloscomp extends contNav {
	function articuloscomp( context ) { contNav ( context ); }
	function init() {
		return this.ctx.articuloscomp_init();
	}
	function acInventarioTotal(oParam) {
		return this.ctx.articuloscomp_acInventarioTotal(oParam);
	}
}
//// ARTICULOSCOMP //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_declaration elgansoCtr */
/////////////////////////////////////////////////////////////////
//// EL GANSO CTR ///////////////////////////////////////////////
class elgansoCtr extends articuloscomp {
	var correos_;
	var listaNoEnviadas_;
	var mostrarError_;
	var arrVentas_, ficherosVentas_, curLinVenta_, curVenta_, curVentaEdi_, curArqueo_, arrTalones_, lugaresVenta_, iva_, pagoTarjeta_, tipoVentas_;
	var calcularNumeracion_;
	var calcularSaldoSubcuenta_;
	var numeroAsientoAuto_;
	var ficherosPedidos_;
	var curPedidoCli_, curLinPedido_;
	var descripcionOperacionSII_;
	var lineasYaInformadas_;
	var longitudLineas_;
	var longitudLocl_;
	var xmlTlog_;
	var fileTlog_;
  function elgansoCtr( context ) { articuloscomp ( context ); }
	function init() {
		return this.ctx.elgansoCtr_init();
	}
	function ejecutarFuncion() {
		return this.ctx.elgansoCtr_ejecutarFuncion();
	}
	function cargaAsientosBancarios() {
		return this.ctx.elgansoCtr_cargaAsientosBancarios();
	}
	function comprobarCuentasImportacion(idimportado) {
		return this.ctx.elgansoCtr_comprobarCuentasImportacion(idimportado);
	}
	function egGenerarAsientosArqueosEdi() {
		return this.ctx.elgansoCtr_egGenerarAsientosArqueosEdi();
	}
	function egRecalcularPedidosProvContNueva() {
		return this.ctx.elgansoCtr_egRecalcularPedidosProvContNueva();
	}
	function egRecalcularAlbaranesProvContNueva() {
		return this.ctx.elgansoCtr_egRecalcularAlbaranesProvContNueva();
	}
	function recalcularPedidosProvContNueva() {
		return this.ctx.elgansoCtr_recalcularPedidosProvContNueva();
	}
	function recalcularAlbaranesProvContNueva() {
		return this.ctx.elgansoCtr_recalcularAlbaranesProvContNueva();
	}
	function editarPedidosProvContNueva(idPedido) {
		return this.ctx.elgansoCtr_editarPedidosProvContNueva(idPedido);
	}
	function editarTotalesLineasPedidosProvContNueva(idPedido) {
		return this.ctx.elgansoCtr_editarTotalesLineasPedidosProvContNueva(idPedido);
	}
	function editarTotalesPedidosProvContNueva(idPedido) {
		return this.ctx.elgansoCtr_editarTotalesPedidosProvContNueva(idPedido);
	}
	function editarAlbaranesProvContNueva(idAlbaran) {
		return this.ctx.elgansoCtr_editarAlbaranesProvContNueva(idAlbaran);
	}
	function editarTotalesLineasAlbaranProvContNueva(idAlbaran) {
		return this.ctx.elgansoCtr_editarTotalesLineasAlbaranProvContNueva(idAlbaran);
	}
	function editarTotalesAlbaranProvContNueva(idAlbaran) {
		return this.ctx.elgansoCtr_editarTotalesAlbaranProvContNueva(idAlbaran);
	}
	function egRecalcularPedidosCliContNueva() {
		return this.ctx.elgansoCtr_egRecalcularPedidosCliContNueva();
	}
	function egRecalcularAlbaranesCliContNueva() {
		return this.ctx.elgansoCtr_egRecalcularAlbaranesCliContNueva();
	}
	function recalcularPedidosCliContNueva() {
		return this.ctx.elgansoCtr_recalcularPedidosCliContNueva();
	}
	function recalcularAlbaranesCliContNueva() {
		return this.ctx.elgansoCtr_recalcularAlbaranesCliContNueva();
	}
	function editarPedidosCliContNueva(idPedido) {
		return this.ctx.elgansoCtr_editarPedidosCliContNueva(idPedido);
	}
	function editarTotalesLineasPedidosCliContNueva(idPedido) {
		return this.ctx.elgansoCtr_editarTotalesLineasPedidosCliContNueva(idPedido);
	}
	function editarTotalesPedidosCliContNueva(idPedido) {
		return this.ctx.elgansoCtr_editarTotalesPedidosCliContNueva(idPedido);
	}
	function editarAlbaranesCliContNueva(idAlbaran) {
		return this.ctx.elgansoCtr_editarAlbaranesCliContNueva(idAlbaran);
	}
	function editarTotalesLineasAlbaranCliContNueva(idAlbaran) {
		return this.ctx.elgansoCtr_editarTotalesLineasAlbaranCliContNueva(idAlbaran);
	}
	function editarTotalesAlbaranCliContNueva(idAlbaran) {
		return this.ctx.elgansoCtr_editarTotalesAlbaranCliContNueva(idAlbaran);
	}
	function movistockLineasComandasWeb() {
		return this.ctx.elgansoCtr_movistockLineasComandasWeb();
	}
	function egRecalcularPedidosCliContNuevaCNR() {
		return this.ctx.elgansoCtr_egRecalcularPedidosCliContNuevaCNR();
	}
	function egRecalcularAlbaranesCliContNuevaCNR() {
		return this.ctx.elgansoCtr_egRecalcularAlbaranesCliContNuevaCNR();
	}
	function recalcularPedidosCliContNuevaCNR() {
		return this.ctx.elgansoCtr_recalcularPedidosCliContNuevaCNR();
	}
	function recalcularAlbaranesCliContNuevaCNR() {
		return this.ctx.elgansoCtr_recalcularAlbaranesCliContNuevaCNR();
	}
	function editarPedidosCliContNuevaCNR(idPedido) {
		return this.ctx.elgansoCtr_editarPedidosCliContNuevaCNR(idPedido);
	}
	function editarTotalesLineasPedidosCliContNuevaCNR(idPedido) {
		return this.ctx.elgansoCtr_editarTotalesLineasPedidosCliContNuevaCNR(idPedido);
	}
	function editarTotalesPedidosCliContNuevaCNR(idPedido) {
		return this.ctx.elgansoCtr_editarTotalesPedidosCliContNuevaCNR(idPedido);
	}
	function editarAlbaranesCliContNuevaCNR(idAlbaran) {
		return this.ctx.elgansoCtr_editarAlbaranesCliContNuevaCNR(idAlbaran);
	}
	function editarTotalesLineasAlbaranCliContNuevaCNR(idAlbaran) {
		return this.ctx.elgansoCtr_editarTotalesLineasAlbaranCliContNuevaCNR(idAlbaran);
	}
	function editarTotalesAlbaranCliContNuevaCNR(idAlbaran) {
		return this.ctx.elgansoCtr_editarTotalesAlbaranCliContNuevaCNR(idAlbaran);
	}
	function editarAlbaranesCli20161014(idAlbaran) {
		return this.ctx.elgansoCtr_editarAlbaranesCli20161014(idAlbaran);
	}
	function recalcularAlbaranesCli20161014() {
		return this.ctx.elgansoCtr_recalcularAlbaranesCli20161014();
	}
	function editarTotalesLineasAlbaranCli20161014(idAlbaran) {
		return this.ctx.elgansoCtr_editarTotalesLineasAlbaranCli20161014(idAlbaran);
	}
	function envioEmailBienvenida() {
		return this.ctx.elgansoCtr_envioEmailBienvenida();
	}
	function sigMap_mapped(codTarjetaPuntos) {
		return this.ctx.elgansoCtr_sigMap_mapped(codTarjetaPuntos);
	}
	function recalcularDocsCli20161018() {
		return this.ctx.elgansoCtr_recalcularDocsCli20161018();
	}
	function editarFacturasCli20161018(idFactura) {
		return this.ctx.elgansoCtr_editarFacturasCli20161018(idFactura);
	}
	function editarPedidosCli20161018(idPedido) {
		return this.ctx.elgansoCtr_editarPedidosCli20161018(idPedido);
	}
	function editarTotalesLineasFacturasCli20161018(idFactura) {
		return this.ctx.elgansoCtr_editarTotalesLineasFacturasCli20161018(idFactura);
	}
	function editarTotalesLineasPedidosCli20161018(idPedido) {
		return this.ctx.elgansoCtr_editarTotalesLineasPedidosCli20161018(idPedido);
	}
	function editarTotalesFacturasCli20161018(idFactura) {
		return this.ctx.elgansoCtr_editarTotalesFacturasCli20161018(idFactura);
	}
	function egGeneraMovistockComandas() {
		return this.ctx.elgansoCtr_egGeneraMovistockComandas();
	}
	function egRevisaEnviosYRecepcionesViajes(oParam) {
		return this.ctx.elgansoCtr_egRevisaEnviosYRecepcionesViajes(oParam);
	}
	function egActualizarViajesTransitoOrigen() {
		return this.ctx.elgansoCtr_egActualizarViajesTransitoOrigen();
	}
	function egActualizarViajesTransitoDestino() {
		return this.ctx.elgansoCtr_egActualizarViajesTransitoDestino();
	}
	function egActualizarViajesRxCerrada() {
		return this.ctx.elgansoCtr_egActualizarViajesRxCerrada();
	}
	function procesarViajesWeb() {
		return this.ctx.elgansoCtr_procesarViajesWeb();
	}
	function egRevisaStocks() {
		return this.ctx.elgansoCtr_egRevisaStocks();
	}
	function egRevisaLineasTransitoDobleStock() {
		return this.ctx.elgansoCtr_egRevisaLineasTransitoDobleStock();
	}
	function egPonerStockNegativoA0() {
		return this.ctx.elgansoCtr_egPonerStockNegativoA0();
	}
	function corregirTarjetasEmpleados() {
		return this.ctx.elgansoCtr_corregirTarjetasEmpleados();
	}
	function borrarAsientosMovimientos() {
		return this.ctx.elgansoCtr_borrarAsientosMovimientos();
	}
	function crearAsientosMovimientos() {
		return this.ctx.elgansoCtr_crearAsientosMovimientos();
	}
	function obtenerCodigoComandaEdi(curComanda, codTienda) {
		return this.ctx.elgansoCtr_obtenerCodigoComandaEdi(curComanda, codTienda);
	}
	function egGenerarAsientosArqueoWeb(oParam) {
		return this.ctx.elgansoCtr_egGenerarAsientosArqueoWeb(oParam);
	}
	function egForzarSincroVentasTienda() {
		return this.ctx.elgansoCtr_egForzarSincroVentasTienda();
	}
	function verificacionContable() {
		return this.ctx.elgansoCtr_verificacionContable();
	}
	function actualizarViajesRecepcionadosFecha() {
		return this.ctx.elgansoCtr_actualizarViajesRecepcionadosFecha();
	}/* Esto de momento hasta aclarar qué pasa con los viajes lo comentamos
	function actualizarViajesRecepcionadosCeroFecha() {
		return this.ctx.elgansoCtr_actualizarViajesRecepcionadosCeroFecha();
	}*/
	function actualizarViajesEnviadosFecha() {
		return this.ctx.elgansoCtr_actualizarViajesEnviadosFecha();
	}
	function egComprobarStocksMagento() {
		return this.ctx.elgansoCtr_egComprobarStocksMagento();
	}
	function egComprobarStocksMagentoAbanQ(corregir, corregirNegativos, nombreLog) {
		return this.ctx.elgansoCtr_egComprobarStocksMagentoAbanQ(corregir, corregirNegativos, nombreLog);
	}
	function egSincronizarViajesIncompletos(codTienda, desde, corregir, silent) {
		return this.ctx.elgansoCtr_egSincronizarViajesIncompletos(codTienda, desde, corregir, silent);
	}
	function egSincronizarViajesRecepcionIncompletos(codTienda, desde, corregir, silent) {
		return this.ctx.elgansoCtr_egSincronizarViajesRecepcionIncompletos(codTienda, desde, corregir, silent);
	}
	function egSincronizarViajesRecepcionTiendaIncompletos(codTienda, desde, corregir, silent) {
		return this.ctx.elgansoCtr_egSincronizarViajesRecepcionTiendaIncompletos(codTienda, desde, corregir, silent);
	}
	function reiniciaSaldoTarjetasEmp(oParam) {
		return this.ctx.elgansoCtr_reiniciaSaldoTarjetasEmp(oParam);
	}
	function egCorregirLineasViajesRxSinMovimiento() {
		return this.ctx.elgansoCtr_egCorregirLineasViajesRxSinMovimiento();
	}
	function eliminarAlbaranesCreadosDuplicadosCEN() {
		return this.ctx.elgansoCtr_eliminarAlbaranesCreadosDuplicadosCEN();
	}
	function eliminarAlbaranesCreadosDuplicadosCenDesde() {
		return this.ctx.elgansoCtr_eliminarAlbaranesCreadosDuplicadosCenDesde();
	}
	function egCorregirLineasViajesTxSinMovimiento() {
		return this.ctx.elgansoCtr_egCorregirLineasViajesTxSinMovimiento();
	}
	function egSincronizarInventariosDiferencias(codTienda, silent) {
		return this.ctx.elgansoCtr_egSincronizarInventariosDiferencias(codTienda, silent);
	}
	function diagnosticoCtr(oParam) {
		return this.ctx.elgansoCtr_diagnosticoCtr(oParam);
	}
	function egCheckInventarios(codTienda, paramCorregir) {
		return this.ctx.elgansoCtr_egCheckInventarios(codTienda, paramCorregir);
	}
	function egCheckStocks(codTienda, paramCorregir) {
		return this.ctx.elgansoCtr_egCheckStocks(codTienda, paramCorregir);
	}
	function crearMovStockTtd() {
		return this.ctx.elgansoCtr_crearMovStockTtd();
	}
	function revisarPedidosMayor() {
		return this.ctx.elgansoCtr_revisarPedidosMayor();
	}
	function generarReposicionWEB() {
		return this.ctx.elgansoCtr_generarReposicionWEB();
	}
	function noHayDatosReposicion(oParam) {
		return this.ctx.elgansoCtr_noHayDatosReposicion(oParam);
	}
	function crearCabeceraSolicitud(fechaReposicion) {
		return this.ctx.elgansoCtr_crearCabeceraSolicitud(fechaReposicion);
	}
	function insertarLineasSolicitud(oParam) {
		return this.ctx.elgansoCtr_insertarLineasSolicitud(oParam);
	}
	function insertarHistoricoPedWeb(oParam) {
		return this.ctx.elgansoCtr_insertarHistoricoPedWeb(oParam);
	}
	function dameConsultaHistoricoPedWeb(oParam) {
		return this.ctx.elgansoCtr_dameConsultaHistoricoPedWeb(oParam);
	}
	function insertarOutStock(oParam) {
		return this.ctx.elgansoCtr_insertarOutStock(oParam);
	}
	function dameConsultaOutStock(oParam) {
		return this.ctx.elgansoCtr_dameConsultaOutStock(oParam);
	}
	function cambiarAlmacenAlbaranesCli() {
		return this.ctx.elgansoCtr_cambiarAlmacenAlbaranesCli();
	}
	function dameConsultaAlbaranesCliAzkaAmay() {
		return this.ctx.elgansoCtr_dameConsultaAlbaranesCliAzkaAmay();
	}
	function cambiarAlmacenAlbaranCli(oParam) {
		return this.ctx.elgansoCtr_cambiarAlmacenAlbaranCli(oParam);
	}
	function crearMovistockViajes() {
		return this.ctx.elgansoCtr_crearMovistockViajes();
	}
	function arreglarEan14() {
		return this.ctx.elgansoCtr_arreglarEan14();
	}
	function corregirEanTablas(aArticulos, cx) {
		return this.ctx.elgansoCtr_corregirEanTablas(aArticulos, cx);
	}
	function dameEan14() {
		return this.ctx.elgansoCtr_dameEan14();
	}
	function verificacionContableFacturasVenta() {
		return this.ctx.elgansoCtr_verificacionContableFacturasVenta();
	}
	function facturarVentasSii() {
		return this.ctx.elgansoCtr_facturarVentasSii();
	}
	function egGenerarAsientosArqueo(oParam) {
		return this.ctx.elgansoCtr_egGenerarAsientosArqueo(oParam);
	}
	function egActualizarContrapartidas() {
		return this.ctx.elgansoCtr_egActualizarContrapartidas();
	}
	function egRellenarCodigoFacturaVentaWebX() {
		return this.ctx.elgansoCtr_egRellenarCodigoFacturaVentaWebX();
	}
	function egRellenarCodigoFacturaVentaWebY() {
		return this.ctx.elgansoCtr_egRellenarCodigoFacturaVentaWebY();
	}
	function obtenerCodigoFacturaWebY() {
		return this.ctx.elgansoCtr_obtenerCodigoFacturaWebY();
	}
	function convierteUTF8(sCadena) {
		return this.ctx.elgansoCtr_convierteUTF8(sCadena);
	}
	function egRegenerarAsientoNoContabilizadas() {
		return this.ctx.elgansoCtr_egRegenerarAsientoNoContabilizadas();
	}
	function egRegenerarAsientoPagoDevolProv() {
		return this.ctx.elgansoCtr_egRegenerarAsientoPagoDevolProv();
	}
	function actualizarDatosFacturaProv(idFactura) {
		return this.ctx.elgansoCtr_actualizarDatosFacturaProv(idFactura);
	}
	function actualizarDatosRecibo(idRecibo, idFactura) {
		return this.ctx.elgansoCtr_actualizarDatosRecibo(idRecibo, idFactura);
	}
	function actualizarDatosPagosDevolProv(idPago) {
		return this.ctx.elgansoCtr_actualizarDatosPagosDevolProv(idPago);
	}
	function egBorrarPagosDuplicados() {
		return this.ctx.elgansoCtr_egBorrarPagosDuplicados();
	}
	////// Ventas EDI //////////////////////////////////////////////////////
	function egImportarVentasEdi(tipo, centros) {
		return this.ctx.elgansoCtr_egImportarVentasEdi(tipo, centros);
	}
	function importarFicheroVentas(oParam) {
		return this.ctx.elgansoCtr_importarFicheroVentas(oParam);
	}
	function moverFicherosEdiProcesados(path, sufijo) {
		return this.ctx.elgansoCtr_moverFicherosEdiProcesados(path, sufijo);
	}
	function comparaFechas(a, b) {
		return this.ctx.elgansoCtr_comparaFechas(a, b);
	}
	function registrarFicheroVentaEdi(numInf, accion, tipo) {
		return this.ctx.elgansoCtr_registrarFicheroVentaEdi(numInf, accion, tipo);
	}
	function procesarLineasVentasEdi(clave1, fecha, silent) {
		return this.ctx.elgansoCtr_procesarLineasVentasEdi(clave1, fecha, silent);
	}
	function cerrarVentaEdi(idComanda, numTalon) {
		return this.ctx.elgansoCtr_cerrarVentaEdi(idComanda, numTalon);
	}
	function crearVentaEdi(fecha, hora, campos, silent) {
		return this.ctx.elgansoCtr_crearVentaEdi(fecha, hora, campos, silent);
	}
	function crearLineaEdi(idComanda, campos, linea) {
		return this.ctx.elgansoCtr_crearLineaEdi(idComanda, campos, linea);
	}
	function procesarLugaresVenta(clave1, silent, tipo, centros) {
		return this.ctx.elgansoCtr_procesarLugaresVenta(clave1, silent, tipo, centros);
	}
	function crearArqueoVentaEdi(clave) {
		return this.ctx.elgansoCtr_crearArqueoVentaEdi(clave);
	}
	function crearPagoVentaEdi(clave, codArqueo) {
		return this.ctx.elgansoCtr_crearPagoVentaEdi(clave, codArqueo);
	}
	function egCambiarVentasEdi() {
		return this.ctx.elgansoCtr_egCambiarVentasEdi();
	}
	function egCorregirPagosEdiDuplicados() {
		return this.ctx.elgansoCtr_egCorregirPagosEdiDuplicados();
	}
	function egRellenarPagosVentasEdi() { 
		return this.ctx.elgansoCtr_egRellenarPagosVentasEdi();
	}
	////////////////////////////////////////////////////////////////////////

	function egBorrarContabilidadLafayette() {
		return this.ctx.elgansoCtr_egBorrarContabilidadLafayette();
	}
	function borrarAsientosArqueoLafayette() {
		return this.ctx.elgansoCtr_borrarAsientosArqueoLafayette();
	}
	function borrarFacturasVentaLafayette() {
		return this.ctx.elgansoCtr_borrarFacturasVentaLafayette();
	}
	function corregirCantidadRecibidaPlanesProduccion() {
		return this.ctx.elgansoCtr_corregirCantidadRecibidaPlanesProduccion();
	}
	function generarAlbaranPedidosWEB(silent) {
		return this.ctx.elgansoCtr_generarAlbaranPedidosWEB(silent);
	}
  	function eg_marcaViajesExTienda() {
    	return this.ctx.elgansoCtr_eg_marcaViajesExTienda();
  	}
  	function marcaViajesExTienda(codTienda) {
    	return this.ctx.elgansoCtr_marcaViajesExTienda(codTienda);
  	}
  	function eg_marcaViajesExTiendaCerradoEx() {
    	return this.ctx.elgansoCtr_eg_marcaViajesExTiendaCerradoEx();
  	}
  	function marcaViajesExTiendaCerradoEx(codTienda) {
    	return this.ctx.elgansoCtr_marcaViajesExTiendaCerradoEx(codTienda);
  	}
  	function eg_marcaViajesRxTiendaCerradoRx() {
    	return this.ctx.elgansoCtr_eg_marcaViajesRxTiendaCerradoRx();
  	}
  	function marcaViajesRxTiendaCerradoRx(codTienda) {
    	return this.ctx.elgansoCtr_marcaViajesRxTiendaCerradoRx(codTienda);
  	}
  	function eg_eliminarFacturasTiendas() {
    	return this.ctx.elgansoCtr_eg_eliminarFacturasTiendas();
  	}
  	function marcaViajeRx(oParam) {
    	return this.ctx.elgansoCtr_marcaViajeRx(oParam);
  	}
  	function eg_actualizarViajesEnviados() {
    	return this.ctx.elgansoCtr_eg_actualizarViajesEnviados();
  	}
  	function actualizarViajesEnviados(codTienda) {
    	return this.ctx.elgansoCtr_actualizarViajesEnviados(codTienda);
  	}	
  	function eg_actualizarViajesRecibidos() {
    	return this.ctx.elgansoCtr_eg_actualizarViajesRecibidos();
  	}
  	function actualizarViajesRecibidos(codTienda) {
    	return this.ctx.elgansoCtr_actualizarViajesRecibidos(codTienda);
  	}
  	function eg_recalcularContAlbaranesProv2017() {
    	return this.ctx.elgansoCtr_eg_recalcularContAlbaranesProv2017();
  	}
  	function eg_recalcularContFacturasProv2017() {
    	return this.ctx.elgansoCtr_eg_recalcularContFacturasProv2017();
  	}
  	function egRellenarCodigoFacturas() {
		return this.ctx.elgansoCtr_egRellenarCodigoFacturas();
	}
	function obtenerCodigoFacturaTienda(codTienda) {
		return this.ctx.elgansoCtr_obtenerCodigoFacturaTienda(codTienda);
	}
	function facturarVentasSiiTiendasMes(listaTiendas,fechaInicio,fechaFin) {
		return this.ctx.elgansoCtr_facturarVentasSiiTiendasMes(listaTiendas,fechaInicio,fechaFin);
	}
	function borrarFacturasVentasTienda() {
		return this.ctx.elgansoCtr_borrarFacturasVentasTienda();
	}
  	function egRenumerarEgCodFacturaComandas() {
		return this.ctx.elgansoCtr_egRenumerarEgCodFacturaComandas();
	}
	function revisionSeriesFacturas() {
		return this.ctx.elgansoCtr_revisionSeriesFacturas();
	}
	function controlSecuenciaEjercicio(codEjercicio, codSerie, tabla, rellenarHuecos) {
		return this.ctx.elgansoCtr_controlSecuenciaEjercicio(codEjercicio, codSerie, tabla, rellenarHuecos);
	}
	function rellenaHuecosFactura(codEjercicio, codSerie, tabla, codigoAnt, codigo, fecha) {
		return this.ctx.elgansoCtr_rellenaHuecosFactura(codEjercicio, codSerie, tabla, codigoAnt, codigo, fecha);
	}
	function creaFacturaF2a0(codEjercicio, codSerie, i, fecha) {
		return this.ctx.elgansoCtr_creaFacturaF2a0(codEjercicio, codSerie, i, fecha);
	}
	function egImportarPedidosECI() {
		return this.ctx.elgansoCtr_egImportarPedidosECI();
	}
	function importarFicheroPedido(oParam) {
		return this.ctx.elgansoCtr_importarFicheroPedido(oParam);
	}
	function crearPedidoECI(clave1, linea, silent) {
		return this.ctx.elgansoCtr_crearPedidoECI(clave1, linea, silent);
	}
	function crearCaberaPedidoEci(oParam) {
		return this.ctx.elgansoCtr_crearCaberaPedidoEci(oParam);
	}
	function crearLineasPedidoECI(clave1, idPedido) {
		return this.ctx.elgansoCtr_crearLineasPedidoECI(clave1, idPedido);
	}
	function totalizarPedidoECI(idPedido) {
		return this.ctx.elgansoCtr_totalizarPedidoECI(idPedido);
	}
	function registrarFicheroPedidosECI(numInf, accion) {
		return this.ctx.elgansoCtr_registrarFicheroPedidosECI(numInf, accion);
	}
	function egCorregirLineasViajesEstadoMovistockPTE() {
		return this.ctx.elgansoCtr_egCorregirLineasViajesEstadoMovistockPTE();
	}
	function moverFicherosPedidosECIProcesados(path, sufijo) {
		return this.ctx.elgansoCtr_moverFicherosPedidosECIProcesados(path, sufijo);
	}
	function egCorregirLineasOrigenSinMovimiento() {
		return this.ctx.elgansoCtr_egCorregirLineasOrigenSinMovimiento();
	}
	function dameNombreNuevoFicheroPedidosECI(path, nombreFichero) {
		return this.ctx.elgansoCtr_dameNombreNuevoFicheroPedidosECI(path, nombreFichero);
	}
	function tratarFicherosPedidosECI(path) {
		return this.ctx.elgansoCtr_tratarFicherosPedidosECI(path);
	}
	function controlFacturasWEBSerieX() {
		return this.ctx.elgansoCtr_controlFacturasWEBSerieX();
	}
	function exportarPedidoEciEdi(oPedidos, dirDestino, nombreFicheroPedido) {
		return this.ctx.elgansoCtr_exportarPedidoEciEdi(oPedidos, dirDestino, nombreFicheroPedido);
	}
	function dameNombreFicheroExportPedidoEci(idPedido) {
		return this.ctx.elgansoCtr_dameNombreFicheroExportPedidoEci(idPedido);
	}
	function informarLineasPedidosCliEci(oParamLineasEci) {
		return this.ctx.elgansoCtr_informarLineasPedidosCliEci(oParamLineasEci);
	}
	function crearRegistrosInicioContAnaliticaYear() {
		return this.ctx.elgansoCtr_crearRegistrosInicioContAnaliticaYear();
	}
	function borraContAnalitica(anoParamDesde, anoParamHasta) {
		return this.ctx.elgansoCtr_borraContAnalitica(anoParamDesde, anoParamHasta);
	}
	function cargaContAnalitica(anoParamDesde, anoParamHasta) {
		return this.ctx.elgansoCtr_cargaContAnalitica(anoParamDesde, anoParamHasta);
	}
	function rellenaMesesContAnalitica(anoParamDesde, anoParamHasta) {
		return this.ctx.elgansoCtr_rellenaMesesContAnalitica(anoParamDesde, anoParamHasta);
	}
	function checkContAnalitica(anoParamDesde, anoParamHasta) {
		return this.ctx.elgansoCtr_checkContAnalitica(anoParamDesde, anoParamHasta);
	}
	function marcaEsquemaCompletado(codTienda, esquema) {
		return this.ctx.elgansoCtr_marcaEsquemaCompletado(codTienda, esquema);
	}
	function revisionSeriesFacturasTienda(fecha, codEjercicio, rellenarHuecos) {
		return this.ctx.elgansoCtr_revisionSeriesFacturasTienda(fecha, codEjercicio, rellenarHuecos);
	}
	function controlSecuenciaEjercicioTienda(codEjercicio, codSerie, tabla, rellenarHuecos, fechaInicio) {
		return this.ctx.elgansoCtr_controlSecuenciaEjercicioTienda(codEjercicio, codSerie, tabla, rellenarHuecos, fechaInicio);
	}
	function rellenaHuecosFacturaTienda(codEjercicio, codSerie, tabla, codigoAnt, codigo, fecha) {
		return this.ctx.elgansoCtr_rellenaHuecosFacturaTienda(codEjercicio, codSerie, tabla, codigoAnt, codigo, fecha);
	}
	function creaFacturaF2a0Tienda(codEjercicio, codSerie, i, fecha) {
		return this.ctx.elgansoCtr_creaFacturaF2a0Tienda(codEjercicio, codSerie, i, fecha);
	}
	function construirCodigoFacVenta(codSerie, codEjercicio, numero) {
		return this.ctx.elgansoCtr_construirCodigoFacVenta(codSerie, codEjercicio, numero);
	}
	function cargaInventarioCierre2016(oParam) {
		return this.ctx.elgansoCtr_cargaInventarioCierre2016(oParam);
	}
	function exportarEtiquetasEciEdi(oPedidos, dirDestino, nombreFicheroPrecio) {
		return this.ctx.elgansoCtr_exportarEtiquetasEciEdi(oPedidos, dirDestino, nombreFicheroPrecio);
	}
	function egCorregirLineasViajesRxMovPendiente() {
		return this.ctx.elgansoCtr_egCorregirLineasViajesRxMovPendiente();
	}
	function egCorregirLineasViajesTxMovPendiente() {
		return this.ctx.elgansoCtr_egCorregirLineasViajesTxMovPendiente();
	}
	function egTotalizarInventariosTiendas(codTienda) {
		return this.ctx.elgansoCtr_egTotalizarInventariosTiendas(codTienda);
	}
	function listaAlmacenesTransportista() {
		return this.ctx.elgansoCtr_listaAlmacenesTransportista();
	}
	function egCorregirLineasViajesTxCanceladasMovPendiente() {
		return this.ctx.elgansoCtr_egCorregirLineasViajesTxCanceladasMovPendiente();
	}
	function egRevisaStocksNeg() {
		return this.ctx.elgansoCtr_egRevisaStocksNeg();
	}
	function egModificarLineasTransitoRXOK() {
		return this.ctx.elgansoCtr_egModificarLineasTransitoRXOK();
	}
	function egMarcaViajesCancelados() {
		return this.ctx.elgansoCtr_egMarcaViajesCancelados();
	}
	function creaBonosEmpleados() {
		return this.ctx.elgansoCtr_creaBonosEmpleados();
	}
	function actualizarInventariosSincroTiendas() {
		return this.ctx.elgansoCtr_actualizarInventariosSincroTiendas();
	}
	function actualizaInventarioTienda(codTienda) {
		return this.ctx.elgansoCtr_actualizaInventarioTienda(codTienda);
	}
	function cargaInventarioSTO() {
		return this.ctx.elgansoCtr_cargaInventarioSTO();
	}
	function egCorregirLineasViajesAlmacenTransito() {
		return this.ctx.elgansoCtr_egCorregirLineasViajesAlmacenTransito();
	}
	function modificarAlmacenMovimientosPedidosPte() {
		return this.ctx.elgansoCtr_modificarAlmacenMovimientosPedidosPte();
	}
	function generarInventarioTiendaCopia(idSincroInv, fecha, hora) {
		return this.ctx.elgansoCtr_generarInventarioTiendaCopia(idSincroInv, fecha, hora);
	}
	function crearCabeceraInventarioTiendaCopia(oParam) {
		return this.ctx.elgansoCtr_crearCabeceraInventarioTiendaCopia(oParam);
	}
	function crearLineaRegStockTiendaCopia(oParam) {
		return this.ctx.elgansoCtr_crearLineaRegStockTiendaCopia(oParam);
	}
	function regenerarPagosGL() {
		return this.ctx.elgansoCtr_regenerarPagosGL();
	}
	function crearPagosArqueoGL(qArqueo) {
		return this.ctx.elgansoCtr_crearPagosArqueoGL(qArqueo);
	}
	function crearArqueoGL(qArqueoVenta) {
		return this.ctx.elgansoCtr_crearArqueoGL(qArqueoVenta);
	}
	function arreglarViajesRecibidosLineasTransito() {
		return this.ctx.elgansoCtr_arreglarViajesRecibidosLineasTransito();
	}
	function informarClaseTiendas() {
		return this.ctx.elgansoCtr_informarClaseTiendas();
	}
	function arreglarViajesViejosCerradosLogisAhoraEnTransito() {
		return this.ctx.elgansoCtr_arreglarViajesViejosCerradosLogisAhoraEnTransito();
	}
	function copiarLineaViaje(curLV) {
		return this.ctx.elgansoCtr_copiarLineaViaje(curLV);
	}
	function egLineasCantEnviadaDuplicada() {
		return this.ctx.elgansoCtr_egLineasCantEnviadaDuplicada();
	}
	function egRegenerarMovimientosStockTransito() {
		return this.ctx.elgansoCtr_egRegenerarMovimientosStockTransito();
	}
	/* En cuarentena (Antonio)
	function egRevisaMovsTienda() {
		return this.ctx.elgansoCtr_egRevisaMovsTienda();
	}
	function revisaLineaMovsTienda(q, cX) {
		return this.ctx.elgansoCtr_revisaLineaMovsTienda(q, cX);
	}*/
	function controlMovDuplicados() {
		return this.ctx.elgansoCtr_controlMovDuplicados();
	}
	function controlMovDuplicadosDestino() {
		return this.ctx.elgansoCtr_controlMovDuplicadosDestino();
	}
	function controlMovDuplicadosOrigen() {
		return this.ctx.elgansoCtr_controlMovDuplicadosOrigen();
	}
	function insertarMovimientosPendientes(oParam) {
		return this.ctx.elgansoCtr_insertarMovimientosPendientes(oParam);
	}
	function lanzarTlogTiendas(dirTlog, lTiendas, fecha) {
		return this.ctx.elgansoCtr_lanzarTlogTiendas(dirTlog, lTiendas, fecha);
	}
	function crearFicheroXMLTlog(dirTlog) {
		return this.ctx.elgansoCtr_crearFicheroXMLTlog(dirTlog);
	}
	function dameNombreFicheroTlog(codTienda, extension) {
		return this.ctx.elgansoCtr_dameNombreFicheroTlog(codTienda, extension);
	}
	function escribirXMLTlog(lTiendas, fecha) {
		return this.ctx.elgansoCtr_escribirXMLTlog(lTiendas, fecha);
	}
	function escribirLineasTlog(tLogTransaction, idComanda) {
		return this.ctx.elgansoCtr_escribirLineasTlog(tLogTransaction, idComanda);
	}
	function colgarNodo(nombreHijo, nodoPadre) {
		return this.ctx.elgansoCtr_colgarNodo(nombreHijo, nodoPadre);
	}
	function colgarNodoTexto(nodoPadre, valor) {
		return this.ctx.elgansoCtr_colgarNodoTexto(nodoPadre, valor);
	}
	function dameSelectCabecera() {
		return this.ctx.elgansoCtr_dameSelectCabecera();
	}
	function dameFromCabecera() {
		return this.ctx.elgansoCtr_dameFromCabecera();
	}
	function dameWhereCabecera(lTiendas, fecha) {
		return this.ctx.elgansoCtr_dameWhereCabecera(lTiendas, fecha);
	}
	function dameSelectLineas() {
		return this.ctx.elgansoCtr_dameSelectLineas();
	}
	function dameFromLineas() {
		return this.ctx.elgansoCtr_dameFromLineas();
	}
	function dameWhereLineas(idComanda) {
		return this.ctx.elgansoCtr_dameWhereLineas(idComanda);
	}
	function escribirDatosCliente(tLogTransaction, idComanda) {
		return this.ctx.elgansoCtr_escribirDatosCliente(tLogTransaction, idComanda);
	}
	function dameSelectCliente() {
		return this.ctx.elgansoCtr_dameSelectCliente();
	}
	function dameFromCliente() {
		return this.ctx.elgansoCtr_dameFromCliente();
	}
	function dameWhereCliente(idComanda) {
		return this.ctx.elgansoCtr_dameWhereCliente(idComanda);
	}
	function egCambiarFechaMovViajesTienda() {
		return this.ctx.elgansoCtr_egCambiarFechaMovViajesTienda();
	}
	function cambiarFechaMovViajesTienda(codTienda) {
		return this.ctx.elgansoCtr_cambiarFechaMovViajesTienda(codTienda);
	}
	function cambiarFechaMovViajesTiendaBarcode(codTienda, barCode) {
		return this.ctx.elgansoCtr_cambiarFechaMovViajesTiendaBarcode(codTienda, barCode);
	}
	function cambiarFechaMovViajesTiendaBarcodeOrigen(codTienda, barCode) {
		return this.ctx.elgansoCtr_cambiarFechaMovViajesTiendaBarcodeOrigen(codTienda, barCode);
	}
	function cambiarFechaMovViajesTiendaBarcodeDestino(codTienda, barCode) {
		return this.ctx.elgansoCtr_cambiarFechaMovViajesTiendaBarcodeDestino(codTienda, barCode);
	}
	function actualizarStocksTienda(codTienda, aBarcode) {
		return this.ctx.elgansoCtr_actualizarStocksTienda(codTienda, aBarcode);
	}
	function actualizarFechaSincroTiendaCambiarFecha(codTienda) {
		return this.ctx.elgansoCtr_actualizarFechaSincroTiendaCambiarFecha(codTienda);
	}
	function recibeViajesUNIF() {
		return this.ctx.elgansoCtr_recibeViajesUNIF();
	}
	function controlProcesoEjecutado(proceso, tiempo) {
		return this.ctx.elgansoCtr_controlProcesoEjecutado(proceso, tiempo);
	}
	function controlHuecosTickets(dirFichero, codTienda, fecha, rellenarHuecos) {
		return this.ctx.elgansoCtr_controlHuecosTickets(dirFichero, codTienda, fecha, rellenarHuecos);
	}
	function dameNombreFicheroHuecosTickets() {
		return this.ctx.elgansoCtr_dameNombreFicheroHuecosTickets();
	}
	function obtenerNuevoCodigoVenta(oParam) {
		return this.ctx.elgansoCtr_obtenerNuevoCodigoVenta(oParam);
	}
	function rellenarHuecosVentasA0(oParam) {
		return this.ctx.elgansoCtr_rellenarHuecosVentasA0(oParam);
	}
	function crearVentaA0(oParam) {
		return this.ctx.elgansoCtr_crearVentaA0(oParam);
	}
	function creaCabeceraA0(oParam) {
		return this.ctx.elgansoCtr_creaCabeceraA0(oParam);
	}
	function crearLineaVentaA0(oParam) {
		return this.ctx.elgansoCtr_crearLineaVentaA0(oParam);
	}
	function crearPagoVentaA0(oParam) {
		return this.ctx.elgansoCtr_crearPagoVentaA0(oParam);
	}
	function controlVentasLineasPagos() {
		return this.ctx.elgansoCtr_controlVentasLineasPagos();
	}
	function controlVentasSinLineas(fechaRevision) {
		return this.ctx.elgansoCtr_controlVentasSinLineas(fechaRevision);
	}
	function controlVentasSinPagos(fechaRevision) {
		return this.ctx.elgansoCtr_controlVentasSinPagos(fechaRevision);
	}
	function controlSecuenciaFacturasWeb() {
		return this.ctx.elgansoCtr_controlSecuenciaFacturasWeb();
	}
	function corregirAsientosArqueosWebFormaPago(codPago, codSubcuenta) {
		return this.ctx.elgansoCtr_corregirAsientosArqueosWebFormaPago(codPago, codSubcuenta);
	}
	function comprobarAsientosArqueosWebFormaPago(codPago, codSubcuenta) {
		return this.ctx.elgansoCtr_comprobarAsientosArqueosWebFormaPago(codPago, codSubcuenta);
	}
	function comprobarAsientosArqueosWebDevoluciones(codPago, codSubcuenta) {
		return this.ctx.elgansoCtr_comprobarAsientosArqueosWebDevoluciones(codPago, codSubcuenta);	
	}
	function corregirImportesEnAsientoPunteo(subcuenta, idPunteo, debeC, debeE) {
		return this.ctx.elgansoCtr_corregirImportesEnAsientoPunteo(subcuenta, idPunteo, debeC, debeE);
	}
	function informarIdPunteoN43(idAsiento,idPunteoN43) {
		return this.ctx.elgansoCtr_informarIdPunteoN43(idAsiento,idPunteoN43)
	}
	function guardarIdPunteoN43(idAsiento) {
		return this.ctx.elgansoCtr_guardarIdPunteoN43(idAsiento)
	}
	function regenerarAsientoArqueoWeb(idArqueo, idAsiento) {
		return this.ctx.elgansoCtr_regenerarAsientoArqueoWeb(idArqueo, idAsiento)
	}
	function corregirAsientosArqueosWeb() {
		return this.ctx.elgansoCtr_corregirAsientosArqueosWeb()
	}
	function exportarTlogTiendas(dirTlog, listaTiendas) {
		return this.ctx.elgansoCtr_exportarTlogTiendas(dirTlog, listaTiendas);
	}
	function crearRegistrosInicioContAnaliticaAuto(anoParamDesde, anoParamHasta) {
		return this.ctx.elgansoCtr_crearRegistrosInicioContAnaliticaAuto(anoParamDesde, anoParamHasta);
	}
	function creaBonosMasivo() {
		return this.ctx.elgansoCtr_creaBonosMasivo();
	}
	function crearFacturaRectWebBonos() {
		return this.ctx.elgansoCtr_crearFacturaRectWebBonos();
	}
	function copiarLineaRecBono(qLineasBonos, idFactura) {
		return this.ctx.elgansoCtr_copiarLineaRecBono(qLineasBonos, idFactura);
	}
	function recibeViajesATAR() {
		return this.ctx.elgansoCtr_recibeViajesATAR();
	}
	function recibeViajesATAC() {
		return this.ctx.elgansoCtr_recibeViajesATAC();
	}
	function generaBonosFidelizacion() {
		return this.ctx.elgansoCtr_generaBonosFidelizacion();
	}
	function arreglarAtributosArticulosDuplicados() {
		return this.ctx.elgansoCtr_arreglarAtributosArticulosDuplicados();
	}
	function dameAtributosArticulosDuplicados(cx) {
		return this.ctx.elgansoCtr_dameAtributosArticulosDuplicados(cx);
	}
	function corregirAATablas(aAA, cx) {
		return this.ctx.elgansoCtr_corregirAATablas(aAA, cx);
	}
	function crearXSDTlog(dirTlog, nombreFicheroXsd) {
		return this.ctx.elgansoCtr_crearXSDTlog(dirTlog, nombreFicheroXsd);
	}
	function revisarHuecosFacturaTienda() {
		return this.ctx.elgansoCtr_revisarHuecosFacturaTienda();
	}
	function envioEmailHuecosFactura(listaHuecos) {
		return this.ctx.elgansoCtr_envioEmailHuecosFactura(listaHuecos);
	}
	function genFacturaEciEdi() {
		return this.ctx.elgansoCtr_genFacturaEciEdi();
	}
	function genBarcodesAmazon() {
		return this.ctx.elgansoCtr_genBarcodesAmazon();
	}
	function firmarFacturasSAFT() {
		return this.ctx.elgansoCtr_firmarFacturasSAFT();
	}
	function revisarArticulosIdl() {
		return this.ctx.elgansoCtr_revisarArticulosIdl();
	}
	function comprobarVentasSincronizadas() {
		return this.ctx.elgansoCtr_comprobarVentasSincronizadas();
	}
	function dameHoraXMinutosAntes(minutos) {
		return this.ctx.elgansoCtr_dameHoraXMinutosAntes(minutos);
	}
	function comprobarVentasSincro(tiendas,desde,fecha,hora) {
		return this.ctx.elgansoCtr_comprobarVentasSincro(tiendas,desde,fecha,hora);
	}
	function dameNombreFicheroLog(prefijo) {
		return this.ctx.elgansoCtr_dameNombreFicheroLog(prefijo);
	}
	function crearTrgTlog(dirTlog, nombreFicheroTrg) {
		return this.ctx.elgansoCtr_crearTrgTlog(dirTlog, nombreFicheroTrg);
	}
	function creaFicheroBarcodes(oParam) {
		return this.ctx.elgansoCtr_creaFicheroBarcodes(oParam);
	}
	function insertRegularizacionesCeroDic2017() {
		return this.ctx.elgansoCtr_insertRegularizacionesCeroDic2017();
	}
	function recalcularRegistrosJornadas() {
		return this.ctx.elgansoCtr_recalcularRegistrosJornadas();
	}
	function crearFacturaAbonoListado() {
		return this.ctx.elgansoCtr_crearFacturaAbonoListado();
	}
	function copiarLineaRecAbonoListado(qLineas, idFactura) {
		return this.ctx.elgansoCtr_copiarLineaRecAbonoListado(qLineas, idFactura);
	}
	function totalizaFactura(idFactura) {
		return this.ctx.elgansoCtr_totalizaFactura(idFactura);
	}
	function eliminaVentasLafayette() {
		return this.ctx.elgansoCtr_eliminaVentasLafayette();
	}
	function gestionarFacturasVentaIDL() {
		return this.ctx.elgansoCtr_gestionarFacturasVentaIDL();
	}
	function imprimirFacturasVentaIDL() {
		return this.ctx.elgansoCtr_imprimirFacturasVentaIDL();
	}
	function eliminarFacturasVentaIDLEnviadas() {
		return this.ctx.elgansoCtr_eliminarFacturasVentaIDLEnviadas();
	}
	function procesarRegistrosEcommerce() {
		return this.ctx.elgansoCtr_procesarRegistrosEcommerce();
	}
	function procesarRegistrosIdlEcommerce() {
		return this.ctx.elgansoCtr_procesarRegistrosIdlEcommerce();
	}
	function regenerarMovimientoStockIdlEcommerce(idTpvComanda) {
		return this.ctx.elgansoCtr_regenerarMovimientoStockIdlEcommerce(idTpvComanda);
	}
}
//// EL GANSO CTR ///////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_declaration head */
/////////////////////////////////////////////////////////////////
//// DESARROLLO /////////////////////////////////////////////////
class head extends elgansoCtr {
    function head( context ) { elgansoCtr ( context ); }
}
//// DESARROLLO /////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_declaration ifaceCtx */
/////////////////////////////////////////////////////////////////
//// INTERFACE  /////////////////////////////////////////////////
class ifaceCtx extends head {
    function ifaceCtx( context ) { head( context ); }
}

const iface = new ifaceCtx( this );
//// INTERFACE  /////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////
//// DEFINICION ////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

/** @class_definition interna */
//////////////////////////////////////////////////////////////////
//// INTERNA /////////////////////////////////////////////////////

function init() {
    this.iface.init();
}

/** \C 
\end */
function interna_init() 
{
	
	var _i = this.iface;

	connect( this.child( "pbnEjecutar" ), "clicked()", _i, "ejecutarFuncion" );
	connect( this.child( "pbnRecargarFunciones" ), "clicked()", _i, "recargarFunciones" );	
	var nf = 0;
	
	_i.funciones =
			[["actualizarSaldos","Recalcula y actualiza los saldos de las subcuentas"],
			["consolidarNumeracion","Busca huecos y resuelve incoherencias en la numeración de los documentos de facturación"],
			["subcuentasDuplicadas","Busca y elimina subcuentas duplicadas en el Plan General Contable"],
			["asientosFacturacionProv","Regenera los asientos de la facturación de proveedores"],
			["asientosFacturacionCli","Regenera los asientos de la facturación de clientes"],
			["recibosCliQueFaltan","Completa los recibos de cliente en las facturas sin recibo"],
			["recibosProvQueFaltan","Completa los recibos de proveedor en las facturas sin recibo"],
			["reubicarPartidasPagos", "Reubica las partidas contables de pagos inter-ejercicios"],
			["repararPagares", "Repara los pagarés y recibos de proveedor"],
			["actualizarContabilidadRemesas", "Prepara los movimientos contables de las remesas para las devoluciones"],
			["consolidarStocks", "Consolida las líneas de stock a partir de los valores de stock físico"],
			["subcuentasClientes", "Migra los movimientos de la cuenta 4300000 a la cuenta propia de cada cliente"],
			["repararAsientosMultiejercicio", "Repara asientos con partidas en más de un ejercicio"],
			["repararPartidasIVA", "Repara las partidas de IVA con datos de serie, base imponible, etc"],			
			["eliminarContabilidadSerie", "Elimina los movimientos contables de una serie determinada"],
			["subcuentasProv", "Subcuentas de proveedor a 40000"],
			["subcuentasCliProv", "Completar subcuentas de clientes y proveedor"],
			["partidasCC", "Partidas por centro de coste"],
			["stocksFromStockFis", "Stocks desde stock físico"],
			["completarCopiaSubcuentas", "Completar la copia de subcuentas"],
			["actualizarCodigosBalanceCuenta", "Actualizar los códigos de balance"],
			["plazosPago", "Completa los plazos de pago"],
			["emparejarSubcuentasClientes", "Asocia a cada cliente la subcuenta 43 que ya debe existir"],
			["actualizarDescripcionesSubctasCli", "Actualiza la descripcion de las subcuentas del cliente con el nombre del mismo"],
			["revisaRecibosCli", "Revisa el estado de los recibos de cliente"],
			["revisaAsientoPagoRecibosCli", "Regenera los asiento de todos los recibos del ejercicio. Sólo el último pago de cada recibo."],
			["revisaAsientoPagoRemesas", "Regenera los asiento de todas las remesas del ejercicio. Sólo el último pago de cada remesa."],
			["procesaStocksPtes", "Procesa stocks pendientes de totalizar OFICIAL"],
			["actualizarDescripcionesSubctasProv", "Actualiza la descripcion de las subcuentas del proveedor con el nombre del mismo"],
			["actualizarTextoRecibosCli","Actualiza el campo texto de recibos de cliente"],
			["regenerarBD", "Regenerar BBDD"],
			["crearEjercicioEmpresa", "Crear Ejercicio de empresas"],
			["lanzarUpdateIdSubCuentas", "Lanzar Update idSubcuentas"],
			["cerrarPedidosCli", "Cerrar pedidos de cliente hasta una fecha"],
			["eliminarSubcuentasVacias", "Eliminar subcuentas sin usar por ejercicio"],
			["creaVistas", "Crear vistas"],
			["comprobarStocksMagento", "Comprueba si el stock de abanq es igual al de magento (OFICIAL)"],
			["actualizaSecuencias", "Actualiza las secuencias de los campos serial de una lista"]];
}
//// INTERNA /////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_definition oficial */
//////////////////////////////////////////////////////////////////
//// OFICIAL /////////////////////////////////////////////////////


/** \D Lanza la ejecución de la función cuyo registro está seleccionado en el
formulario maestro
\end */
function oficial_ejecutarFuncion()
{
	var _i = this.iface;
	var util:FLUtil = new FLUtil();
	var funcion:String = this.cursor().valueBuffer( "funcion" ).toString();
	
	var res:Object = MessageBox.information(util.translate("scripts",  "¿Seguro que desea ejecutar esta función?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton);
	if (res != MessageBox.Yes)
		return;
	
	switch ( funcion ) {

		case "actualizarSaldos": {
				this.iface.actualizarSaldos();
				break;
		}
		case "consolidarNumeracion": {
				this.iface.consolidarNumeracion();
				break;
		}
		case "subcuentasDuplicadas": {
				this.iface.subcuentasDuplicadas();
				break;
		}
		case "asientosFacturacionProv": {
				this.iface.asientosFacturacionProv();
				break;
		}
		case "asientosFacturacionCli": {
				this.iface.asientosFacturacionCli();
				break;
		}
		case "recibosCliQueFaltan": {
				this.iface.recibosCliQueFaltan();
				break;
		}
		case "recibosProvQueFaltan": {
				this.iface.recibosProvQueFaltan();
				break;
		}
		case "plazosPago": {
				this.iface.plazosPago();
				break;
		}
		case "reubicarPartidasPagos": {
				this.iface.reubicarPartidasPagos();
				break;
		}
		case "repararPagares": {
				this.iface.repararPagares();
				break;
		}
		case "actualizarContabilidadRemesas": {
				this.iface.actualizarContabilidadRemesas();
				break;
		}
		case "consolidarStocks": {
				this.iface.consolidarStocks();
				break;
		}
		case "subcuentasClientes": {
				this.iface.subcuentasClientes();
				break;
		}
		case "repararAsientosMultiejercicio": {
				this.iface.repararAsientosMultiejercicio();
				break;
		}
		case "repararPartidasIVA": {
				this.iface.repararPartidasIVA();
				break;
		}
		case "eliminarContabilidadSerie": {
				this.iface.eliminarContabilidadSerie();
				break;
		}
		case "subcuentasProv": {
				this.iface.subcuentasProv();
				break;
		}
		case "subcuentasCliProv": {
				this.iface.subcuentasCliProv();
				break;
		}
		case "partidasCC": {
				this.iface.partidasCC();
				break;
		}
		case "stocksFromStockFis": {
				this.iface.stocksFromStockFis();
				break;
		}
		case "completarCopiaSubcuentas": {
				this.iface.completarCopiaSubcuentas();
				break;
		}
		case "actualizarCodigosBalanceCuenta": {
				this.iface.actualizarCodigosBalanceCuenta();
				break;
		}
		case "emparejarSubcuentasClientes": {
				this.iface.emparejarSubcuentasClientes();
				break;
		}
		case "actualizarDescripcionesSubctasCli": {
				this.iface.actualizarDescripcionesSubctasCli();
				break;
		}
		case "actualizarDescripcionesSubctasProv": {
				this.iface.actualizarDescripcionesSubctasProv();
				break;
		}
		default: {
			if (!_i.ejecutaFuncionDefecto(funcion)) {
				return;
			}
			MessageBox.information(sys.translate("Proceso terminado correctamente"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton, "AbanQ");
		}
	}
}

function oficial_ejecutaFuncionDefecto(funcion)
{
	/// Se envuelve en una transacción, la función recibue un objeto oParam, donde puede especificarse el posible error
	var oParam = new Object;
	oParam.errorMsg = sys.translate("Error en la función %1").arg(funcion);
	var f = new Function("oParam", "return formmt_procesos.iface." + funcion + "(oParam)");
	if (!sys.runTransaction(f, oParam)) {
		return false;
	}
	return true;
}

/** \D Recarga los registros con las funciones disponibles
\end */
function oficial_recargarFunciones()
{
	var util:FLUtil = new FLUtil();
	
	var res:Object = MessageBox.information(util.translate("scripts",  "¿Desea recargar la lista de funciones?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton);
	if (res != MessageBox.Yes)
		return;
	
	var curPro:FLSqlCursor = new FLSqlCursor("mt_procesos");
	for (i = 0; i < this.iface.funciones.length; i++) {
		curPro.select("funcion = '" + this.iface.funciones[i][0] + "'");
		if (curPro.first())
			continue;
		curPro.setModeAccess(curPro.Insert);
		curPro.refreshBuffer();
		curPro.setValueBuffer("funcion", this.iface.funciones[i][0]);
		curPro.setValueBuffer("descripcion", this.iface.funciones[i][1]);
		curPro.commitBuffer();
	} 
}


/** \D Recalcula los saldos de todas las subcuentas
*/
function oficial_actualizarSaldos()
{
	var util:FLUtil = new FLUtil();
	
	if (!sys.isLoadedModule("flcontppal")) {
		MessageBox.warning(util.translate("scripts", "No se puede ejecutar esta función. El módulo principal de contabilidad no ha sido cargado"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
		return;
	}
	
	var codEjercicio:String = flfactppal.iface.pub_ejercicioActual();
	var numSubcuentas:Number = util.sqlSelect("co_subcuentas", "count(idsubcuenta)", "codejercicio = '" + codEjercicio + "'");
	var paso:Number = 0;
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("co_subcuentas");
	q.setFrom("co_subcuentas");
	q.setSelect("idsubcuenta");
	q.setWhere("codejercicio = '" + codEjercicio + "'")
	
	if (!q.exec()) { 
		MessageBox.warning( util.translate( "scripts", "Se produjo un error en la consulta"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton );
		return false;
	}
	
	util.createProgressDialog( util.translate( "scripts",
							"Calculando saldos de las Subcuentas..." ), numSubcuentas );
	
	while(q.next()) {
		flcontppal.iface.pub_calcularSaldo(q.value(0));
		util.setProgress(paso++);
	}

	util.destroyProgressDialog();

	MessageBox.information ( util.translate( "scripts", "Proceso finalizado. Subcuentas actualizadas: " + paso), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}



/** \D Consolida la numeración de las facturas actualizando los huecos 
*/
function oficial_consolidarNumeracion()
{
	var util:FLUtil = new FLUtil();
	
	var paso:Number = 0;
	
	var numHuecos:Number = util.sqlSelect("huecos", "count(id)", "");
	util.createProgressDialog( util.translate( "scripts",
							"Calculando saldos de las Subcuentas..." ), numHuecos );
	
	var nomTabla:String;						
	var codigo:String;
	var numero:String;
	var codSerie:String;
	var codEjercicio:String;
	var codigosLiberados:String;
	
	var curHuecos:FLSqlCursor = new FLSqlCursor("huecos");
	curHuecos.select();
	
	while(curHuecos.next()) {
	
		codSerie = curHuecos.valueBuffer("codserie");
		codEjercicio = curHuecos.valueBuffer("codejercicio");
		numero = curHuecos.valueBuffer("numero");
	
		codigo = flfacturac.iface.pub_construirCodigo(codSerie, codEjercicio, numero);
		debug(codigo);
		
		switch(curHuecos.valueBuffer("tipo")) {
			case "FC":
				nomTabla = "facturascli";
				break;
			case "FP":
				nomTabla = "facturasprov";
				break;
		}
	
		// Si existe un registro y un hueco referido al mismo, se elimina el hueco
		if (util.sqlSelect(nomTabla, "codigo", "codigo = '" + codigo + "'")) {
			curHuecos.setModeAccess(curHuecos.Del);
			curHuecos.refreshBuffer();
			if (!curHuecos.commitBuffer())
				debug("Error al eliminar el hueco para el código " + codigo + " de " + nomTabla);
			codigosLiberados += codigo + "  ";
		}
		
		util.setProgress(paso++);
	}

	util.destroyProgressDialog();
	
	var mensaje:String;
	if (codigosLiberados)
	 	mensaje = util.translate( "scripts", "Proceso finalizado. Códigos liberados de facturas:\n") + codigosLiberados;
	else
	 	mensaje = util.translate( "scripts", "Proceso finalizado. No se encontraron incoherencias");
		
	MessageBox.information (mensaje, MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}

/** Busca y elimina subcuentas duplicadas
*/
function oficial_subcuentasDuplicadas()
{
	var util:FLUtil = new FLUtil();
	var arrayEjer:Array = [];
	var ejActual:String = flfactppal.iface.pub_ejercicioActual();
			
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("ejercicios");
	q.setFrom("ejercicios");
	q.setSelect("codejercicio,nombre");
	if (!q.exec()) return false;
	
	var dialog = new Dialog(util.translate ( "scripts", "Selecciona el ejercicio" ), 0);
	dialog.caption = "Selecciona el ejercicio";
	dialog.OKButtonText = util.translate ( "scripts", "Aceptar" );
	dialog.cancelButtonText = util.translate ( "scripts", "Cancelar" );
	
	var bgroup:GroupBox = new GroupBox;
	dialog.add( bgroup );
	var cB:Array = [];
	var nEjer:Number = 0;	
	
	while (q.next())  {
		cB[nEjer] = new CheckBox;
		cB[nEjer].text = q.value(1);
 		arrayEjer[nEjer] = q.value(0);
		if (q.value(0) == ejActual)
			cB[nEjer].checked = true;
		else
			cB[nEjer].checked = false;
		bgroup.add( cB[nEjer] );
		nEjer++;
	}
	
	var lista:String = "";
	
	if (nEjer > 0){
		nEjer --;
		if(dialog.exec()) {
			for (var i:Number = 0; i <= nEjer; i++)
				if (cB[i].checked == true)
					lista += arrayEjer[i] + this.iface.sep;
		}
		else
			return;
		lista = lista.left(lista.length -1)
		if (lista == "")
			return;
	}
	
	arrayEjer = [];
	arrayEjer = lista.split(this.iface.sep);
	
	this.iface.obtenerRelaciones("co_subcuentas");
	
	var codEjercicio:String, mensaje:String;
	var numSubcuentas:Number, paso:Number;
	var totalSubcuentas:Number = 0;
	
	for (i = 1; i <= arrayEjer.length; i++) {
		
		codEjercicio = arrayEjer[i - 1];
		
		mensaje = util.translate( "scripts", "Procesando subcuentas del ejercicio ") + codEjercicio + " (" + i + "/" + arrayEjer.length + ")";
		numSubcuentas = util.sqlSelect("co_subcuentas", "count(idsubcuenta)", "codejercicio = '" + codEjercicio + "'")
		util.createProgressDialog( mensaje, numSubcuentas);
		
		q.setTablesList("co_subcuentas");
		q.setFrom("co_subcuentas");
		q.setSelect("codsubcuenta, count(codsubcuenta)");
		q.setWhere("codejercicio='" + codEjercicio + "' group by codsubcuenta");
		if (!q.exec()) return false;
		
		paso = 0;
		while (q.next()) {
			util.setProgress(paso++);
			if (q.value(1) == 1)
				continue;
				util.setLabelText(mensaje + "\nSubcuenta duplicada: " + q.value(0));
				this.iface.resolverDuplicidad(q.value(0), codEjercicio, util, mensaje + "\nSubcuenta duplicada: " + q.value(0));
				totalSubcuentas++;
		}
	
		util.destroyProgressDialog();
	}

	MessageBox.information(util.translate("scripts",  "Proceso finalizado.\n%0 subcuentas duplicadas procesadas").arg(totalSubcuentas), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);}


/** Consolida dos subcuentas duplicadas
*/
function oficial_resolverDuplicidad(codSubcuenta:String, codEjercicio:String, utilProg:FLUtil, mensaje:String)
{
	var idSub:Array = [];
	var paso:Number = 0;
	
	// Obtenemos los idsubcuenta
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("co_subcuentas");
	q.setFrom("co_subcuentas");
	q.setSelect("idsubcuenta");
	q.setWhere("codejercicio='" + codEjercicio + "' AND codsubcuenta = '" + codSubcuenta + "'");
	if (!q.exec()) return false;
	
	while (q.next())
		idSub[paso++] = q.value(0);
		
	var idSubDestino:Number = idSub[idSub.length - 1];
	var curTab:FLSqlCursor;
	var tabla:String, campo:String;
	
	// Pasamos por todas las tablas relacionadas
	for (k = 0; k < this.iface.relaciones.length - 1; k++) {
		
		tabla = this.iface.relaciones[k]["table"];
		campo = this.iface.relaciones[k]["field"];
		debug("TABLA " + tabla + " - CAMPO " + campo);
		
		curTab = new FLSqlCursor(tabla);
		
		// Consolidamos todas en la última
		for (i = 0; i < idSub.length - 1; i++) {
			debug("Consolidando " + idSub[i] + " en " + idSubDestino);		
			curTab.select(campo + " = " + idSub[i]);
			while(curTab.next()) {
				debug("      Partida " + curTab.valueBuffer("idpartida"));
				curTab.setModeAccess(curTab.Edit);
				curTab.refreshBuffer();
				curTab.setValueBuffer(campo, idSubDestino);
				curTab.commitBuffer();
			}
		}
		
	}
	
	// Se eliminan las subcuentas
	curTab = new FLSqlCursor("co_subcuentas");
	for (i = 0; i < idSub.length - 1; i++) {
		curTab.select("idsubcuenta = " + idSub[i]);
		debug("Eliminando " + idSub[i]);
		if (curTab.first()) {
			curTab.setModeAccess(curTab.Del);
			curTab.refreshBuffer();
 			curTab.commitBuffer();
		}
	}
	
}

/** Obtiene las relaciones de una tabla. Usado para las subcuentas duplicadas
*/
function oficial_obtenerRelaciones(tabla)
{
	var util:FLUtil = new FLUtil();
	var stringRelaciones:String = "";
	
	var contenido:String = util.sqlSelect( "flfiles", "contenido", "nombre = '" + tabla + ".mtd'" );
	var nomTablaRel:String;

	xmlTabla = new FLDomDocument();
	xmlTabla.setContent(contenido);
	
	
	var listaRelaciones = xmlTabla.elementsByTagName("relation");
	if (!listaRelaciones) return "";

	var numRel:Number = 0;
	for (var i = 0; i < listaRelaciones.length(); i++) {
		
		nodoRelacion = listaRelaciones.item(i);
		if (nodoRelacion.namedItem("card")) {
			if (nodoRelacion.namedItem("card").toElement().text() == "1M") {
				this.iface.relaciones[numRel] = new Array(2);
				this.iface.relaciones[numRel]["table"] = nodoRelacion.namedItem("table").toElement().text();
				this.iface.relaciones[numRel]["field"] = nodoRelacion.namedItem("field").toElement().text();
				debug(this.iface.relaciones[numRel]["table"] + " - " + this.iface.relaciones[numRel]["field"]);
				numRel++;
			}
		}
	}
}

function oficial_asientosFacturacionProv() 
{
	var util:FLUtil = new FLUtil();
	var codEjercicio:String = flfactppal.iface.pub_ejercicioActual();
	
	var numFacturas:Number = util.sqlSelect("facturasprov", "count(idfactura)", "codejercicio = '" + codEjercicio + "'");
	var paso:Number = 0;
	
	var curTab:FLSqlCursor = new FLSqlCursor("facturasprov");
	
	curTab.select("codejercicio = '" + codEjercicio + "'")
	util.createProgressDialog( util.translate( "scripts", "Regenerando asientos de las facturas de %1..." ).arg(codEjercicio), numFacturas);
	var idFactura;
	var curF = new FLSqlCursor("facturasprov");
	while(curTab.next()) {
		util.setProgress(paso++);
// 		if (curTab.valueBuffer("nogenerarasiento")) continue;
		idFactura = curTab.valueBuffer("idfactura");
		var e = curTab.valueBuffer("editable");
		if (!e) {
			if (!AQUtil.execSql("UPDATE facturasprov SET editable = true WHERE idfactura = " + idFactura)) {
				return false;
			}
		}
		curF.select("idfactura = " + idFactura);
		if (!curF.first()) {
			return false;
		}
		curF.setModeAccess(curF.Edit);
		curF.refreshBuffer();
		if (!curF.commitBuffer()) {
			return false;
		}
		if (!AQUtil.execSql("UPDATE facturasprov SET editable = false WHERE idfactura = " + idFactura)) {
			return false;
		}
	}
	util.destroyProgressDialog();	
}

function oficial_asientosFacturacionCli() 
{
	var util:FLUtil = new FLUtil();
	var codEjercicio:String = flfactppal.iface.pub_ejercicioActual();
	
	var numFacturas:Number = util.sqlSelect("facturascli", "count(idfactura)", "codejercicio = '" + codEjercicio + "' and not nogenerarasiento");
	var paso:Number = 0;
	
	var curTab:FLSqlCursor = new FLSqlCursor("facturascli");
	
	curTab.select("codejercicio = '" + codEjercicio + "' and not nogenerarasiento")
	util.createProgressDialog( util.translate( "scripts", "Regenerando asientos de las facturas de %1..." ).arg(codEjercicio), numFacturas);
	var idFactura;
	var curF = new FLSqlCursor("facturascli");
	while(curTab.next()) {
		util.setProgress(paso++);
// 		if (curTab.valueBuffer("nogenerarasiento")) continue;
		idFactura = curTab.valueBuffer("idfactura");
		var e = curTab.valueBuffer("editable");
		if (!e) {
			if (!AQUtil.execSql("UPDATE facturascli SET editable = true WHERE idfactura = " + idFactura)) {
				return false;
			}
		}
		curF.select("idfactura = " + idFactura);
		if (!curF.first()) {
			return false;
		}
		curF.setModeAccess(curF.Edit);
		curF.refreshBuffer();
		if (!curF.commitBuffer()) {
			return false;
		}
		if (!e) {
			if (!AQUtil.execSql("UPDATE facturascli SET editable = false WHERE idfactura = " + idFactura)) {
				return false;
			}
		}
	}
	util.destroyProgressDialog();	
}

function oficial_recibosCliQueFaltan() 
{
	var util:FLUtil = new FLUtil();
	var codEjercicio:String = flfactppal.iface.pub_ejercicioActual();
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("reciboscli,facturascli");
	q.setFrom("facturascli f left join reciboscli r on f.idfactura = r.idfactura");
	q.setSelect("f.idfactura");
	q.setWhere("r.idfactura is null");
	
	var curF:FLSqlCursor = new FLSqlCursor("facturascli");
	
	q.exec();
	
	util.createProgressDialog( util.translate( "scripts", "Generando recibos las facturas..." ), q.size());
	var paso:Number = 0;
	
	while(q.next()) {
		util.setProgress(paso++);
		curF.select("idfactura = " + q.value(0));
		if (curF.first()) {
			debug("Recibos de " + curF.valueBuffer("codigo"));
			flfactteso.iface.pub_regenerarRecibosCli(curF, "Emitido");
		}
	}
	
	util.destroyProgressDialog();	
}

function oficial_recibosProvQueFaltan() 
{
	var codEjercicioAct = flfactppal.iface.pub_ejercicioActual();

	var _i = this.iface;
    var codEjercicio = Input.getText(sys.translate("Código del ejercicio o escribir TODOS para todos los ejercicios"), codEjercicioAct);
    if (!codEjercicio || codEjercicio =="") {
    	sys.warnMsgBox(sys.translate("El ejercicio no es válido"));
        return;
    }


    if (codEjercicio !="TODOS" && !AQUtil.sqlSelect("ejercicios", "codejercicio", "codejercicio = '" + codEjercicio + "'")) {
        sys.warnMsgBox(sys.translate("El ejercicio no es válido"));
        return;
    }
	var where = "r.idfactura is null";
	if(codEjercicio && codEjercicio != "TODOS") {
		where +=" AND f.codejercicio = '" +codEjercicio + "'";
	}
	var q = new FLSqlQuery();
	q.setTablesList("recibosprov,facturasprov");
	q.setFrom("facturasprov f left join recibosprov r on f.idfactura = r.idfactura");
	q.setSelect("f.idfactura");
	q.setWhere(where);
	
	var curF = new FLSqlCursor("facturasprov");
	
	q.exec();
	
	AQUtil.createProgressDialog(sys.translate( "scripts", "Generando recibos las facturas..." ), q.size());
	var paso = 0;
	
	while(q.next()) {
		AQUtil.setProgress(paso++);
		curF.select("idfactura = " + q.value(0));
		if (curF.first()) {
			debug("Recibos de " + curF.valueBuffer("codigo"));
			flfactteso.iface.pub_regenerarRecibosProv(curF, "Emitido");
		}
	}
	
	AQUtil.destroyProgressDialog();

	MessageBox.information(sys.translate("scripts",  "Proceso finalizado correctamente"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}

function oficial_reubicarPartidasPagos()
{
	var util:FLUtil = new FLUtil();
	
	var ejercicio1:String = Input.getText( "Primer ejercicio: " );
	if (!ejercicio1)
		return;
	
	var ejercicio2:String = Input.getText( "Segundo ejercicio: " );
	if (!ejercicio2)
		return;
	
	var fechaInicio:String = util.sqlSelect("ejercicios", "fechainicio", "codejercicio = '" + ejercicio2 + "'")
	var fechaFin:String = util.sqlSelect("ejercicios", "fechafin", "codejercicio = '" + ejercicio2 + "'")
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("co_subcuentas,co_asientos,co_partidas");
	q.setFrom("co_asientos a inner join co_partidas p on a.idasiento=p.idasiento inner join co_subcuentas s on p.idsubcuenta=s.idsubcuenta");
	q.setSelect("p.idpartida, p.codsubcuenta");
	q.setWhere("s.codejercicio='" + ejercicio1 + "' AND a.fecha >= '" + fechaInicio + "' AND  a.fecha <= '" + fechaFin + "'");
	
	debug(q.sql());
	if(!q.exec())
		return;
		
	var curTab:FLSqlCursor = new FLSqlCursor("co_partidas");
	var idSubcuenta:Number;
	var paso:Number = 0;
	util.createProgressDialog( util.translate( "scripts", "Reubicando partidas..." ), q.size());
	
	while(q.next()) {
		curTab.select("idpartida = " + q.value(0));
		util.setProgress(paso++);
		if (curTab.first()) {
			idSubcuenta = util.sqlSelect("co_subcuentas", "idsubcuenta", "codsubcuenta = '" + q.value(1) + "' AND codejercicio = '" + ejercicio2 + "'");
			debug(paso + " Actualizando partida " + q.value(0) + " - subcuenta " + q.value(1) + " a " + idSubcuenta);
			curTab.setModeAccess(curTab.Edit);
			curTab.refreshBuffer();
			curTab.setValueBuffer("idsubcuenta", idSubcuenta);
			curTab.commitBuffer();
		}
	}
	
	util.destroyProgressDialog();	
}

/** \D
Busca facturas de proveedor asociadas a un pagaré que no existe
*/
function oficial_repararPagares()
{
	var util:FLUtil = new FLUtil();
	var paso:Number = 0;
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("facturasprov,recibosprov");
	q.setFrom("facturasprov f left outer join recibosprov r on f.idpagare=r.idrecibo");
	q.setSelect("f.idfactura, f.codigo");
	q.setWhere("(f.idpagare is not null AND f.idpagare>0) and (r.idrecibo is null OR r.idrecibo = 0)");
	
	debug(q.sql());
	if(!q.exec())
		return;
		
	var curTab:FLSqlCursor = new FLSqlCursor("facturasprov");
	util.createProgressDialog( util.translate( "scripts", "Reparando facturas..." ), q.size());
	
	while(q.next()) {
		curTab.select("idfactura = " + q.value(0));
		util.setProgress(paso++);
		if (curTab.first()) {
			debug(paso + " Actualizando factura " + q.value(1));
			curTab.setUnLock("editable", true);
			curTab.setModeAccess(curTab.Edit);
			curTab.refreshBuffer();
			curTab.setValueBuffer("idpagare", 0);
			curTab.commitBuffer();
		}
	}
	
	util.destroyProgressDialog();	

	q.setFrom("facturasprov f left outer join recibosprov r on f.idfactura=r.idfactura");
	q.setWhere("r.idrecibo is null and f.idpagare is null");
	debug(q.sql());
	if(!q.exec())
		return;
		
	util.createProgressDialog( util.translate( "scripts", "Reparando facturas..." ), q.size());
	
	while(q.next()) {
		curTab.select("idfactura = " + q.value(0));
		util.setProgress(paso++);
		if (curTab.first()) {
			debug(paso + " Actualizando factura " + q.value(1));
			curTab.setUnLock("editable", true);
			curTab.setModeAccess(curTab.Edit);
			curTab.refreshBuffer();
			curTab.setValueBuffer("idpagare", 0);
			curTab.commitBuffer();
		}
	}
	util.destroyProgressDialog();	
}

/** Establece el idpartida de los pagos de una remesa, si no los tiene
*/
function oficial_actualizarContabilidadRemesas()
{
	var util:FLUtil = new FLUtil();
	
	var idRemesa:String = Input.getText( "Remesa nº: " );
	if (!idRemesa)
		return;
	if (!util.sqlSelect("remesas", "idremesa", "idremesa = " + idRemesa))
		return;
	
	var paso:Number = 0;
	var idPartida:Number;
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("reciboscli,pagosdevolcli");
	q.setFrom("reciboscli r inner join pagosdevolcli p on r.idrecibo=p.idrecibo");
	q.setSelect("p.idpagodevol, r.codigo, p.idasiento");
	q.setWhere("p.idremesa = " + idRemesa);
	
	debug(q.sql());
	if(!q.exec())
		return;
		
	var curTab:FLSqlCursor = new FLSqlCursor("pagosdevolcli");
	util.createProgressDialog( util.translate( "scripts", "Actualizando pagos..." ), q.size());
	
	while(q.next()) {
		curTab.select("idpagodevol = " + q.value(0));
		util.setProgress(paso++);
		if (curTab.first()) {
			curTab.setActivatedCommitActions(false);
			idPartida = util.sqlSelect("co_partidas", "idpartida", "idasiento=" + q.value(2) + " and concepto like '%" + q.value(1) + "%';")
// 			curTab.setUnLock("editable", true);
			curTab.setModeAccess(curTab.Edit);
			curTab.refreshBuffer();
			curTab.setValueBuffer("idpartida", idPartida);
 			curTab.commitBuffer();
		}
	}
	
	util.destroyProgressDialog();	
}



function oficial_consolidarStocks()
{
	var util:FLUtil = new FLUtil();
	
	var paso:Number = 0;
	var numStocks:Number = 0;
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("articulos,stocks");
	q.setFrom("articulos a left outer join stocks s on a.referencia = s.referencia");
	q.setSelect("a.stockfis, a.referencia, s.idstock");
	q.setWhere("a.stockfis > 0");
	
	debug(q.sql());
	if(!q.exec())
		return;
		
	var curTab:FLSqlCursor = new FLSqlCursor("stocks");
	var codAlmacen:String = flfactppal.iface.pub_valorDefectoEmpresa("codalmacen");
	util.createProgressDialog( util.translate( "scripts", "Actualizando stocks..." ), q.size());
	
	while(q.next()) {
	
		util.setProgress(paso++);
		debug(q.value(0) + " " + q.value(1) + " " + q.value(2));
		
		if (q.value(2))
			continue;
	
		curTab.setModeAccess(curTab.Insert);
		curTab.refreshBuffer();
		curTab.setValueBuffer("cantidad", q.value(0));
		curTab.setValueBuffer("referencia", q.value(1));
		curTab.setValueBuffer("codalmacen", codAlmacen);
		
		debug("Insertando " + q.value(0) + " " + q.value(1));
		numStocks++;
 		curTab.commitBuffer();
	}
	
	util.destroyProgressDialog();	
	MessageBox.information(util.translate("scripts",  "Proceso finalizado.\n%0 stocks actualizados").arg(numStocks), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}



/** Crea las subcuentas propias de los clientes que tienen por subcuenta la 43.0
*/
function oficial_subcuentasClientes()
{
	var util:FLUtil = new FLUtil();		
	var paso:Number = 0;
	var numClientes:Number = 0;

	var codEjercicio:String = flfactppal.iface.pub_ejercicioActual();
	var longSubcuenta:Number = util.sqlSelect("ejercicios", "longsubcuenta", "codejercicio = '" + codEjercicio + "'");
	var sctaClientes = flfacturac.iface.pub_datosCtaEspecial("CLIENT", codEjercicio);
	
	if (sctaClientes.error != 0) {
		MessageBox.warning(util.translate("scripts", "No tiene ninguna cuenta contable marcada como cuenta especial\nCLIENT.\nDebe asociar la cuenta a la cuenta especial en el módulo Principal del área Financiera"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
		return false;
	}
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("clientes,facturascli");
	q.setFrom("facturascli f inner join clientes c on f.codcliente=c.codcliente");
	q.setSelect("f.idasiento, f.codigo, c.codcliente, c.nombre");
	q.setWhere("c.codsubcuenta='" + sctaClientes.codsubcuenta + "' ORDER BY c.codcliente");
	
	debug(q.sql());
	if(!q.exec())
		return;
	
	var numCeros:Number;
	var idSubcuenta:Number;
	var codSubcuenta:String;
	var codCliente:String;
	
	util.createProgressDialog( util.translate( "scripts", "Actualizando subcuentas de cliente..." ), q.size());
	
	while(q.next()) {
	
		codCliente = q.value(2);
		codSubcuenta = "43";
		numCeros = longSubcuenta - codSubcuenta.length - codCliente.length;
		for (var i:Number = 0; i < numCeros; i++)
			codSubcuenta += "0";
	
		if (codSubcuenta.length + codCliente.length > longSubcuenta)
			codCliente = codCliente.right(longSubcuenta - codSubcuenta.length);
	
		codSubcuenta += codCliente;
		debug(codSubcuenta);
	
		// Actualizar clientes a la nueva subcuenta
		util.sqlUpdate("clientes", "codsubcuenta", codSubcuenta, "codcliente = '" + codCliente + "'");
		
		// Borrar registros de subcuentascli de la subcuenta estádar
		util.sqlDelete("co_subcuentascli", "codcliente = '" + codCliente + "' AND codejercicio = '" + codEjercicio + "' AND codSubcuenta = '" + sctaClientes.codsubcuenta + "'");
		
		idSubcuenta = util.sqlSelect("co_subcuentas", "idsubcuenta", "codsubcuenta = '" + codSubcuenta + "' AND codejercicio = '" + codEjercicio + "'");
		if (!idSubcuenta) {
			idSubcuenta = flfactppal.iface.pub_crearSubcuenta(codSubcuenta, q.value(3), "CLIENT", codEjercicio);
			flfactppal.iface.pub_crearSubcuentaCli(codSubcuenta, idSubcuenta, codCliente, codEjercicio);
			numClientes++;
		}
			
		util.setProgress(paso++);
	}
	
	util.destroyProgressDialog();	
	MessageBox.information(util.translate("scripts",  "Proceso finalizado.\n%0 clientes actualizados").arg(numClientes), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);

	this.iface.consolidarSubcuentasClientes();
}

/**
Migra los asientos de las facturas de dichos clientes a la subcuentas propias recien creadas
*/
function oficial_consolidarSubcuentasClientes()
{
	var util:FLUtil = new FLUtil();	
	var paso:Number = 0;
	var numClientes:Number = 0;

	var codEjercicio:String = flfactppal.iface.pub_ejercicioActual();
	var longSubcuenta:Number = util.sqlSelect("ejercicios", "longsubcuenta", "codejercicio = '" + codEjercicio + "'");
	var sctaClientes = flfacturac.iface.pub_datosCtaEspecial("CLIENT", codEjercicio);
	
	if (sctaClientes.error != 0) {
		MessageBox.warning(util.translate("scripts", "No tiene ninguna cuenta contable marcada como cuenta especial\nCLIENT.\nDebe asociar la cuenta a la cuenta especial en el módulo Principal del área Financiera"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
		return false;
	}
	
	var curTab:FLSqlCursor = new FLSqlCursor("co_partidas");
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("co_partidas,co_asientos");
	q.setFrom("co_partidas p inner join co_asientos a on p.idasiento = a.idasiento");
	q.setSelect("p.idpartida,p.idasiento,a.numero");
	q.setWhere("p.idsubcuenta = '" + sctaClientes.idsubcuenta + "' AND a.codejercicio='" + codEjercicio + "' ORDER BY a.numero");
	q.exec();
	
	util.createProgressDialog( util.translate( "scripts", "Actualizando movimientos..." ), q.size());
	
	while(q.next())	{
	
		util.setProgress(paso++);
		
		idPartida = q.value(0);
		idAsiento = q.value(1);
	
		// Es de factura?
		codSubcuenta = util.sqlSelect("facturascli f inner join clientes c on f.codcliente = c.codcliente", "c.codsubcuenta", "idasiento = " + idAsiento, "facturascli,clientes");
		
		// Es de pago/dev?
		if (!codSubcuenta)
			codSubcuenta = util.sqlSelect("pagosdevolcli p inner join reciboscli r on p.idrecibo = r.idrecibo inner join clientes c on r.codcliente = c.codcliente", "c.codsubcuenta", "idasiento = " + idAsiento, "facturascli,clientes");
			
		if (!codSubcuenta)
			continue;
			
		if (codSubcuenta == sctaClientes.codsubcuenta) {
			debug("Subcuenta de cliente no encontrada para el asiento " + q.value(2));
			continue;
		}
	
		idSubcuenta = util.sqlSelect("co_subcuentas", "idsubcuenta", "codsubcuenta = '" + codSubcuenta + "' and codejercicio = '" + codEjercicio + "'");
		if (!idSubcuenta)
			continue;
			
		debug("Asiento " + q.value(2));
		util.sqlUpdate("co_partidas", "idsubcuenta,codsubcuenta", idSubcuenta + "," + codSubcuenta, "idpartida = " + idPartida);
	}
	
	util.destroyProgressDialog();
	
	return;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("clientes,facturascli,reciboscli,pagosdevolcli");
	q.setFrom("pagosdevolcli p INNER JOIN reciboscli r ON p.idrecibo = r.idrecibo INNER JOIN facturascli f ON r.idfactura = f.idfactura INNER JOIN clientes c ON f.codcliente = c.codcliente");
	q.setSelect("f.idasiento, p.idasiento, c.codsubcuenta, f.codigo, r.codigo, c.codcliente");
	q.setWhere("f.codejercicio='" + codEjercicio + "' ORDER BY c.codcliente");
	
	debug(q.sql())
	
	if(!q.exec())
		return;
	
	var idSubcuenta:Number;
	var codSubcuenta:String;
	var codCliente:String;
	
	util.createProgressDialog( util.translate( "scripts", "Actualizando movimientos..." ), q.size());
	
	while(q.next()) {
	
		util.setProgress(paso++);
		util.setLabelText("Actualizando cliente " + q.value(5));
	
		codSubcuenta = q.value(2);
		idSubcuenta = util.sqlSelect("co_subcuentas", "idsubcuenta", "codsubcuenta = '" + codSubcuenta + "' AND codejercicio = '" + codEjercicio + "'");
		
		debug(idSubcuenta)
		
		if (idSubcuenta) {
			// Asiento de la factura
   			util.sqlUpdate("co_partidas", "idsubcuenta,codsubcuenta", idSubcuenta + "," + codSubcuenta, "idasiento = " + q.value(0) + " AND codsubcuenta = '" + sctaClientes.codsubcuenta + "'");
  			debug("actualizando asiento " + q.value(0) + " de factura " + q.value(3));
  			
			// Asiento(s) del (de los) recibo(s)
   			debug("idsubcuenta,codsubcuenta    " +  idSubcuenta + "," + codSubcuenta + "      idasiento = " + q.value(1) + " AND codsubcuenta = '" + sctaClientes.codsubcuenta + "'");
   			debug(util.sqlUpdate("co_partidas", "idsubcuenta,codsubcuenta", idSubcuenta + "," + codSubcuenta, "idasiento = " + q.value(1) + " AND codsubcuenta = '" + sctaClientes.codsubcuenta + "'"));
  			debug("actualizando asiento " + q.value(1) + " de recibo " + q.value(4));
		}
			
	}
	
	util.destroyProgressDialog();	
	
	MessageBox.information(util.translate("scripts",  "Proceso finalizado"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}


/**
Busca y repara los asientos que tienen partidas en más de un ejercicio
*/
function oficial_repararAsientosMultiejercicio()
{
	var util:FLUtil = new FLUtil();	
	var paso:Number = 0;
	
	var q:FLSqlQuery = new FLSqlQuery();
	
	q.setSelect("a.codejercicio,s.codsubcuenta,p.idpartida,a.numero");
	q.setTablesList("co_subcuentas,co_partidas,co_asientos");
	q.setFrom("co_partidas p inner join co_asientos a on p.idasiento = a.idasiento inner join co_subcuentas s on p.idsubcuenta = s.idsubcuenta");
	q.setWhere("a.codejercicio <> s.codejercicio order by a.codejercicio, a.numero");
	
	if (!q.exec())
		return;
	
	var codEjercicio:String, codSubcuenta:String, idPartida:Number, idSubcuenta:Number;
	var curTab:FLSqlCursor = new FLSqlCursor("co_partidas");
	
	util.createProgressDialog( util.translate( "scripts", "Actualizando movimientos..." ), q.size());
	
	while(q.next()) {
		
		util.setProgress(paso++);
		util.setLabelText("Reparando el asiento " + q.value(3) + " del ejercicio " + q.value(0));
		
		codEjercicio = q.value(0);
		codSubcuenta = q.value(1);
		idPartida = q.value(2);
		
		idSubcuenta = util.sqlSelect("co_subcuentas", "idsubcuenta", "codejercicio = '" + codEjercicio + "' AND codsubcuenta = '" + codSubcuenta + "'");
		if (!idSubcuenta)
			continue;
	
		curTab.select("idpartida = " + idPartida);
		if (!curTab.first())
			continue;
			
		curTab.setModeAccess(curTab.Edit);
		curTab.refreshBuffer();
		curTab.setValueBuffer("idsubcuenta", idSubcuenta);
 		curTab.commitBuffer();

		debug("Reparando asiento " + q.value(3));
	}
	
	util.destroyProgressDialog();	
	
	var mensaje:String;
	if (paso)
		mensaje = util.translate("scripts", "Proceso finalizado. Asientos reparados: ") + paso;
	else
		mensaje = util.translate("scripts", "No se encontraron asientos para reparar") ;
		
	MessageBox.information(mensaje, MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}



function oficial_repararPartidasIVA()
{
	var util:FLUtil = new FLUtil();	
	var codEjercicio:String = flfactppal.iface.pub_ejercicioActual();
	
	var paso:Number = 0, numAsientos:Number = 0;	
	var error:String = "";
	var idPartida:Number, idAsiento:Number, idPartidaProv:Number, idPartidaCompra:Number;
	var valorIVA:Number, valorBI:Number, valorTotal:Number;
	
	var q:FLSqlQuery = new FLSqlQuery();
	
	q.setSelect("p.idpartida,p.debe,a.idasiento,p.idsubcuenta,a.numero,p.concepto");
	q.setTablesList("co_subcuentas,co_partidas,co_asientos");
	q.setFrom("co_partidas p inner join co_asientos a on p.idasiento = a.idasiento inner join co_subcuentas s on p.idsubcuenta = s.idsubcuenta");
	q.setWhere("p.codsubcuenta LIKE '472%' AND (p.idcontrapartida = 0 OR p.idcontrapartida IS NULL) AND a.codejercicio = '" + codEjercicio + "' order by a.numero");
	
	if (!q.exec())
		return;
	
	var curTab:FLSqlCursor = new FLSqlCursor("co_partidas");
	
	util.createProgressDialog( util.translate( "scripts", "Actualizando partidas de I.V.A." ), q.size());
	
	while(q.next()) {
		
		util.setProgress(paso++);
		
		idPartida = q.value(0);
		valorIVA = q.value(1);
		idAsiento = q.value(2);
		concepto = q.value(5);
		
		valorBI = parseFloat(valorIVA / 0.16);
		valorTotal = parseFloat(valorBI) + parseFloat(valorIVA);
		
		debug(valorIVA + " " + valorBI + " " + valorTotal);
		
		idContrapartida = util.sqlSelect("co_partidas", "idsubcuenta", "idasiento=" + idAsiento + " AND (codsubcuenta like '40%' OR codsubcuenta like '41%') AND round(haber) = " + Math.round(valorTotal));
		debug("idasiento=" + idAsiento + " AND (codsubcuenta like '40%' OR codsubcuenta like '41%') AND round(haber) = " + Math.round(valorTotal));
		
		// Si no se busca una con base imponible igual a total
		if (!idContrapartida) {
			idContrapartida = util.sqlSelect("co_partidas", "idsubcuenta", "idasiento=" + idAsiento + " AND (codsubcuenta like '40%' OR codsubcuenta like '41%') AND round(haber) = " + Math.round(valorBI));
			debug("idasiento=" + idAsiento + " AND (codsubcuenta like '40%' OR codsubcuenta like '41%') AND round(haber) = " + Math.round(valorBI));
			if (!idContrapartida) {
				error += "\nAsiento " + q.value(4) + " con IVA " + valorIVA + " y concepto: " + concepto;
				continue;
			}
		}
		
		codContrapartida = util.sqlSelect("co_subcuentas", "codsubcuenta", "idsubcuenta = " + idContrapartida);
		iva = 16;
		codSerie = "A";
				
/*		idPartidaCompra = util.sqlSelect("co_partidas", "idpartida", "idasiento=" + idAsiento + " AND codsubcuenta like '4%' AND debe = " + valorBI);
		if (!idPartidaCompra) {
			error += "\nAsiento " + idAsiento + " con IVA " + valorIVA;
			continue;
		}*/
			
		curTab.select("idpartida = " + idPartida);
		if (!curTab.first())
			continue;
			
		curTab.setModeAccess(curTab.Edit);
		curTab.refreshBuffer();
		curTab.setValueBuffer("baseimponible", valorBI);
		curTab.setValueBuffer("idcontrapartida", idContrapartida);
		curTab.setValueBuffer("codcontrapartida", codContrapartida);
		curTab.setValueBuffer("iva", iva);
		curTab.setValueBuffer("codserie", codSerie);

		debug("baseimponible"+ " " +  valorBI);
		debug("idcontrapartida"+ " " +  idContrapartida);
		debug("codcontrapartida"+ " " +  codContrapartida);
		debug("iva"+ " " +  iva);
		debug("codserie " + codSerie);

  		curTab.commitBuffer();

		numAsientos++;

	}
	
	util.destroyProgressDialog();	
	
	var mensaje:String;
	if (error)
		mensaje = util.translate("scripts", "Proceso finalizado. Se repararon %0 asientos.\nNo se puedieron reparar los asientos siguientes:\n").arg(numAsientos) + error;
	else
		mensaje = util.translate("scripts", "Se repararon %0 asientos").arg(paso) ;
		
	MessageBox.information(mensaje, MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}


function oficial_eliminarContabilidadSerie()
{
	var util:FLUtil = new FLUtil();	
	
	var codEjercicio:String = Input.getText( "Ejercicio: " );
	if (!codEjercicio)
		return;
	if (!util.sqlSelect("ejercicios", "codejercicio", "codejercicio = '" + codEjercicio + "'")) {
		MessageBox.information("No existe este ejercicio", MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
		return;
	}
	
	var codSerie:String = Input.getText( "Serie " );
	if (!codSerie)
		return;
	if (!util.sqlSelect("series", "codserie", "codserie = '" + codSerie + "'")) {
		MessageBox.information("No existe esta serie", MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
		return;
	}
	
	var paso:Number = 0, numAsientos:Number = 0;	
	var error:String = "";
	var idAsiento:Number;
	
	var curA:FLSqlCursor = new FLSqlCursor("co_asientos");
	curA.setActivatedCheckIntegrity(false);
	
	// 1. Facturas de cliente	
	var curTab:FLSqlCursor = new FLSqlCursor("facturascli");
	var curTab2:FLSqlCursor = new FLSqlCursor("facturascli");
	curTab.setActivatedCheckIntegrity(false);
	curTab2.setActivatedCheckIntegrity(false);
	curTab.select("codserie = '" + codSerie + "' AND codejercicio = '" + codEjercicio + "' order by codigo");
	
	util.createProgressDialog( util.translate( "scripts", "Eliminando asientos de factura de cliente" ), curTab.size());
	
	while(curTab.next()) {
		
		util.setProgress(paso++);
		
		idAsiento = curTab.valueBuffer("idasiento");
		if (!idAsiento)
			continue;
		
		curTab2.select("idfactura = " + curTab.valueBuffer("idfactura"));
		curTab2.first();
		curTab2.setUnLock("editable", true);
		
		curTab.setModeAccess(curTab.Edit);
		curTab.refreshBuffer();
		curTab.setValueBuffer("nogenerarasiento", true);
		curTab.setNull("idasiento");
		curTab.commitBuffer();
		
		curA.select("idasiento = " + idAsiento);
		
		if (curA.first()) {
			curA.setUnLock("editable", true);
			curA.setModeAccess(curA.Del);
			curA.refreshBuffer();
			if (!curA.commitBuffer()) {
				util.destroyProgressDialog();	
				return false;
			}
		}
	}
	
	
	
	// 2. Facturas de proveedor	
	var curTab:FLSqlCursor = new FLSqlCursor("facturasprov");
	var curTab2:FLSqlCursor = new FLSqlCursor("facturasprov");
	curTab.setActivatedCheckIntegrity(false);
	curTab2.setActivatedCheckIntegrity(false);
	curTab.select("codserie = '" + codSerie + "' AND codejercicio = '" + codEjercicio + "' order by codigo");
	
	util.createProgressDialog( util.translate( "scripts", "Eliminando asientos de factura de proveedor" ), curTab.size());
	
	while(curTab.next()) {
		
		util.setProgress(paso++);
		
		idAsiento = curTab.valueBuffer("idasiento");
		if (!idAsiento)
			continue;
		
		curTab2.select("idfactura = " + curTab.valueBuffer("idfactura"));
		curTab2.first();
		curTab2.setUnLock("editable", true);
		
		curTab.setModeAccess(curTab.Edit);
		curTab.refreshBuffer();
		curTab.setValueBuffer("nogenerarasiento", true);
		curTab.setNull("idasiento");
		curTab.commitBuffer();
		
		curA.select("idasiento = " + idAsiento);
		
		if (curA.first()) {
			curA.setUnLock("editable", true);
			curA.setModeAccess(curA.Del);
			curA.refreshBuffer();
			if (!curA.commitBuffer()) {
				util.destroyProgressDialog();	
				return false;
			}
		}
	}
	
	util.destroyProgressDialog();
	
	
	// 2. PAgos y devoluciones de cliente
	var curTab:FLSqlCursor = new FLSqlCursor("pagosdevolcli");
	var curTab2:FLSqlCursor = new FLSqlCursor("pagosdevolcli");
	curTab.setActivatedCheckIntegrity(false);
	curTab2.setActivatedCheckIntegrity(false);
	curTab.select("codserie = '" + codSerie + "' AND codejercicio = '" + codEjercicio + "' order by codigo");
	
	util.createProgressDialog( util.translate( "scripts", "Eliminando asientos de factura de proveedor" ), curTab.size());
	
	while(curTab.next()) {
		
		util.setProgress(paso++);
		
		idAsiento = curTab.valueBuffer("idasiento");
		if (!idAsiento)
			continue;
		
		curTab2.select("idfactura = " + curTab.valueBuffer("idfactura"));
		curTab2.first();
		curTab2.setUnLock("editable", true);
		
		curTab.setModeAccess(curTab.Edit);
		curTab.refreshBuffer();
		curTab.setValueBuffer("nogenerarasiento", true);
		curTab.setNull("idasiento");
		curTab.commitBuffer();
		
		curA.select("idasiento = " + idAsiento);
		
		if (curA.first()) {
			curA.setUnLock("editable", true);
			curA.setModeAccess(curA.Del);
			curA.refreshBuffer();
			if (!curA.commitBuffer()) {
				util.destroyProgressDialog();	
				return false;
			}
		}
	}
	
	var mensaje:String = util.translate("scripts", "Se eliminaron %0 asientos").arg(paso) ;
		
	MessageBox.information(mensaje, MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}

function oficial_subcuentasProv()
{
	var util:FLUtil = new FLUtil();	
	var codSubcuentaNew:Number = 4000000001;
	codEjercicio = "2008";
	var codCuentaProv:String = "4000";
	var idCuentaProv:Number = util.sqlSelect("co_cuentas", "idcuenta", "codejercicio = '" + codEjercicio + "' AND codcuenta = '4000'");
	debug("IIIIIIIIIIII");
	debug(idCuentaProv);
	
	var curTab:FLSqlCursor = new FLSqlCursor("proveedores");
	var curTabS:FLSqlCursor = new FLSqlCursor("co_subcuentas");
	
	curTab.setActivatedCommitActions(false);
	curTabS.setActivatedCommitActions(false);
	
	curTab.select("codsubcuenta like '40004%' OR codsubcuenta like '40005%' order by codsubcuenta");
	
	util.createProgressDialog( util.translate( "scripts", "Reparando..." ), curTab.size() );
	var paso:Number = 0;
	
	while(curTab.next()) {
		codProveedor = curTab.valueBuffer("codproveedor");
		idSubcuentaAnt = curTab.valueBuffer("idsubcuenta");
		codSubcuentaAnt = curTab.valueBuffer("codsubcuenta");
		while (util.sqlSelect("co_subcuentas", "codsubcuenta", "codejercicio = '" + codEjercicio + "' AND codsubcuenta = '" + codSubcuentaNew + "'"))
			codSubcuentaNew++;
			
		debug(codProveedor);
		debug(codSubcuentaAnt + " --> " + codSubcuentaNew);
			
		// Crear la cuenta
		curTabS.setModeAccess(curTabS.Insert);
		curTabS.refreshBuffer();
		curTabS.setValueBuffer("idcuenta", idCuentaProv);
		curTabS.setValueBuffer("codcuenta", codCuentaProv);
		curTabS.setValueBuffer("codsubcuenta", codSubcuentaNew);
		curTabS.setValueBuffer("descripcion", curTab.valueBuffer("nombre"));
		curTabS.setValueBuffer("codejercicio", codEjercicio);
		curTabS.setValueBuffer("debe", 0);
		curTabS.setValueBuffer("haber", 0);
		curTabS.setValueBuffer("saldo", 0);
		curTabS.setValueBuffer("recargo", 0);
		curTabS.setValueBuffer("iva", 0);
		curTabS.setValueBuffer("coddivisa", "EUR");
  		curTabS.commitBuffer();
		
		// Actualizar subcuentasprov
		idSubcuentaNew = util.sqlSelect("co_subcuentas", "idsubcuenta", "codejercicio = '" + codEjercicio + "' AND codsubcuenta = '" + codSubcuentaNew + "'");
 		util.sqlUpdate("co_subcuentasprov", "idsubcuenta,codsubcuenta", idSubcuentaNew + "," + codSubcuentaNew, "codejercicio = '" + codEjercicio + "' AND codproveedor = '" + codProveedor + "'");
		
		debug(idSubcuentaNew + "," + codSubcuentaNew + "  codejercicio = '" + codEjercicio + "' AND codproveedor = '" + codProveedor + "'");
		
		// Movimientos
//  		this.iface.traspasoSubcta(idSubcuentaAnt, idSubcuentaNew, codSubcuentaAnt, codSubcuentaNew);
		debug(idSubcuentaAnt + " " + idSubcuentaNew + " " + codSubcuentaAnt + " " + codSubcuentaNew);
		
		curTab.setModeAccess(curTab.Edit);
		curTab.refreshBuffer();
		curTab.setValueBuffer("codsubcuenta", codSubcuentaNew);
		curTab.setValueBuffer("idsubcuenta", idSubcuentaNew);
		curTab.commitBuffer();
		
		
		util.setProgress(paso++);		
	}
	util.destroyProgressDialog();	
	var mensaje:String = util.translate("scripts", "Proceso finalizado");
	MessageBox.information(mensaje, MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}

function oficial_traspasoSubcta(idSubctaOri:Number, idSubctaDes:Number, codSubctaOri:Number, codSubctaDes:Number)
{
	var util:FLUtil = new FLUtil();
	
	codEjercicio = "2008";
	if (!util.sqlSelect("co_subcuentas", "idsubcuenta", "idsubcuenta = " + idSubctaOri) || !util.sqlSelect("co_subcuentas", "idsubcuenta", "idsubcuenta = " + idSubctaDes)) {
		MessageBox.warning( util.translate( "scripts", "Las subcuentas de origen y/o destino no son válidas"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton );
		return;
	}
		
	if (idSubctaOri != util.sqlSelect("co_subcuentas", "idsubcuenta", "codsubcuenta = " + codSubctaOri + " AND codejercicio = '" + codEjercicio + "'")
			|| idSubctaDes != util.sqlSelect("co_subcuentas", "idsubcuenta", "codsubcuenta = " + codSubctaDes + " AND codejercicio = '" + codEjercicio + "'")) {
		MessageBox.warning( util.translate( "scripts", "Las subcuentas de origen y/o destino no son válidas"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton );
		return;
	}
		
	var res:Object = MessageBox.information(util.translate("scripts", "A continuación todos los apuntes contables de la subcuenta origen pasarán a la subcuenta destino\npara el ejercicio %0\n\n¿Continuar?").arg(codEjercicio), MessageBox.No, MessageBox.Yes, MessageBox.NoButton);
	if (res != MessageBox.Yes)
		return;
	
	res = util.sqlUpdate("co_partidas", "idsubcuenta,codsubcuenta", idSubctaDes + "," + codSubctaDes, "idsubcuenta = " + idSubctaOri);
	if (!res) {
		MessageBox.warning( util.translate( "scripts", "Hubo un problema en la actualización"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton );
		return;
	}
	
	flcontppal.iface.pub_calcularSaldo(idSubctaOri);
	flcontppal.iface.pub_calcularSaldo(idSubctaDes);
}

function oficial_partidasCC()
{
	var util:FLUtil = new FLUtil();
	
	var codEjercicio:String = flfactppal.iface.pub_ejercicioActual();
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("facturascli,lineasfacturascli");
	q.setFrom("facturascli f inner join lineasfacturascli l on f.idfactura = l.idfactura");
	q.setWhere("f.codejercicio = '" + codEjercicio + "' AND f.codcentro IS NOT NULL AND f.codcentro <> '' AND (l.codcentro IS NULL OR l.codcentro = '') GROUP BY f.codigo,f.idfactura,f.codcentro,f.codsubcentro");
	q.setSelect("f.codigo,f.idfactura,f.codcentro,f.codsubcentro");
	
	if (!q.exec())
		return;
		
	var curF:FLSqlCursor = new FLSqlCursor("facturascli");
		
	util.createProgressDialog( util.translate( "scripts", "Eliminando asientos de factura de proveedor" ), q.size());
	var paso:Number = 0;
	
	while (q.next()) {
	
		util.setProgress(paso++);
		util.setLabelText("Generando partidas CC para la factura " + q.value(0));
		
		util.sqlUpdate("lineasfacturascli", "codcentro,codsubcentro", q.value(2) + "," + q.value(3), "idfactura = " + q.value(1));
		 
		curF.select("idfactura = " + q.value(1));
		if (curF.first())
			flfacturac.iface.crearPartidasCC(curF);
	
		debug(q.value(0) + " " + q.value(1) + " " + q.value(2) + " " + q.value(3));
	}

	util.destroyProgressDialog();

	var mensaje:String = util.translate("scripts", "Proceso finalizado. Facturas actualizadas " + paso);
	MessageBox.information(mensaje, MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}

function oficial_subcuentasCliProv()
{
	var util:FLUtil = new FLUtil;
	var i:Number = 0;
	
	var qryClientes:FLSqlQuery = new FLSqlQuery();
	qryClientes.setTablesList("clientes");
	qryClientes.setSelect("codcliente, codsubcuenta, nombre");
	qryClientes.setFrom("clientes");
	qryClientes.setWhere("codsubcuenta IS NOT NULL AND codsubcuenta <> ''");debug(qryClientes.sql());
	if (!qryClientes.exec())
		return;
	util.createProgressDialog(util.translate("scripts", "Creando subcuentas por cliente"), qryClientes.size());
	util.setProgress(0);
	while (qryClientes.next()) {
		flfactppal.iface.pub_rellenarSubcuentasCli(qryClientes.value(0), qryClientes.value(1), qryClientes.value(2));
		util.setProgress(i++);
	}
	util.setProgress(qryClientes.size());
	util.destroyProgressDialog();
	
	var numC:Number = i;
	i = 0;
		
	var qryProveedores:FLSqlQuery = new FLSqlQuery();
	qryProveedores.setTablesList("proveedores");
	qryProveedores.setSelect("codproveedor, codsubcuenta, nombre");
	qryProveedores.setFrom("proveedores");
	qryProveedores.setWhere("codsubcuenta IS NOT NULL AND codsubcuenta <> ''");
	if (!qryProveedores.exec())
		return;
	util.createProgressDialog(util.translate("scripts", "Creando subcuentas por proveedor"), qryProveedores.size());
	util.setProgress(0);
	while (qryProveedores.next()) {
		flfactppal.iface.pub_rellenarSubcuentasProv(qryProveedores.value(0), qryProveedores.value(1), qryProveedores.value(2));
		util.setProgress(i++);
	}
	util.setProgress(qryProveedores.size());
	util.destroyProgressDialog();
	
	var numP:Number = i;
	
	MessageBox.information(util.translate("scripts",  "Proceso finalizado. Se comprobaron %0 subcuentas por cliente y %0 subcuentas por proveedor").arg(numC).arg(numP), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}

function oficial_stocksFromStockFis()
{
	var util:FLUtil = new FLUtil();
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("articulos,stocks");
	q.setFrom("articulos a left join stocks s on a.referencia=s.referencia");
	q.setWhere("a.stockfis > 0 and (s.codalmacen is null OR s.codalmacen = '')");
	q.setSelect("a.referencia,a.stockfis");
	
	if (!q.exec())
		return;
		
	var curTab:FLSqlCursor = new FLSqlCursor("stocks");
		
	util.createProgressDialog( util.translate( "scripts", "Creando stocks" ), q.size());
	var paso:Number = 0;
	
	while (q.next()) {
	
		util.setProgress(paso++);
		util.setLabelText("Generando stock para " + q.value(0));
		
		curTab.setModeAccess(curTab.Insert);
		curTab.refreshBuffer();
		curTab.setValueBuffer("codalmacen", "ALG");
		curTab.setValueBuffer("nombre", "Almacen general");
		curTab.setValueBuffer("referencia", q.value(0));
		curTab.setValueBuffer("cantidad", q.value(1));
		curTab.commitBuffer();
	}

	util.destroyProgressDialog();

	var mensaje:String = util.translate("scripts", "Proceso finalizado. Stocks creados " + paso);
	MessageBox.information(mensaje, MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}

function oficial_completarCopiaSubcuentas()
{
	var util:FLUtil = new FLUtil;	
	
	var ejercicioAnt:String = Input.getText( "Ejercicio origen: " );
	if (!ejercicioAnt || !util.sqlSelect("ejercicios", "codejercicio", "codejercicio = '" + ejercicioAnt + "'")) {
		MessageBox.warning(util.translate("scripts",  "El ejercicio origen no es válido"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
		return;
	}
	
	var ejercicioAct:String = Input.getText( "Ejercicio destino: " );
	if (!ejercicioAct || !util.sqlSelect("ejercicios", "codejercicio", "codejercicio = '" + ejercicioAct + "'")) {
		MessageBox.warning(util.translate("scripts",  "El ejercicio destino no es válido"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
		return;
	}

	if (ejercicioAct == ejercicioAnt) {
		MessageBox.warning(util.translate("scripts",  "El ejercicio destino no puede ser igual al origen"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
		return;
	}

	var longSubcuenta:Number = util.sqlSelect("ejercicios", "longsubcuenta", "codejercicio = '" + ejercicioAct + "'");
	var planContableAnt = util.sqlSelect("ejercicios", "plancontable", "codejercicio = '" + ejercicioAnt + "'");
	var paso:Number = 0;	
	var numNuevas:Number = 0;	
	var numCuentasPerdidas = 0;	
	
	var qrySubCuentas:FLSqlQuery = new FLSqlQuery;			
	qrySubCuentas.setTablesList ("co_subcuentas");
	qrySubCuentas.setSelect("codsubcuenta,codcuenta,descripcion,coddivisa,codimpuesto,iva,recargo,saldo");
	qrySubCuentas.setFrom("co_subcuentas");
	qrySubCuentas.setWhere("codejercicio = '" + ejercicioAnt + "' order by codsubcuenta");
	
	if (!qrySubCuentas.exec())
		return;

	util.createProgressDialog(util.translate("scripts", "Copiando Subcuentas"), qrySubCuentas.size());
	
	var curSubCuentas:FLSqlCursor = new FLSqlCursor ("co_subcuentas");
	curSubCuentas.setActivatedCommitActions(false);

	var cuentasPerdidas:String = "";
	var subcuentasPerdidas:String = "";
	
	while(qrySubCuentas.next()) {
	
		util.setProgress(paso++);
	
		// Caso 1: de 90 a 08
		if (planContableAnt != "08") {
			// A qué cuenta 08 corresponde esta cuenta 90?
			codCuenta08 = flcontppal.iface.convertirCodCuenta(qrySubCuentas.value(1));
			idCuenta08 = util.sqlSelect("co_cuentas", "idcuenta", "codcuenta = '" + codCuenta08 + "' and codejercicio = '" + ejercicioAct + "'");
			
			if (!idCuenta08) {
				//Si no hay saldo, se ignora
				if (parseFloat(qrySubCuentas.value(7)))
					subcuentasPerdidas += "\n" + qrySubCuentas.value(1) + " " + qrySubCuentas.value(0);
				continue;
			}
			
			codSubcuenta08 = flcontppal.iface.convertirCodSubcuenta(ejercicioAnt, qrySubCuentas.value(0));
		}
		
		// Caso 2: de 08 a 08
		else {
			codCuenta08 = qrySubCuentas.value(1);
			idCuenta08 = util.sqlSelect("co_cuentas", "idcuenta", "codcuenta = '" + codCuenta08 + "' and codejercicio = '" + ejercicioAct + "'");
			codSubcuenta08 = qrySubCuentas.value(0);
			codCuentaAviso = codCuenta08;
			if (!idCuenta08) {

				// Si es de 3, comprobamos si existe una de 4 con un cero más
				if(codCuenta08.length == 3)
					codCuenta08 += "0";

				idCuenta08 = util.sqlSelect("co_cuentas", "idcuenta", "codcuenta = '" + codCuenta08 + "' and codejercicio = '" + ejercicioAct + "'");
				if (!idCuenta08) {
					if (cuentasPerdidas.search(codCuentaAviso) == -1) {

						if (cuentasPerdidas)
							cuentasPerdidas += ", ";

						if (numCuentasPerdidas++ == 10) {
							cuentasPerdidas += "\n";
							numCuentasPerdidas = 0;
						}

						cuentasPerdidas += codCuentaAviso;

					}
					debug(codCuenta08 + " " + codSubcuenta08);
					continue;
				}
			}
		}
		
		// Existe ya?
		curSubCuentas.select("codsubcuenta = '" + codSubcuenta08 + "' AND codejercicio = '" + ejercicioAct + "'");
		if (curSubCuentas.first())
			continue;
			
		// La descripcion no debe tener ya el código antes. "225. Otras instalaciones" -> "Otras instalaciones"
		descripcion = qrySubCuentas.value(2);
		
		curSubCuentas.setModeAccess (curSubCuentas.Insert);
		curSubCuentas.refreshBuffer();
		curSubCuentas.setValueBuffer("codejercicio",ejercicioAct);
		curSubCuentas.setValueBuffer("codsubcuenta",codSubcuenta08);
		curSubCuentas.setValueBuffer("idcuenta",idCuenta08);
		curSubCuentas.setValueBuffer("codcuenta",codCuenta08);
		curSubCuentas.setValueBuffer("descripcion",descripcion);
		curSubCuentas.setValueBuffer("coddivisa",qrySubCuentas.value(3));
		curSubCuentas.setValueBuffer("codimpuesto",qrySubCuentas.value(4));
		curSubCuentas.setValueBuffer("iva",qrySubCuentas.value(5));
		if (!curSubCuentas.commitBuffer())
			return;

		numNuevas++;
	}
	
	util.destroyProgressDialog();
	
	// Genera las subcuentas del nuevo PGC que no existen en el ejercicio anterior
	flcontppal.iface.generarSubcuentas(ejercicioAct, longSubcuenta);
	
// 	if (!formRecordejercicios.iface.copiarSubcuentasCliProv(ejercicioAnt, ejercicioAct))
// 		return false;
	
	if (!this.iface.subcuentasCliProv(ejercicioAnt, ejercicioAct))

	if (cuentasPerdidas)
		MessageBox.information(util.translate("scripts", "Las subcuentas de las siguientes cuentas no se pudieron copiar\nporque las cuentas no existen en el ejercicio destino.\n Deberá crear las cuentas y repetir el proceso") + "\n\n" + cuentasPerdidas,
				 MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);

	if (subcuentasPerdidas)
		MessageBox.information(util.translate("scripts", "Las siguientes cuentas/subcuentas con saldo no se pudieron copiar\nporque no existe una correspondencia con el nuevo plan contable\nDeberá migrar su saldo a otras cuentas antes de cerrar el ejercicio:") + "\n" + subcuentasPerdidas,
				 MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);

	MessageBox.information(util.translate("scripts", "Proceso finalizado. Se crearon %0 nuevas subcuentas").arg(numNuevas),
			 MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}

function oficial_actualizarCodigosBalanceCuenta()
{
	var codEjercicio:String = flfactppal.iface.pub_ejercicioActual();
	var util:FLUtil = new FLUtil();
		
	var datos =	[["1","1. FINANCIACION BASICA","EPI","1","","1","",""],
				["2","10. CAPITAL","EPI","10","1","10","",""],
				["1","100. Capital social","CUE","100","2","10","","P-A-I"],
				["2","1000. Capital ordinario","CUE","1000","2","10","","P-A-I"],
				["3","1001. Capital privilegiado","CUE","1001","2","10","","P-A-I"],
				["4","1002. Capital sin derecho a voto","CUE","1002","2","10","","P-A-I"],
				["5","1003. Capital con derechos restringidos","CUE","1003","2","10","","P-A-I"],
				["6","101. Fondo social","CUE","101","2","10","","P-A-I"],
				["7","102. Capital","CUE","102","2","10","","P-A-I"],
				["3","11. RESERVAS","EPI","11","1","11","",""],
				["8","110. Prima de emision de acciones","CUE","110","3","11","","P-A-II"],
				["9","111. Reservas de revalorización","CUE","111","3","11","","P-A-III"],
				["10","112. Reserva legal","CUE","112","3","11","","P-A-IV-1"],
				["11","113. Reservas especiales","CUE","113","3","11","","P-A-IV-5"],
				["12","114. Reservas para acciones de la sociedad dominante","CUE","114","3","11","","P-A-IV-3"],
				["13","115. Reservas para acciones propias","CUE","115","3","11","","P-A-IV-2"],
				["14","116. Reservas estatutarias","CUE","116","3","11","","P-A-IV-4"],
				["15","117. Reservas voluntarias","CUE","117","3","11","","P-A-IV-5"],
				["16","118. Reserva por capital amortizado","CUE","118","3","11","","P-A-IV-5"],
				["17","119. Diferencias por ajuste del capital a euros","CUE","119","3","11","","P-A-IV-5"],
				["4","12. RESULTADOS PENDIENTES DE APLICACION","EPI","12","1","12","",""],
				["18","120. Remanente","CUE","120","4","12","PREVIO","P-A-V-1"],
				["19","121. Resultados negativos de ejercicios anteriores","CUE","121","4","12","PREVIO","P-A-V-2"],
				["20","122. Aportaciones de socios para compensación de pérdidas","CUE","122","4","12","","P-A-V-3"],
				["21","129. Pérdidas y Ganancias","CUE","129","4","12","PYG","P-A-VI"],
				["5","13. INGRESOS A DISTRIBUIR EN VARIOS EJERCICIOS","EPI","13","1","13","",""],
				["22","130. Subvenciones oficiales de capital","CUE","130","5","13","","P-B-I"],
				["23","1300. Subvenciones del Estado","CUE","1300","5","13","","P-B-I"],
				["24","1301. Subvenciones de otras Administraciones Públicas","CUE","1301","5","13","","P-B-I"],
				["25","131. Subvenciones de capital","CUE","131","5","13","","P-B-I"],
				["26","135. Ingresos por intereses diferidos","CUE","135","5","13","","P-B-III"],
				["27","136. Diferencias positivas en moneda extranjera","CUE","136","5","13","DIVPOS","P-B-II"],
				["28","137. Ingresos fiscales por diferencias permantes a distribuir en varios ejercicios","CUE","137","5","13","","P-B-IV"],
				["29","138. Ingresos fiscales por deducciones y bonificaciones fiscales a distribuir en varios ejercicios","CUE","138","5","13","","P-B-IV"],
				["6","14. PROVISIONES PARA RIESGOS Y GASTOS","EPI","14","1","14","",""],
				["30","140. Provisión para pensiones y obligaciones similares","CUE","140","6","14","","P-C-I"],
				["31","141. Provisión para impuestos","CUE","141","6","14","","P-C-II"],
				["32","142. Provisión para responsabilidades","CUE","142","6","14","","P-C-III"],
				["33","143. Provisión para grandes reparaciones","CUE","143","6","14","","P-C-III"],
				["34","144. Fondo de reversión","CUE","144","6","14","","P-C-IV"],
				["7","15. EMPRESTITOS Y OTRAS EMISIONES ANALOGAS","EPI","15","1","15","",""],
				["35","150. Obligaciones y bonos","CUE","150","7","15","","P-D-I-1"],
				["36","1500. Obligaciones y bonos simples","CUE","1500","7","15","","P-D-I-1"],
				["37","1501. Obligaciones y bonos garantizados","CUE","1501","7","15","","P-D-I-1"],
				["38","1502. Obligaciones y bonos subordinados","CUE","1502","7","15","","P-D-I-1"],
				["39","1503. Obligaciones y bonos cupón cero","CUE","1503","7","15","","P-D-I-1"],
				["40","1504. Obligaciones y bonos con opción de adquisición de acciones","CUE","1504","7","15","","P-D-I-1"],
				["41","1505. Obligaciones y bonos con participación en beneficios","CUE","1505","7","15","","P-D-I-1"],
				["42","151. Obligaciones y bonos convertibles","CUE","151","7","15","","P-D-I-2"],
				["43","155. Deudas representadas en otros valores negociables","CUE","155","7","15","","P-D-I-3"],
				["8","16. DEUDAS LARGO PLAZO CON EMPRESAS DEL GRUPO Y ASOCIADAS","EPI","16","1","16","",""],
				["44","160. Deudas a largo plazo con empresas del grupo","CUE","160","8","16","","P-D-III-1"],
				["45","1600. Préstamos a largo plazo de empresas del grupo","CUE","1600","8","16","","P-D-III-1"],
				["46","1608. Deudas a l/p con empresas del grupo por efecto impositivo","CUE","1608","8","16","","P-D-III-1"],
				["47","1609. Otras deudas a largo plazo con empresas del grupo","CUE","1609","8","16","","P-D-III-1"],
				["48","161. Deudas a largo plazo con empresas asociadas","CUE","161","8","16","","P-D-III-2"],
				["49","162. Deudas a l/p con entidades de crédito del grupo","CUE","162","8","16","","P-D-III-1"],
				["50","163. Deudas a l/p con entidades de crédito asociadas","CUE","163","8","16","","P-D-III-2"],
				["51","164. Proveedores de inmovilizado a l/p, empresas grupo","CUE","164","8","16","","P-D-III-1"],
				["52","165. Proveedores de inmovilizado l/p, empresas asociadas","CUE","165","8","16","","P-D-III-2"],
				["9","17. DEUDAS A LARGO PLAZO POR PRESTAMOS RECIBIDOS Y OTROS CONCEPTOS","EPI","17","1","17","",""],
				["53","170. Deudas a largo plazo con entidades de crédito","CUE","170","9","17","","P-D-II-1"],
				["54","1700. Préstamos a largo plazo de entidades de crédito","CUE","1700","9","17","","P-D-II-1"],
				["55","1709. Otras deudas a largo plazo con entidades de crédito","CUE","1709","9","17","","P-D-II-1"],
				["56","171. Deudas a largo plazo","CUE","171","9","17","","P-D-IV-2"],
				["57","172. Deudas a largo plazo transformables en subvenciones","CUE","172","9","17","","P-D-IV-2"],
				["58","173. Proveedores de inmovilizado a largo plazo","CUE","173","9","17","","P-D-IV-2"],
				["59","174. Efectos a pagar a largo plazo","CUE","174","9","17","","P-D-IV-1"],
				["10","18. FIANZAS Y DEPOSITOS RECIBIDOS A LARGO PLAZO","EPI","18","1","18","",""],
				["60","180. Fianzas recibidas a largo plazo","CUE","180","10","18","","P-D-IV-3"],
				["61","185. Depósitos recibidos a largo plazo","CUE","185","10","18","","P-D-IV-3"],
				["11","19. SITUACIONES TRANSITORIAS DE FINANCIACION","EPI","19","1","19","",""],
				["62","190. Accionistas por desembolsos no exigidos","CUE","190","11","19","","A-A"],
				["63","191. Accionistas por desembolsos no exigidos, empresas del grupo","CUE","191","11","19","","A-A"],
				["64","192. Accionistas por desembolsos no exigidos, empresas asociadas","CUE","192","11","19","","A-A"],
				["65","193. Accionistas por aportaciones no dinerarias pendientes","CUE","193","11","19","","A-A"],
				["66","194. Accionistas por aportaciones no dinerarias pendientes, empresas del grupo","CUE","194","11","19","","A-A"],
				["67","195. Accionistas por aportaciones no dinerarias pendientes, empresas asociadas","CUE","195","11","19","","A-A"],
				["68","196. Socios, parte no desembolsada","CUE","196","11","19","","A-A"],
				["69","198. Acciones propias en situaciones especiales","CUE","198","11","19","","A-B-V"],
				["70","199. Acciones propias para reducción de capital","CUE","199","11","19","","P-A-VIII"],
				["12","2. INMOVILIZADO","EPI","2","","2","",""],
				["13","20. GASTOS DE ESTABLECIMIENTO","EPI","20","12","20","",""],
				["71","200. Gastos de constitución","CUE","200","13","20","","A-B-I"],
				["72","201. Gastos de primer establecimiento","CUE","201","13","20","","A-B-I"],
				["73","202. Gastos de ampliación de capital","CUE","202","13","20","","A-B-I"],
				["14","21. INMOVILIZACIONES INMATERIALES","EPI","21","12","21","",""],
				["74","210. Gastos de investigación y desarrollo","CUE","210","14","21","","A-B-II-1"],
				["75","2100. Gastos de I+D en proyectos no terminados","CUE","2100","14","21","","A-B-II-1"],
				["76","2101. Gastos de I+D en proyectos terminados","CUE","2101","14","21","","A-B-II-1"],
				["77","211. Concesiones administrativas","CUE","211","14","21","","A-B-II-2"],
				["78","212. Propiedad industrial","CUE","212","14","21","","A-B-II-2"],
				["79","213. Fondo de comercio","CUE","213","14","21","","A-B-II-3"],
				["80","214. Derechos de traspaso","CUE","214","14","21","","A-B-II-4"],
				["81","215. Aplicaciones informáticas","CUE","215","14","21","","A-B-II-5"],
				["82","217. Derechos sobre bienes en régimen de arrendamiento financiero","CUE","217","14","21","","A-B-II-6"],
				["83","219. Anticipos para inmovilizaciones inmateriales","CUE","219","14","21","","A-B-II-7"],
				["15","22. INMOVILIZACIONES MATERIALES","EPI","22","12","22","",""],
				["84","220. Terrenos y bienes naturales","CUE","220","15","22","","A-B-III-1"],
				["85","221. Construcciones","CUE","221","15","22","","A-B-III-1"],
				["86","222. Instalaciones técnicas","CUE","222","15","22","","A-B-III-2"],
				["87","223. Maquinaria","CUE","223","15","22","","A-B-III-2"],
				["88","224. Utillaje","CUE","224","15","22","","A-B-III-3"],
				["89","225. Otras instalaciones","CUE","225","15","22","","A-B-III-3"],
				["90","226. Mobiliario","CUE","226","15","22","","A-B-III-3"],
				["91","227. Equipos para procesos de información","CUE","227","15","22","","A-B-III-5"],
				["92","228. Elementos de transporte","CUE","228","15","22","","A-B-III-5"],
				["93","229. Otro inmovilizado material","CUE","229","15","22","","A-B-III-5"],
				["16","23. INMOVILIZACIONES MATERIALES EN CURSO","EPI","23","12","23","",""],
				["94","230. Adaptación de terrenos y de bienes naturales","CUE","230","16","23","","A-B-III-4"],
				["95","231. Construcciones en curso","CUE","231","16","23","","A-B-III-4"],
				["96","232. Instalaciones técnicas en montaje","CUE","232","16","23","","A-B-III-4"],
				["97","233. Maquinaria en montaje","CUE","233","16","23","","A-B-III-4"],
				["98","237. Equipos para procesos de información en montaje","CUE","237","16","23","","A-B-III-4"],
				["99","239. Anticipos para inmovilizaciones materiales","CUE","239","16","23","","A-B-III-4"],
				["17","24. INVERSIONES FINANCIERAS EN EMPRESAS DEL GRUPO Y ASOCIADAS","EPI","24","12","24","",""],
				["100","240. Participaciones en empresas del grupo","CUE","240","17","24","","A-B-IV-1"],
				["101","241. Participaciones en empresas asociadas","CUE","241","17","24","","A-B-IV-3"],
				["102","242. Valores de renta fija de empresas del grupo","CUE","242","17","24","","A-B-IV-2"],
				["103","243. Valores de renta fija de empresas asociadas","CUE","243","17","24","","A-B-IV-4"],
				["104","244. Créditos a largo plazo a empresas del grupo","CUE","244","17","24","","A-B-IV-2"],
				["105","2448. Créditos a l/p con empresas del grupo por efecto impositivo","CUE","2448","17","24","","A-B-IV-2"],
				["106","245. Créditos a largo plazo a empresas asociadas","CUE","245","17","24","","A-B-IV-4"],
				["107","246. Intereses a l/p de inversiones financieras en empresas del grupo","CUE","246","17","24","","A-B-IV-2"],
				["108","247. Intereses a l/p de inversiones financieras en empresas asociadas","CUE","247","17","24","","A-B-IV-4"],
				["109","248. Desembolsos pendientes sobre acciones de empresas del grupo","CUE","248","17","24","","P-D-V-1"],
				["110","249. Desembolsos pendientes sobre acciones de empresas asociadas","CUE","249","17","24","","P-D-V-2"],
				["18","25. OTRAS INVERSIONES FINANCIERAS PERMANENTES","EPI","25","12","25","",""],
				["111","250. Inversiones financieras permanentes en capital","CUE","250","18","25","","A-B-IV-5"],
				["112","2500. Inversiones financieras permantes en acciones con cotización en mercado secundario organizado","CUE","2500","18","25","","A-B-IV-5"],
				["113","2501. Inversiones financieras permantes en acciones sin cotización en mercado secundario organizado","CUE","2501","18","25","","A-B-IV-5"],
				["114","2502. Otras inversiones financieras en capital","CUE","2502","18","25","","A-B-IV-5"],
				["115","251. Valores de renta fija","CUE","251","18","25","","A-B-IV-5"],
				["116","2158. Participación en Fondos de Inversión en Activos del Mercado Monetario a l/p","CUE","2158","14","21","","A-B-IV-5"],
				["117","252. Créditos a largo plazo","CUE","252","18","25","","A-B-IV-6"],
				["118","253. Créditos a l/p por enajenación de inmovilizado","CUE","253","18","25","","A-B-IV-6"],
				["119","254. Creditos a largo plazo al personal","CUE","254","18","25","","A-B-IV-6"],
				["120","256. Intereses a largo plazo de valores de renta fija","CUE","256","18","25","","A-B-IV-5"],
				["121","257. Intereses a largo plazo de créditos","CUE","257","18","25","","A-B-IV-6"],
				["122","258. Imposiciones a largo plazo","CUE","258","18","25","","A-B-IV-6"],
				["123","259. Desembolsos pendientes sobre acciones","CUE","259","18","25","","P-D-V-3"],
				["19","26. FIANZAS Y DEPOSITOS CONSTITUIDOS A LARGO PLAZO","EPI","26","12","26","",""],
				["124","260. Fianzas constituidas a largo plazo","CUE","260","19","26","","A-B-IV-7"],
				["125","265. Depositos constituidos a largo plazo","CUE","265","19","26","","A-B-IV-7"],
				["20","27. GASTOS A DISTRIBUIR EN VARIOS EJERCICIOS","EPI","27","12","27","",""],
				["126","270. Gastos de formalización de deudas","CUE","270","20","27","","A-C"],
				["127","271. Gastos por intereses diferidos de valores negociables","CUE","271","20","27","","A-C"],
				["128","272. Gastos por intereses diferidos","CUE","272","20","27","","A-C"],
				["21","28. AMORTIZACION ACUMULADA DEL INMOVILIZADO","EPI","28","12","28","",""],
				["129","281. Amortización acumulada del inmovilizado inmaterial","CUE","281","21","28","","A-B-II-9"],
				["130","2810. Amortización acumulada de gastos de I+D","CUE","2810","21","28","","A-B-II-9"],
				["131","2811. Amortización acumulada de concesiones administrativas","CUE","2811","21","28","","A-B-II-9"],
				["132","2812. Amortización acumulada de propiedad industrial","CUE","2812","21","28","","A-B-II-9"],
				["133","2813. Amortización acumulada de fondo de comercio","CUE","2813","21","28","","A-B-II-9"],
				["134","2814. Amortización acumulada de derechos de traspaso","CUE","2814","21","28","","A-B-II-9"],
				["135","2815. Amortización acumulada de aplicaciones informáticas","CUE","2815","21","28","","A-B-II-9"],
				["136","2817. Amortización acumulada de derechos sobre bienes en régimen de arrendamiento financiero","CUE","2817","21","28","","A-B-II-9"],
				["137","282. Amortización acumulada del inmovilizado material","CUE","282","21","28","","A-B-III-7"],
				["138","2821. Amortización acumulada de construcciones","CUE","2821","21","28","","A-B-III-7"],
				["139","2822. Amortización acumulada de instalaciones técnicas","CUE","2822","21","28","","A-B-III-7"],
				["140","2823. Amortización acumulada de maquinaria","CUE","2823","21","28","","A-B-III-7"],
				["141","2824. Amortización acumulada de utillaje","CUE","2824","21","28","","A-B-III-7"],
				["142","2825. Amortización acumulada de otras instalaciones","CUE","2825","21","28","","A-B-III-7"],
				["143","2826. Amortización acumulada de mobiliario","CUE","2826","21","28","","A-B-III-7"],
				["144","2827. Amortización acumulada de equipos para procesos informáticos","CUE","2827","21","28","","A-B-III-7"],
				["145","2828. Amortización acumulada de elementos de transporte","CUE","2828","21","28","","A-B-III-7"],
				["146","2829. Amortización acumulada de otro inmovilizado material","CUE","2829","21","28","","A-B-III-7"],
				["22","29. PROVISIONES DE INMOVILIZADO","EPI","29","12","29","",""],
				["147","291. Provisión por depreciación inmovilizado inmaterial","CUE","291","22","29","","A-B-II-8"],
				["148","292. Provisión por depreciación inmovilizado material","CUE","292","22","29","","A-B-III-6"],
				["149","293. Provisión por depreciación valores negociables l/p de empresas del grupo","CUE","293","22","29","","A-B-IV-8"],
				["150","2930. Provisión por depreciación participaciones en capital l/p de empresas del grupo","CUE","2930","22","29","","A-B-IV-8"],
				["151","2935. Provisión por depreciación valores renta fija l/p de empresas del grupo","CUE","2935","22","29","","A-B-IV-8"],
				["152","294. Provisión por depreciación valores negociables l/p de empresas asociadas","CUE","294","22","29","","A-B-IV-8"],
				["153","2941. Provisión por depreciación participaciones en capital l/p de empresas asociadas","CUE","2941","22","29","","A-B-IV-8"],
				["154","2946. Provisión por depreciación valores renta fija l/p de empresas asociadas","CUE","2946","22","29","","A-B-IV-8"],
				["155","295. Provisión para insolvencias de creditos l/p a empresas del grupo","CUE","295","22","29","","A-B-IV-8"],
				["156","296. Provisión para insolvencias de creditos l/p a empresasa asociadas","CUE","296","22","29","","A-B-IV-8"],
				["157","297. Provisión por depreciación de valores negociables l/p","CUE","297","22","29","","A-B-IV-8"],
				["158","298. Provisión para insolvencias de créditos a l/p","CUE","298","22","29","","A-B-IV-8"],
				["23","3. EXISTENCIAS","EPI","3","","3","",""],
				["24","30. COMERCIALES","EPI","30","23","30","",""],
				["159","300. Mercaderias A","CUE","300","24","30","","A-D-II-1"],
				["160","301. Mercaderias B","CUE","301","24","30","","A-D-II-1"],
				["25","31. MATERIAS PRIMAS","EPI","31","23","31","",""],
				["161","310. Materias primas A","CUE","310","25","31","","A-D-II-2"],
				["162","311. Materias primas B","CUE","311","25","31","","A-D-II-2"],
				["26","32. OTROS APROVISIONAMIENTOS","EPI","32","23","32","",""],
				["163","320. Elementos y conjuntos incorporables","CUE","320","26","32","","A-D-II-2"],
				["164","321. Combustibles","CUE","321","26","32","","A-D-II-2"],
				["165","322. Repuestos","CUE","322","26","32","","A-D-II-2"],
				["166","325. Materiales diversos","CUE","325","26","32","","A-D-II-2"],
				["167","326. Embalajes","CUE","326","26","32","","A-D-II-2"],
				["168","327. Envases","CUE","327","26","32","","A-D-II-2"],
				["169","328. Material de oficina","CUE","328","26","32","","A-D-II-2"],
				["27","33. PRODUCTOS EN CURSO","EPI","33","23","33","",""],
				["170","330. Productos en curso A","CUE","330","27","33","","A-D-II-3"],
				["171","331. Productos en curso B","CUE","331","27","33","","A-D-II-3"],
				["28","34. PRODUCTOS SEMITERMINADOS","EPI","34","23","34","",""],
				["172","340. Productos semiterminados A","CUE","340","28","34","","A-D-II-3"],
				["173","341. Productos semiterminados B","CUE","341","28","34","","A-D-II-3"],
				["29","35. PRODUCTOS TERMINADOS","EPI","35","23","35","",""],
				["174","350. Productos terminados A","CUE","350","29","35","","A-D-II-4"],
				["175","351. Productos terminados B","CUE","351","29","35","","A-D-II-4"],
				["30","36. SUBPRODUCTOS, RESIDUOS Y MATERIALES RECUPERADOS","EPI","36","23","36","",""],
				["176","360. Subproductos A","CUE","360","30","36","","A-D-II-5"],
				["177","361. Subproductos B","CUE","361","30","36","","A-D-II-5"],
				["178","365. Residuos A","CUE","365","30","36","","A-D-II-5"],
				["179","366. Residuos B","CUE","366","30","36","","A-D-II-5"],
				["180","368. Materiales recuperados A","CUE","368","30","36","","A-D-II-5"],
				["181","369. Materiales recuperados B","CUE","369","30","36","","A-D-II-5"],
				["31","39. PROVISIONES POR DEPRECIACION DE EXISTENCIAS","EPI","39","23","39","",""],
				["182","390. Provisión por depreciación de mercaderías","CUE","390","31","39","","A-D-II-7"],
				["183","391. Provisión por depreciación de materias primas","CUE","391","31","39","","A-D-II-7"],
				["184","392. Provisión por depreciación de otros aprovisionamientos","CUE","392","31","39","","A-D-II-7"],
				["185","393. Provisión por depreciación de productos en curso","CUE","393","31","39","","A-D-II-7"],
				["186","394. Provisión por depreciación de productos semiterminados","CUE","394","31","39","","A-D-II-7"],
				["187","395. Provisión por depreciación de productos terminado","CUE","395","31","39","","A-D-II-7"],
				["188","396. Provisión por depreciación de subproductos,residuos y materiales recuperados","CUE","396","31","39","","A-D-II-7"],
				["32","4. ACREEDORES Y DEUDORES POR OPERACIONES DE TRAFICO","EPI","4","","4","",""],
				["33","40. PROVEEDORES","EPI","40","32","40","",""],
				["189","400. Proveedores","CUE","400","33","40","PROVEE","P-E-IV-2"],
				["191","4004. Proveedores (moneda extranjera)","CUE","4004","33","40","PROVEE","P-E-IV-2"],
				["192","4009. Proveedores facturas pendientes de recibir o formalizar","CUE","4009","33","40","PROVEE","P-E-IV-2"],
				["193","401. Proveedores, efectos comerciales a pagar","CUE","401","33","40","PROVEE","P-E-IV-3"],
				["194","402. Proveedores, empresas del grupo","CUE","402","33","40","PROVEE","P-E-III-1"],
				["195","4020. Proveedores, empresas del grupo (euros)","CUE","4020","33","40","PROVEE","P-E-III-1"],
				["196","4021. Efectos comerciales a pagar, empresas del grupo","CUE","4021","33","40","PROVEE","P-E-III-1"],
				["197","4024. Proveedores, empresas del grupo (moneda extranjera","CUE","4024","33","40","PROVEE","P-E-III-1"],
				["198","4026. Envases y embalajes a devolver a proveedores, empresas del grupo","CUE","4026","33","40","PROVEE","P-E-III-1"],
				["199","4029. Proveedores, empresas del grupo,facturas pendientes de recibir o formalizar","CUE","4029","33","40","PROVEE","P-E-III-1"],
				["200","403. Proveedores, empresas asociadas","CUE","403","33","40","PROVEE","P-E-III-2"],
				["201","406. Envases y embalajes a devolver a proveedores","CUE","406","33","40","PROVEE","P-E-IV-2"],
				["202","407. Anticipos a proveedores","CUE","407","33","40","PROVEE","A-D-II-6"],
				["34","41. ACREEDORES VARIOS","EPI","41","32","41","",""],
				["203","410. Acreedores por prestaciones de servicios","CUE","410","34","41","PROVEE","P-E-IV-2"],
				["204","4100. Acreedores por prestaciones de servicios (euros)","CUE","4100","34","41","PROVEE","P-E-IV-2"],
				["205","4104. Acreedores por prestaciones de servicios (moneda extranjera)","CUE","4104","34","41","PROVEE","P-E-IV-2"],
				["206","4109. Acreedores por prestaciones de servicios,facturas pendientes de recibir o formalizar","CUE","4109","34","41","PROVEE","P-E-IV-2"],
				["207","411. Acreedores, efectos comerciales a pagar","CUE","411","34","41","PROVEE","P-E-IV-3"],
				["208","419. Acreedores por operaciones en común","CUE","419","34","41","PROVEE","P-E-IV-2"],
				["35","43. CLIENTES","EPI","43","32","43","",""],
				["209","430. Clientes","CUE","430","35","43","CLIENT","A-D-III-1"],
				["211","4304. Clientes (moneda extranjera)","CUE","4304","35","43","CLIENT","A-D-III-1"],
				["212","4309. Clientes, facturas pendientes de formalizar","CUE","4309","35","43","CLIENT","A-D-III-1"],
				["213","431. Clientes, efectos comerciales a cobrar","CUE","431","35","43","CLIENT","A-D-III-1"],
				["214","4310. Efectos comerciales en cartera","CUE","4310","35","43","CLIENT","A-D-III-1"],
				["215","4311. Efectos comerciales descontados","CUE","4311","35","43","CLIENT","A-D-III-1"],
				["216","4312. Efectos comerciales en gestión de cobro","CUE","4312","35","43","CLIENT","A-D-III-1"],
				["217","4315. Efectos comerciales impagados","CUE","4315","35","43","CLIENT","A-D-III-1"],
				["218","432. Clientes, empresas del grupo","CUE","432","35","43","CLIENT","A-D-III-2"],
				["219","4320. Clientes, empresas del grupo (euros)","CUE","4320","35","43","CLIENT","A-D-III-2"],
				["220","4321. Efectos comerciales a cobrar, empresas del grupo","CUE","4321","35","43","CLIENT","A-D-III-2"],
				["221","4324. Clientes, empresas del grupo (moneda extranjera)","CUE","4324","35","43","CLIENT","A-D-III-2"],
				["222","4326. Envases y embalajes a devolver a clientes, empresas del grupo","CUE","4326","35","43","CLIENT","A-D-III-2"],
				["223","4329. Clientes, empresas del grupo, facturas pendientes formalizar","CUE","4329","35","43","CLIENT","A-D-III-2"],
				["224","433. Clientes, empresas asociadas","CUE","433","35","43","CLIENT","A-D-III-3"],
				["225","435. Clientes de dudoso cobro","CUE","435","35","43","CLIENT","A-D-III-1"],
				["226","436. Envases y embalajes a devolver por clientes","CUE","436","35","43","CLIENT","A-D-III-1"],
				["227","437. Anticipos de clientes","CUE","437","35","43","CLIENT","P-E-IV-1"],
				["36","44. DEUDORES VARIOS","EPI","44","32","44","",""],
				["228","440. Deudores","CUE","440","36","44","CLIENT","A-D-III-4"],
				["229","4400. Deudores (euros)","CUE","4400","36","44","CLIENT","A-D-III-4"],
				["230","4404. Deudores (moneda extranjera)","CUE","4404","36","44","CLIENT","A-D-III-4"],
				["231","4409. Deudores, facturas pendientes de formalizar","CUE","4409","36","44","CLIENT","A-D-III-4"],
				["232","441. Deudores, efectos comerciales a cobrar","CUE","441","36","44","CLIENT","A-D-III-4"],
				["233","4410. Deudores, efectos comerciales en cartera","CUE","4410","36","44","CLIENT","A-D-III-4"],
				["234","4411. Deudores, efectos comerciales descontados","CUE","4411","36","44","CLIENT","A-D-III-4"],
				["235","4412. Deudores, efectos comerciales en gestión de cobro","CUE","4412","36","44","CLIENT","A-D-III-4"],
				["236","4415. Deudores, efectos comerciales impagados","CUE","4415","36","44","CLIENT","A-D-III-4"],
				["237","445. Deudores de dudoso cobro","CUE","445","36","44","CLIENT","A-D-III-4"],
				["238","449. Deudores por operaciones en común","CUE","449","36","44","CLIENT","A-D-III-4"],
				["37","46. PERSONAL","EPI","46","32","46","",""],
				["239","460. Anticipos de remuneraciones","CUE","460","37","46","","A-D-III-5"],
				["240","465. Remuneraciones pendientes de pago","CUE","465","37","46","","P-E-V-4"],
				["38","47. ADMINISTRACIONES PUBLICAS","EPI","47","32","47","",""],
				["241","470. Hacienda Pública, deudor por diversos conceptos","CUE","470","38","47","IVADEU","A-D-III-6"],
				["242","4700. Hacienda Pública, deudor por IVA","CUE","4700","38","47","IVADEU","A-D-III-6"],
				["243","4707. Hacienda Pública, deudor por IGIC","CUE","4707","38","47","","A-D-III-6"],
				["244","47070. Hacienda Pública, deudor por IGIC","CUE","47070","38","47","","A-D-III-6"],
				["245","47071. Hacienda Pública, deudor por IGIC régimen transitorio, circulante","CUE","47071","38","47","","A-D-III-6"],
				["246","47072. Hacienda Pública, deudor por IGIC régimen transitorio, inversión","CUE","47072","38","47","","A-D-III-6"],
				["247","4708. Hacienda Pública, deudor por subvenciones concedidas","CUE","4708","38","47","","A-D-III-6"],
				["248","4709. Hacienda Pública, deudor por devolución impuestos","CUE","4709","38","47","","A-D-III-6"],
				["249","471. Organismos de la Seguridad Social, deudores","CUE","471","38","47","","A-D-III-6"],
				["250","472. Hacienda Publica, IVA soportado","CUE","472","38","47","IVASOP","A-D-III-6"],
				["251","4720. IVA soportado","CUE","4720","38","47","IVASOP","A-D-III-6"],
				["252","4727. IGIC soportado","CUE","4727","38","47","","A-D-III-6"],
				["253","473. Hacienda Pública, retenciones y pagos a cuenta","CUE","473","38","47","","P-E-V-1"],
				["254","4732. Hacienda Pública, retenciones y pagos a cuenta","CUE","4732","38","47","","P-E-V-1"],
				["255","474. Impuesto sobre beneficios anticipado y compensación de pérdidas","CUE","474","38","47","","A-D-III-6"],
				["256","4740. Impuesto sobre beneficios anticipado","CUE","4740","38","47","","A-D-III-6"],
				["257","4741. Impuestos sobre beneficios anticipado a l/p","CUE","4741","38","47","","A-D-III-6"],
				["258","4745. Crédito por pérdidas a compensar del ejercicio....","CUE","4745","38","47","","A-D-III-6"],
				["259","4746. Crédito por pérdidas a compensar del ejercicio..a l/p","CUE","4746","38","47","","A-D-III-6"],
				["260","4748. Impuesto sobre beneficios anticipado por operaciones intra-grupo","CUE","4748","38","47","","A-D-III-6"],
				["261","4749. Crédito por perdidas a compensar en régimen de declaración consolidada del ejercicio...","CUE","4749","38","47","","A-D-III-6"],
				["262","475. Hacienda Pública, acreedor por conceptos fiscales","CUE","475","38","47","IVAACR","P-E-V-1"],
				["263","4750. Hacienda Pública, acreedor por IVA","CUE","4750","38","47","IVAACR","P-E-V-1"],
				["264","4751. Hacienda Pública, acreedor por retenciones practicadas","CUE","4751","38","47","IRPFPR","P-E-V-1"],
				["265","4752. Hacienda Pública, acreedor por impuesto sobre sociedades","CUE","4752","38","47","","P-E-V-1"],
				["266","4757. Hacienda Pública, acreedor por IGIC","CUE","4757","38","47","","P-E-V-1"],
				["267","4758. Hacienda Pública, acreedor por subvenciones a reintegrar","CUE","4758","38","47","","P-E-V-1"],
				["268","476. Organismos de la Seguridad Social, acreedores","CUE","476","38","47","","P-E-V-1"],
				["269","477. Hacienda Pública, IVA repercutido","CUE","477","38","47","IVAREP","P-E-V-1"],
				["270","4770. IVA repercutido","CUE","4770","38","47","IVAREP","P-E-V-1"],
				["271","4777. IGIC repercutido","CUE","4777","38","47","","P-E-V-1"],
				["272","479. Impuesto sobre beneficios diferido","CUE","479","38","47","","P-E-V-1"],
				["273","4791. Impuesto sobre beneficios diferido a l/p","CUE","4791","38","47","","P-E-V-1"],
				["274","4798. Impuesto sobre beneficios diferido por operaciones intra-grupo","CUE","4798","38","47","","P-E-V-1"],
				["39","48. AJUSTES POR PERIODIFICACION","EPI","48","32","48","",""],
				["275","480. Gastos anticipados","CUE","480","39","48","","A-D-VII"],
				["276","485. Ingresos anticipados","CUE","485","39","48","","P-E-VII"],
				["40","49. PROVISIONES POR OPERACIONES DE TRAFICO","EPI","49","32","49","",""],
				["277","490. Provisión para insolvencias de tráfico","CUE","490","40","49","","A-D-III-7"],
				["278","493. Provisión para insolvencias de tráfico de empresas del grupo","CUE","493","40","49","","A-D-III-7"],
				["279","494. Provisión para insolvencias de tráfico de empresas asociadas","CUE","494","40","49","","A-D-III-7"],
				["280","499. Provisión para otras operaciones de tráfico","CUE","499","40","49","","P-E-VI"],
				["41","5. CUENTAS FINANCIERAS","EPI","5","","5","",""],
				["42","50. EMPRESTITOS Y OTRAS EMISIONES ANALOGAS A CORTO PLAZO","EPI","50","41","50","",""],
				["281","500. Obligaciones y bonos a corto plazo","CUE","500","42","50","","P-E-I-1"],
				["282","501. Obligaciones y bonos convertibles a corto plazo","CUE","501","42","50","","P-E-I-2"],
				["283","505. Deudas representadas otros valores negociables c/p","CUE","505","42","50","","P-E-I-3"],
				["284","506. Intereses de empréstitos y otras emisiones análogas","CUE","506","42","50","","P-E-I-4"],
				["285","509. Valores negociables amortizados","CUE","509","42","50","","P-E-V-3"],
				["286","5090. Obligaciones y bonos amortizados","CUE","5090","42","50","","P-E-V-3"],
				["287","5091. Obligaciones y bonos convertibles amortizados","CUE","5091","42","50","","P-E-V-3"],
				["288","5095. Otros valores negociables amortizados","CUE","5095","42","50","","P-E-V-3"],
				["43","51. DEUDAS A CORTO PLAZO CON EMPRESAS DEL GRUPO Y ASOCIADAS","EPI","51","41","51","",""],
				["289","510. Deudas a corto plazo con empresas del grupo","CUE","510","43","51","","P-E-III-1"],
				["290","5100. Préstamos a corto plazo de empresas del grupo","CUE","5100","43","51","","P-E-III-1"],
				["291","5108. Deudas a c/p con empresas del grupo por efectos impositivos","CUE","5108","43","51","","P-E-III-1"],
				["292","5109. Otras deudas a corto plazo con empresas del grupo","CUE","5109","43","51","","P-E-III-1"],
				["293","511. Deudas a corto plazo con empresas asociadas","CUE","511","43","51","","P-E-III-2"],
				["294","512. Deudas a c/p con entidades de crédito del grupo","CUE","512","43","51","","P-E-III-1"],
				["295","5120. Préstamos a c/p de entidades de crédito del grupo","CUE","5120","43","51","","P-E-III-1"],
				["296","5128. Deudas por efectos descontados en entididades de crédito del grupo","CUE","5128","43","51","","P-E-III-1"],
				["297","5129. Otras deudas c/p con entidades de crédito del grupo","CUE","5129","43","51","","P-E-III-1"],
				["298","513. Deudas a c/p con entidades de credito asociadas","CUE","513","43","51","","P-E-III-2"],
				["299","514. Proveedores de inmovilizado a c/p, empresas del grupo","CUE","514","43","51","","P-E-III-1"],
				["300","515. Proveedores de inmovilizado a c/p, empresas asociadas","CUE","515","43","51","","P-E-III-2"],
				["301","516. Intereses a c/p de deudas con empresas del grupo","CUE","516","43","51","","P-E-III-1"],
				["302","517. Intereses a c/p de deudas con empresas asociadas","CUE","517","43","51","","P-E-III-2"],
				["44","52. DEUDAS A CORTO PLAZO POR PRESTAMOS RECIBIDOS Y OTROS CONCEPTOS","EPI","52","41","52","",""],
				["303","520. Deudas a corto plazo con entidades de crédito","CUE","520","44","52","","P-E-II-1"],
				["304","5200. Préstamos a corto plazo de entidades de crédito","CUE","5200","44","52","","P-E-II-1"],
				["305","5201. Deudas a corto plazo por crédito dispuesto","CUE","5201","44","52","","P-E-II-1"],
				["306","5208. Deudas por efectos descontados","CUE","5208","44","52","","P-E-II-1"],
				["307","521. Deudas a corto plazo","CUE","521","44","52","","P-E-V-3"],
				["308","523. Proveedores de inmovilizado a corto plazo","CUE","523","44","52","","P-E-V-3"],
				["309","524. Efectos a pagar a corto plazo","CUE","524","44","52","","P-E-V-2"],
				["310","525. Dividendo activo a pagar","CUE","525","44","52","","P-E-V-3"],
				["311","526. Intereses a c/p de deudas con entidades de crédito","CUE","526","44","52","","P-E-II-2"],
				["312","527. Intereses a corto plazo de deudas","CUE","527","44","52","","P-E-V-3"],
				["45","53. INVERSIONES FINANCIERAS A CORTO PLAZO EN EMPRESAS DEL GRUPO Y ASOCIADAS","EPI","53","41","53","",""],
				["313","530. Participaciones a c/p en empresas del grupo","CUE","530","45","53","","A-D-IV-1"],
				["314","531. Participaciones a c/p en empresas asociadas","CUE","531","45","53","","A-D-IV-3"],
				["315","532. Valores de renta fija a c/p de empresas del grupo","CUE","532","45","53","","A-D-IV-2"],
				["316","533. Valores de renta fija a c/p de empresas asociadas","CUE","533","45","53","","A-D-IV-4"],
				["317","534. Créditos a corto plazo a empresas del grupo","CUE","534","45","53","","A-D-IV-2"],
				["318","5348. Créditos a c/p con empresas del grupo por efecto impositivo","CUE","5348","45","53","","A-D-IV-2"],
				["319","535. Créditos a corto plazo a empresas asociadas","CUE","535","45","53","","A-D-IV-4"],
				["320","536. Intereses a c/p de inversiones financieras en empresas del grupo","CUE","536","45","53","","A-D-IV-2"],
				["321","5360. Intereses c/p valores renta fija de empresas del grupo","CUE","5360","45","53","","A-D-IV-2"],
				["322","5361. Intereses c/p de créditos a empresas del grupo","CUE","5361","45","53","","A-D-IV-2"],
				["323","537. Intereses a c/p de inversiones financieras en empresas asociadas","CUE","537","45","53","","A-D-IV-4"],
				["324","538. Desembolsos pendientes sobre acciones a c/p de empresas del grupo","CUE","538","45","53","","A-D-IV-1"],
				["325","539. Desembolsos pendientes sobre acciones a c/p de empresas asociadas","CUE","539","45","53","","A-D-IV-3"],
				["46","54. OTRAS INVERSIONES FINANCIERAS TEMPORALES","EPI","54","41","54","",""],
				["326","540. Inversiones financieras temporales en capital","CUE","540","46","54","","A-D-IV-5"],
				["327","5400. Inversiones financieras temporales en acciones con cotización en mercado secundario organizado","CUE","5400","46","54","","A-D-IV-5"],
				["328","5401. Inversiones financieras temporales en acciones sin cotización en mercado secundario organizado","CUE","5401","46","54","","A-D-IV-5"],
				["329","5409. Otras inversiones financieras temporales en capital","CUE","5409","46","54","","A-D-IV-5"],
				["330","541. Valores de renta fija a corto plazo","CUE","541","46","54","","A-D-IV-5"],
				["331","5418. Participaciones en Fondos de Inversión en Activos del Mercado Monetario a c/p","CUE","5418","46","54","","A-D-IV-5"],
				["332","542. Créditos a corto plazo","CUE","542","46","54","","A-D-IV-6"],
				["333","543. Creditos a c/p por enajenación de inmovilizado","CUE","543","46","54","","A-D-IV-6"],
				["334","544. Créditos a corto plazo al personal","CUE","544","46","54","","A-D-III-5"],
				["335","545. Dividendo a cobrar","CUE","545","46","54","","A-D-IV-6"],
				["336","546. Intereses a corto plazo de valores de renta fija","CUE","546","46","54","","A-D-IV-5"],
				["337","547. Intereses a corto plazo de créditos","CUE","547","46","54","","A-D-IV-6"],
				["338","548. Imposiciones a corto plazo","CUE","548","46","54","","A-D-IV-6"],
				["339","549. Desembolsos pendientes sobre acciones a corto plazo","CUE","549","46","54","","A-D-IV-5"],
				["47","55. OTRAS CUENTAS NO BANCARIAS","EPI","55","41","55","",""],
				["340","550. Titular de la explotación","CUE","550","47","55","","P-E-V-3"],
				["341","551. Cuenta corriente con empresas del grupo","CUE","551","47","55","","A-D-III-2"],
				["342","552. Cuenta corriente con empresas asociadas","CUE","552","47","55","","P-E-III-2"],
				["343","553. Cuenta corriente con socios y administradores","CUE","553","47","55","","A-D-III-4"],
				["344","555. Partidas pendientes de aplicación","CUE","555","47","55","","A-D-III-4"],
				["345","556. Desembolsos exigidos sobre acciones","CUE","556","47","55","","P-E-V-3"],
				["346","5560. Desembolsos exigidos sobre acciones de empresas del grupo","CUE","5560","47","55","","P-E-V-3"],
				["347","5561. Desembolsos exigidos sobre acciones de empresas asociadas","CUE","5561","47","55","","P-E-V-3"],
				["348","5562. Desembolsos exigidos sobre acciones de otras empresas","CUE","5562","47","55","","P-E-V-3"],
				["349","557. Dividendo activo a cuenta","CUE","557","47","55","","P-A-VII"],
				["350","558. Accionistas por desembolsos exigidos","CUE","558","47","55","","A-D-I"],
				["48","56. FIANZAS Y DEPOSITOS RECIBIDOS Y CONSTITUIDOS A CORTO PLAZO","EPI","56","41","56","",""],
				["351","560. Fianzas recibidas a corto plazo","CUE","560","48","56","","P-E-V-5"],
				["352","561. Depósitos recibidos a corto plazo","CUE","561","48","56","","P-E-V-5"],
				["353","565. Fianzas constituidas a corto plazo","CUE","565","48","56","","A-D-IV-7"],
				["354","566. Depósitos constituidos a corto plazo","CUE","566","48","56","","A-D-IV-7"],
				["49","57. TESORERIA","EPI","57","41","57","",""],
				["355","570. Caja, euros","CUE","570","49","57","CAJA","A-D-VI"],
				["356","571. Caja, moneda extranjera","CUE","571","49","57","","A-D-VI"],
				["357","572. Bancos e instituciones de crédito c/c. vista, euros","CUE","572","49","57","","A-D-VI"],
				["358","573. Bancos e instituciones de crédito c/c. vista, moneda extranjera","CUE","573","49","57","","A-D-VI"],
				["359","574. Bancos e instituciones de crédito, cuentas de ahorro, euros","CUE","574","49","57","","A-D-VI"],
				["360","575. Bancos e instituciones de crédito, cuentas de ahorro, moneda extranjera","CUE","575","49","57","","A-D-VI"],
				["50","58. AJUSTES POR PERIODIFICACION","EPI","58","41","58","",""],
				["361","580. Intereses pagados por anticipado","CUE","580","50","58","","A-D-VII"],
				["362","585. Intereses cobrados por anticipado","CUE","585","50","58","","P-E-VII"],
				["51","59. PROVISIONES FINANCIERAS","EPI","59","41","59","",""],
				["363","593. Provisión por depreciación de valores negociables a c/p de empresas del grupo","CUE","593","51","59","","A-D-IV-8"],
				["364","594. Provisión por depreciación de valores negociables a c/p de empresas asociadas","CUE","594","51","59","","A-D-IV-8"],
				["365","595. Provisión para insolvencias de créditos a c/p a empresas del grupo","CUE","595","51","59","","A-D-IV-8"],
				["366","596. Provisión para insolvencias de créditos a c/p a empresas asociadas","CUE","596","51","59","","A-D-IV-8"],
				["367","597. Provisión por depreciación de valores negociables a c/p","CUE","597","51","59","","A-D-IV-8"],
				["368","598. Provisión para insolvencias de créditos a c/p","CUE","598","51","59","","A-D-IV-8"],
				["52","6. COMPRAS Y GASTOS","EPI","6","","6","",""],
				["53","60. COMPRAS","EPI","60","52","60","",""],
				["369","600. Compras de mercaderías","CUE","600","53","60","COMPRA","D-A-2-a"],
				["370","601. Compras de materias primas","CUE","601","53","60","","D-A-2-b"],
				["371","602. Compras de otros aprovisionamientos","CUE","602","53","60","","D-A-2-b"],
				["372","607. Trabajos realizados por otras empresas","CUE","607","53","60","","D-A-2-c"],
				["373","608. Devoluciones de compras y operaciones similares","CUE","608","53","60","DEVCOM","D-A-2-a"],
				["374","6080. Devoluciones de compras de mercaderías","CUE","6080","53","60","","D-A-2-a"],
				["375","6081. Devoluciones de compras de materias primas","CUE","6081","53","60","","D-A-2-b"],
				["376","6082. Devoluciones de compras de otros aprovisionamients","CUE","6082","53","60","","D-A-2-b"],
				["377","609. Rappels por compras","CUE","609","53","60","","D-A-2-a"],
				["378","6090. Rappels por compras de mercaderías","CUE","6090","53","60","","D-A-2-a"],
				["379","6091. Rapels por compras de materias primas","CUE","6091","53","60","","D-A-2-b"],
				["380","6092. Rappels por compras de otros aprovisionamientos","CUE","6092","53","60","","D-A-2-b"],
				["54","61. VARIACION DE EXISTENCIAS","EPI","61","52","61","",""],
				["381","610. Variación de existencias de mercaderías","CUE","610","54","61","","D-A-2-a"],
				["382","611. Variación de existencias de materias primas","CUE","611","54","61","","D-A-2-b"],
				["383","612. Variación de existencias de otros aprovisionamientos","CUE","612","54","61","","D-A-2-b"],
				["55","62. SERVICIOS EXTERIORES","EPI","62","52","62","",""],
				["384","620. Gastos en investigación y desarrollo del ejercicio","CUE","620","55","62","","D-A-6-a"],
				["385","621. Arrendamientos y cánones","CUE","621","55","62","","D-A-6-a"],
				["386","622. Reparaciones y conservación","CUE","622","55","62","","D-A-6-a"],
				["387","623. Servicios de profesionales independientes","CUE","623","55","62","","D-A-6-a"],
				["388","624. Transportes","CUE","624","55","62","","D-A-6-a"],
				["389","625. Primas de seguros","CUE","625","55","62","","D-A-6-a"],
				["390","626. Servicios bancarios y similares","CUE","626","55","62","","D-A-6-a"],
				["391","627. Publicidad, propaganda y relaciones públicas","CUE","627","55","62","","D-A-6-a"],
				["392","628. Suministros","CUE","628","55","62","","D-A-6-a"],
				["393","629. Otros servicios","CUE","629","55","62","","D-A-6-a"],
				["56","63. TRIBUTOS","EPI","63","52","63","",""],
				["394","630. Impuesto sobre beneficios","CUE","630","56","63","","D-V-5"],
				["395","631. Otros tributos","CUE","631","56","63","","D-A-6-b"],
				["396","632. Sociedades transparentes, efecto impositivo","CUE","632","56","63","","D-V-5"],
				["397","6320. Importes a cuenta no recuperables por entidades transparentes","CUE","6320","56","63","","D-V-6"],
				["398","6321. Importes a cuenta no recuperables por agrupaciones de interés económico","CUE","6321","56","63","","D-V-5"],
				["399","6323. Ajustes negativos en la imposición en sociedades transparentes","CUE","6323","56","63","","D-V-5"],
				["400","6328. Ajustes positivos en la imposición en sociedades transparentes","CUE","6328","56","63","","D-V-5"],
				["401","633. Ajustes negativos en imposicion sobre beneficios","CUE","633","56","63","","D-V-5"],
				["402","634. Ajustes negativos en la imposicion indirecta","CUE","634","56","63","","D-A-6-b"],
				["403","6341. Ajustes negativos en IVA de circulante","CUE","6341","56","63","","D-A-6-b"],
				["404","6342. Ajustes negativos en IVA de inversiones","CUE","6342","56","63","","D-A-6-b"],
				["405","6343. Ajustes negativos en IGIC, de circulante","CUE","6343","56","63","","D-A-6-b"],
				["406","6344. Ajustes negativos en IGIC, de inversión","CUE","6344","56","63","","D-A-6-b"],
				["407","635. Impuesto sobre beneficios extranjero","CUE","635","56","63","","D-V-6"],
				["408","636. Devolución de impuestos","CUE","636","56","63","","D-A-6-b"],
				["409","637. Imposición indirecta, regímenes especiales","CUE","637","56","63","","D-V-6"],
				["410","6371. Régimen simplificado, IVA","CUE","6371","56","63","","D-V-6"],
				["411","6372. Régimen simplificado, IGIC","CUE","6372","56","63","","D-V-6"],
				["412","6373. Régimen de la agricultura,ganadería y pesca, IVA","CUE","6373","56","63","","D-V-6"],
				["413","6374. Régimen de la agricultura y ganadería, IGIC","CUE","6374","56","63","","D-V-6"],
				["414","638. Ajustes positivos en imposicion sobre beneficios","CUE","638","56","63","","D-V-5"],
				["415","639. Ajustes positivos en la imposicion indirecta","CUE","639","56","63","","D-A-6-b"],
				["416","6391. Ajustes positivos en IVA de circulante","CUE","6391","56","63","","D-A-6-b"],
				["417","6392. Ajustes positivos en IVA de inversiones","CUE","6392","56","63","","D-A-6-b"],
				["418","6393. Ajustes positivos en IGIC de circulante","CUE","6393","56","63","","D-A-6-b"],
				["419","6394. Ajustes positivos en IGIC de inversión","CUE","6394","56","63","","D-A-6-b"],
				["57","64. GASTOS DE PERSONAL","EPI","64","52","64","",""],
				["420","640. Sueldos y salarios","CUE","640","57","64","","D-A-3-a"],
				["421","641. Indemnizaciones","CUE","641","57","64","","D-A-3-a"],
				["422","642. Seguridad Social a cargo de la empresa","CUE","642","57","64","","D-A-3-b"],
				["423","643. Aportaciones a sistemas complementarios pensiones","CUE","643","57","64","","D-A-3-b"],
				["424","649. Otros gastos sociales","CUE","649","57","64","","D-A-3-b"],
				["58","65. OTROS GASTOS DE GESTION","EPI","65","52","65","",""],
				["425","650. Pérdidas de créditos comerciales incobrables","CUE","650","58","65","","D-A-5-b"],
				["426","651. Resultados de operaciones en común","CUE","651","58","65","","D-A-6-c"],
				["427","6510. Beneficio transferido (gestor)","CUE","6510","58","65","","D-A-6-c"],
				["428","6511. Pérdida soportada (partícipe o asociado no gestor)","CUE","6511","58","65","","D-A-6-c"],
				["429","659. Otras pérdidas en gestión corriente","CUE","659","58","65","","D-A-6-c"],
				["59","66. GASTOS FINANCIEROS","EPI","66","52","66","",""],
				["430","661. Intereses de obligaciones y bonos","CUE","661","59","66","","D-I-7-a"],
				["431","6610. Intereses de obligaciones y bonos l/p en empresas del grupo","CUE","6610","59","66","","D-I-7-a"],
				["432","6611. Intereses de obligaciones y bonos l/p en empresas asociadas","CUE","6611","59","66","","D-I-7-b"],
				["433","6613. Intereses de obligaciones y bonos l/p en otras empresas","CUE","6613","59","66","","D-I-7-c"],
				["434","6615. Intereses de obligaciones y bonos c/p en empresas del grupo","CUE","6615","59","66","","D-I-7-a"],
				["435","6616. Intereses de obligaciones y bonos c/p en empresas asociadas","CUE","6616","59","66","","D-I-7-b"],
				["436","6618. Intereses de obligaciones y bonos c/p en otras empresas","CUE","6618","59","66","","D-I-7-c"],
				["437","662. Intereses de deudas a largo plazo","CUE","662","59","66","","D-I-7-a"],
				["438","6620. Intereses de deudas a l/p con empresas del grupo","CUE","6620","59","66","","D-I-7-a"],
				["439","6621. Intereses de deudas a l/p con empresas asociadas","CUE","6621","59","66","","D-I-7-b"],
				["440","6622. Intereses de deudas a l/p con entidades de crédito","CUE","6622","59","66","","D-I-7-c"],
				["441","6623. Intereses de deudas a l/p con otras empresas","CUE","6623","59","66","","D-I-7-c"],
				["442","663. Intereses de deudas a corto plazo","CUE","663","59","66","","D-I-7-a"],
				["443","6630. Intereses de deudas a c/p con empresas del grupo","CUE","6630","59","66","","D-I-7-a"],
				["444","6631. Intereses de deudas a c/p con empresas asociadas","CUE","6631","59","66","","D-I-7-b"],
				["445","6632. Intereses de deudas a c/p con entidades de crédito","CUE","6632","59","66","","D-I-7-c"],
				["446","6633. Intereses de deudas a c/p con otras empresas","CUE","6633","59","66","","D-I-7-c"],
				["447","664. Intereses por descuento de efectos","CUE","664","59","66","","D-I-7-a"],
				["448","6640. Intereses por descuento de efectos en entidades de crédito del grupo","CUE","6640","59","66","","D-I-7-a"],
				["449","6641. Intereses por descuento de efectos en entidades de crédito asociadas","CUE","6641","59","66","","D-I-7-b"],
				["450","6643. Intereses por descuento de efectos en otras entidades de crédito","CUE","6643","59","66","","D-I-7-c"],
				["451","665. Descuentos sobre ventas por pronto pago","CUE","665","59","66","","D-I-7-a"],
				["452","6650. Descuentos sobre ventas por pronto pago a empresas del grupo","CUE","6650","59","66","","D-I-7-a"],
				["453","6651. Descuentos sobre ventas por pronto pago a empresas asociadas","CUE","6651","59","66","","D-I-7-b"],
				["454","6653. Descuentos sobre ventas por pronto pago a otras empresas","CUE","6653","59","66","","D-I-7-c"],
				["455","666. Pérdidas en valores negociables","CUE","666","59","66","","D-I-7-d"],
				["456","6660. Pérdidas en valores negociables a l/p de empresas del grupo","CUE","6660","59","66","","D-I-7-d"],
				["457","6661. Pérdidas en valores negociables a l/p de empresas asociadas","CUE","6661","59","66","","D-I-7-d"],
				["458","6663. Pérdidas en valores negociables a l/p de otras empresas","CUE","6663","59","66","","D-I-7-d"],
				["459","6665. Pérdidas en valores negociables a c/p de empresas del grupo","CUE","6665","59","66","","D-I-7-d"],
				["460","6666. Pérdidas en valores negociables a c/p de empresas asociadas","CUE","6666","59","66","","D-I-7-d"],
				["461","6668. Pérdidas en valores negociables a c/p de otras empresas","CUE","6668","59","66","","D-I-7-d"],
				["462","667. Pérdidas de créditos","CUE","667","59","66","","D-I-7-d"],
				["463","6670. Pérdidas de créditos a l/p a empresas del grupo","CUE","6670","59","66","","D-I-7-d"],
				["464","6671. Pérdidas de créditos a l/p a empresas asociadas","CUE","6671","59","66","","D-I-7-d"],
				["465","6673. Pérdidas de créditos a l/p a otras empresas","CUE","6673","59","66","","D-I-7-d"],
				["466","6675. Pérdidas de créditos a c/p a empresas del grupo","CUE","6675","59","66","","D-I-7-d"],
				["467","6676. Pérdidas de créditos a c/p a empresas asociadas","CUE","6676","59","66","","D-I-7-d"],
				["468","6678. Pérdidas de créditos a c/p a otras empresas","CUE","6678","59","66","","D-I-7-d"],
				["469","668. Diferencias negativas de cambio","CUE","668","59","66","CAMNEG","D-I-9"],
				["470","6680. Diferencias negativas de cambio por la introducción del euro","CUE","6680","59","66","EURNEG","D-I-9"],
				["471","6681. Diferencias negativas de cambio","CUE","6681","59","66","","D-I-9"],
				["472","669. Otros gastos financieros","CUE","669","59","66","","D-I-7-c"],
				["473","6690. Gastos por diferencias derivadas del redondeo del euro","CUE","6690","59","66","","D-I-7-c"],
				["474","6691. Otros gastos financieros","CUE","6691","59","66","","D-I-7-c"],
				["60","67. PERDIDAS PROCEDENTES DEL INMOVILIZADO Y GASTOS EXCEPCIONALES","EPI","67","52","67","",""],
				["475","670. Pérdidas procedentes de inmovilizado inmaterial","CUE","670","60","67","","D-III-1"],
				["476","671. Pérdidas procedentes de inmovilizado material","CUE","671","60","67","","D-III-1"],
				["477","672. Pérdidas procedentes de participaciones en capital a l/p de empresas del grupo","CUE","672","60","67","","D-III-1"],
				["478","673. Pérdidas procedentes de participaciones en capital a l/p de empresas asociadas","CUE","673","60","67","","D-III-1"],
				["479","674. Pérdidas por operaciones con acciones y obligaciones propias","CUE","674","60","67","","D-III-2"],
				["480","676. Donaciones del inmovilizado material","CUE","676","60","67","","D-III-1"],
				["481","678. Gastos extraordinarios","CUE","678","60","67","","D-III-3"],
				["482","6780. Gastos producidos por la introducción del euro","CUE","6780","60","67","","D-III-3"],
				["483","6781. Otros gastos extraordinarios","CUE","6781","60","67","","D-III-3"],
				["484","679. Gastos y pérdidas de ejercicios anteriores","CUE","679","60","67","","D-III-4"],
				["61","68. DOTACIONES PARA AMORTIZACIONES","EPI","68","52","68","",""],
				["485","680. Amortización de gastos de establecimiento","CUE","680","61","68","","D-A-4"],
				["486","681. Amortización del inmovilizado inmaterial","CUE","681","61","68","","D-A-4"],
				["487","682. Amortización del inmovilizado material","CUE","682","61","68","","D-A-4"],
				["62","69. DOTACIONES A LAS PROVISIONES","EPI","69","52","69","",""],
				["488","690. Dotación al fondo de reversión","CUE","690","62","69","","D-A-6-d"],
				["489","691. Dotación a la provisión de inmovilizado inmaterial","CUE","691","62","69","","D-III-0"],
				["490","692. Dotación a la provisión del inmovilizado material","CUE","692","62","69","","D-III-0"],
				["491","693. Dotación a la provisión de existencias","CUE","693","62","69","","D-A-5-a"],
				["492","694. Dotación a la provisión para insolvencias de tráfico","CUE","694","62","69","","D-A-5-b"],
				["493","695. Dotación a la provisión para otras operaciones de tráfico","CUE","695","62","69","","D-A-5-c"],
				["494","696. Dotación a la provisión para valores negociables a l/p","CUE","696","62","69","","D-I-8"],
				["495","6960. Dotación a la provisión para participaciones en capital a l/p de empresas del grupo","CUE","6960","62","69","","D-III-0"],
				["496","6961. Dotación a la provisión para participaciones en capital a l/p de empresas asociadas","CUE","6961","62","69","","D-III-0"],
				["497","6963. Dotación a la provisión para participaciones en capital a l/p de otras empresas","CUE","6963","62","69","","D-I-8"],
				["498","6965. Dotación a la provisión para valores de renta fija a l/p de empresas del grupo","CUE","6965","62","69","","D-I-8"],
				["499","6966. Dotación a la provisión para valores de renta fija a l/p de empresas asociadas","CUE","6966","62","69","","D-I-8"],
				["500","697. Dotación a la provisión para insolvencias de créditos a l/p","CUE","697","62","69","","D-I-8"],
				["501","6970. Dotación a la provisión para insolvencias de créditos a l/p a empresas del grupo","CUE","6970","62","69","","D-I-8"],
				["502","6971. Dotación a la provisión para insolvencias de créditos a l/p a empresas asociadas","CUE","6971","62","69","","D-I-8"],
				["503","6973. Dotación a la provisión para insolvencias de créditos a l/p a otras empresas","CUE","6973","62","69","","D-I-8"],
				["504","698. Dotacion a la provisión para valores negociables a c/p","CUE","698","62","69","","D-I-8"],
				["505","6980. Dotacion a la provisión para valores negociables a c/p de empresas del grupo","CUE","6980","62","69","","D-I-8"],
				["506","6981. Dotacion a la provisión para valores negociables a c/p de empresas asociadas","CUE","6981","62","69","","D-I-8"],
				["507","6983. Dotacion a la provisión para valores negociables a c/p de otras empresas","CUE","6983","62","69","","D-I-8"],
				["508","699. Dotación a la provisión para insolvencias de créditos a c/p","CUE","699","62","69","","D-I-8"],
				["509","6990. Dotación a la provisión para insolvencias de créditos a c/p a empresas del grupo","CUE","6990","62","69","","D-I-8"],
				["510","6991. Dotación a la provisión para insolvencias de créditos a c/p a empresas asociadas","CUE","6991","62","69","","D-I-8"],
				["511","6993. Dotación a la provisión para insolvencias de créditos a c/p a otras empresas","CUE","6993","62","69","","D-I-8"],
				["63","7. VENTAS E INGRESOS","EPI","7","","7","",""],
				["64","70. VENTAS DE MERCADERIAS,DE PRODUCCION PROPIA,DE SERVICIOS, ETC.","EPI","70","63","70","",""],
				["512","700. Ventas de mercaderías","CUE","700","64","70","VENTAS","H-B-1-a"],
				["513","701. Ventas de productos terminados","CUE","701","64","70","VENTAS","H-B-1-a"],
				["514","702. Ventas de productos semiterminados","CUE","702","64","70","VENTAS","H-B-1-a"],
				["515","703. Ventas de subproductos y residuos","CUE","703","64","70","VENTAS","H-B-1-a"],
				["516","704. Ventas de envases y embalajes","CUE","704","64","70","VENTAS","H-B-1-a"],
				["517","705. Prestaciones de servicios","CUE","705","64","70","VENTAS","H-B-1-b"],
				["518","708. Devoluciones de ventas y operaciones similares","CUE","708","64","70","DEVVEN","H-B-1-c"],
				["519","7080. Devoluciones de ventas de mercaderías","CUE","7080","64","70","","H-B-1-c"],
				["520","7081. Devoluciones de ventas de productos terminados","CUE","7081","64","70","","H-B-1-c"],
				["521","7082. Devoluciones de ventas de productos semiterminados","CUE","7082","64","70","","H-B-1-c"],
				["522","7083. Devoluciones de ventas de subproductos y residuos","CUE","7083","64","70","","H-B-1-c"],
				["523","7084. Devoluciones de ventas de envases y embalajes","CUE","7084","64","70","","H-B-1-c"],
				["524","709. Rappels sobre ventas","CUE","709","64","70","","H-B-1-c"],
				["525","7090. Rappels sobre ventas de mercaderías","CUE","7090","64","70","","H-B-1-c"],
				["526","7091. Rappels sobre ventas de productos terminados","CUE","7091","64","70","","H-B-1-c"],
				["527","7092. Rappels sobre ventas de productos semiterminados","CUE","7092","64","70","","H-B-1-c"],
				["528","7093. Rappels sobre ventas de subproductos y residuos","CUE","7093","64","70","","H-B-1-c"],
				["529","7094. Rappels sobre ventas de envases y embalajes","CUE","7094","64","70","","H-B-1-c"],
				["65","71. VARIACION DE EXISTENCIAS","EPI","71","63","71","",""],
				["530","710. Variación de existencias de productos en curso","CUE","710","65","71","","D-A-1"],
				["531","711. Variación de existencias de productos semiterminados","CUE","711","65","71","","H-B-2"],
				["532","712. Variación de existencias de productos terminados","CUE","712","65","71","","H-B-2"],
				["533","713. Variación de existencias de subproductos, residuos y materiales recuperados","CUE","713","65","71","","H-B-2"],
				["66","73. TRABAJOS REALIZADOS PARA LA EMPRESA","EPI","73","63","73","",""],
				["534","730. Incorporación al activo de gastos de establecimiento","CUE","730","66","73","","H-B-3"],
				["535","731. Trabajos realizados para inmovilizado inmaterial","CUE","731","66","73","","H-B-3"],
				["536","732. Trabajos realizados para inmovilizado material","CUE","732","66","73","","H-B-3"],
				["537","733. Trabajos realizados para inmovilizado material en curso","CUE","733","66","73","","H-B-3"],
				["538","737. Incorporación al activo de gastos de formalización de deudas","CUE","737","66","73","","H-B-3"],
				["67","74. SUBVENCIONES A LA EXPLOTACION","EPI","74","63","74","",""],
				["539","740. Subvenciones oficiales a la explotación","CUE","740","67","74","","H-B-4-b"],
				["540","741. Otras subvenciones a la explotación","CUE","741","67","74","","H-B-4-b"],
				["68","75. OTROS INGRESOS DE GESTION","EPI","75","63","75","",""],
				["541","751. Resultados de operaciones en común","CUE","751","68","75","","H-B-4-a"],
				["542","7510. Pérdida transferida (gestor)","CUE","7510","68","75","","H-B-4-a"],
				["543","7511. Beneficio atribuido (partícipe o asociado no gestor)","CUE","7511","68","75","","H-B-4-a"],
				["544","752. Ingresos por arrendamientos","CUE","752","68","75","","H-B-4-a"],
				["545","753. Ingresos de propiedad industrial cedida en explotación","CUE","753","68","75","","H-B-4-a"],
				["546","754. Ingresos por comisiones","CUE","754","68","75","","H-B-4-a"],
				["547","755. Ingresos por servicios al personal","CUE","755","68","75","","H-B-4-a"],
				["548","759. Ingresos por servicios diversos","CUE","759","68","75","","H-B-4-a"],
				["69","76. INGRESOS FINANCIEROS","EPI","76","63","76","",""],
				["549","760. Ingresos de participaciones en capital","CUE","760","69","76","","H-I-5-a"],
				["550","7600. Ingresos de participaciones en capital de empresas del grupo","CUE","7600","69","76","","H-I-5-a"],
				["551","7601. Ingresos de participaciones en capital de empresas asociadas","CUE","7601","69","76","","H-I-5-b"],
				["552","7603. Ingresos de participaciones en capital de otras empresas","CUE","7603","69","76","","H-I-5-c"],
				["553","761. Ingresos de valores de renta fija","CUE","761","69","76","","H-I-6-a"],
				["554","7610. Ingresos de valores renta fija de empresas del grupo","CUE","7610","69","76","","H-I-6-a"],
				["555","7611. Ingresos de valores renta fija de empresas asociadas","CUE","7611","69","76","","H-I-6-b"],
				["556","7613. Ingresos de valores renta fija de otras empresas","CUE","7613","69","76","","H-I-6-c"],
				["557","7618. Ingresos de participaciones en Fondos de Inversión en Activos del Mercado Monetario","CUE","7618","69","76","","H-I-6-c"],
				["558","762. Ingresos de créditos a largo plazo","CUE","762","69","76","","H-I-6-a"],
				["559","7620. Ingresos de créditos a l/p a empresas del grupo","CUE","7620","69","76","","H-I-6-a"],
				["560","7621. Ingresos de créditos a l/p a empresas asociadas","CUE","7621","69","76","","H-I-6-b"],
				["561","7623. Ingresos de créditos a l/p a otras empresas","CUE","7623","69","76","","H-I-6-c"],
				["562","763. Ingresos de créditos a corto plazo","CUE","763","69","76","","H-I-7-a"],
				["563","7630. Ingresos de créditos a c/p a empresas del grupo","CUE","7630","69","76","","H-I-7-a"],
				["564","7631. Ingresos de créditos a c/p a empresas asociadas","CUE","7631","69","76","","H-I-7-b"],
				["565","7633. Ingresos de créditos a c/p a otras empresas","CUE","7633","69","76","","H-I-7-c"],
				["566","765. Descuentos sobre compras por pronto pago","CUE","765","69","76","","H-I-7-a"],
				["567","7650. Descuentos sobre compras por pronto pago de empresas del grupo","CUE","7650","69","76","","H-I-7-a"],
				["568","7651. Descuentos sobre compras por pronto pago de empresas asociadas","CUE","7651","69","76","","H-I-7-b"],
				["569","7653. Descuentos sobre compras por pronto pago de otras empresas","CUE","7653","69","76","","H-I-7-c"],
				["570","766. Beneficios en valores negociables","CUE","766","69","76","","H-I-7-d"],
				["571","7660. Beneficios en valores negociables a l/p de empresas del grupo","CUE","7660","69","76","","H-I-7-d"],
				["572","7661. Beneficios en valores negociables a l/p de empresas asociadas","CUE","7661","69","76","","H-I-7-d"],
				["573","7663. Beneficios en valores negociables a l/p de otras empresas","CUE","7663","69","76","","H-I-7-d"],
				["574","7665. Beneficios en valores negociables a c/p de empresas del grupo","CUE","7665","69","76","","H-I-7-d"],
				["575","7666. Beneficios en valores negociables a c/p de empresas asociadas","CUE","7666","69","76","","H-I-7-d"],
				["576","7668. Beneficios en valores negociables a c/p de otras empresas","CUE","7668","69","76","","H-I-7-d"],
				["577","768. Diferencias positivas de cambio","CUE","768","69","76","CAMPOS","H-I-8"],
				["578","7680. Diferencias positivas de cambio por la introducción del euro","CUE","7680","69","76","EURPOS","H-I-8"],
				["579","7681. Diferencias positivas de cambio","CUE","7681","69","76","","H-I-8"],
				["580","769. Otros ingresos financieros","CUE","769","69","76","","H-I-7-c"],
				["581","7690. Ingresos por diferencias derivadas del redondeo del euro","CUE","7690","69","76","","H-I-7-c"],
				["582","7691. Otros ingresos financieros","CUE","7691","69","76","","H-I-7-c"],
				["70","77. BENEFICIOS PROCEDENTES DEL INMOVILIZADO E INGRESOS EXCEPCIONALES","EPI","77","63","77","",""],
				["583","770. Beneficios procedentes de inmovilizado inmaterial","CUE","770","70","77","","H-III-A"],
				["584","771. Beneficios procedentes de inmovilizado material","CUE","771","70","77","","H-III-A"],
				["585","772. Beneficios procedentes de participaciones en capital a l/p de empresas del grupo","CUE","772","70","77","","H-III-A"],
				["586","773. Beneficios procedentes de participaciones en capital a l/p de empresas asociadas","CUE","773","70","77","","H-III-A"],
				["587","774. Beneficios por operaciones con acciones y obligaciones propias","CUE","774","70","77","","H-III-B"],
				["588","775. Subvenciones de capital traspasadas al resultado del ejercicio","CUE","775","70","77","","H-III-C"],
				["589","778. Ingresos extraordinarios","CUE","778","70","77","","H-III-D"],
				["590","779. Ingresos y beneficios de ejercicios anteriores","CUE","779","70","77","","H-III-E"],
				["71","79. EXCESOS Y APLICACIONES DE PROVISIONES","EPI","79","63","79","",""],
				["591","790. Exceso de provisión para riesgos y gastos","CUE","790","71","79","","H-B-4-c"],
				["592","791. Exceso de provisión del inmovilizado inmaterial","CUE","791","71","79","","D-III-0"],
				["593","792. Exceso de provisión del inmovilizado material","CUE","792","71","79","","D-III-0"],
				["594","793. Provisión de existencias aplicada","CUE","793","71","79","","D-A-5-a"],
				["595","794. Provisión para insolvencias de tráfico aplicada","CUE","794","71","79","","D-A-5-b"],
				["596","795. Provisión para otras operaciones de tráfico aplicada","CUE","795","71","79","","D-A-5-c"],
				["597","796. Exceso de provisión para valores negociables a l/p","CUE","796","71","79","","D-III-1"],
				["598","7960. Exceso de provisión para participaciones en capital a l/p de empresas del grupo","CUE","7960","71","79","","D-III-0"],
				["599","7961. Exceso de provisión para participaciones en capital a l/p de empresas asociadas","CUE","7961","71","79","","D-III-0"],
				["600","7963. Exceso de provisión para valores negociables a l/p de otras empresas","CUE","7963","71","79","","D-I-8"],
				["601","7965. Exceso de provisión para valores de renta fija a l/p de empresas del grupo","CUE","7965","71","79","","D-I-8"],
				["602","7966. Exceso de provisión para valores de renta fija a l/p de empresas asociadas","CUE","7966","71","79","","D-I-8"],
				["603","797. Exceso de provisión para insolvencias de créditos a l/p","CUE","797","71","79","","D-I-8"],
				["604","7970. Exceso de provisión para insolvencias de créditos a l/p de empresas del grupo","CUE","7970","71","79","","D-I-8"],
				["605","7971. Exceso de provisión para insolvencias de créditos a l/p de empresas asociadas","CUE","7971","71","79","","D-I-8"],
				["606","7973. Exceso de provisión para insolvencias de créditos a l/p de otras empresas","CUE","7973","71","79","","D-I-8"],
				["607","798. Exceso de provisión para valores negociables a c/p","CUE","798","71","79","","D-I-8"],
				["608","7980. Exceso de provisión para valores negociables a c/p de empresas del grupo","CUE","7980","71","79","","D-I-8"],
				["609","7981. Exceso de provisión para valores negociables a c/p de empresas asociadas","CUE","7981","71","79","","D-I-8"],
				["610","7983. Exceso de provisión para valores negociables a c/p de otras empresas","CUE","7983","71","79","","D-I-8"],
				["611","799. Exceso de provisión para insolvencias de créditos a c/p","CUE","799","71","79","","D-I-8"],
				["612","7990. Exceso de provisión para insolvencias de créditos a c/p de empresas del grupo","CUE","7990","71","79","","D-I-8"],
				["613","7991. Exceso de provisión para insolvencias de créditos a c/p de empresas asociadas","CUE","7991","71","79","","D-I-8"],
				["614","7993. Exceso de provisión para insolvencias de créditos a c/p de otras empresas","CUE","7993","71","79","","D-I-8"]];

		var curTab:FLSqlCursor = new FLSqlCursor("co_cuentas");
		util.createProgressDialog(util.translate("scripts", "Actualizando códigos de balance"),	datos.length);
		var paso:Number = 0;
		for (i = 0; i < datos.length; i++) {

			util.setProgress(paso++);

			if (datos[i][2] == "EPI")
				continue;

			curTab.select("codcuenta = '" + datos[i][0] + "' and codejercicio = '" + codEjercicio + "'");
			if (curTab.first()) {
				debug("Actualizando cuenta " + datos[i][0]);
				curTab.setModeAccess(curTab.Edit);
				curTab.refreshBuffer();
				curTab.setValueBuffer("codbalance", datos[i][7]);
				curTab.commitBuffer();
			}
		}
		util.destroyProgressDialog();

		MessageBox.information(util.translate("scripts",  "Proceso finalizado"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}


/** Asocia a cada cliente la subcuenta 43 que ya debe existir
*/
function oficial_emparejarSubcuentasClientes()
{
	var util:FLUtil = new FLUtil();		
	var paso:Number = 0;
	var numClientes:Number = 0;

	var codEjercicio:String = flfactppal.iface.pub_ejercicioActual();
	var longSubcuenta:Number = util.sqlSelect("ejercicios", "longsubcuenta", "codejercicio = '" + codEjercicio + "'");
	var sctaClientes = flfacturac.iface.pub_datosCtaEspecial("CLIENT", codEjercicio);
	
	if (sctaClientes.error != 0) {
		MessageBox.warning(util.translate("scripts", "No tiene ninguna cuenta contable marcada como cuenta especial\nCLIENT.\nDebe asociar la cuenta a la cuenta especial en el módulo Principal del área Financiera"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
		return false;
	}
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("clientes");
	q.setFrom("clientes");
	q.setSelect("codcliente,nombre");
	q.setWhere("idsubcuenta is null or codsubcuenta is null or codsubcuenta = '' order by codcliente");
	debug(q.sql());
	if(!q.exec())
		return;
	
	var numCeros:Number;
	var idSubcuenta:Number;
	var codSubcuenta:String;
	var codCliente:String;
	var datosScta:Array;
	
	util.createProgressDialog( util.translate( "scripts", "Asociando subcuentas de cliente..." ), q.size());
	
	while(q.next()) {
	
		util.setProgress(paso++);
		
		codCliente = q.value(0);
		codSubcuenta = "43";
		numCeros = longSubcuenta - codSubcuenta.length - codCliente.length;
		for (var i:Number = 0; i < numCeros; i++)
			codSubcuenta += "0";
	
		if (codSubcuenta.length + codCliente.length > longSubcuenta)
			codCliente = codCliente.right(longSubcuenta - codSubcuenta.length);
	
		codSubcuenta += codCliente;
		idSubcuenta = util.sqlSelect("co_subcuentas", "idsubcuenta", "codsubcuenta = '" + codSubcuenta + "' AND codejercicio = '" + codEjercicio + "'");
	
		if (!idSubcuenta) {
			datosScta = flfactppal.iface.pub_ejecutarQry("co_subcuentas", "codsubcuenta,idsubcuenta", "descripcion = '" + q.value(1) + "'");
			if (datosScta.result < 1) {

				for (i=0; i<=9; i++) {
					codCliente = q.value(0);
					codSubcuenta = "430" + i + codCliente.right(4);
					debug(codSubcuenta);
					idSubcuenta = util.sqlSelect("co_subcuentas", "idsubcuenta", "codsubcuenta = '" + codSubcuenta + "' AND codejercicio = '" + codEjercicio + "'");
					if (idSubcuenta)
						i=20;
				}
				if (!idSubcuenta)
					continue;
			}
			else {
				idSubcuenta = datosScta.idsubcuenta;
				codSubcuenta = datosScta.codsubcuenta;
			}
			debug(q.value(1) + " " + idSubcuenta + " " + codSubcuenta );
		}

		numClientes++;

		util.sqlUpdate("clientes", "idsubcuenta,codsubcuenta", idSubcuenta + "," + codSubcuenta, "codcliente = '" + codCliente + "'");
	}
	
	util.destroyProgressDialog();	
	MessageBox.information(util.translate("scripts",  "Proceso finalizado.\n%0 clientes actualizados").arg(numClientes), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}


function oficial_plazosPago() 
{
	var util:FLUtil = new FLUtil();
	var codEjercicio:String = flfactppal.iface.pub_ejercicioActual();
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("formaspago,plazos");
	q.setFrom("formaspago f left join plazos p on f.codpago = p.codpago");
	q.setSelect("f.codpago");
	q.setWhere("p.codpago is null");
	
	var curP:FLSqlCursor = new FLSqlCursor("plazos");
	
	q.exec();
	
	util.createProgressDialog( util.translate( "scripts", "Generando plazos de pago..." ), q.size());
	var paso:Number = 0;
	
	while(q.next()) {
		util.setProgress(paso++);
		curP.setModeAccess(curP.Insert);
		curP.refreshBuffer();
		curP.setValueBuffer("codpago", q.value(0));
		curP.setValueBuffer("dias", 0);
		curP.setValueBuffer("aplazado", 100);
		curP.commitBuffer();
	}
	
	util.destroyProgressDialog();	
}

function oficial_actualizarDescripcionesSubctasCli()
{
	var util:FLUtil = new FLUtil();
	var codEjercicio:String = flfactppal.iface.pub_ejercicioActual();
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("clientes,co_subcuentascli,co_subcuentas");
	q.setFrom("clientes c inner join co_subcuentascli sc on c.codcliente=sc.codcliente inner join co_subcuentas s on sc.idsubcuenta=s.idsubcuenta");
	q.setSelect("s.idsubcuenta,c.nombre,c.codcliente");
	q.setWhere("c.nombre <> s.descripcion");
	
	var curTab:FLSqlCursor = new FLSqlCursor("co_subcuentas");
	
	q.exec();
	
	util.createProgressDialog( util.translate( "scripts", "Actualizando descripciones de subcuentas..." ), q.size());
	var paso:Number = 0;
	
	while(q.next()) {
		
		curTab.select("idsubcuenta = " + q.value(0));
		if (!curTab.first())
			continue;
		
		curTab.setModeAccess(curTab.Edit);
		curTab.refreshBuffer();
		curTab.setValueBuffer("descripcion", q.value(1));
		curTab.commitBuffer();
		
		util.setProgress(paso++);
	}
	
	util.destroyProgressDialog();	
	
	MessageBox.information ( util.translate( "scripts", "Proceso finalizado. Subcuentas actualizadas: " + paso), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}

function oficial_revisaRecibosCli(oParam)
{
// 	var _i = this.iface;
	var codEjercicio = flfactppal.iface.pub_ejercicioActual();
	var res = MessageBox.warning(sys.translate("Va a revisar el estado de los recibos de cliente en %1\n¿Está seguro?").arg(codEjercicio), MessageBox.Yes, MessageBox.No, MessageBox.NoButton, "AbanQ");
	if (res != MessageBox.Yes) {
		return false;
	}
	if (!flfactteso.iface.curReciboCli) {
		flfactteso.iface.curReciboCli = new FLSqlCursor("reciboscli");
	}
	var curReciboCli = flfactteso.iface.curReciboCli;
	curReciboCli.select("codigo LIKE '" + codEjercicio + "%'");
	var idRecibo;
	AQUtil.createProgressDialog(sys.translate("Revisando recibos"), curReciboCli.size());
	var p = 0;
	var curPD = new FLSqlCursor("pagosdevolcli");
	curPD.setActivatedCommitActions(false);
	curPD.setActivatedCheckIntegrity(false);
	while (curReciboCli.next()) {
		AQUtil.setProgress(p++);
		curReciboCli.setModeAccess(curReciboCli.Edit);
		curReciboCli.refreshBuffer();
		idRecibo = curReciboCli.valueBuffer("idrecibo");
		curReciboCli.setValueBuffer("estado", formRecordreciboscli.iface.pub_obtenerEstado(idRecibo));
		if (!flfactteso.iface.totalesReciboCli()) {
			AQUtil.destroyProgressDialog();
			oParam.errorMsg = sys.translate("Error al calcular los datos del recibo %1").arg(curReciboCli.valueBuffer("codigo"))
			return false;
		}
		if (!curReciboCli.commitBuffer()) {
			oParam.errorMsg = sys.translate("Error al guardar recibo %1").arg(curReciboCli.valueBuffer("codigo"))
			AQUtil.destroyProgressDialog();
			return false;
		}
		/// Comprueba que el último registro de pago es editable
		curPD.select("idrecibo = " + idRecibo + " ORDER BY fecha DESC, idpagodevol DESC");
		if (curPD.first()) {
			if (!curPD.valueBuffer("editable")) {
				curPD.setUnLock("editable", true);
			}
		}
	}
	AQUtil.destroyProgressDialog();
	return true;
}


function oficial_revisaAsientoPagoRecibosCli(oParam)
{
// 	var _i = this.iface;
	var codEjercicio = flfactppal.iface.pub_ejercicioActual();
	var res = MessageBox.warning(sys.translate("Va a revisar los asientos de pago de los recibos de cliente en %1\n¿Está seguro?").arg(codEjercicio), MessageBox.Yes, MessageBox.No, MessageBox.NoButton, "AbanQ");
	if (res != MessageBox.Yes) {
		return false;
	}
	var curReciboCli = new FLSqlCursor("reciboscli");;
	curReciboCli.select("codigo LIKE '" + codEjercicio + "%'");
// 	curReciboCli.select("codigo = '20120A000161-01'");
	var idRecibo, idPagoDevol;
	AQUtil.createProgressDialog(sys.translate("Revisando recibos"), curReciboCli.size());
	var p = 0, idAsiento;
	var curPD = new FLSqlCursor("pagosdevolcli");
	curPD.setActivatedCommitActions(false);
	curPD.setActivatedCheckIntegrity(false);
	while (curReciboCli.next()) {
		AQUtil.setProgress(p++);
		curReciboCli.setModeAccess(curReciboCli.Browse);
		curReciboCli.refreshBuffer();
		idRecibo = curReciboCli.valueBuffer("idrecibo");
		curPD.select("idrecibo = " + idRecibo + " ORDER BY fecha DESC, idpagodevol DESC");
		if (curPD.first()) {
			curPD.setModeAccess(curPD.Edit);
			curPD.refreshBuffer();
			
			idAsiento = curPD.valueBuffer("idasiento");
			if (idAsiento && idAsiento != 0) {
				if (!AQUtil.sqlSelect("co_asientos", "idasiento", "idasiento = " + idAsiento)) {
					debug("va a nulo");
					curPD.setNull("idasiento");
				}
			}
			if (!flfactteso.iface.generarAsientoPagoDevolCli(curPD)) {
				AQUtil.destroyProgressDialog();
				return false;
			}
			if (!curPD.commitBuffer()) {
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
	}
	AQUtil.destroyProgressDialog();
	return true;
}

function oficial_revisaAsientoPagoRemesas(oParam)
{
// 	var _i = this.iface;
	var codEjercicio = flfactppal.iface.pub_ejercicioActual();
	var fechaD = AQUtil.sqlSelect("ejercicios", "fechainicio", "codejercicio = '" + codEjercicio + "'");
	var fechaH = AQUtil.sqlSelect("ejercicios", "fechafin", "codejercicio = '" + codEjercicio + "'");
	
	var res = MessageBox.warning(sys.translate("Va a revisar los asientos de pago de las remesas de cliente desde %1 hasta %2\n¿Está seguro?").arg(AQUtil.dateAMDtoDMA(fechaD)).arg(AQUtil.dateAMDtoDMA(fechaH)), MessageBox.Yes, MessageBox.No, MessageBox.NoButton, "AbanQ");
	if (res != MessageBox.Yes) {
		return false;
	}
	var curRemesa = new FLSqlCursor("remesas");;
	curRemesa.select("fecha BETWEEN '" + fechaD + "' AND '" + fechaH + "'");
	var idRemesa;
	AQUtil.createProgressDialog(sys.translate("Revisando remesas"), curRemesa.size());
	var p = 0, idAsiento;
	var curPD = new FLSqlCursor("pagosdevolrem");
	curPD.setActivatedCommitActions(false);
	curPD.setActivatedCheckIntegrity(false);
	while (curRemesa.next()) {
		AQUtil.setProgress(p++);
		curRemesa.setModeAccess(curRemesa.Browse);
		curRemesa.refreshBuffer();
		idRemesa = curRemesa.valueBuffer("idremesa");
		curPD.select("idremesa = " + idRemesa + " ORDER BY fecha DESC, idpagorem DESC");
		if (curPD.first()) {
			curPD.setModeAccess(curPD.Edit);
			curPD.refreshBuffer();
			
			idAsiento = curPD.valueBuffer("idasiento");
			if (idAsiento && idAsiento != 0) {
				if (!AQUtil.sqlSelect("co_asientos", "idasiento", "idasiento = " + idAsiento)) {
					debug("va a nulo");
					curPD.setNull("idasiento");
				}
			}
			if (!flfactteso.iface.generarAsientoPagoRemesa(curPD)) {
				AQUtil.destroyProgressDialog();
				return false;
			}
			if (!curPD.commitBuffer()) {
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
	}
	AQUtil.destroyProgressDialog();
	return true;
}

function oficial_procesaStocksPtes(oParam)
{
	var q = new FLSqlQuery;
	q.setSelect("idusuario");
	q.setFrom("stocksptes");
	q.setWhere("1 = 1 GROUP BY idusuario");
	if (!q.exec()) {
		return false;
	}
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Procesando stocks"), q.size());
	var p = 0;
	while (q.next()) {
		AQUtil.setProgress(p++);
		if (!flfactalma.iface.procesaStocks(q.value("idusuario"))) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();

	return true;
}
function oficial_actualizarDescripcionesSubctasProv()
{
	var util:FLUtil = new FLUtil();
	var codEjercicio:String = flfactppal.iface.pub_ejercicioActual();
	
	var q:FLSqlQuery = new FLSqlQuery();
	q.setTablesList("proveedores,co_subcuentasprov,co_subcuentas");
	q.setFrom("proveedores p inner join co_subcuentasprov sp on p.codproveedor=sp.codproveedor inner join co_subcuentas s on sp.idsubcuenta=s.idsubcuenta");
	q.setSelect("s.idsubcuenta,p.nombre,p.codproveedor");
	q.setWhere("p.nombre <> s.descripcion");
	
	var curTab:FLSqlCursor = new FLSqlCursor("co_subcuentas");
	
	q.exec();
	
	util.createProgressDialog( util.translate( "scripts", "Actualizando descripciones de subcuentas..." ), q.size());
	var paso:Number = 0;
	
	while(q.next()) {
		
		curTab.select("idsubcuenta = " + q.value(0));
		if (!curTab.first())
			continue;
		
		curTab.setModeAccess(curTab.Edit);
		curTab.refreshBuffer();
		curTab.setValueBuffer("descripcion", q.value(1));
		curTab.commitBuffer();
		
		util.setProgress(paso++);
	}
	
	util.destroyProgressDialog();	
	
	MessageBox.information ( util.translate( "scripts", "Proceso finalizado. Subcuentas actualizadas: " + paso), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton);
}

function oficial_actualizarTextoRecibosCli(oParam)
{

	var _i = this.iface;
		
	var q = new AQSqlQuery;
	q.setSelect("idrecibo");
	q.setFrom("reciboscli");
	q.setWhere("1=1");
	if (!q.exec()) {
		return false;
	}
	debug(q.sql());

	AQUtil.createProgressDialog(sys.translate("Revisando recibos"), q.size());
	var p = 0, idRecibo;
	var curReciboCli = new FLSqlCursor("reciboscli");
	curReciboCli.setActivatedCheckIntegrity(false);
	curReciboCli.setActivatedCommitActions(false);
	while (q.next()) {
		AQUtil.setProgress(++p);
		idRecibo = q.value("idrecibo");
		curReciboCli.select("idrecibo = " + idRecibo);
		if (!curReciboCli.first()) {
			AQUtil.destroyProgressDialog();
			debug("Recibo no encontrado " + idRecibo);
			return false;
		}
		curReciboCli.setModeAccess(curReciboCli.Edit);
		curReciboCli.refreshBuffer();
		curReciboCli.setValueBuffer("texto",formRecordreciboscli.iface.pub_commonCalculateField("texto", curReciboCli));
		if (!curReciboCli.commitBuffer()) {
			AQUtil.destroyProgressDialog();			
			return false;
		}
	}
	AQUtil.destroyProgressDialog();

	return true;

}

function oficial_regenerarBD()
{
  var _i = this.iface;
  var cursor = this.cursor();

	sys.AQTimer.singleShot(10, sys.Mr_Proper);
	return true;
}

function oficial_crearEjercicioEmpresa()
{
  	var _i = this.iface;
	
	var dialog = new Dialog(sys.translate("INTRODUZCA LA FECHA DEL EJERCICIO"));
	dialog.OKButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var hoy = new Date();
	var fecha = new DateEdit;
	fecha.date = hoy;
	fecha.label = sys.translate("Fecha ejercicio:");
	dialog.add(fecha);
	if (!dialog.exec()) {
		return false;
	}
	
	var curEmpresa = new FLSqlCursor("empresa");
	curEmpresa.select("1=1");
	
	while(curEmpresa.next()) {
		curEmpresa.setModeAccess(curEmpresa.Edit);
		curEmpresa.refreshBuffer();
				
		if(!_i.creaEjercicio(curEmpresa, fecha.date)){
			sys.warnMsgBox(sys.translate("Error generando el ejercicio de la empresa %1").arg(curEmpresa.valueBuffer("id")));
			return false;
		}
		
	}

	sys.infoMsgBox(sys.translate("Proceso finalizado con éxito."));
	return true;
}

function oficial_creaEjercicio(curEmpresa, fecha)
{
  	var _i = this.iface;

  	var curEjercicio = new FLSqlCursor("ejercicios");
	curEjercicio.select("estado = 'ABIERTO' AND idempresa = " + curEmpresa.valueBuffer("id") + " AND CURRENT_DATE BETWEEN fechainicio AND fechafin");

	var prefijoEjercicio;
	var year = fecha.getYear().toString();
	var sufijoEjercicio = year.right(2);
	var fechaInicio = year + "-01-01";
	var fechaFin = year + "-12-31";
	var codEjerOrigen;
	var codEjerDestino;

	while(curEjercicio.next()) {
		curEjercicio.setModeAccess(curEjercicio.Edit);
		curEjercicio.refreshBuffer();

		prefijoEjercicio = curEjercicio.valueBuffer("codejercicio").toString().left(2);
		var curEjercicioNuevo = new FLSqlCursor("ejercicios");
		curEjercicioNuevo.setModeAccess(curEjercicioNuevo.Insert);
		curEjercicioNuevo.refreshBuffer();
		
		codEjerOrigen = curEjercicio.valueBuffer("codejercicio");
		codEjerDestino = prefijoEjercicio + sufijoEjercicio;

		curEjercicioNuevo.setValueBuffer("codejercicio", codEjerDestino);		
		curEjercicioNuevo.setValueBuffer("nombre", year + " " +curEmpresa.valueBuffer("nombre"));		
		curEjercicioNuevo.setValueBuffer("longsubcuenta", curEjercicio.valueBuffer("longsubcuenta"));		
		curEjercicioNuevo.setValueBuffer("fechainicio", fechaInicio);		
		curEjercicioNuevo.setValueBuffer("fechafin", fechaFin);		
		curEjercicioNuevo.setValueBuffer("estado", "ABIERTO");		
		curEjercicioNuevo.setValueBuffer("idempresa", curEmpresa.valueBuffer("id"));		

		if(!curEjercicioNuevo.commitBuffer()) {
			return false;
		}

		if(!_i.copiaSeriesEjercicios(codEjerOrigen,codEjerDestino)){
			return false;
		}

		if(!formRecordejercicios.iface.copiaPGCEjercicio(codEjerOrigen,codEjerDestino)){
			return false;
		}
	}

	return true;

}

function oficial_copiaSeriesEjercicios(codEjerOrigen, codEjerDestino)
{
  	var _i = this.iface;

	var curSeries =  new FLSqlCursor("secuenciasejercicios");

	var q = new FLSqlQuery;
	q.setSelect("codserie");
	q.setFrom("secuenciasejercicios");
	q.setWhere("codejercicio = '" + codEjerOrigen + "' AND codserie NOT IN (SELECT codserie from secuenciasejercicios WHERE codejercicio = '" + codEjerDestino + "') ORDER BY codserie");

	if (!q.exec()) {
		_fP.ponMsgError(sys.translate("Ha habido un error al copiar las series del ejercicio %1").arg(codEjercicio), "warn", this);
		return;
	}
	while (q.next()) {
		curSeries.setModeAccess(curSeries.Insert);
		curSeries.refreshBuffer();
		curSeries.setValueBuffer("codserie", q.value("codserie"));
		curSeries.setValueBuffer("codejercicio", codEjerDestino);
		if(!curSeries.commitBuffer()) {
			sys.warnMsgBox(sys.translate("Error al copiar la serie %1 del ejercicio %2").arg(q.value("codserie")).arg(codEjerOrigen));
			return;
		}
	}

	return true;

}
/* Está en formRecordejercicios.iface.copiaPGC...
function oficial_copiaPGCEjercicio(codEjerOrigen, codEjerDestino)
{
  	var _i = this.iface;

	if (flfactppal.iface.pub_extension("pgc2008")) {
		if (!AQUtil.execSql("INSERT INTO co_gruposepigrafes (codgrupo, descripcion, codejercicio) (SELECT codgrupo, descripcion, '" + codEjerDestino + "' FROM co_gruposepigrafes WHERE codejercicio = '" + codEjerOrigen + "')")) {
			return false;
		}
	}

	if (!AQUtil.execSql("INSERT INTO co_epigrafes (codepigrafe, descripcion, codejercicio) (SELECT codepigrafe, descripcion, '" + codEjerDestino + "' FROM co_epigrafes WHERE codejercicio = '" + codEjerOrigen + "')")) {
		return false;
	}

	if (flfactppal.iface.pub_extension("pgc2008")) {
		if (!AQUtil.execSql("UPDATE co_epigrafes SET idgrupo = (SELECT idgrupo FROM co_gruposepigrafes WHERE codgrupo = SUBSTRING(co_epigrafes.codepigrafe, 1 , 1) AND codejercicio = '" + codEjerDestino + "') WHERE codejercicio = '" + codEjerDestino + "'")) {
			return false;
		}
	}

	if (!AQUtil.execSql("INSERT INTO co_cuentas (codcuenta, descripcion, codejercicio, codepigrafe, idcuentaesp, idepigrafe) (SELECT codcuenta, descripcion, '" + codEjerDestino + "', codepigrafe, idcuentaesp, 0 FROM co_cuentas WHERE codejercicio = '" + codEjerOrigen + "')")) {
		return false;
	}

	if (!AQUtil.execSql("UPDATE co_cuentas SET idepigrafe = (SELECT idepigrafe FROM co_epigrafes WHERE codepigrafe = co_cuentas.codepigrafe AND codejercicio = '" + codEjerDestino + "') WHERE codejercicio = '" + codEjerDestino + "'")) {
		return false;
	}

	if (!AQUtil.execSql("INSERT INTO co_subcuentas (codsubcuenta, descripcion, codejercicio, codcuenta, debe, haber, saldo, codimpuesto, iva, recargo, coddivisa, idcuentaesp, idcuenta) (SELECT codsubcuenta, descripcion, '" + codEjerDestino + "', codcuenta, 0, 0, 0, codimpuesto, iva, recargo, coddivisa, idcuentaesp, 0 FROM co_subcuentas WHERE codejercicio = '" + codEjerOrigen + "')")) {
		return false;
	}

	if (!AQUtil.execSql("UPDATE co_subcuentas SET idcuenta = (SELECT idcuenta FROM co_cuentas WHERE codcuenta = co_subcuentas.codcuenta AND codejercicio = '" + codEjerDestino + "') WHERE codejercicio = '" + codEjerDestino + "'")) {
		return false;
	}

	if (!AQUtil.execSql("INSERT INTO co_subcuentascli (codsubcuenta, codcliente, codejercicio, idsubcuenta) (SELECT codsubcuenta, codcliente, '" + codEjerDestino + "', 0 FROM co_subcuentascli WHERE codejercicio = '" + codEjerOrigen + "')")) {
		return false;
	}


	if (!AQUtil.execSql("INSERT INTO co_subcuentasprov (codsubcuenta, codproveedor, codejercicio, idsubcuenta) (SELECT codsubcuenta, codproveedor, '" + codEjerDestino + "', 0 FROM co_subcuentasprov WHERE codejercicio = '" + codEjerOrigen + "')")) {
		return false;
	}

	if(!_i.updateIdSubCuentas(codEjerDestino)){
		return false;
	}

	return true;

}

function oficial_updateIdSubCuentas(codEjerDestino)
{
  	var _i = this.iface;

	if (!AQUtil.execSql("UPDATE co_subcuentascli SET idsubcuenta = (CASE WHEN (SELECT idsubcuenta FROM co_subcuentas WHERE codsubcuenta = co_subcuentascli.codsubcuenta AND codejercicio = '" + codEjerDestino + "') IS NULL THEN 1 ELSE (SELECT idsubcuenta FROM co_subcuentas WHERE codsubcuenta = co_subcuentascli.codsubcuenta AND codejercicio = '" + codEjerDestino + "') END) WHERE codejercicio = '" + codEjerDestino + "'")) {
		return false;
	}

	if (!AQUtil.execSql("UPDATE co_subcuentasprov SET idsubcuenta = (CASE WHEN (SELECT idsubcuenta FROM co_subcuentas WHERE codsubcuenta = co_subcuentasprov.codsubcuenta AND codejercicio = '" + codEjerDestino + "') IS NULL THEN 1 ELSE (SELECT idsubcuenta FROM co_subcuentas WHERE codsubcuenta = co_subcuentasprov.codsubcuenta AND codejercicio = '" + codEjerDestino + "') END)WHERE codejercicio = '" + codEjerDestino + "'")) {
		return false;
	}
	return true;
}*/

function oficial_lanzarUpdateIdSubCuentas()
{
  	var _i = this.iface;

	var dialog = new Dialog(sys.translate("INTRODUZCA LA FECHA DEL EJERCICIO A ACTUALIZAR LAS SUBCUENTAS"));
	dialog.OKButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var hoy = new Date();
	var fecha = new DateEdit;
	fecha.date = hoy;
	fecha.label = sys.translate("Fecha ejercicio:");
	dialog.add(fecha);
	if (!dialog.exec()) {
		return false;
	}

	var curEjercicio = new FLSqlCursor("ejercicios");
	curEjercicio.select("estado = 'ABIERTO' AND '" + fecha.date + "' BETWEEN fechainicio AND fechafin");


	while(curEjercicio.next()) {
		curEjercicio.setModeAccess(curEjercicio.Edit);
		curEjercicio.refreshBuffer();

		aSql = formRecordejercicios.iface.updateIdSubCuentas(curEjercicio.valueBuffer("codejercicio"));

		flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Acturalizando subcuentas"), aSql.length);
		var p = 0;

		for (var i = 0; i < aSql.length; i++) {
			AQUtil.setProgress(p++);
			if (!AQUtil.execSql(aSql[i])) {
				sys.warnMsgBox(sys.translate("Fallo actualizando las subcuentas del ejercicio %1").arg(curEjercicio.valueBuffer("codejercicio")));
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
		AQUtil.destroyProgressDialog();
	}

	return true;
}


function oficial_cerrarPedidosCli(oParam)
{
	var _i = this.iface;

	var dialog = new Dialog;
	dialog.caption = "Cerrar pedidos de cliente";
	dialog.okButtonText = "Aceptar";
	dialog.cancelButtonText = "Cancelar";  

	/*var codEjercicio = new LineEdit;
	codEjercicio.label = "Ejercicio:";
	codEjercicio.text = "";	
	dialog.add(codEjercicio);*/
	
	var fechaHasta = new DateEdit;
	fechaHasta.date = new Date();	
	fechaHasta.label = sys.translate("Fecha hasta (inclusive):");
	fechaHasta.date = "";	
	dialog.add(fechaHasta);	
	
	if(!dialog.exec() ) {
		return;
	}

	var idPedido;
	var oParam = new Object;
	oParam.errorMsg = sys.translate("Error al cerrar el pedido");
	var f;

	var q = new AQSqlQuery;	
	q.setSelect("idpedido");
	q.setFrom("pedidoscli");
	q.setWhere("(servido ='No' OR servido = 'Parcial') AND editable AND fecha <= '" + fechaHasta.date + "'"); 			
	if (!q.exec()){
		return;
	}  
	var numPedidos = q.size();
	var res = flfactppal.iface.preguntaMsg(sys.translate("Se van a cerrar %1 pedidos anteriores a la fecha %2. ¿Desea continuar?").arg(numPedidos).arg(AQUtil.dateAMDtoDMA(fechaHasta.date)),"info",this,MessageBox.Yes, MessageBox.No);  
	if (res != MessageBox.Yes) {
		return true;
	}
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Cerrando pedidos"), q.size());
	var p = 0;
	while(q.next())
	{
		AQUtil.setProgress(p++);
		idPedido = q.value("idpedido");		
		oParam.idPedido = idPedido;	
		oParam.cerrar = true;	
		f = new Function("oParam", "return formpedidoscli.iface.trAbrirCerrarPedido(oParam)");	
		if (!sys.runTransaction(f, oParam)) {		
			sys.warnMsgBox(sys.translate("Se ha producido un error al cerrar el pedido"));
			AQUtil.destroyProgressDialog();
			return false;
		}
	}	

	AQUtil.destroyProgressDialog();
	return true;
}

function oficial_eliminarSubcuentasVacias(){

	var _i = this.iface;

	var dialog = new Dialog;
	dialog.caption = "Ejercicio";
	dialog.okButtonText = "Aceptar";
	dialog.cancelButtonText = "Cancelar";  

	var codEjercicio = new LineEdit;
	codEjercicio.label = "Ejercicio:";
	codEjercicio.text = "";	
	dialog.add(codEjercicio);

	if(!dialog.exec()){
		return false;
	}

	var where = "left(cast(fechainicio as varchar),4) = '" + codEjercicio.text + "' and left(cast(fechafin as varchar),4) = '" + codEjercicio.text + "'";

	if (sys.nameDriver().toLowerCase().find("mysql") >= 0) {
    	where = "left(cast(fechainicio as char),4) = '" + codEjercicio.text + "' and left(cast(fechafin as char),4) = '" + codEjercicio.text + "'";
    }

	var qryEjercicios = new FLSqlQuery();
	qryEjercicios.setSelect("codejercicio");
	qryEjercicios.setFrom("ejercicios");
	qryEjercicios.setWhere(where);

	debug(qryEjercicios.sql());

	if(!qryEjercicios.exec()){
		return false;
	}

	if(qryEjercicios.size() < 1){
		sys.warnMsgBox(sys.translate("No hay ningun ejercicio para el año " + codEjercicio.text));
		return false;
	}

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Eliminando subuentas"), qryEjercicios.size());
	var p = 0;

	while(qryEjercicios.next()){
		AQUtil.setProgress(p++);
		debug("ELIMINANDO SUBCUENTAS EJERCICIO " + qryEjercicios.value("codejercicio"));

		if(!AQUtil.execSql("DELETE FROM co_subcuentascli WHERE codejercicio = '" + qryEjercicios.value("codejercicio") + "' and codsubcuenta in (select s.codsubcuenta from co_subcuentas s left outer join co_partidas p on s.idsubcuenta = p.idsubcuenta where s.codejercicio = '" + qryEjercicios.value("codejercicio") + "' and s.codsubcuenta like '430%' and p.idpartida is null);")){
			AQUtil.destroyProgressDialog();
			return false;
		}

		if(!AQUtil.execSql("DELETE FROM co_subcuentas WHERE codejercicio = '" + qryEjercicios.value("codejercicio") + "' and codsubcuenta in (select s.codsubcuenta from co_subcuentas s left outer join co_partidas p on s.idsubcuenta = p.idsubcuenta where s.codejercicio = '" + qryEjercicios.value("codejercicio") + "' and s.codsubcuenta like '430%' and p.idpartida is null);")){
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();

	return true;
}
function oficial_creaVistas(oParam)
{
	
	var _i = this.iface;	
	var vistas = _i.dameVistas();

	for (var i = 0; i < vistas.length; i++) {	
		var nombre = vistas [i][0];	
		var tipo = AQUtil.quickSqlSelect("information_schema.tables","table_type","table_name = '" + nombre + "'");		
		if(tipo && tipo !="") {
			if(tipo == "VIEW") {			
				if (!AQUtil.execSql("DROP VIEW IF EXISTS " + vistas [i][0] + " CASCADE")) {
					sys.warnMsgBox(sys.translate("Error eliminando la tabla %1").arg(vistas [i][0]));
					return false;
				}
			
			} else {
				if (!AQUtil.execSql("DROP TABLE IF EXISTS " + vistas [i][0])) {
					sys.warnMsgBox(sys.translate("Error eliminando la tabla %1").arg(vistas [i][0]));
					return false;
				}
			
			}		
		}
		if (!AQUtil.execSql("CREATE VIEW " + vistas[i][0] + " AS " + vistas[i][1])) {
			sys.warnMsgBox(sys.translate("Error creando la vista %1").arg(vistas [i][0]));
			return false;
		}
	} 

	return true;
}

function oficial_dameVistas()
{
	
	var vistas = [];
	//esta funcion se sobrecargará en cada funcionalidad, llamando a la de arriba y haciendo un push al array de vistas
	//vistas.push(["nombrevista", "SELECT xxx from xxx where xxxx"]);	
	//por convencion el nombre de la vista será v_nombredescriptivo
	return vistas;
}

function oficial_comprobarStocksMagento()
{
	var _i = this.iface;
	var _fA = flfactalma.iface;
	var _fP = flfactppal.iface;
	var _fTpv = flfact_tpv.iface;

	if(!flfactppal.iface.pub_extension("magento")) {
		_fP.ponMsgError(sys.translate("No está instalada las extensión de Magento. Se cancela el proceso"), "warn", this);
		return true;
	}

	var silent = !sys.interactiveGUI();

	var nombreLog = "";
	var corregir = false;
	var corregirNegativos = false;

	if (silent) {
		nombreLog = formtpv_tiendas.iface.dameNombreLog("STOCKS_WEB");
		nombreLog = _fA.pub_ponLogName(nombreLog);
		
		var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
		if (!dirLog || dirLog == "") {
			dirLog = Dir.home;
		}
		dirLog += dirLog.endsWith("/") ? "" : "/";
		var nombreFile = dirLog + nombreLog;
		if (!_fP.pub_abreLogFile(nombreLog, nombreFile)) {
			sys.infoMsgBox("No se ha creado el fichero del log de comprobación de stocks web.");
		}
		_fP.pub_appendTextToLogFile(nombreLog, sys.translate("CORRIGIENDO STOCKS"));

		corregir = true;
		corregirNegativos = false;	
		flfactppal.iface.pub_appendTextToLogFile(nombreLog, "\nCorrigiendo stocks incorrectos...");
	}	
	else {
		var res = MessageBox.information(AQUtil.translate("scripts",  "¿Desea corregir los stocks incorrectos?"), MessageBox.No, MessageBox.Yes, MessageBox.NoButton);
		if (res == MessageBox.Yes){
			corregir = true;

			res = MessageBox.information(AQUtil.translate("scripts",  "¿Desea corregir los stocks negativos?"), MessageBox.No, MessageBox.Yes, MessageBox.NoButton);
			if (res == MessageBox.Yes){
				corregirNegativos = true;
			}
		}
	}

	if(!_i.comprobarStocksMagentoAbanQ(corregir, corregirNegativos, nombreLog)){
		return false;
	}

	return true;
}

function oficial_comprobarStocksMagentoAbanQ(corregir, corregirNegativos, nombreLog)
{
	var _i = this.iface;
	
	var _fA = flfactalma.iface;
	var _fP = flfactppal.iface;
	var _fTpv = flfact_tpv.iface;

	var silent = !sys.interactiveGUI();

	if (silent && !nombreLog) {
		nombreLog = formtpv_tiendas.iface.dameNombreLog("STOCKS_WEB");
		nombreLog = _fA.pub_ponLogName(nombreLog);
		
		var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
		if (!dirLog || dirLog == "") {
			dirLog = Dir.home;
		}
		dirLog += dirLog.endsWith("/") ? "" : "/";
		var nombreFile = dirLog + nombreLog;
		if (!_fP.pub_abreLogFile(nombreLog, nombreFile)) {
			sys.infoMsgBox("No se ha creado el fichero del log de comprobación de stocks web.");
		}
		_fP.pub_appendTextToLogFile(nombreLog, sys.translate("CORRIGIENDO STOCKS"));

		corregir = true;	
		flfactppal.iface.pub_appendTextToLogFile(nombreLog, "\nCorrigiendo stocks incorrectos...");
	}

	var conexion = "WEBM";
	formtpv_tiendas.iface.conectar(conexion);
	var codAlmacen = AQUtil.sqlSelect("tpv_tiendas","codalmacen","codtienda = '" + conexion + "'");
	if(!codAlmacen || codAlmacen == "") {
		if (!silent) {
			sys.warnMsgBox(sys.translate("La tienda %1 no tiene almacén asignado").arg(conexion));
		}
		else {
			debug("La tienda " + conexion + " no tiene almacén asignado");
			flfactppal.iface.pub_appendTextToLogFile(nombreLog, "\nLa tinenda " + conexion + " no tiene almacén asignado");
		}
		return false;
	}
	var msg = "";
	var mayores = "";
	var menores = "";
	var corregidos = "";
	var nocorregidos = "";

	var datosArt = [];
	var stockMgt = "";
	var stockAbanq = "";
	var stocksCorregir = "";

	// OBTENIENDO IDS DE ATTRIBUTOS: 84
	var attrIdStatus = AQUtil.sqlSelect("eav_attribute","attribute_id","entity_type_id=4 and attribute_code = 'status'","eav_attribute",conexion); 
	//debug("Estado: " + attrIdStatus);

	// 118
	var attrIdTalla = AQUtil.sqlSelect("eav_attribute","attribute_id","entity_type_id=4 and attribute_code = 'size'","eav_attribute",conexion); 
	//debug("Talla: " + attrIdTalla);

	// 91
	var attrIdVisibility = AQUtil.sqlSelect("eav_attribute","attribute_id","entity_type_id=4 and attribute_code = 'visibility'","eav_attribute",conexion); 
	//debug("Visibilidad: " + attrIdVisibility);


	//CONSTRUYENDO QRY STOCKS POR TALLAS
	var qStockTalls = new FLSqlQuery("",conexion);
	qStockTalls.setSelect("articulo.sku, stock.qty, visibilidad.value");
	qStockTalls.setFrom("catalog_product_entity articulo INNER JOIN catalog_product_entity_int estado ON articulo.entity_id = estado.entity_id and estado.attribute_id = " + attrIdStatus + " INNER JOIN cataloginventory_stock_item stock ON articulo.entity_id = stock.product_id INNER JOIN catalog_product_entity_int visibilidad ON articulo.entity_id = visibilidad.entity_id and visibilidad.attribute_id = " + attrIdVisibility);

	//CONSTRUYENDO QRY ARTICULOS
	var qArticulos = new FLSqlQuery("",conexion);
	qArticulos.setSelect("articulo.sku, visibilidad.value");
	qArticulos.setFrom("catalog_product_entity articulo INNER JOIN catalog_product_entity_int estado ON articulo.entity_id = estado.entity_id and estado.attribute_id = " + attrIdStatus + " INNER JOIN catalog_product_entity_int visibilidad ON articulo.entity_id = visibilidad.entity_id and visibilidad.attribute_id = " + attrIdVisibility);
	qArticulos.setWhere("visibilidad.value = 4 group by articulo.sku, visibilidad.value");
	debug("qArticulos: "+qArticulos.sql());
	if(!qArticulos.exec()) {
		if (!silent) {
			sys.warnMsgBox(sys.translate("Falló la consulta."));
		}
		else {
			debug("falló la consulta: " + qArticulos.sql());
			flfactppal.iface.pub_appendTextToLogFile(nombreLog, "\nFalló la consulta: " + qArticulos.sql());
		}
		return false;
	}

	if (!silent) {
		AQUtil.createProgressDialog("Comprobando stocks en la web...", qArticulos.size());
	}
	else {
		debug("Comprobando stocks en la web...");
	}
	var p = 0;
	var barcode;
	var referencia;
	var refAbanq;
	var talla;
	var idStock;
	while(qArticulos.next()) {
		if (!silent) {
			AQUtil.setProgress(p++);
		}
		else {
			debug("comprobando " + p++ + " de " + qArticulos.size());
			flfactppal.iface.pub_appendTextToLogFile(nombreLog, "\ncomprobando " + p++ + " de " + qArticulos.size());
		}		
		qStockTalls.setWhere("articulo.sku LIKE '" + qArticulos.value("articulo.sku") + "%' GROUP BY articulo.sku,stock.qty,visibilidad.value");
		qStockTalls.sql();
		if(!qStockTalls.exec()) {
			if (!silent) {
				sys.warnMsgBox(sys.translate("Falló la consulta."));
			}
			else {
				debug("falló la consulta: " + qStockTalls.sql());
				flfactppal.iface.pub_appendTextToLogFile(nombreLog, "\nFalló la consulta: " + qStockTalls.sql());
			}
			return false;
		}

		
		while(qStockTalls.next()) {
			referencia = qStockTalls.value("articulo.sku");
			debug("\n\nreferencia consulta tallas: "+referencia);
			//1. Miro si existe como referencia, si existe es una referencia
			// si no existe como referencia, me quedo con la primera parte hasta el último - y eso será la referencia y la ultima parte la talla.
			refAbanq = AQUtil.sqlSelect("articulos","referencia","referencia = '" + referencia + "'");
			debug("refAbanq1: "+refAbanq);
			if(refAbanq && refAbanq != "") {
				//es una referencia
				//stockAbanq = AQUtil.sqlSelect("stocks","disponible","codalmacen = '" + codAlmacen + "' AND referencia = '" + refAbanq + "'");

				var q = new AQSqlQuery;	
				q.setSelect("disponible, idstock");
				q.setFrom("stocks");
				q.setWhere("codalmacen = '" + codAlmacen + "' AND referencia = '" + refAbanq + "'");				
				if (!q.exec()){
					return;
				}  
				if(!q.first()) {
					continue;		
				}
				stockAbanq = q.value("disponible");
				idStock = q.value("idstock");
				debug("Es un articulo");
				debug("idStock: "+idStock);
				debug("stockAbanq: "+stockAbanq);

			} else {
				debug("no es articulo");
				datosArt = qStockTalls.value("articulo.sku").split("-");
				if(datosArt.length < 2) {
					debug("no hay guiones");
					continue;
				}
				refAbanq = "";
				for(var i=0;i<datosArt.length-1;i++) {
					if(refAbanq != "") {
						refAbanq = refAbanq + "-";
					}
					refAbanq = refAbanq + datosArt[i];				
				}
				debug("refAbanq: "+refAbanq);
				talla = datosArt[datosArt.length-1];
				debug("talla: "+talla);
				barcode = AQUtil.sqlSelect("atributosarticulos","barcode","referencia = '" + refAbanq + "' and talla = '" + talla + "'");
				debug("barcode: "+barcode);
				if(!barcode || barcode == "") {
					debug("no hay barcode");
					continue;
				}
				//stockAbanq = AQUtil.sqlSelect("stocks","disponible","codalmacen = '" + codAlmacen + "' AND barcode = '" + barcode + "'");

				var q = new AQSqlQuery;	
				q.setSelect("disponible, idstock");
				q.setFrom("stocks");
				q.setWhere("codalmacen = '" + codAlmacen + "' AND barcode = '" + barcode + "'");				
				if (!q.exec()){
					return;
				}  
				if(!q.first()) {
					continue;		
				}
				stockAbanq = q.value("disponible");
				idStock = q.value("idstock");

				debug("Es un barcode");
				debug("idStock: "+idStock);
				debug("stockAbanq: "+stockAbanq);

			}
			stockMgt = qStockTalls.value("stock.qty");
			if(!stockAbanq || stockAbanq < 0) {
				stockAbanq = 0;	
			} 
	
			//debug(qStockTalls.value("articulo.sku") + " - Abanq = " + stockAbanq + " - Magento = " + stockMgt);
			debug("stockMagento: "+stockMgt);
			if(stockMgt != stockAbanq) {				 
				if(!idStock) {
					continue;
				}
				debug("*******************************hay diferencia");
				var idMovimiento = AQUtil.sqlSelect("movistock","max(idmovimiento)","idstock = " + idStock + "and estado = 'HECHO'");		
				var fechaA = "";
				var fechaHoraA = "";
				
				var fechaHoraM = AQUtil.sqlSelect("sales_flat_order_item","max(updated_at)","sku = '" + qStockTalls.value("articulo.sku") + "'","sales_flat_order_item",conexion);				
				var fechaM = fechaHoraM.toString().left(10);			

				if(idMovimiento) {
					fechaA = AQUtil.sqlSelect("movistock","fechareal","idmovimiento = " + idMovimiento).toString().left(10);
					fechaHoraA = fechaA + " " + AQUtil.sqlSelect("movistock","horareal","idmovimiento = " + idMovimiento).toString().right(8);
				}

				if(stockMgt > stockAbanq) {
					debug("stock magento mayor al de abanq");
					if(corregir) {					
						if(stocksCorregir != "")
							stocksCorregir += ",";
						stocksCorregir += idStock;

						corregidos += "\n" + qStockTalls.value("articulo.sku") + " - Abanq = " + stockAbanq + "  " + fechaHoraA + " - Magento = " + stockMgt + "  " + fechaHoraM;
					}
					else {
						mayores += "\n" + qStockTalls.value("articulo.sku") + " - Abanq = " + stockAbanq + "  " + fechaHoraA + " - Magento = " + stockMgt + "  " + fechaHoraM;
					}
				}
				if(stockMgt < stockAbanq) {
					debug("stock magento menor al de abanq");
					if(corregir) {
						if(corregirNegativos){
							if(fechaA != fechaM) {
								if(stocksCorregir != ""){
									stocksCorregir += ",";
								}
								stocksCorregir += idStock;
								corregidos += "\n" + qStockTalls.value("articulo.sku") + " - Abanq = " + stockAbanq + "  " + fechaHoraA + " - Magento = " + stockMgt + "  " + fechaHoraM;
							}
							else {
								nocorregidos += "\n" + qStockTalls.value("articulo.sku") + " - Abanq = " + stockAbanq + "  " + fechaHoraA + " - Magento = " + stockMgt + "  " + fechaHoraM;
							}
						}
						else {
							nocorregidos += "\n" + qStockTalls.value("articulo.sku") + " - Abanq = " + stockAbanq + "  " + fechaHoraA + " - Magento = " + stockMgt + "  " + fechaHoraM;
						}
					}
					else {
						menores += "\n" + qStockTalls.value("articulo.sku") + " - Abanq = " + stockAbanq + "  " + fechaHoraA + " - Magento = " + stockMgt + "  " + fechaHoraM;
					}
				}
			
			}
		}
	}
	var curStock = new FLSqlCursor("stocks");	
	if(corregir && stocksCorregir != "") {
		var fecha = flfactppal.iface.pub_dameFechaActual();
		var hora = flfactppal.iface.pub_dameHoraActual();

		var arrStocks = stocksCorregir.split(",");
		for(var i = 0; i< arrStocks.length; i++) {
			debug("Arreglar stock: "+arrStocks[i]);
			curStock.select("idstock = " + arrStocks[i]);
			if (!curStock.first()) {
				continue;
  			}
			curStock.setModeAccess(curStock.Browse);
    		curStock.refreshBuffer();

    		flfactalma.iface.mgControlModStockWeb(curStock, true);
			//AQUtil.sqlUpdate("stocks","fechamod,horamod",fecha + "," + hora,"idstock = " + arrStocks[i]);
		}
	}

	if (!silent) {
		AQUtil.destroyProgressDialog();
	}	
	if(corregir) {
		if(corregidos != "" || nocorregidos != "") {
			msg = "Los siguientes artículos fueron CORREGIDOS:";
			msg += "\n\nCORREGIDOS\n" + corregidos + "\n\nNO CORREGIDOS\n" + nocorregidos;
		}
		else {
			msg = "No hay ariculos para corregir";
		}
	}
	else {
		if(mayores != "" || menores != "") {
			msg = "Los siguientes artículos tienen DIFERENCIA DE STOCK:";
			msg += "\n\nMENORES\n" + menores + "\n\nMAYORES (A CORREGIR)\n" + mayores;
		}
		else {
			msg = "No hay ariculos con diferencia de stock";
		}
	}
	if (!silent) {
		var dialog = new Dialog;
		dialog.okButtonText = sys.translate("Aceptar");
			
		var texto = new TextEdit;
		texto.text = msg;
		dialog.add( texto );

		dialog.exec();
	}
	else {
		debug(msg);
		flfactppal.iface.pub_appendTextToLogFile(nombreLog, "\n" + msg);
	}


	return true;
}

function oficial_actualizaSecuencias(oParam)
{
	var _i = this.iface;

	var dialog = new Dialog;
	dialog.okButtonText = sys.translate("Aceptar");
		
	var texto = new TextEdit;
	// Para asegurarnos de crear todas las secuencias podemos instalar los módulos en una BD en blanco y luego hacer esta consulta
	texto.text = "Pega aquí la lista de secuencias (select relname from pg_class where relname like '%_seq';)";
	dialog.add( texto );

	if (!dialog.exec()) {
		return false;
	}
	var aSecs = texto.text.split("\n");
	var aSec, tabla, campo, secuencia, sql, max;
	for (var s = 0; s < aSecs.length; s++) {
		secuencia = aSecs[s];
		if (secuencia == "") {
			continue;
		}
		debug("secuencia " + secuencia);
		aSec = secuencia.split("_");
		aSec.pop(); // "_sec";
		campo = aSec.pop();
		tabla = aSec.join("_");
		AQUtil.execSql("CREATE SEQUENCE IF NOT EXISTS " + secuencia);
		debug("secuencia " + secuencia + " tabla " + tabla + " campo " + campo);
		sql = "ALTER TABLE " + tabla + " ALTER COLUMN " + campo + " SET DEFAULT nextval('" + secuencia + "')";
		debug("Lanzando " + sql);
		if (!AQUtil.execSql(sql)) {
			return false;
		}
		max = AQUtil.sqlSelect(tabla, "MAX(" + campo + ")", "1 = 1");
		if (!max || max == 0 || isNaN(max)) {
			max = 1;
		}
		sql = "SELECT setval('" + secuencia + "', " + max + ")";
		debug("Lanzando " + sql);
		if (!AQUtil.execSql(sql)) {
			return false;
		}
	}
	return true;
}
//// OFICIAL /////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_definition elganso */
/////////////////////////////////////////////////////////////////
//// FUN ELGANSO ////////////////////////////////////////////////
function elganso_stocksBarcodeNulo(oParam)
{
// 	var _i = this.iface;
	var qStock = new AQSqlQuery;
	qStock.setSelect("idstock, barcode, referencia, codalmacen");
	qStock.setFrom("stocks");
	qStock.setWhere("barcode IS NULL");
	if (!qStock.exec()) {
		return false;
	}
	var idStock, idStockMin, minBarcode, referencia, codAlmacen;
	var p = 0;
	AQUtil.createProgressDialog(sys.translate("Revisando stock"), qStock.size());
	while (qStock.next()) {
		AQUtil.setProgress(p++);
		referencia = qStock.value("referencia");
		codAlmacen = qStock.value("codalmacen");
		idStock = qStock.value("idstock");
		minBarcode = AQUtil.sqlSelect("atributosarticulos", "MIN(barcode)", "referencia = '" + referencia + "'");
		if (!minBarcode) {
			debug("No encontrado barcode mínimo para artículo " + referencia);
		}
		idStockMin = AQUtil.sqlSelect("stocks", "idstock", "barcode = '" + minBarcode + "' AND codalmacen = '" + codAlmacen + "'");
		if (idStockMin) {
			var idSincro = AQUtil.sqlSelect("stocks", "idsincro", "idstock = " + idStockMin);
			if (!idSincro) {
				return false;
			}
			if (!AQUtil.execSql("UPDATE movistock SET idstock = " + idStockMin + ", barcode = '" + minBarcode + "' WHERE idstock = " + idStock)) {
				return false;
			}
			if (!AQUtil.execSql("UPDATE lineasregstocks SET idstock = " + idStockMin + ", idsincrostock = '" + idSincro + "' WHERE idstock = " + idStock)) {
				return false;
			}
			if (!AQUtil.execSql("DELETE FROM sincrostockstienda WHERE idstock = " + idStock)) {
				return false;
			}
			if (!AQUtil.execSql("DELETE FROM stocks WHERE idstock = " + idStock)) {
				return false;
			}
			if (!flfactalma.iface.actualizarStock(idStockMin)) {
				return false;
			}
		} else {
			var curSMin = new FLSqlCursor("stocks");
			curSMin.select("idstock = " + idStock);
			if (!curSMin.first()) {
				return false;
			}
			curSMin.setModeAccess(curSMin.Edit);
			curSMin.refreshBuffer();
			curSMin.setValueBuffer("barcode", minBarcode);
			curSMin.setNull("idsincro"); /// Fuerza su recálculo
			if (!curSMin.commitBuffer()) {
				return false;
			}
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elganso_ventasIncoherentes(oParam)
{
	var _i = this.iface;

	var qC = new AQSqlQuery;
	qC.setSelect("c.idtpv_comanda, c.total, SUM(lc.pvptotaliva), c.editable");
	qC.setFrom("tpv_comandas c LEFT OUTER JOIN tpv_lineascomanda lc ON c.idtpv_comanda = lc.idtpv_comanda LEFT OUTER JOIN tpv_pagoscomanda p ON c.idtpv_comanda = p.idtpv_comanda ");
	qC.setWhere("p.idtpv_comanda IS NULL GROUP BY c.idtpv_comanda, c.editable, c.total HAVING ABS(c.total - SUM(lc.pvptotaliva)) > 1");
	if (!qC.exec()) {
		return false;
	}
	var idComanda, editable;
	var p = 0;
	AQUtil.createProgressDialog(sys.translate("Revisando comandas incoherentes"), qC.size());
	while (qC.next()) {
		AQUtil.setProgress(p++);
		idComanda = qC.value("c.idtpv_comanda");
		editable = qC.value("c.editable");
		if (!editable) {
			if (!AQUtil.execSql("UPDATE tpv_comandas SET editable = true WHERE idtpv_comanda = " + idComanda)) {
				return false;
			}
		}
		if (!AQSql.del("tpv_lineascomanda", "idtpv_comanda = " + idComanda)) {
			return false;
		}
		if (!AQUtil.execSql("DELETE FROM tpv_comandas WHERE idtpv_comanda = " + idComanda)) {
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elganso_stocksIdSincroNulo(oParam)
{
	var _i = this.iface;
	
	var dialog = new Dialog;
	dialog.caption = "Introduzca el código de la tienda a corregir";
	dialog.okButtonText = sys.translate("OK");
	dialog.cancelButtonText = sys.translate("Cancelar");
	
	var codTienda = new LineEdit;
	codTienda.label = "Introduzca el código de la tienda a corregir";
	dialog.add(codTienda);
	
	if (!dialog.exec()) {
		return false;
	}
	
	var aTiendas = _i.dameTiendasXEsquema(codTienda.text, "VENTAS_TPV").split(",");
	
	_i.nombreLog_ = formtpv_tiendas.iface.dameNombreLog("REVISIONES_SINCRONULO_");
	var dirLog = flfact_tpv.iface.pub_valorDefectoTPV("dirlogs");

	if (!dirLog || dirLog == ""){
		dirLog = Dir.home;
	}

	var nombreFile;
	if (dirLog.endsWith("/")){
		nombreFile = dirLog + _i.nombreLog_;
	} else {
		nombreFile = dirLog + "/" + _i.nombreLog_;
	}
	if(!flfactppal.iface.pub_abreLogFile(_i.nombreLog_, nombreFile)){
		sys.infoMsgBox("No se ha creado el fichero del log de comprobación de stocks");
	}

	flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Ejecutando acciones de mantenimiento de registros.");
	flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Tiendas: " + aTiendas.join(","));

	var cx;
	for(var i = 0; i < aTiendas.length; i++) {
		cx = aTiendas[i];
		if (!_i.conectar(cx)) {
			debug("///////////////////No conecta");
	    	flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al conectar " + aTiendas[i]);
	    	continue;
	  	}
	  
		var q = new FLSqlQuery("", cx);
		q.setFrom("stocks");
		q.setSelect("referencia, barcode, codalmacen");
		q.setWhere("1 = 1 GROUP BY referencia, barcode, codalmacen having count(*) > 1");
		
		debug(q.sql());
		if(!q.exec()){
			return false;
		}
		
		var p = 0;
		AQUtil.createProgressDialog(sys.translate("Corrigiendo stocks con idsincro nulo (PARTE I)" ), q.size());
		
		var qIdStock = new FLSqlQuery("",cx);
		qIdStock.setFrom("stocks");
		qIdStock.setSelect("idstock");
			
		
		var qIdStockNull = new FLSqlQuery("",cx);
		qIdStockNull.setFrom("stocks");
		qIdStockNull.setSelect("idstock");
		
		while(q.next()){
			AQUtil.setProgress(p++);
			flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Referencia: " + q.value("referencia") + " Barcode: " + q.value("barcode") + " Almacén: " + q.value("codalmacen"));
			qIdStock.setWhere("referencia = '" + q.value("referencia") + "' AND barcode = '" + q.value("barcode") + "' AND codalmacen = '" + q.value("codalmacen") + "' AND idsincro IS NOT NULL");
			
			if(!qIdStock.exec()){
				return false;
			}

			if(!qIdStock.first()){
				continue;
			}
			
			qIdStockNull.setWhere("referencia = '" + q.value("referencia") + "' AND barcode = '" + q.value("barcode") + "' AND codalmacen = '" + q.value("codalmacen") + "' AND idsincro IS NULL");
			
			if(!qIdStockNull.exec()){
				return false;
			}
			if(!qIdStockNull.first()){
				continue;
			}
			var idStock = qIdStock.value(0);
			var idStockSincroNulo = qIdStockNull.value(0);
			
			AQUtil.execSql("UPDATE movistock SET idstock = " + idStock + " WHERE idstock = " + idStockSincroNulo, cx);
			AQUtil.execSql("UPDATE lineasregstocks SET idstock = " + idStock + " WHERE idstock = " + idStockSincroNulo, cx);
			AQUtil.execSql("DELETE FROM stocks WHERE idstock = " + idStockSincroNulo, cx);
			
		}
		
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		
		var qNulos = new FLSqlQuery("",cx);
		qNulos.setFrom("stocks");
		qNulos.setSelect("idstock, referencia, barcode, codalmacen");
		qNulos.setWhere("idsincro IS NULL");
		
		debug(qNulos.sql());
		if(!qNulos.exec()){
			return false;
		}
		
		p = 0;
		AQUtil.createProgressDialog(sys.translate("Corrigiendo stocks con idsincro nulo (PARTE II)" ), qNulos.size());
		
		while(qNulos.next()){
			AQUtil.setProgress(p++);
			flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "IDSTOCK NULO: " + qNulos.value("idstock"));
			AQUtil.execSql("UPDATE stocks SET idsincro = '" +  qNulos.value("codalmacen") + "_" +  qNulos.value("referencia") + "_" +  qNulos.value("barcode") + "' WHERE idstock = " + qNulos.value("idstock"), cx);
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elganso_totalesPagoArqueos(oParam)
{
	var _i = this.iface;

	var curA = new FLSqlCursor("tpv_arqueos");
	curA.select("abierta");
	var p = 0;
	var cF = formRecordtpv_arqueos.iface.pub_commonCalculateField;
	AQUtil.createProgressDialog(sys.translate("Corrigiendo stocks con idsincro nulo (PARTE I)" ), curA.size());
	while (curA.next()) {
		AQUtil.setProgress(p++);
		curA.setModeAccess(curA.Edit);
    curA.refreshBuffer();
		curA.setValueBuffer("pagosefectivo", cF("pagosefectivo", curA));
		curA.setValueBuffer("pagostarjeta", cF("pagostarjeta", curA));
		curA.setValueBuffer("pagosvale", cF("pagosvale", curA));
		curA.setValueBuffer("totalpagos", cF("totalpagos", curA));
		if (!curA.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	MessageBox.information(sys.translate("Arqueos revisados con éxito"), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton, "AbanQ");
	return true;
}

function elganso_eg_revisaEnviosCentral(oParam)
{
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	curL.select("codalmaorigen in ('ACEN', 'AZOU', 'AZKA') AND cantenviada = 0 AND cantrecibida <> 0 AND excentral = 'PTE' AND rxcentral = 'OK' AND estado = 'RECIBIDO'");
	var p = 0;
	AQUtil.createProgressDialog(sys.translate("Revisando envíos" ), curL.size());
	while (curL.next()) {
		AQUtil.setProgress(p++);
		curL.setModeAccess(curL.Edit);
    curL.refreshBuffer();
		curL.setValueBuffer("cantenviada", curL.valueBuffer("cantrecibida"));
		if (curL.valueBuffer("cantpteenvio") != curL.valueBuffer("cantenviada")) {
			curL.setValueBuffer("cerradoex", true);
		}
		curL.setValueBuffer("cantpterecibir", formRecordtpv_enviostx.iface.pub_commonCalculateField("cantpterecibir", curL));
		curL.setValueBuffer("excentral", formRecordtpv_enviostx.iface.pub_commonCalculateField("excentral", curL));
		curL.setValueBuffer("extienda", formRecordtpv_enviostx.iface.pub_commonCalculateField("extienda", curL));
		if (!curL.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elganso_eg_revisaLineasMultiPtes(oParam)
{
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	curL.select("idlinea IN (SELECT l.idlinea FROM tpv_lineasmultitransstock l inner join movistock ms on l.idlinea = ms.idlineatto where ms.estado = 'PTE' and l.cantenviada = (ms.cantidad*-1))");
	var p = 0;
	AQUtil.createProgressDialog(sys.translate("Revisando envíos" ), curL.size());
	while (curL.next()) {
		AQUtil.setProgress(p++);
		curL.setModeAccess(curL.Browse);
    curL.refreshBuffer();
		if (!flfactalma.iface.borrarEstructuraMTOrigen(curL)) {
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTOrigen(curL)) {
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elganso_eg_revisaLineasMultiFechaNull(oParam)
{
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	curL.select("codalmaorigen in ('ACEN', 'AZOU', 'AZKA') AND excentral = 'OK' AND fechaex IS NULL");
	var p = 0;
	AQUtil.createProgressDialog(sys.translate("Revisando envíos" ), curL.size());
	while (curL.next()) {
		AQUtil.setProgress(p++);
		curL.setModeAccess(curL.Edit);
    curL.refreshBuffer();
		curL.setValueBuffer("fechaex", AQUtil.quickSqlSelect("tpv_multitransstock", "fecha", "codmultitransstock = '" + curL.valueBuffer("codmultitransstock") + "'"));
		curL.setValueBuffer("horaex", "00:00:01");
		if (!curL.commitBuffer()) {
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elganso_eg_ejecutarConsulta(listaTiendas, consulta)
{
	var _i = this.iface;
	var _mT = formtpv_tiendas.iface;
	var _fTpv = flfact_tpv.iface;

	var nombreLog = _mT.dameNombreLog("CONSULTA");
	_i.nombreLog_ = flfactalma.iface.pub_ponLogName(nombreLog);
	var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
	
	if(!dirLog || dirLog == "")
		dirLog = Dir.home;
	if(dirLog.endsWith("/"))
		_i.nombreFile_ = dirLog + nombreLog;
	else
		_i.nombreFile_ = dirLog + "/" + nombreLog;
	if(!flfactppal.iface.pub_abreLogFile(_i.nombreLog_, _i.nombreFile_))
		sys.infoMsgBox("No se ha creado el fichero del log de la consulta.");
	
	if(!listaTiendas || listaTiendas == "" || !consulta || consulta == "") {
		listaTiendas = Input.getText(sys.translate("Lista de tiendas separada por comas y sin espacios"));
		if (!listaTiendas)
			return false;
		consulta = Input.getText(sys.translate("Consulta"));
	}
	listaTiendas = _i.dameTiendasXEsquema(listaTiendas, "eg_ejecutarConsulta");

	if(!listaTiendas || listaTiendas == "")
		return false;
	if (!consulta || consulta == "")
		return false;
	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Consulta \n\n" + consulta + "\n\nEn tiendas: " + listaTiendas + "\n\n"))
		sys.infoMsgBox("Consulta en tiendas: " + listaTiendas);

	_i.silent_ = true;
	_i.mgr_ = aqApp.db().manager();
	_i.aCx_ = [];
	
	var aT = listaTiendas.split(",");
	aT.sort();
	var codTienda;
	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Conectando..."))
		sys.infoMsgBox("Conectando...");

	for (var i = 0; i < aT.length; i++) {
		codTienda = aT[i];
		_i.aCx_.push(codTienda);
	}

	_i.lanzarConsulta(consulta);
	return true;
}

function elganso_lanzarConsulta(consulta)
{
	var _i = this.iface;
	var _mT = formtpv_tiendas.iface;

	var h = new Date;
	_i.dateInicio_ = h;
	var inicio = AQUtil.dateAMDtoDMA(h);
	h = new Date;
	inicio += "  " + h.toString().right(8);
	
	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Lanzando consulta en tiendas "))
		sys.infoMsgBox(h.toString() + ": Lanzando consulta en tiendas ");
	if (!_i.aCx_ || _i.aCx_.length == 0) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No hay ninguna tienda con conexión abierta"))
			sys.infoMsgBox("No hay ninguna tienda con conexión abierta");
		return;
	}
	var pull = [], codTP;
	var aTiendasOK = [];
	var aTiendasKO = [];
	var aTiendasSC = [];

	for (var i = 0; i < _i.aCx_.length; i++) {
		codTP = _i.aCx_[i];
		pull[codTP] = new Object;
		pull[codTP]["nombre"] = _i.aCx_[i];
		pull[codTP]["ok"] = false;
		pull[codTP]["intentos"] = 0;
	}
	var curTienda = new FLSqlCursor("tpv_tiendas");
	var codTienda, codTiendaAnt = false;
	var okTotal = false;
	var maxIntentos = 3, msEspera = 60 * 1000; /// 1min

	var consultaAux;

	while (!okTotal) {
		okTotal = true;
		curTienda.select("codtienda IN ('" + _i.aCx_.join("', '") + "') ORDER BY codtienda");
		while (curTienda.next()) {
			codTienda = curTienda.valueBuffer("codtienda");
			if (pull[codTienda]["ok"]) {
				continue;
			}
			if (codTiendaAnt == codTienda) {
				var t1 = new Date;
				var t2;
				if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Esperando " + msEspera + "ms para volver a conectar a " + codTienda + "..."))
					sys.infoMsgBox("Esperando " + msEspera + "ms para volver a conectar a " + codTienda + "...");
				do {
					t2 = new Date;
				} while (t2.getTime() - t1.getTime() < msEspera);
			}
			codTiendaAnt = codTienda;
			if (!_i.conectarMT(codTienda, true)) {
				pull[codTienda]["intentos"]++;
				if (pull[codTienda]["intentos"] >= maxIntentos) {
					pull[codTienda]["ok"] = true;
					aTiendasSC.push(codTienda);
				} else {
					okTotal = false;
				}
				if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "NO conectado a tienda " + codTienda))
					sys.infoMsgBox("NO conectado a tienda " + codTienda);
				continue;
			}
			h = new Date;
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Lanzando consulta en tienda " + codTienda))
				sys.infoMsgBox(h.toString() + ": Lanzando consulta en tienda " + codTienda);

			consultaAux = consulta;

			var regExp = new RegExp("####");
			consultaAux = consultaAux.replace(regExp, codTienda);
			
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Consulta en tienda " + consultaAux))
				sys.infoMsgBox(h.toString() + ": Consulta en tienda " + consultaAux);

			if (AQUtil.execSql(consultaAux, codTienda)) {
				pull[codTienda]["ok"] = true;
				h = new Date;
				if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Tienda " + codTienda + " lanzado con éxito"))
					sys.infoMsgBox(h.toString() + ": Tienda " + codTienda + " lanzado con éxito");
				aTiendasOK.push(codTienda);
			}
			else {
				pull[codTienda]["intentos"]++;
				if (pull[codTienda]["intentos"] >= maxIntentos) {
					aTiendasKO.push(codTienda);
					pull[codTienda]["ok"] = true;
				} else {
					okTotal = false;
				}
				h = new Date;
				if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Fallo en la consulta de tienda " + codTienda))
					sys.infoMsgBox(h.toString() + ": Fallo en la consulta de tienda " + codTienda);
			}
			if (!_mT.desconectar(codTienda, true)) {
				h = new Date;
				if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Fallo en la desconexión de la tienda " + codTienda))
					sys.infoMsgBox(h.toString() + ": Fallo en la desconexión de la tienda " + codTienda);
			}
		}
	}

	var sOk = aTiendasOK.join(", ");
	var sKo = aTiendasKO.join(", ");
	var sSc = aTiendasSC.join(", ");
	
	var msg = "";
	msg += (aTiendasOK.length > 0) ? ("\n" + sys.translate("Se ha lanzado correctamente en " + aTiendasOK.length + " tiendas: " + sOk + ".")) : "";
	msg += (aTiendasKO.length > 0) ? ("\n" + sys.translate("NO se ha lanzado en " + aTiendasKO.length + " tiendas: " + sKo + ".")): "";
	msg += (aTiendasSC.length > 0) ? ("\n" + sys.translate("NO se pudo establecer la conexión con " + aTiendasSC.length + " tiendas: " + sSc + ".")) : "";
	
	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, msg))
		sys.infoMsgBox(msg);
}

//Funcion conectar de MasterTiendas
function elganso_conectarMT(codTienda, silent)
{
	var _i = this.iface;
	
	var cxTienda = codTienda;
	var dbTienda = AQSql.database(cxTienda);
	
	if (dbTienda.connectionName() == cxTienda && dbTienda.isOpen()) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Conexión con " + codTienda + " ya establecida")){
			if(silent){
				debug("Conexión con " + codTienda + " ya establecida");
			}
		}
		return true;
	}
	
	var cursor = codTienda == "central" ? new FLSqlCursor("factalma_general") : new FLSqlCursor("tpv_tiendas");
	var select = codTienda == "central" ? "1 = 1" : "codtienda = '" + codTienda + "'";
	cursor.select(select);
	cursor.setModeAccess(cursor.Browse);
	cursor.refreshBuffer();
	
	if (!cursor.first()) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "La tienda " + codTienda + " no existe")){
			debug("La tienda " + codTienda + " no existe");
		}
		return false;
	}
	
	var driver = cursor.valueBuffer("driver");
	var nombreBD = codTienda == "central" ? cursor.valueBuffer("basedatos") : cursor.valueBuffer("nombrebd");
	var usuario = cursor.valueBuffer("usuario");
	var host = cursor.valueBuffer("servidor");
	var puerto = cursor.valueBuffer("puerto");
	var password = cursor.valueBuffer("contrasena");
	
	var tipoDriver;
	if (sys.nameDriver().search("PSQL") > -1) {
		tipoDriver = "PostgreSQL";
	} else {
		tipoDriver = "MySQL";
	}
	var msg;
	if (host == sys.nameHost() && nombreBD == sys.nameBD() && driver == tipoDriver) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "La tienda " + codTienda + " no existe")){
			debug("La tienda " + codTienda + " no existe");
		}
		return false;
	}
	
	if (!driver || !nombreBD || !usuario || !host || !password) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Debe indicar los datos de conexión de la tienda " + codTienda + ".")){
			debug("Debe indicar los datos de conexión de la tienda " + codTienda + ".");
		}
		return false;
	}
	
	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Conectando a " + codTienda)){
		if(silent){
			debug("Conectando a " + codTienda);
		}
	}
	
	var sTimeOut = 10;
	var masParamCon = "connect_timeout=" + sTimeOut.toString();
	masParamCon += silent ? ";nogui" : "";
	
	try{
		if (!AQSql.addDatabase(driver, nombreBD, usuario, password, host, puerto, codTienda, masParamCon)) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al abrir la conexión de " + codTienda)){
				debug("Error al abrir la conexión de " + codTienda);
			}
			return false;
		}
	}catch (e) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al abrir la conexión de " + codTienda)){
			debug("Error al abrir la conexión de " + codTienda);
		}
		return false;
	}
	
	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Conectado a " + codTienda)){
		if(silent){
			debug("Conectado a " + codTienda);
		}
	}
	return true;
	
}

function elganso_eg_activaFacturasPtesTienda(oParam)
{
	var _i = this.iface;
	var listaTiendas = Input.getText(sys.translate("Lista de tiendas separada por comas y sin espacios"));
	if (!listaTiendas) {
		return;
	}
	
	var _f = formtpv_tiendas.iface;
	var aT = listaTiendas.split(",");
	var msg = "";
	AQUtil.createProgressDialog(sys.translate("Conectando a tiendas" ), aT.length);
	var codTienda;
	for (var i = 0; i < aT.length; i++) {
		AQUtil.setProgress(i);
		codTienda = aT[i];
		AQUtil.setLabelText(sys.translate("Conectando a %1").arg(codTienda));
		if (!_f.pub_conectar(codTienda, false)) {
			continue;
		}
		var msgTienda = _i.activaFacturasPtesTienda(codTienda);
debug("msgTienda " + codTienda + " = " + msgTienda);
		if (!msgTienda) {
			msg += sys.translate("Error al procesar tienda %1").arg(codTienda);
			continue;
		}
		msg += msgTienda;
		AQUtil.setLabelText(sys.translate("Desconectando de %1").arg(codTienda));
		if (!_f.pub_desconectar(codTienda, false)) {
			continue;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	sys.infoMsgBox(msg)
	return true;
}

function elganso_activaFacturasPtesTienda(codTienda)
{
	var _i = this.iface;
	var codEjercicio = flfactppal.iface.pub_ejercicioActual();
	var codP = AQUtil.sqlSelect("tpv_tiendas", "prefijocod", "codtienda = '" + codTienda + "'");
	if (!codP) {
		return false;
	}
	var msg = "\n" + sys.translate("Tienda %1").arg(codTienda);
	var numero = 1;
	var prefijo = codEjercicio + codP.toString();
	var q = new AQSqlQuery;
	q.setFrom("facturascli");
	q.setSelect("codigo, numero");
	q.setWhere("codejercicio = '" + codEjercicio + "' AND codserie = '" + codP + "' ORDER BY numero");
	if (!q.exec()) {
		return false;
	}
	var lista = [];
	while (q.next()) {
debug(q.value("codigo"));
		while (numero < q.value("numero")) {
			lista.push(prefijo + flfactppal.iface.pub_cerosIzquierda(numero, 6));
			numero ++;
		}
		if (numero == q.value("numero")) {
debug("Encontrado " + numero);
			numero ++;
		}
	}
debug("Lista de " + lista.length + " elementos");
	for (var i = 0; i < lista.length; i++) {
		var idComanda = AQUtil.sqlSelect("tpv_comandas", "idtpv_comanda", "egcodfactura = '" + lista[i] + "'", "tpv_comandas", codTienda);
		if (!idComanda) {
			msg += ("\n" + sys.translate("ERROR: Factura %1 no encontrada en tienda").arg(lista[i]));
		} else {
			if (!AQSql.update("tpv_comandas", ["ptesincrofactura"], [true], "idtpv_comanda = " + idComanda, codTienda)) {
				msg += ("\n" + sys.translate("ERROR: Factura %1. Error al poner pendiente de factiración en tienda").arg(lista[i]));
			} else {
				msg += ("\n" + sys.translate("OK: Factura %1 pendiente de facturar").arg(lista[i]));
			}
		}
	}
	
	var codigo = prefijo + flfactppal.iface.pub_cerosIzquierda(numero, 6);
debug("Codigo++ " + codigo);
	var idComanda = AQUtil.sqlSelect("tpv_comandas", "idtpv_comanda", "egcodfactura = '" + codigo + "'", "tpv_comandas", codTienda);
debug("idComanda " + idComanda);
	while (idComanda) {
		if (!AQSql.update("tpv_comandas", ["ptesincrofactura"], [true], "idtpv_comanda = " + idComanda, codTienda)) {
			msg += ("\n" + sys.translate("ERROR: Factura %1. Error al poner pendiente de factiración en tienda").arg(codigo));
		} else {
			msg += ("\n" + sys.translate("OK: Factura %1 pendiente de facturar").arg(codigo));
		}
debug("msg " + msg);
		numero++;
		codigo = prefijo + flfactppal.iface.pub_cerosIzquierda(numero, 6);
debug("Codigo++ " + codigo);
		idComanda = AQUtil.sqlSelect("tpv_comandas", "idtpv_comanda", "egcodfactura = '" + codigo + "'", "tpv_comandas", codTienda);
debug("idComanda " + idComanda);
	}
	return msg;
}

function elganso_eg_reconstruyeStock(oParam)
{
	var _iF = flfactalma.iface;
	var codAlmacen = Input.getText(sys.translate("Código de almacén a reconstruir"));
	if (!codAlmacen) {
		return false;
	}
	if (!AQUtil.sqlSelect("almacenes", "codalmacen", "codalmacen = '" + codAlmacen + "'")) {
		MessageBox.warning(sys.translate("scripts", "El almacén %1 no existe").arg(codAlmacen), MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton, "AbanQ");
		return false;
	}
	if (!AQUtil.execSql("DELETE FROM movistock WHERE (idlineaco IS NOT NULL OR idlineatto IS NOT NULL OR idlineattd IS NOT NULL) AND idstock IN (SELECT idstock FROM stocks WHERE codalmacen = '" + codAlmacen + "')")) {
		return false;
	}
	
	var curStock = new FLSqlCursor("stocks");
	curStock.select("codalmacen = '" + codAlmacen + "'");
	AQUtil.createProgressDialog(sys.translate("Revisando última regularización de stocks..."), curStock.size());
	var paso = 0;
	var canUltReg;
	while (curStock.next()) {
		AQUtil.setProgress(++paso);
		curStock.setModeAccess(curStock.Edit);
		curStock.refreshBuffer();
		curStock.setValueBuffer("fechaultreg", formRecordregstocks.iface.pub_commonCalculateField("fechaultreg", curStock));
		curStock.setValueBuffer("horaultreg", formRecordregstocks.iface.pub_commonCalculateField("horaultreg", curStock));
		canUltReg = formRecordregstocks.iface.pub_commonCalculateField("cantidadultreg", curStock);
		if (!canUltReg || isNaN(canUltReg)) {
			canUltReg = 0;
		}
		curStock.setValueBuffer("cantidadultreg", canUltReg);
		if (!curStock.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	sys.processEvents();
	
	var curL = new FLSqlCursor("tpv_lineascomanda");
	curL.select("idtpv_comanda IN (SELECT idtpv_comanda FROM tpv_comandas WHERE codalmacen = '" + codAlmacen + "')");
	var p = 0;
	AQUtil.createProgressDialog(sys.translate("Revisando ventas" ), curL.size());
	while (curL.next()) {
		AQUtil.setProgress(p++);
		curL.setModeAccess(curL.Browse);
		curL.refreshBuffer();
		if (!_iF.generarEstructura(curL)) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	sys.processEvents();
	
	var curL1 = new FLSqlCursor("tpv_lineasmultitransstock");
	curL1.select("codalmadestino = '" + codAlmacen + "'");
	var p = 0;
	AQUtil.createProgressDialog(sys.translate("Revisando transferencias de llegada" ), curL1.size());
	while (curL1.next()) {
		AQUtil.setProgress(p++);
		curL1.setModeAccess(curL1.Browse);
		curL1.refreshBuffer();
		if (!_iF.generarEstructuraMTDestino(curL1)) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			oParam.errorMsg = sys.translate("Error en tr llegada").arg(funcion);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	sys.processEvents();
	
	var curL2 = new FLSqlCursor("tpv_lineasmultitransstock");
	curL2.select("codalmaorigen = '" + codAlmacen + "'");
	var p = 0;
	AQUtil.createProgressDialog(sys.translate("Revisando transferencias de salida" ), curL2.size());
	while (curL2.next()) {
		AQUtil.setProgress(p++);
		curL2.setModeAccess(curL2.Browse);
		curL2.refreshBuffer();
		if (!_iF.generarEstructuraMTOrigen(curL2)) {
			oParam.errorMsg = sys.translate("Error en tr salida").arg(funcion);
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elganso_eg_actualizaClientes(oParam)
{
	var sep = "ð"
	var f = FileDialog.getOpenFileName("*.*");
	if (!f) {
		return false;
	}
	
	
	var file = new File(f);
	file.open(File.ReadOnly);
  
  var steps = 0;
  while (!file.eof) {
    file.readLine();
    ++steps;
  }
  file.close();

	file.open(File.ReadOnly);
    
	/// Para saltar la primera línea del archivo que es la cabecera.
  var head = file.readLine().split(sep);
	
	AQUtil.createProgressDialog(sys.translate("Cargando clientes..."), steps);
	var l;
	var c;
	var p = 0, nuevos = 0, modificados = 0, esNuevo;
	var codCliente, cifNif, telefono1, telefono2, observaciones;
	var curCliente = new FLSqlCursor("clientes");
	while(!file.eof) {
		AQUtil.setProgress(p++);
		l = file.readLine();
		c = l.split(sep);
		cifNif = c[16];
debug("codCliente " + codCliente);
		codCliente = AQUtil.sqlSelect("clientes", "codcliente", "cifnif = '" + cifNif + "'");
		esNuevo = !codCliente;
debug("codCliente " + codCliente);
		if (codCliente) {
			curCliente.select("codcliente = '" + codCliente + "'");
			if (!curCliente.first()) {
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}
			curCliente.setModeAccess(curCliente.Edit);
			curCliente.refreshBuffer();
		} else {
			curCliente.setModeAccess(curCliente.Insert);
			curCliente.refreshBuffer();
			curCliente.setValueBuffer("codcliente", formRecordclientes.iface.pub_obtenerCodigoCliente(curCliente));
		}
		curCliente.setValueBuffer("cifnif", cifNif);
		curCliente.setValueBuffer("contacto", c[0]);
		curCliente.setValueBuffer("multimarca", (c[5] == "t"));
		curCliente.setValueBuffer("eg_codcliente", c[12]);
		curCliente.setValueBuffer("email", c[15]);
		curCliente.setValueBuffer("codagente", c[22]);
		curCliente.setValueBuffer("regimeniva", c[23]);
		curCliente.setValueBuffer("codserie", c[29] == "" ? "A" : c[29]);
		curCliente.setValueBuffer("nombre", c[30]);
		curCliente.setValueBuffer("nombrecomercial", c[30]);
		curCliente.setValueBuffer("tipoidfiscal", c[32]);
		telefono1 = c[33];
		telefono2 = c[34];
		observaciones = "";
		if (telefono1 && telefono1 != "" && telefono1.length > 30) {
			observaciones += " " + telefono1;
			telefono1 = telefono1.left(30);
		}
		if (telefono2 && telefono2 != "" && telefono2.length > 30) {
			observaciones += " " + telefono2;
			telefono2 = telefono2.left(30);
		}
		curCliente.setValueBuffer("telefono1", telefono1);
		curCliente.setValueBuffer("telefono2", telefono2);
		curCliente.setValueBuffer("observaciones", curCliente.valueBuffer("observaciones") + observaciones);
		curCliente.setValueBuffer("coddivisa", c[35]);
		if (esNuevo) {
			curCliente.setValueBuffer("codsubcuenta", formRecordclientes.iface.calcularSubcuentaCli(curCliente, 8));
		}
		if (!curCliente.commitBuffer()) {
			return false;
		}
		if (esNuevo) {
			nuevos++;
		} else {
			modificados++;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	sys.infoMsgBox(sys.translate("%1 clientes nuevos, %2 modificados").arg(nuevos).arg(modificados));
	return true;
}



function elganso_eg_actualizaDirClientes(oParam)
{
	var sep = "ð"
	var f = FileDialog.getOpenFileName("*.*");
	if (!f) {
		return false;
	}
	
	if (!AQUtil.execSql("delete from dirclientes where codcliente in (select codcliente from clientes where eg_codcliente <> 0)")) {
		return false;
	}
	
	var file = new File(f);
	file.open(File.ReadOnly);
  
  var steps = 0;
  while (!file.eof) {
    file.readLine();
    ++steps;
  }
  file.close();

	file.open(File.ReadOnly);
    
	/// Para saltar la primera línea del archivo que es la cabecera.
  var head = file.readLine().split(sep);
	
	AQUtil.createProgressDialog(sys.translate("Cargando direcciones de clientes..."), steps);
	var l;
	var c;
	var p = 0;
	var codCliente, egCodCliente;
	var curCliente = new FLSqlCursor("dirclientes");
	while(!file.eof) {
		AQUtil.setProgress(p++);
		l = file.readLine();
		c = l.split(sep);
		egCodCliente = c[4];
		codCliente = AQUtil.sqlSelect("clientes", "codcliente", "eg_codcliente = " + egCodCliente);
		if (!codCliente ) {
			warnMsgBox("No se ha encontrado el egcodcliente " + egCodCliente);
			return false;
		}
		curCliente.setModeAccess(curCliente.Insert);
		curCliente.refreshBuffer();
		curCliente.setValueBuffer("codcliente", codCliente);
		curCliente.setValueBuffer("direccion", c[0]);
		curCliente.setValueBuffer("domenvio", (c[1] == "t"));
		curCliente.setValueBuffer("descripcion", c[3]);
		curCliente.setValueBuffer("codpais", c[5]);
		curCliente.setValueBuffer("domfacturacion", (c[6] == "t"));
		curCliente.setValueBuffer("provincia", c[7]);
		curCliente.setValueBuffer("apartado", c[8]);
		curCliente.setValueBuffer("codpostal", c[9]);
		curCliente.setValueBuffer("ciudad", c[11]);
		if (!curCliente.commitBuffer()) {
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	sys.infoMsgBox(sys.translate("%1 direcciones nuevas").arg(p));
	return true;
}

function elganso_eg_recalcularSaldoVales(oParam)
{
	var _i = this.iface;
	var curC = new FLSqlCursor("tpv_comandas")
	curC.select("saldopendiente <> 0");
	AQUtil.createProgressDialog(sys.translate("Actualizando saldos..."), curC.size());
	var p = 0, s;
	while (curC.next()) {
		AQUtil.setProgress(p++);
		curC.setModeAccess(curC.Edit);
		curC.refreshBuffer();
		s = formRecordtpv_comandas.iface.pub_commonCalculateField("saldoconsumido", curC);
debug("Comanda " + curC.valueBuffer("codigo") + " " + curC.valueBuffer("saldoconsumido") + " =? " + s);
		if (curC.valueBuffer("saldoconsumido") == s) {
			continue;
		}
		if (!flfactalma.iface.controlSincroDevolTiendas(curC)) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
		curC.setValueBuffer("saldoconsumido", s);
		curC.setValueBuffer("saldopendiente", formRecordtpv_comandas.iface.pub_commonCalculateField("saldopendiente", curC));
		curC.setValueBuffer("ptesaldo", false);
		if (!curC.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}
	
	
function elganso_eg_generaBarcodeKits(oParam)
{
	var _f = formRecordarticulos.iface;
	_f.ultimoBarcode_ = false;
  _f.calculoBarcode_ = flfactalma.iface.pub_valorDefectoAlmacen("calculobarcode");
  _f.digitosBarcode_ = flfactalma.iface.pub_valorDefectoAlmacen("digitosbarcode");
  _f.prefijoBarcode_ = flfactalma.iface.pub_valorDefectoAlmacen("prefijobarcode");
	
	var _i = this.iface;
	var curC = new FLSqlCursor("articulos")
	curC.select("stockcomp");
	AQUtil.createProgressDialog(sys.translate("Generando barcodes para kits..."), curC.size());
	var p = 0, s;
	while (curC.next()) {
		AQUtil.setProgress(p++);
		curC.setModeAccess(curC.Edit);
		curC.refreshBuffer();
debug("Articulo " + curC.valueBuffer("referencia"));
		if (!formRecordarticulos.iface.creaBarcodeKit(curC)) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elganso_eg_recalculaPreciosPedAlb(oParam)
{
	var cFP = formRecordlineaspedidoscli.iface.pub_commonCalculateField;
	
	var curP = new FLSqlCursor("pedidoscli");
	var curL = new FLSqlCursor("lineaspedidoscli");
	var p = 0;
	curP.select("codejercicio = '2013'");
	AQUtil.createProgressDialog(sys.translate("Actualizando pedidos..."), curP.size());
	while (curP.next()) {
		AQUtil.setProgress(p++);
		curP.setModeAccess(curP.Edit);
		curP.refreshBuffer();
		
		curL.select("idpedido = " + curP.valueBuffer("idpedido"));
		while (curL.next()) {
			curL.setModeAccess(curL.Edit);
			curL.refreshBuffer();
			curL.setValueBuffer("codimpuesto", cFP("codimpuesto", curL));
			curL.setValueBuffer("iva", cFP("iva", curL));
			curL.setValueBuffer("recargo", cFP("recargo", curL));
			if (!formpedidoscli.iface.datosPrecioLineaPedidoImp(curL, false)) {
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}
			if (!curL.commitBuffer()) {
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}
		}
		formpresupuestoscli.iface.curPedido = curP;
		if (!formpresupuestoscli.iface.totalesPedido()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
		if (!curP.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	
	var cFA = formRecordlineasalbaranescli.iface.pub_commonCalculateField;
	var curA = new FLSqlCursor("albaranescli");
	var curLA = new FLSqlCursor("lineasalbaranescli");
	p = 0;
	curA.select("codejercicio = '2013'");
	AQUtil.createProgressDialog(sys.translate("Actualizando pedidos..."), curA.size());
	while (curA.next()) {
		AQUtil.setProgress(p++);
		curA.setModeAccess(curA.Edit);
		curA.refreshBuffer();
		
		curLA.select("idalbaran = " + curA.valueBuffer("idalbaran"));
		while (curLA.next()) {
			curLA.setModeAccess(curLA.Edit);
			curLA.refreshBuffer();
			curLA.setValueBuffer("codimpuesto", cFA("codimpuesto", curLA));
			curLA.setValueBuffer("iva", cFA("iva", curLA));
			curLA.setValueBuffer("recargo", cFA("recargo", curLA));
			
			
			curLA.setValueBuffer("ivaincluido", cFA("ivaincluido", curLA));
			if (curLA.valueBuffer("ivaincluido")) {
				curLA.setValueBuffer("pvpunitarioiva", cFA("pvpunitarioiva", curLA));
				curLA.setValueBuffer("pvpunitario", cFA("pvpunitario2", curLA));
				
				curLA.setValueBuffer("pvpsindtoiva", cFA("pvpsindtoiva2", curLA));
				curLA.setValueBuffer("pvpsindto", cFA("pvpsindto2", curLA));
				curLA.setValueBuffer("pvptotaliva", cFA("pvptotaliva2", curLA));
				curLA.setValueBuffer("pvptotal", cFA("pvptotal2", curLA));
			} else {
				curLA.setValueBuffer("pvpunitario", cFA("pvpunitario", curLA));
				curLA.setValueBuffer("pvpunitarioiva", cFA("pvpunitarioiva2", curLA));
				
				curLA.setValueBuffer("pvpsindto", cFA("pvpsindto", curLA));
				curLA.setValueBuffer("pvpsindtoiva", cFA("pvpsindtoiva2", curLA));
				curLA.setValueBuffer("pvptotal", cFA("pvptotal", curLA));
				curLA.setValueBuffer("pvptotaliva", cFA("pvptotaliva2", curLA));
			}
			if (!curLA.commitBuffer()) {
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}
		}
		formpedidoscli.iface.curAlbaran = curA;
		if (!formpedidoscli.iface.totalesAlbaran()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
		if (!curA.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	
	return true;
}

function elganso_init() 
{
	var _i = this.iface;
	_i.__init();
	_i.funciones.push(["stocksBarcodeNulo", "Revisión de stocks con barcode nulo"]);
	_i.funciones.push(["ventasIncoherentes", "Borrar ventas incoherentes"]);
	_i.funciones.push(["stocksIdSincroNulo", "Corregir registros en stocks con idsincro nulo"]);
	_i.funciones.push(["totalesPagoArqueos", "Totalizar pagos de arqueo en efectivo, tarjeta y vale"]);
	_i.funciones.push(["eg_revisaEnviosCentral", "Marca como enviados aquellos envíos de ACEN, AZOU, AZKA que figuran como recibidos pero no como enviados"]);
	_i.funciones.push(["eg_revisaLineasMultiPtes", "Recalcula los movimientos de stock para líneas que los tienen pendientes y los deben tener hechos (envío)"]);
	_i.funciones.push(["eg_revisaLineasMultiFechaNull", "Recalcula los movimientos de stock para líneas de multitrans que tienen la fecha a null (pone la fecha de transferencia como fecha de envio"]);
	_i.funciones.push(["eg_reconstruyeStock", "Elimina y regenera los movimientos de stock de un almacén. Válido para tiendas. Sólo regenera movimientos originados por ventas TPV y multitransferencias de stock"]);
	_i.funciones.push(["eg_ejecutarConsulta", "Ejecuta una consulta SQL sobre una lista de tiendas"]);
	_i.funciones.push(["eg_activaFacturasPtesTienda", "Reactiva el indicador de pendiente de factura para las facturas que no han sido sincronizadas con la central en el ejercicio actual y la lista de tiendas indicada"]);
	_i.funciones.push(["eg_actualizaClientes", "Actualiza clientes desde fichero"]);
	_i.funciones.push(["eg_actualizaDirClientes", "Actualiza direcciones de clientes desde fichero"]);
	_i.funciones.push(["eg_recalcularSaldoVales", "Actualiza el saldo de los vales vivos y los marca para ser sincronizados con todas las tiendas"]);
	_i.funciones.push(["eg_generaBarcodeKits", "Genera barcodes para los kits que no lo tienen"]);
	_i.funciones.push(["eg_recalculaPreciosPedAlb", "Recalcula precios pedidos y albaranes 2013"]);
	_i.funciones.push(["eg_publicaArticulosWeb", "Publica los artículos activos y de tipo Producto en ambas webs"]);
	_i.funciones.push(["eg_calculaCosteProduccion", "Calcula los costes de materiales y producción"]);
	_i.funciones.push(["eg_generarArqueosWeb", "Genera arqueos para las ventas de la web"]);
	_i.funciones.push(["eg_marcaViajesRx", "Marca como recibidos los viajes de una lista"]);
	_i.funciones.push(["revisaEstadoLineasTransRx", "Revisa estado de líneas de transferencia de stock con check de cerrado activo"]);
	_i.funciones.push(["cargaStockWeb", "Carga los stocks del almacén AWEB"]);
	_i.funciones.push(["cargaStockMex", "Carga los stocks iniciales de Mexico"]);	
	_i.funciones.push(["arreglaColonias", "Elimina una de las dos colonias creadas y une los stocks"]);
	_i.funciones.push(["sincronizaStockTienda", "Pone pendientes de sincro todos los stocks de las demás tiendas para una lista de tiendas "]);				
	_i.funciones.push(["egAsignarPuntosVentasWebSinPuntos", "Asigna puntos a ventas web que no los tienen"]);
	_i.funciones.push(["egGeneraMovistockPacks", "Asigna movimientos a los packs que no los tenían antes de instalar la actualización"]);
	_i.funciones.push(["egGeneraMovistockHuerfanos", "Asigna movimientos a los documentos que no los tienen ya generados"]);
	_i.funciones.push(["egGeneraMovistockRegStock", "Asigna movimientos a los packs asociados a regularizaciones de stock que no los tenían antes de instalar la actualización"]);
	_i.funciones.push(["egEnviarMailPedidosWeb", "Envía los pedidos web que aún no han sido enviados."]);
	_i.funciones.push(["egRecalcularPreciosPedidos", "Recalcula los precios en los pedidos erróneos."]);
	_i.funciones.push(["egTarjetasParaEncuesta", "Genera un fichero de datos para las encuestas de satisfacción de clientes con tarjeta de fidelización"]);
	_i.funciones.push(["egFicheroTCuento", "Genera un fichero de ventas por tramo horario para la empresa T-Cuento"]);
	_i.funciones.push(["egGeneraBarcodesArticulo", "Genera para un artículo tantos barcodes como le indiquemos."]);

	// Se quita esta función porque con la firma SAFT ya no es necesario generar las facturas en la tienda
	//_i.funciones.push(["egHuecosPortugal", "Revisa los códigos de factura para evitar dejar huecos."]);

	_i.funciones.push(["egGenerarRecogidas", "Genera las recogidas en tienda pendientes a partir de pedidos web"]);
	_i.funciones.push(["diagnostico", "Diagnóstico de la situación actual de la base de datos"]);
	_i.funciones.push(["limpieza", "Limpieza de registros antiguos e innecesarios."]);
	_i.funciones.push(["egInventariosBorrados", "Busca y corrige inventarios en central que no están en la tienda"]);
	_i.funciones.push(["egCheckStocks", "Busca todas las diferencias de stocks entre central y una tienda y las vuelca a un log"]);
	_i.funciones.push(["egCheckViajes", "Busca todas las diferencias de viajes entre central y una tienda y las vuelca a un log"]);
	_i.funciones.push(["egCheckPuntos", "Busca todas las diferencias de puntos entre central y una tienda y las vuelca a un log"]);
	_i.funciones.push(["serieMYaAlmacenAMAY", "Busca y cambia de almacén los pedidos y albaranes de cliente que tienen serie MY pero no tienen almacén AMAY"]);
	_i.funciones.push(["reprocesaPacksAZPR", "Reprocesa los stocks de líneas de albarán de proveedor del almacén AZPR por tema de packs"]);
	_i.funciones.push(["dameFechaActual", "Obtiene la fecha actual a partir de la fecha del servidor"]);
	_i.funciones.push(["egPonTiendaJornadas", "Actualiza y formatea las horas trabajadas y en pausa de las jornadas."]);
	_i.funciones.push(["egActualizaTiempoJornadas", "Actualiza y formatea las horas trabajadas y en pausa de las jornadas."]);
	_i.funciones.push(["egActualizaCantidadPlanProd", "Actualiza la cantidad total en los planes de producción."]);
	_i.funciones.push(["egActualizaCantRecibidaPlanProd", "Actualiza la cantidad recibida en los planes de producción."]);
	_i.funciones.push(["egCheckSincroClientesyPedidos", "Revisa si ha habido fallos en la sincronización de cliente y pedidos de la web."]);
	_i.funciones.push(["egSincronizaFicherosTiendas", "Instala los ficheros modificados en las tiendas."]);
	_i.funciones.push(["egSincronizaFicherosCentral", "Instala los ficheros modificados en las central."]);
	_i.funciones.push(["egMantenimientoRegistros", "Ejecuta acciones de mantenimiento en las tiendas tales como borrado de referencias, barcodes..."]);
	_i.funciones.push(["egCorregirLineasViajesSinMovimiento", "Corrige las líneas de viaje sin movimientos de stock."]);
	_i.funciones.push(["egMarcaViajesCancelados", "Marca como canceladas todas las líneas EN TRANSITO de una lista de viajes"]);
	_i.funciones.push(["egCheckLineasVentaVariosMovs", "Comprueba si hay líneas con dos o más movimientos de stock y los recalcula"]);
	_i.funciones.push(["egComprobarPedidosNoSincronizados", "Busca los pedidos de magento que no han sido sincronizados"]);
	_i.funciones.push(["egRegularizarStockT14", "Pone a cero un subconjunto de artículos de la temporada 14. No válido para outlets, Mexico y Chile"]);
	_i.funciones.push(["egCrearSeriesTiendaEnCentral", "Añadir las series de las tiendas en la central para el ejercicio que se seleccione y no estén."]);
	_i.funciones.push(["egCheckLineasViajeTransito", "Comprueba que las líneas en tránsito de un viaje generan el movimiento pte de recibir"]);
	//_i.funciones.push(["egGeneraFacturasPortugal", "Generar facturas para ventas de Portugal"]);
	_i.funciones.push(["egRellenarHuecosVentasActurus", "Rellenar huecos en las ventas de la empresa Acturus Capital"]);
	_i.funciones.push(["egComprobarFacturasPortugal", "Comprueba que se han generado y firmado correctamente las facturas de portugal"]);
	_i.funciones.push(["egComprobarPartidasCC", "Comprueba generación de partidas por centro de coste"]);
	_i.funciones.push(["egGenerarAsientoDevolValesArqueo", "Genera los asientos de devolucion de vales de los arqueos a partir del 1 de enero de 2016"]);
	_i.funciones.push(["egCorregirPagosTarjetaArqueo", "Corrije el valor de pagostarjeta en arqueos"]);
	_i.funciones.push(["egCorregirArqueoPagos", "Corrige los arqueos que estén en el intervalo y envía sus pagos a los arqueos que corresponden (por fecha)"]);
	_i.funciones.push(["egBorrarFacturasArqueos", "Borra las facturas asociadas a los arqueos de 2016"]);
	_i.funciones.push(["egBorrarFacturaRectVentas", "Borra las facturas rectificativas asociadas a ventas de 2016"]);
	_i.funciones.push(["egCerrarRecepcionViajesTransitoCentral", "Cierra las recepciones en tránsito para los almacenes de AZPR, AZKA, ACEN y ATAR"]);
	_i.funciones.push(["egCargaProveedoresCsv", "Importar proveedores desde fichero csv"]);
	_i.funciones.push(["egComprobarVentasTpvWeb", "Comprobar generación de ventas web"]);
	_i.funciones.push(["incluirGastosEnvioWebVentasFacturas", "Incluye los gastos de envío en ventas creadas desde pedidos web (albaranes) y en sus facturas relacionadas "]);
	_i.funciones.push(["recalcularTotalesProduccion", "Recalcular los totales de los pedidos de producción(Precio coste)"]);
	_i.funciones.push(["recalcularCosteMedioArticulos", "Recalcular el coste medio de todos los articulos"]);
	_i.funciones.push(["egCorregirPartidasCentrosCoste", "Corregir centro de coste en partidas que no lo tienen"]);
	_i.funciones.push(["recalcularLineasFacturasVentas", "Recalcular líneas de facturas de comandas."]);
	_i.funciones.push(["egCorregirVentasWeb", "Corregir facturas web con iva incorrecto"]);
	_i.funciones.push(["recalcularStocks20161203", "recalcular Stocks 20161203 Regularizaciones"]);
	_i.funciones.push(["recalcularStocks", "Recalcular Stocks"]);
	_i.funciones.push(["generaVentasPruebas", "Genera ventas para hacer pruebas"]);


}

function elganso_conectar(codTienda)
{
	var _i = this.iface;
	
	var cxTienda = codTienda;
  var dbTienda = AQSql.database(cxTienda);

	if (dbTienda.connectionName() == cxTienda && dbTienda.isOpen()) {
		msg = sys.translate("Conexión con %1 ya establecida").arg(codTienda);
		debug(msg);
		return true;
	}
  
	var cursor = new FLSqlCursor("tpv_tiendas");
	cursor.select("codtienda = '" + codTienda + "'");
	cursor.setModeAccess(cursor.Browse);
	cursor.refreshBuffer();
	
	if (!cursor.first()) {
		msg = sys.translate("La tienda %1 no existe").arg(codTienda);
		MessageBox.warning(msg, MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton, "AbanQ");
		return false;
	}
	
	var driver = cursor.valueBuffer("driver");
	var nombreBD = cursor.valueBuffer("nombrebd");
	var usuario = cursor.valueBuffer("usuario");
	var host = cursor.valueBuffer("servidor");
	var puerto = cursor.valueBuffer("puerto");
	var password = cursor.valueBuffer("contrasena");

	var tipoDriver;
	if (sys.nameDriver().search("PSQL") > -1) {
		tipoDriver = "PostgreSQL";
	} else {
		tipoDriver = "MySQL";
	}
	var msg;
	if (host == sys.nameHost() && nombreBD == sys.nameBD() && driver == tipoDriver) {
		msg = sys.translate("Tienda %1. Los datos de conexión son los de la presente base de datos\nDebe indicar los datos de conexión de la base de datos remota").arg(codTienda);
		MessageBox.warning(msg, MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton, "AbanQ");
		return false;
	}

	if (!driver || !nombreBD || !usuario || !host || !password) {
		msg = sys.translate("Debe indicar los datos de conexión de la tienda %1.").arg(codTienda);
 		MessageBox.warning(msg, MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton, "AbanQ");
		return false;
	}

	debug("Conectando a " + codTienda);

  var sTimeOut = 10;
  var masParamCon = "connect_timeout=" + sTimeOut.toString();
  try {
    if (!AQSql.addDatabase(driver, nombreBD, usuario, password, host, puerto, codTienda, masParamCon)) {
			MessageBox.warning(msg, MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton, "AbanQ");
      return false;
    }
  } catch (e) {
    msg = sys.translate("Error al abrir la conexión" + e);
    MessageBox.warning(msg, MessageBox.Ok, MessageBox.NoButton, MessageBox.NoButton, "AbanQ");
    return false;
  }
  
	debug("Conectado a " + codTienda);
	return true;
}

function elganso_eg_publicaArticulosWeb(oParam)
{
	var q = new AQSqlQuery;
	q.setSelect("referencia");
	q.setFrom("articulos");
	q.setWhere("activo AND egtipo = 'Producto'");
	if (!q.exec()) {
		return false;
	}
	AQUtil.createProgressDialog(sys.translate("Publicando artículos..."), q.size());
	var p = 0;
	AQUtil.setProgress(p++);
		
	if (!AQUtil.execSql("UPDATE articulos SET mgvisibleweb = true WHERE activo AND egtipo = 'Producto'")) {
		return false;
	}
	var referencia;
	while (q.next()) {
		referencia = q.value("referencia");
		AQUtil.setProgress(p++);
		if (!AQUtil.execSql("INSERT INTO mg_artwebsite (codwebsite, referencia, activo) VALUES ('base', '" + referencia + "', true)")) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
		if (!AQUtil.execSql("INSERT INTO mg_artwebsite (codwebsite, referencia, activo) VALUES ('intl', '" + referencia + "', true)")) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elganso_eg_calculaCosteProduccion(oParam)
{
	var curA = new FLSqlCursor("articulos");
	curA.setActivatedCommitActions(false);
	curA.setActivatedCheckIntegrity(false);
	curA.select("1 = 1");
	AQUtil.createProgressDialog(sys.translate("Actualizando costes..."), curA.size());
	var p = 0;
	AQUtil.setProgress(p++);
		
	while (curA.next()) {
		AQUtil.setProgress(p++);
		curA.setModeAccess(curA.Edit);
		curA.refreshBuffer();
		curA.setValueBuffer("egcostemat", formRecordarticulos.iface.pub_commonCalculateField("egcostemat", curA));
		curA.setValueBuffer("costeproduccion", formRecordarticulos.iface.pub_commonCalculateField("costeproduccion", curA));
		if (!curA.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elganso_eg_generarArqueosWeb()
{	
	return flfact_tpv.iface.pub_crearArqueosVentasWeb();
}

function elganso_eg_marcaViajesRx()
{
  var _i = this.iface;
  var listaV = Input.getText( "Lista de viajes separados por comas: " );
  if (!listaV) {
    return;
  }
  var arrayV = listaV.split(",");
  AQUtil.createProgressDialog(sys.translate("Marcando viajer recibidos"), arrayV.length);
  var p = 0;
  var oParam = new Object;
  oParam.errorMsg = sys.translate("Error al dar por recibido el viaje");
  var f = new Function("oParam", "return formmt_procesos.iface.marcaViajeRx(oParam)");
  for (var i = 0; i < arrayV.length; i++) {
    AQUtil.setProgress(p++);
    oParam.idViaje = arrayV[i];
    if (!sys.runTransaction(f, oParam)) {
      sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
      return false;
    }
  }
  sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
  return true;
}

function elganso_marcaViajeRx(oParam)
{
  var idViaje = oParam.idViaje;
  var curLV = new FLSqlCursor("tpv_lineasmultitransstock");
  curLV.select("idviajemultitrans = '" + idViaje + "'");
  while (curLV.next()) {
    curLV.setModeAccess(curLV.Edit);
    curLV.refreshBuffer();
    curLV.setValueBuffer("cantrecibida", curLV.valueBuffer("cantpterecibir"));
    curLV.setValueBuffer("rxcentral", formRecordtpv_recepcionestx.iface.pub_commonCalculateField("rxcentral", curLV));
    curLV.setValueBuffer("rxtienda", formRecordtpv_recepcionestx.iface.pub_commonCalculateField("rxtienda", curLV));
    curLV.setValueBuffer("estado", formRecordtpv_recepcionestx.iface.pub_commonCalculateField("estado", curLV));
    curLV.setValueBuffer("codagenterx", "0045");
    if (!curLV.commitBuffer()) {
      return false;
    }
  }
  return true;
}

function elganso_cargaStockWeb(oParam)
{
	var codAlmacen = "AWEB";
	var ahora = new Date;
	var fechaReg = ahora.toString().left(10);
	var hora = ahora.toString().right(8);
	var motivo = sys.translate("Carga masiva día %1 a las %2").arg(fechaReg).arg(hora);
	var filename = FileDialog.getOpenFileName( "*.csv", sys.translate("Seleccione el fichero .csv de stocks web"));
	if (!filename) {
		return false;
	}
	var fileImport = new File(filename);
	
	try {
		fileImport.open(File.ReadOnly);
	} catch(e) {
		sys.warnMsgBox(sys.translate("Error al abrir el fichero:\n%1").arg(filename));
		return false;
	}
	
	var steps = 0;
	while (!fileImport.eof) {
		fileImport.readLine();
		++steps;
	}
	fileImport.close();
	fileImport.open(File.ReadOnly);
	
	var head = fileImport.readLine();
	var rec;
	var step = 0, p = 0, sep = "|";
	
	var curStock = new FLSqlCursor("stocks");
	var curRS = new FLSqlCursor("lineasregstocks");
	var referencia, talla, barcode, articulo, idStock;
	var aDatosArt = new Object;
	
	//	cur.setActivatedCheckIntegrity(false);
	
	var aDatos, line;
	AQUtil.createProgressDialog(sys.translate("Cargando stocks"), steps);
	debug("leyendo");
	while (!fileImport.eof) {
		++step;
		AQUtil.setProgress(step);
		debug("leyendo " + step);
		var line = fileImport.readLine();
		if (!line) {
			AQUtil.destroyProgressDialog();
			oParam.errorMsg = sys.translate("Error al leer la línea %1:\n%2").arg(step).arg(line);
			return false;
		}
		aDatos = line.split(sep);
		if (!aDatos || aDatos.length != 2) {
			AQUtil.destroyProgressDialog();
			oParam.errorMsg = sys.translate("Error al separar los datos de la línea %1:\n%2").arg(step).arg(line);
			return false;
		}
		articulo = aDatos[0].split("-");
		if (articulo.length == 1) {
			talla = "TU";
		} else {
			talla = articulo[1];
		}
		referencia = articulo[0].toUpperCase();
		barcode = AQUtil.sqlSelect("atributosarticulos", "barcode", "UPPER(referencia) = '" + referencia + "' AND talla = '" + talla + "'");
		if (!barcode) {
			continue;
		}
		aDatosArt.referencia = referencia;
		aDatosArt.barcode = barcode;
		idStock = flfactalma.iface.pub_dameIdStock(codAlmacen, aDatosArt);
		if (!idStock) {
			AQUtil.destroyProgressDialog();
			oParam.errorMsg = sys.translate("No se ha podido crear el stock para %1 - %2").arg(referencia).arg(talla);
			return false;
		}
		
		curStock.select("idstock = " + idStock);
		if (!curStock.first()) {
			AQUtil.destroyProgressDialog();
			oParam.errorMsg = sys.translate("No se ha encontrado el stock para %1 - %2").arg(referencia).arg(talla);
			return false;
		}
		
		curStock.setModeAccess(curStock.Edit);
		curStock.refreshBuffer();
		cantidad = aDatos[1];
		
		curStock.setValueBuffer("disponible", cantidad);
		curStock.setValueBuffer("cantidad", cantidad);
		 
		curRS.setModeAccess(curRS.Insert);
		curRS.refreshBuffer();
		curRS.setValueBuffer("idstock", idStock);
		curRS.setValueBuffer("fecha", fechaReg);
		curRS.setValueBuffer("hora", hora);
		curRS.setValueBuffer("cantidadini", 0);
		curRS.setValueBuffer("cantidadfin", cantidad);
		curRS.setValueBuffer("motivo", motivo);
		if (!curRS.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		curStock.setValueBuffer("fechaultreg", fechaReg);
		curStock.setValueBuffer("horaultreg", hora);
		curStock.setValueBuffer("cantidadultreg", cantidad);

		if (!curStock.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		
	}
	AQUtil.destroyProgressDialog();
	
	return true;
}

function elganso_revisaEstadoLineasTransRx()
{
	var step = 0;
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	curL.select("cerradorx");
	
	AQUtil.createProgressDialog(sys.translate("Revisando líneas"), curL.size());
	while (curL.next()) {
		++step;
		AQUtil.setProgress(step);
		curL.setModeAccess(curL.Edit);
		curL.refreshBuffer();
		curL.setValueBuffer("estado", formRecordtpv_lineasmultitransstock.iface.pub_commonCalculateField("estado", curL));
		if (!curL.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	return true;
}

function elganso_cargaStockMex(oParam)
{
	var codAlmacen = "AANT";
	var codAlbaran = Input.getText(sys.translate("Albarán"));
	var ahora = new Date;
	var fechaReg = ahora.toString().left(10);
	var hora = ahora.toString().right(8);
	var motivo = sys.translate("Carga albarán %1 día %1 a las %2").arg(codAlbaran).arg(fechaReg).arg(hora);
	
	var curStock = new FLSqlCursor("stocks");
	var curRS = new FLSqlCursor("lineasregstocks");
	var referencia, talla, barcode, articulo, idStock;
	var aDatosArt = new Object;
	
	var idAlbaran = AQUtil.sqlSelect("albaranescli", "idalbaran", "codigo = '" + codAlbaran + "'");
	if (!idAlbaran) {
		oParam.errorMsg = sys.translate("No hay albarán");
		return false;
	}
	var qLinea = new AQSqlQuery;
	qLinea.setSelect("referencia, barcode, SUM(cantidad)");
	qLinea.setFrom("lineasalbaranescli");
	qLinea.setWhere("idalbaran = " + idAlbaran + " GROUP BY referencia, barcode");
	if (!qLinea.exec()) {
		return false;
	}
	
	var steps = qLinea.size(), step = 0;
	var aDatos;
	AQUtil.createProgressDialog(sys.translate("Cargando stocks"), steps);
	debug("leyendo");
	while (qLinea.next()) {
		++step;
		AQUtil.setProgress(step);
		debug("leyendo " + step);
		
		referencia = qLinea.value("referencia");
		barcode = qLinea.value("barcode");;
		if (!barcode) {
			continue;
		}
		aDatosArt.referencia = referencia;
		aDatosArt.barcode = barcode;
		idStock = flfactalma.iface.pub_dameIdStock(codAlmacen, aDatosArt);
		if (!idStock) {
			AQUtil.destroyProgressDialog();
			oParam.errorMsg = sys.translate("No se ha podido crear el stock para %1 - %2").arg(referencia).arg(talla);
			return false;
		}
		
		curStock.select("idstock = " + idStock);
		if (!curStock.first()) {
			AQUtil.destroyProgressDialog();
			oParam.errorMsg = sys.translate("No se ha encontrado el stock para %1 - %2").arg(referencia).arg(talla);
			return false;
		}
		
		curStock.setModeAccess(curStock.Edit);
		curStock.refreshBuffer();
		cantidad = qLinea.value("SUM(cantidad)");
		
		curStock.setValueBuffer("disponible", cantidad);
		curStock.setValueBuffer("cantidad", cantidad);
		 
		curRS.setModeAccess(curRS.Insert);
		curRS.refreshBuffer();
		curRS.setValueBuffer("idstock", idStock);
		curRS.setValueBuffer("fecha", fechaReg);
		curRS.setValueBuffer("hora", hora);
		curRS.setValueBuffer("cantidadini", 0);
		curRS.setValueBuffer("cantidadfin", cantidad);
		curRS.setValueBuffer("motivo", motivo);
		if (!curRS.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		curStock.setValueBuffer("fechaultreg", fechaReg);
		curStock.setValueBuffer("horaultreg", hora);
		curStock.setValueBuffer("cantidadultreg", cantidad);

		if (!curStock.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		
	}
	AQUtil.destroyProgressDialog();
	
	return true;
}

function elganso_arreglaColonias(oParam)
{
	var qStock = new AQSqlQuery;
	qStock.setSelect("idstock, codalmacen");
	qStock.setFrom("stocks");
	qStock.setWhere("barcode = '8433613427865' ORDER BY codalmacen");
	if (!qStock.exec()) {
		return false;
	}
	AQUtil.createProgressDialog(sys.translate("Reiniciando saldos tarjetas empleados"), qStock.size());
	var curStock = new FLSqlCursor("stocks");
	var idStockBueno, idStockMalo, sql;
	var p = 0;
	while (qStock.next()) {
		AQUtil.setLabelText(sys.translate("Actualizando colonias para almacén %1").arg(qStock.value("codalmacen")));
		AQUtil.setProgress(p++);
		idStockMalo = qStock.value("idstock");
		curStock.select("barcode = '8433613245728' AND codalmacen = '" + qStock.value("codalmacen") + "'");
		if (!curStock.first()) {
			sys.warnMsgBox(sys.translate("No existe el stock para el barcode 8433613245728 y el almacén %1").arg(qStock.value("codalmacen")));
			continue;
		}
		curStock.setModeAccess(curStock.Edit);
		curStock.refreshBuffer();
		idStockBueno = curStock.valueBuffer("idstock");
		sql = "UPDATE movistock SET idstock = " + idStockBueno + " WHERE idstock = " + idStockMalo;
		if (!AQUtil.execSql(sql)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Error al ejecutar la consulta SQL:\n%1").arg(sql));
			return false;
		}
		sql = "UPDATE lineasregstocks SET idstock = " + idStockBueno + " WHERE idstock = " + idStockMalo;
		if (!AQUtil.execSql(sql)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Error al ejecutar la consulta SQL:\n%1").arg(sql));
			return false;
		}
		curStock.setValueBuffer("fechaultreg", formRecordregstocks.iface.pub_commonCalculateField("fechaultreg", curStock));
		curStock.setValueBuffer("horaultreg", formRecordregstocks.iface.pub_commonCalculateField("horaultreg", curStock));
		curStock.setValueBuffer("cantidadultreg", formRecordregstocks.iface.pub_commonCalculateField("cantidadultreg", curStock));
		curStock.setValueBuffer("cantidad", formRecordregstocks.iface.pub_commonCalculateField("cantidad", curStock));
		curStock.setValueBuffer("disponible", formRecordregstocks.iface.pub_commonCalculateField("disponible", curStock));
		if (!curStock.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	
	/// UPDATE atributosarticulos SET talla = 'TU' WHERE barcode = '8433613245728';
	/// DELETE FROM atributosarticulos WHERE barcode = '8433613427865';
	/// DELETE FROM stocks WHERE barcode = '8433613427865';
	
	return true;
}

function elganso_sincronizaStockTienda(oParam)
{

	var listaTiendas = Input.getText(sys.translate("Lista de tiendas separada por comas y sin espacios"));
	if (!listaTiendas) {
		return;
	}

	var aTiendas = listaTiendas.split(",");
	var p;
debug("listaTiendas.length " + aTiendas.length);
	for (var i = 0; i < aTiendas.length; i++) {
	debug("i " + i);
		var q = new AQSqlQuery;
		q.setSelect("s.idstock");
		q.setFrom("tpv_tiendas t INNER JOIN stocks s ON t.codalmacen = s.codalmacen LEFT OUTER JOIN sincrostockstienda sst ON (t.codtienda = sst.codtienda AND s.idstock = sst.idstock) INNER JOIN almacenes a ON s.codalmacen = a.codalmacen INNER JOIN articulos ar ON s.referencia = ar.referencia");
		q.setWhere("a.egtipo = 'Producto'  AND t.codtienda <> '" + aTiendas[i] + "' AND ar.sevende AND sst.idsincrost IS NULL");
		if (!q.exec()) {
			return false;
		}
		AQUtil.createProgressDialog(sys.translate("Encargando sincronizaciones para la tienda %1").arg(aTiendas[i]), q.size());
		p = 0;
		while (q.next()) {
			AQUtil.setProgress(++p);
			if (!AQUtil.execSql("INSERT INTO sincrostockstienda (idstock, codtienda, sincronizado) VALUES (" + q.value("s.idstock") + ", '" + aTiendas[i] + "', false)")) {
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
		AQUtil.destroyProgressDialog();
	}
	return true;
}


function elganso_egAsignarPuntosVentasWebSinPuntos(oParam)
{
	var q = new AQSqlQuery;
	q.setSelect("c.codigo, tp.codtarjetapuntos");
	q.setFrom("tpv_comandas c INNER JOIN albaranescli a ON c.codigo = a.codigo INNER JOIN tpv_tarjetaspuntos tp ON a.mg_email = tp.email AND tp.fechaalta <= a.fecha LEFT OUTER JOIN tpv_movpuntos mp ON c.codigo = mp.operacion");
	q.setWhere("c.codtienda = 'AWEB' AND mp.idmovpuntos IS NULL ORDER BY c.codigo");
	if (!q.exec()) {
		return;
	}
	
	AQUtil.createProgressDialog(sys.translate("Generando puntos"), q.size());
	var p = 0;
	var curComanda = new FLSqlCursor("tpv_comandas");
	var codComanda;
	while (q.next()) {
		codComanda = q.value("c.codigo");
		if (!AQUtil.execSql("UPDATE tpv_comandas SET editable = true WHERE codigo = '" + codComanda + "'")) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		curComanda.select("codigo = '" + codComanda + "'");
		if (!curComanda.first()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		curComanda.setModeAccess(curComanda.Edit);
		curComanda.refreshBuffer();
		curComanda.setValueBuffer("codtarjetapuntos", q.value("tp.codtarjetapuntos"));
		AQUtil.setProgress(++p);
		AQUtil.setLabelText(sys.translate("Asignando puntos a %1").arg(codComanda));
		if (!curComanda.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		if (!AQUtil.execSql("UPDATE tpv_comandas SET editable = false WHERE codigo = '" + codComanda + "'")) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		if (!AQUtil.execSql("UPDATE tpv_movpuntos SET codtienda = 'ACEN' WHERE operacion = '" + codComanda + "'")) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();		

	return true;
}

function elganso_egGeneraMovistockPacks()
{
	var q = new AQSqlQuery;
	var cur = new FLSqlCursor;
	var p;
	
	/// Pedidos de cliente
	q.setSelect("l.idlinea, l.referencia, p.codalmacen");
	q.setFrom("lineaspedidoscli l inner join pedidoscli p on p.idpedido = l.idpedido inner join articulos a on l.referencia = a.referencia LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineapc AND l.referencia = ms.referencia");
	q.setWhere("a.stockcomp AND ms.idmovimiento IS NULL");
	if (!q.exec()) {
		return false;
	}
	cur = new FLSqlCursor("lineaspedidoscli");
	AQUtil.createProgressDialog(sys.translate("Revisando pedidos"), q.size());
	p = 0;
	while (q.next()) {
		AQUtil.setProgress(++p);
		if (!flfactalma.iface.almacenControlaPacks(q.value("p.codalmacen"))) {
			continue;
		}
		cur.select("idlinea = " + q.value("l.idlinea"));
		if (!cur.first()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		cur.setModeAccess(cur.Browse);
		cur.refreshBuffer();
		if (!flfactalma.articomp_generarEstructura(cur)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	
	/// Pedidos prov
	q.setSelect("l.idlinea, l.referencia, p.codalmacen");
	q.setFrom("lineaspedidosprov l inner join pedidosprov p on p.idpedido = l.idpedido inner join articulos a on l.referencia = a.referencia LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineapp AND l.referencia = ms.referencia");
	q.setWhere("a.stockcomp AND ms.idmovimiento IS NULL");
	debug(q.sql());
	if (!q.exec()) {
		return false;
	}
	cur = new FLSqlCursor("lineaspedidosprov");
	AQUtil.createProgressDialog(sys.translate("Revisando pedidos proveedor"), q.size());
	p = 0;
	while (q.next()) {
		AQUtil.setProgress(++p);
		if (!flfactalma.iface.almacenControlaPacks(q.value("p.codalmacen"))) {
			continue;
		}
		cur.select("idlinea = " + q.value("l.idlinea"));
		if (!cur.first()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		cur.setModeAccess(cur.Browse);
		cur.refreshBuffer();
		if (!flfactalma.articomp_generarEstructura(cur)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	
	/// Pedidos de cliente
	q.setSelect("l.idlinea, l.referencia, p.codalmacen");
	q.setFrom("lineasalbaranescli l inner join albaranescli p on p.idalbaran = l.idalbaran inner join articulos a on l.referencia = a.referencia LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineaac AND l.referencia = ms.referencia");
	q.setWhere("a.stockcomp AND ms.idmovimiento IS NULL");
	if (!q.exec()) {
		return false;
	}
	cur = new FLSqlCursor("lineasalbaranescli");
	AQUtil.createProgressDialog(sys.translate("Revisando albaranes de cliente"), q.size());
	p = 0;
	while (q.next()) {
		AQUtil.setProgress(++p);
		if (!flfactalma.iface.almacenControlaPacks(q.value("p.codalmacen"))) {
			continue;
		}
		cur.select("idlinea = " + q.value("l.idlinea"));
		if (!cur.first()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		cur.setModeAccess(cur.Browse);
		cur.refreshBuffer();
		if (!flfactalma.articomp_generarEstructura(cur)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	
	/// Albaranes prov
	q.setSelect("l.idlinea, l.referencia, p.codalmacen");
	q.setFrom("lineasalbaranesprov l inner join albaranesprov p on p.idalbaran = l.idalbaran inner join articulos a on l.referencia = a.referencia LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineaap AND l.referencia = ms.referencia");
	q.setWhere("a.stockcomp AND ms.idmovimiento IS NULL");
	debug(q.sql());
	if (!q.exec()) {
		return false;
	}
	cur = new FLSqlCursor("lineasalbaranesprov");
	AQUtil.createProgressDialog(sys.translate("Revisando albaranes proveedor"), q.size());
	p = 0;
	while (q.next()) {
		AQUtil.setProgress(++p);
		if (!flfactalma.iface.almacenControlaPacks(q.value("p.codalmacen"))) {
			continue;
		}
		cur.select("idlinea = " + q.value("l.idlinea"));
		if (!cur.first()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		cur.setModeAccess(cur.Browse);
		cur.refreshBuffer();
		if (!flfactalma.articomp_generarEstructura(cur)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	
	/// Multitrans origen
	q.setSelect("l.idlinea, l.referencia, l.codalmaorigen, l.codalmadestino");
	q.setFrom("tpv_lineasmultitransstock l INNER JOIN articulos a on l.referencia = a.referencia LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineatto AND l.referencia = ms.referencia");
	q.setWhere("a.stockcomp AND ms.idmovimiento IS NULL");
	debug(q.sql());
	if (!q.exec()) {
		return false;
	}
	cur = new FLSqlCursor("tpv_lineasmultitransstock");
	AQUtil.createProgressDialog(sys.translate("Revisando multitransorigen"), q.size());
	p = 0;
	while (q.next()) {
		AQUtil.setProgress(++p);
		if (!flfactalma.iface.almacenControlaPacks(q.value("l.codalmaorigen"))) {
			continue;
		}
		cur.select("idlinea = " + q.value("l.idlinea"));
		if (!cur.first()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		cur.setModeAccess(cur.Browse);
		cur.refreshBuffer();
		if (!flfactalma.multitpv_generarEstructuraMTOrigen(cur)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();

	/// Multitrans destino
	q.setSelect("l.idlinea, l.referencia, l.codalmadestino");
	q.setFrom("tpv_lineasmultitransstock l INNER JOIN articulos a on l.referencia = a.referencia LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineattd AND l.referencia = ms.referencia");
	q.setWhere("a.stockcomp AND ms.idmovimiento IS NULL");
	debug(q.sql());
	if (!q.exec()) {
		return false;
	}
	cur = new FLSqlCursor("tpv_lineasmultitransstock");
	AQUtil.createProgressDialog(sys.translate("Revisando multitrans destino"), q.size());
	p = 0;
	while (q.next()) {
		AQUtil.setProgress(++p);
		if (!flfactalma.iface.almacenControlaPacks(q.value("l.codalmadestino"))) {
			continue;
		}
		cur.select("idlinea = " + q.value("l.idlinea"));
		if (!cur.first()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		cur.setModeAccess(cur.Browse);
		cur.refreshBuffer();
		if (!flfactalma.multitpv_generarEstructuraMTDestino(cur)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();

	return true;
}

function elganso_egGeneraMovistockRegStock()
{
	var q = new AQSqlQuery;
	var cur = new FLSqlCursor;
	var p;
	
	q.setSelect("l.id, s.referencia, s.codalmacen");
	q.setFrom("lineasregstocks l inner join stocks s on s.idstock = l.idstock inner join articulos a on s.referencia = a.referencia LEFT OUTER JOIN movistock ms ON l.id = ms.egidlinears AND s.referencia = ms.referencia");
	q.setWhere("a.stockcomp AND ms.idmovimiento IS NULL");
	if (!q.exec()) {
		return false;
	}
	cur = new FLSqlCursor("lineasregstocks");
	AQUtil.createProgressDialog(sys.translate("Revisando líneas de regularización de stock"), q.size());
	p = 0;
	while (q.next()) {
		AQUtil.setProgress(++p);
		cur.select("id = " + q.value("l.id"));
		if (!cur.first()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		cur.setModeAccess(cur.Browse);
		cur.refreshBuffer();
		if (!flfactalma.iface.generaEstructuraPackRegStock(cur)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	return true;
}

function elganso_egGeneraMovistockHuerfanos(almacenes, paramCorregir)
{
	var q = new AQSqlQuery;
	var cur = new FLSqlCursor;
	var p;

	if (typeof(almacenes) != "string") {
		almacenes = Input.getText(sys.translate("Almacenes (Para revisión general, 'TODOS')"));
		if(!almacenes) {
			sys.warnMsgBox(sys.translate("Error. No se han informado almacenes para revisar."));
			return false;
		}
		corregir = MessageBox.information(sys.translate("¿Corregir?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton) == MessageBox.Yes;
	} else {
		corregir = paramCorregir == "T";
	}

	if(almacenes != "TODOS") {
		aAlmacenes = almacenes.split(",");
		almacenes = "'" + aAlmacenes.join("','") + "'";
	}
	
	/// Albaranes de cliente
	q.setSelect("l.idlinea, l.referencia, p.codalmacen");
	q.setFrom("lineasalbaranescli l inner join albaranescli p on p.idalbaran = l.idalbaran inner join articulos a on l.referencia = a.referencia LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineaac");
	if(almacenes == 'TODOS')
		q.setWhere("ms.idmovimiento IS NULL");
	else
		q.setWhere("ms.idmovimiento IS NULL AND p.codalmacen IN (" + almacenes + ")");

	if (!q.exec()) {
		return false;
	}
	cur = new FLSqlCursor("lineasalbaranescli");
	AQUtil.createProgressDialog(sys.translate("Revisando albaranes de cliente"), q.size());
	p = 0;
	while (q.next()) {
		AQUtil.setProgress(++p);
		cur.select("idlinea = " + q.value("l.idlinea"));
		if (!cur.first()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		cur.setModeAccess(cur.Browse);
		cur.refreshBuffer();
		if(corregir) {
			if (!flfactalma.articomp_generarEstructura(cur)) {
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
		else {
			var albaran = AQUtil.sqlSelect("albaranescli", "codigo", "idalbaran = " + cur.valueBuffer("idalbaran"))
			debug(sys.translate("Línea %1 huérfana en albarán de cliente %2. Referencia %3").arg(cur.valueBuffer("idlinea")).arg(albaran).arg(cur.valueBuffer("referencia")));
		}
	}
	AQUtil.destroyProgressDialog();
	
	/// Albaranes prov
	q.setSelect("l.idlinea, l.referencia, p.codalmacen");
	q.setFrom("lineasalbaranesprov l inner join albaranesprov p on p.idalbaran = l.idalbaran inner join articulos a on l.referencia = a.referencia LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineaap");
	if(almacenes == 'TODOS')
		q.setWhere("ms.idmovimiento IS NULL");
	else
		q.setWhere("ms.idmovimiento IS NULL AND p.codalmacen IN (" + almacenes + ")");

	debug(q.sql());
	if (!q.exec()) {
		return false;
	}
	cur = new FLSqlCursor("lineasalbaranesprov");
	AQUtil.createProgressDialog(sys.translate("Revisando albaranes de proveedor"), q.size());
	p = 0;
	while (q.next()) {
		AQUtil.setProgress(++p);
		cur.select("idlinea = " + q.value("l.idlinea"));
		if (!cur.first()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		cur.setModeAccess(cur.Browse);
		cur.refreshBuffer();
		if(corregir) {
			if (!flfactalma.articomp_generarEstructura(cur)) {
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
		else {
			var albaran = AQUtil.sqlSelect("albaranesprov", "codigo", "idalbaran = " + cur.valueBuffer("idalbaran"))
			debug(sys.translate("Línea %1 huérfana en albarán de proveedor %2. Referencia %3").arg(cur.valueBuffer("idlinea")).arg(albaran).arg(cur.valueBuffer("referencia")));
		}
	}
	AQUtil.destroyProgressDialog();
	
	/// Multitrans origen
	q.setSelect("l.idlinea, l.referencia, l.codalmaorigen, l.codalmadestino");
	q.setFrom("tpv_lineasmultitransstock l INNER JOIN articulos a on l.referencia = a.referencia LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineatto");
	if(almacenes == 'TODOS')
		q.setWhere("ms.idmovimiento IS NULL AND l.estado <> 'CANCELADO'");
	else
		q.setWhere("ms.idmovimiento IS NULL AND l.estado <> 'CANCELADO' AND l.codalmaorigen IN (" + almacenes + ")");

	debug(q.sql());
	if (!q.exec()) {
		return false;
	}
	cur = new FLSqlCursor("tpv_lineasmultitransstock");
	AQUtil.createProgressDialog(sys.translate("Revisando multitransferencias de origen"), q.size());
	p = 0;
	while (q.next()) {
		AQUtil.setProgress(++p);
		cur.select("idlinea = " + q.value("l.idlinea"));
		if (!cur.first()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		cur.setModeAccess(cur.Browse);
		cur.refreshBuffer();
		if(corregir) {
			if (!flfactalma.multitpv_generarEstructuraMTOrigen(cur)) {
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
		else {
			debug(sys.translate("Línea %1 huérfana en viaje %2 (origen). Referencia %3").arg(cur.valueBuffer("idlinea").toString()).arg(cur.valueBuffer("idviajemultitrans")).arg(cur.valueBuffer("referencia")));
		}
	}
	AQUtil.destroyProgressDialog();

	/// Multitrans destino
	q.setSelect("l.idlinea, l.referencia, l.codalmadestino");
	q.setFrom("tpv_lineasmultitransstock l INNER JOIN articulos a on l.referencia = a.referencia LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineattd");
	if(almacenes == 'TODOS')
		q.setWhere("ms.idmovimiento IS NULL AND l.estado <> 'CANCELADO'");
	else
		q.setWhere("ms.idmovimiento IS NULL AND l.estado <> 'CANCELADO' AND l.codalmadestino IN (" + almacenes + ")");

	debug(q.sql());
	if (!q.exec()) {
		return false;
	}
	cur = new FLSqlCursor("tpv_lineasmultitransstock");
	AQUtil.createProgressDialog(sys.translate("Revisando multitransferencias de destino"), q.size());
	p = 0;
	while (q.next()) {
		AQUtil.setProgress(++p);
		cur.select("idlinea = " + q.value("l.idlinea"));
		if (!cur.first()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		cur.setModeAccess(cur.Browse);
		cur.refreshBuffer();
		if(corregir) {
			if (!flfactalma.multitpv_generarEstructuraMTDestino(cur)) {
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
		else {
			debug(sys.translate("Línea %1 huérfana en viaje %2 (destino). Referencia %3").arg(cur.valueBuffer("idlinea").toString()).arg(cur.valueBuffer("idviajemultitrans")).arg(cur.valueBuffer("referencia")));
		}
	}
	AQUtil.destroyProgressDialog();

	return true;
}


function elganso_egEnviarMailPedidosWeb()
{
	var _i = this.iface;
	var _sA = formau_automata.iface;
	
	var curPedidos = new FLSqlCursor("pedidoscli");
	curPedidos.select("egcodvtaweb IS NOT NULL AND NOT egenviado");
	
	if(!curPedidos.first()) {
		sys.infoMsgBox(sys.translate("Todos los Pedidos Web están enviados"));
		return true;
	}
	
	curPedidos.setModeAccess(curPedidos.Edit);
	curPedidos.refreshBuffer();
	
	var idPedido = curPedidos.valueBuffer("idpedido");
	if(!idPedido || idPedido == "") {
		sys.warnMsgBox(sys.translate("Ha ocurrido un error en el proceso."));
		return false;
	}
	
	if(!AQUtil.execSql("UPDATE pedidoscli SET egenviado = true WHERE idpedido = " + idPedido)) {
		sys.warnMsgBox(sys.translate("Ha ocurrido un error en el proceso."));
		return false;
	}
	
	_sA.enviaEmailPedWeb(idPedido);
	//formtpv_tiendas.iface.enviaEmailArqueos("emailarqueos");
	
	//sys.infoMsgBox(sys.translate("Enviado correctamente el Pedido Web %1.").arg(curPedidos.valueBuffer("codigo")));
	return true;
}

function elganso_egRecalcularPreciosPedidos()
{
	var _i = this.iface;
		
	var q = new FLSqlQuery();
	q.setSelect("l.idlinea, p.idpedido, c.regimeniva, p.codigo, l.codimpuesto, l.numlinea, at.pvp, at.pvp / 1.21, l.pvpunitarioiva");
	q.setFrom("clientes c INNER JOIN pedidoscli p ON c.codcliente = p.codcliente INNER JOIN lineaspedidoscli l ON p.idpedido = l.idpedido INNER JOIN articulos a ON l.referencia = a.referencia INNER JOIN gruposclientes g ON c.codgrupo = g.codgrupo INNER JOIN articulostarifas at ON g.codtarifa = at.codtarifa AND a.referencia = at.referencia");
	q.setWhere("c.regimeniva <> 'General' AND abs(l.pvpunitarioiva - (at.pvp / 1.21)) > 0.2 and l.codimpuesto = 'EXT' and p.codejercicio = '2014'");
	
	if(!q.exec()) {
		debug(q.sql());
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}
	
	var oPed = {}, oLinPed = {}, oAlb = {};
	var nPed = 0, nLinPed = 0, nAlb = 0;
	
	var curLP = new FLSqlCursor("lineaspedidoscli");
	
	var pvpu, pvpsd, pvpt;
	
	AQUtil.createProgressDialog("Recalculando precios de las líneas de pedido....", q.size());
	var progress = 0;
	while(q.next()) {
		AQUtil.setProgress(progress++);
		if(!(q.value("p.idpedido") in oPed)) {
			oPed[q.value("p.idpedido")] = true;
			nPed++;
		}
		if(!(q.value("l.idlinea") in oLinPed)) {
			oLinPed[q.value("l.idlinea")] = true;
			nLinPed++;
		}
		
		curLP.select("idlinea = " + q.value("l.idlinea"));
				
		if(!curLP.first()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Falló el cálculo."));
			return false;
		}
		
		curLP.setModeAccess(curLP.Edit);
		curLP.refreshBuffer();
		
		pvpu = formRecordlineaspedidoscli.iface.pub_commonCalculateField("pvpunitarioiva", curLP);
		curLP.setValueBuffer("pvpunitarioiva", pvpu);
		curLP.setValueBuffer("pvpunitario", pvpu);
		
		if(curLP.valueBuffer("ivaincluido")) {
			pvpsd = formRecordlineaspedidoscli.iface.pub_commonCalculateField("pvpsindtoiva2", curLP);
			curLP.setValueBuffer("pvpsindtoiva", pvpsd);
			curLP.setValueBuffer("pvpsindto", pvpsd);
		
			pvpt = formRecordlineaspedidoscli.iface.pub_commonCalculateField("pvptotaliva2", curLP);
		}
		else {
			pvpsd = formRecordlineaspedidoscli.iface.pub_commonCalculateField("pvpsindtoiva", curLP);
			curLP.setValueBuffer("pvpsindtoiva", pvpsd);
			curLP.setValueBuffer("pvpsindto", pvpsd);
		
			pvpt = formRecordlineaspedidoscli.iface.pub_commonCalculateField("pvptotaliva", curLP);
		}
		
		curLP.setValueBuffer("pvptotaliva", pvpt);
		curLP.setValueBuffer("pvptotal", pvpt);
		
		if(!curLP.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Falló el cálculo."));
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	
	AQUtil.createProgressDialog("Recalculando totales de los pedidos....", nPed);
	progress = 0;
	var curP = new FLSqlCursor("pedidoscli");
	for(p in oPed) {
		AQUtil.setProgress(progress++);
		curP.select("idpedido = " + p);
		
		if(!curP.first()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Falló el cálculo."));
			return false;
		}
	
		curP.setModeAccess(curP.Edit);
		curP.refreshBuffer();
	
		curP.setValueBuffer("neto", formpedidoscli.iface.pub_commonCalculateField("neto", curP));
		curP.setValueBuffer("totaliva", formpedidoscli.iface.pub_commonCalculateField("totaliva", curP));
		curP.setValueBuffer("totalrecargo", formpedidoscli.iface.pub_commonCalculateField("totalrecargo", curP));
		curP.setValueBuffer("totalirpf", formpedidoscli.iface.pub_commonCalculateField("totalirpf", curP));
		curP.setValueBuffer("total", formpedidoscli.iface.pub_commonCalculateField("total", curP));
		curP.setValueBuffer("totaleuros", formpedidoscli.iface.pub_commonCalculateField("totaleuros", curP));
	
		if(!curP.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Falló el cálculo."));
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	
	AQUtil.createProgressDialog("Recalculando precios de las líneas de albarán....", nLinPed);
	progress = 0;
	var curLA = new FLSqlCursor("lineasalbaranescli");
	for(l in oLinPed) {
		AQUtil.setProgress(progress++);
		curLA.select("idlineapedido = " + l);
		
		while(curLA.next()) {
			curLA.setModeAccess(curLA.Edit);
			curLA.refreshBuffer();
				
			if(!AQUtil.sqlSelect("albaranescli", "ptefactura", "idalbaran = " + curLA.valueBuffer("idalbaran"))) {
				continue;
			}
		
			if(!(curLA.valueBuffer("idalbaran") in oAlb)) {
				oAlb[curLA.valueBuffer("idalbaran")] = true;
				nAlb++;
			}
			
			pvpu = formRecordlineasalbaranescli.iface.pub_commonCalculateField("pvpunitarioiva", curLA);
			curLA.setValueBuffer("pvpunitarioiva", pvpu);
			curLA.setValueBuffer("pvpunitario", pvpu);
		
			if(curLA.valueBuffer("ivaincluido")) {
				pvpsd = formRecordlineasalbaranescli.iface.pub_commonCalculateField("pvpsindtoiva2", curLA);
				curLA.setValueBuffer("pvpsindtoiva", pvpsd);
				curLA.setValueBuffer("pvpsindto", pvpsd);
				
				pvpt = formRecordlineasalbaranescli.iface.pub_commonCalculateField("pvptotaliva2", curLA);
			}
			else {
				pvpsd = formRecordlineasalbaranescli.iface.pub_commonCalculateField("pvpsindtoiva", curLA);
				curLA.setValueBuffer("pvpsindtoiva", pvpsd);
				curLA.setValueBuffer("pvpsindto", pvpsd);
				
				pvpt = formRecordlineasalbaranescli.iface.pub_commonCalculateField("pvptotaliva", curLA);
			}
			
			curLA.setValueBuffer("pvptotaliva", pvpt);
			curLA.setValueBuffer("pvptotal", pvpt);
		
			if(!curLA.commitBuffer()) {
				AQUtil.destroyProgressDialog();
				sys.warnMsgBox(sys.translate("Falló el cálculo."));
				return false;
			}
		}
	}
	AQUtil.destroyProgressDialog();
	
	AQUtil.createProgressDialog("Recalculando totales de los albaranes....", nAlb);
	progress = 0;
	var curA = new FLSqlCursor("albaranescli");
	for(a in oAlb) {
		AQUtil.setProgress(progress++);
		curA.select("idalbaran = " + a);
		
		if(!curA.first()) {
			continue;
			return false;
		}
	
		curA.setModeAccess(curA.Edit);
		curA.refreshBuffer();
		
		curA.setValueBuffer("neto", formalbaranescli.iface.pub_commonCalculateField("neto", curA));
		curA.setValueBuffer("totaliva", formalbaranescli.iface.pub_commonCalculateField("totaliva", curA));
		curA.setValueBuffer("totalrecargo", formalbaranescli.iface.pub_commonCalculateField("totalrecargo", curA));
		curA.setValueBuffer("totalirpf", formalbaranescli.iface.pub_commonCalculateField("totalirpf", curA));
		curA.setValueBuffer("total", formalbaranescli.iface.pub_commonCalculateField("total", curA));
		curA.setValueBuffer("totaleuros", formalbaranescli.iface.pub_commonCalculateField("totaleuros", curA));
	
		if(!curA.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Falló el cálculo."));
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	
	return true;
}

function elganso_egTarjetasParaEncuesta(fVentas, dirFTP)
{
	var _i = this.iface;
	
	//var fVentas = ("fVentas" in oParam) ? oParam.fVentas : "2014-07-15";
	if (fVentas == "AYER") {
		fVentas = new Date;
		fVentas = AQUtil.addDays(fVentas, -1);
	}
	if (fVentas == "HOY") {
		fVentas = new Date;
	}
	
	// Nombre;Apellidos;Sexo;Fecha_nacimiento;identificativo_socio;identificativo_tienda;importe_acumulado;importe_venta;fecha_alta_socio;fecha_venta;hora_venta;
	// ciudad_provincia;tipo_tienda;
	var q = new AQSqlQuery();
	q.setSelect("t.nombre, t.sexo, t.fechanacimiento, t.codbarrastarjeta, c.codtienda, c.total*d.tasaconv, t.fechaalta, c.fecha, c.hora, t.ciudad, t.provincia, t.codtarjetapuntos, t.email");
	q.setFrom("tpv_comandas c INNER JOIN tpv_tarjetaspuntos t ON c.codtarjetapuntos = t.codtarjetapuntos INNER JOIN tpv_tiendas ti ON c.codtienda = ti.codtienda  INNER JOIN empresa e ON ti.idempresa = e.id INNER JOIN divisas d ON e.coddivisa = d.coddivisa");
	//q.setWhere("c.fecha = '" + fVentas + "' AND ti.codpais = 'ES' AND servidor LIKE '10.%' AND ti.codtienda <> 'AWEB' AND (NOT t.deempleado OR t.deempleado IS NULL) AND (NOT t.dtoespecial OR t.dtoespecial IS NULL) ORDER BY t.codtarjetapuntos");  // Solo tienedas de España, no los ECIS ni la web
	q.setWhere("c.fecha = '" + fVentas + "' AND ti.sincroactiva AND ti.codtienda <> 'AWEB' AND (NOT t.deempleado OR t.deempleado IS NULL) AND (NOT t.dtoespecial OR t.dtoespecial IS NULL) ORDER BY t.codtarjetapuntos"); //Ahora se incluyen todas las tiendas
	if (!q.exec()) {
		return false;
	}
	debug(q.sql());
	dirFTP = dirFTP ? dirFTP : Dir.home;
	var nombreFichero = "ventas_encuesta_" + fVentas.toString().left(10) + ".txt";
 
	var file = new File(dirFTP + "/" + nombreFichero);
	try {
		file.open(File.WriteOnly);
	} catch(e) {
		sys.errorMsgBox(sys.translate("Imposible abrir el fichero %1").arg(nombreFichero));
		return false;
	}
	
	var sep = ";", com = "";
	
	var cabecera = "Nombre" + sep + "Sexo" + sep + "F.Nacimiento" + sep + "Id.Socio" + sep + "Tienda" + sep + "Imp.Acumulado" + sep + "Imp.Venta" + sep + "F.Alta" + sep + "F.Venta" + sep + "H.Venta" + sep + "Ciudad" + sep + "Provincia" + sep + "Email";
	file.writeLine(cabecera);
	
	var qComprado = new AQSqlQuery;
	qComprado.setSelect("SUM(c.total*d.tasaconv)");
	qComprado.setFrom("tpv_comandas c INNER JOIN tpv_tiendas t ON c.codtienda = t.codtienda INNER JOIN empresa e ON t.idempresa = e.id INNER JOIN divisas d ON e.coddivisa = d.coddivisa");
	
	var linea = "";
	var unAno = AQUtil.addYears(fVentas, -1);
	var wFechasComp = "c.fecha BETWEEN '" + unAno + "' AND '" + fVentas + "'";
	var codTarjetaAnt = false;
	while(q.next()) {
		var codTarjetaPuntos = q.value("t.codtarjetapuntos");
		if (codTarjetaPuntos == codTarjetaAnt) {
			continue;
		}
		codTarjetaAnt = codTarjetaPuntos;
		var fechaN = AQUtil.dateAMDtoDMA(q.value("t.fechanacimiento").toString().left(10));
		var fechaA = AQUtil.dateAMDtoDMA(q.value("t.fechaalta").toString().left(10));
		var fechaV = AQUtil.dateAMDtoDMA(q.value("c.fecha").toString().left(10));
		var horaV = AQUtil.dateAMDtoDMA(q.value("c.hora").toString().right(8));
		var totalV = AQUtil.roundFieldValue(q.value("c.total*d.tasaconv"), "lineaspedidoscli", "pvptotal");
		if (totalV && totalV != "") {
			totalV = totalV.toString().replace(".", ",");
		}
		var nombre = com + q.value("t.nombre") + com;
		var sexo = com + q.value("t.sexo") + com;
		var idSocio = com + q.value("t.codbarrastarjeta") + com;
		var codTienda = com + q.value("c.codtienda") + com;
		var ciudad = com + q.value("t.ciudad") + com;
		var provincia = com + q.value("t.provincia") + com;
		var email = com + q.value("t.email") + com;

		qComprado.setWhere("c.codtarjetapuntos = '" + codTarjetaPuntos + "' AND " + wFechasComp);
		if (!qComprado.exec()) {
			return false;
		}
		var totalAcum = qComprado.first() ? qComprado.value("SUM(c.total*d.tasaconv)") : 0;
		var totalAcum = AQUtil.roundFieldValue(totalAcum, "lineaspedidoscli", "pvptotal");
		if (totalAcum && totalAcum != "") {
			totalAcum = totalAcum.toString().replace(".", ",");
		}
		//q.setSelect("t.nombre, t.sexo, t.fechanacimiento, t.codbarrastarjeta, c.codtienda, c.total, t.fechaalta, c.fecha, c.hora, t.ciudad, t.provincia");
		linea = nombre + sep + sexo + sep + fechaN + sep + idSocio + sep + codTienda + sep + totalAcum + sep + totalV + sep + fechaA + sep + fechaV + sep + horaV + sep + ciudad + sep + provincia + sep + email;
		file.writeLine(linea);
	}
	file.close();
	
	sys.infoMsgBox(sys.translate("Fichero generado correctamente en %1/%2").arg(dirFTP).arg(nombreFichero));
	return true;
}

function elganso_egFicheroTCuentoDH(dh, dirFTP, codTiendaP)
{
	var _i = this.iface;
	
    var aDH = dh.split("|");
    var fDesde = aDH[0];
    var fHasta = aDH[1];
    var f = fDesde;
    while (AQUtil.daysTo(f, fHasta) >= 0) {
        f = f.toString().left(10);
        debug("Fecha " + f);
        if (!_i.egFicheroTCuento(f, dirFTP, codTiendaP)) {
            return false;
        }
        f = AQUtil.addDays(f, 1);
    }
    return true;
}

function elganso_egFicheroTCuento(fVentas, dirFTP, codTiendaP)
{
debug("TCuento");
	var _i = this.iface;
	
	fVentas = fVentas  && typeof(fVentas) == "string" ? fVentas : "HOY";

	if (fVentas == "AYER") {
		fVentas = new Date;
		fVentas = AQUtil.addDays(fVentas, -1);
	}
	if (fVentas == "HOY") {
		fVentas = new Date;
	}
	
	var sVentas = fVentas.toString().left(10);

	dirFTP = dirFTP ? dirFTP : Dir.home;
	var nombreFichero = "tcuento_" + sVentas + ".txt";
 
	var file = new File(dirFTP + "/" + nombreFichero);
	try {
		file.open(File.WriteOnly);
	} catch(e) {
		sys.errorMsgBox(sys.translate("Imposible abrir el fichero %1").arg(nombreFichero));
		return false;
	}
	
	var sep = "|", com = "";
	
	var qTiendas = new FLSqlQuery;
	qTiendas.setSelect("t.codtienda");
	qTiendas.setFrom("tpv_tiendas t");
	qTiendas.setWhere("t.sincroactiva " + (codTiendaP ? " AND codtienda = '" + codTiendaP + "'" : "") + " ORDER BY t.codtienda");
	if (!qTiendas.exec()) {
		return false;
	}
	
	var qVentas = new AQSqlQuery;
	qVentas.setSelect("COUNT(c.idtpv_comanda)");
	qVentas.setFrom("tpv_comandas c");

	var codTienda, horaDesde, horaHasta, horaFichero, ventas;
	while (qTiendas.next()) {
		codTienda = qTiendas.value("t.codtienda");
		debug("Tienda " + codTienda);
		var hora = 7, min = 0;
		while (hora < 24) {
			horaDesde = flfactppal.iface.pub_cerosIzquierda(hora, 2) + ":" + flfactppal.iface.pub_cerosIzquierda(min, 2) + ":00";
			horaHasta = flfactppal.iface.pub_cerosIzquierda(hora, 2) + (min == 0 ? ":29:59" : ":59:59");
			horaFichero = horaDesde.left(5);
			debug("Tienda " + codTienda + " desde " + horaFichero);
			qVentas.setWhere("c.codtienda = '" + codTienda + "' AND c.fecha = '" + sVentas.toString().left(10) + "' AND c.hora BETWEEN '" + horaDesde + "' AND '" + horaHasta + "'");
			if (!qVentas.exec()) {
				return false;
			}
			if (qVentas.first()) {
				ventas = qVentas.value("COUNT(c.idtpv_comanda)");
				ventas = isNaN(ventas) ? 0 : ventas;
				var linea = "129" + sep + codTienda + sep + sVentas + sep + horaFichero + sep + ventas + sep + "0,00";
				linea += "\r";
				file.writeLine(linea);
			}
			if (min == 0) {
				min = 30;
			} else {
				min = 0;
				hora++;
			}
		}
	}
	file.close();
	
	if (sys.interactiveGUI()) {
    	sys.infoMsgBox(sys.translate("Fichero generado correctamente en %1/%2").arg(dirFTP).arg(nombreFichero));
	} else {
	    debug(sys.translate("Fichero generado correctamente en %1/%2").arg(dirFTP).arg(nombreFichero));
	}
	return true;
}

function elganso_egGeneraBarcodesArticulo()
{
	var _i = this.iface;
	var _fP = flfactppal.iface;
	
	var referencia = _fP.pub_dameRespuestaTexto("Referencia de Artículo");
	if(!referencia || referencia == "") {
		sys.warnMsgBox(sys.translate("Debe indicar una referencia."));
		return false;
	}
	if(!AQUtil.sqlSelect("articulos", "referencia", "referencia = '" + referencia + "'")) {
		sys.warnMsgBox(sys.translate("El artículo no existe."));
		return false;
	}
	
	var nReg = _fP.pub_dameRespuestaTexto("Nº de barcodes");
	if(!nReg || nReg == "" || isNaN(nReg)) {
		return false;
	}
	
	var curAA = new FLSqlCursor("atributosarticulos");
	
	AQUtil.createProgressDialog("Creando barcodes...", nReg);
	
	formRecordarticulos.iface.prefijoBarcode_ = flfactalma.iface.pub_valorDefectoAlmacen("prefijobarcode");
	formRecordarticulos.iface.calculoBarcode_ = flfactalma.iface.pub_valorDefectoAlmacen("calculobarcode");
	formRecordarticulos.iface.digitosBarcode_ = flfactalma.iface.pub_valorDefectoAlmacen("digitosbarcode");
	
	for(var i = 0; i < nReg; i++) {
		AQUtil.setProgress(i);
		
		curAA.setModeAccess(curAA.Insert);
		curAA.refreshBuffer();
		
		curAA.setValueBuffer("referencia", referencia);
		curAA.setValueBuffer("talla", "TU");
		curAA.setValueBuffer("color", "U");
		curAA.setValueBuffer("barcode", formRecordarticulos.iface.pub_obtenerBarcode(referencia, "TU", "U"));
		
		if(!curAA.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Se ha producido un error durante la generación de barcodes."));
			return false;
		}
	}
	
	AQUtil.destroyProgressDialog();	
	return true;
}

function elganso_egHuecosPortugal(oParam)
{
	// Se quita esta función porque con la firma SAFT ya no es necesario generar las facturas en la tienda
	return true;

	var _i = this.iface;
	var nMes = Input.getNumber(sys.translate("Dame mes"));
	if (!nMes) {
		return false;
	}
	var ano = Input.getText(sys.translate("Dame año"));
	if (!ano) {
		return false;
	}
	var codSerie = Input.getItem(sys.translate("Dame serie"), ["NO", "NA"]);
	if (!codSerie) {
		return false;
	}
	debug("Cod serie " + codSerie);

	var mes = flfactppal.iface.pub_cerosIzquierda(nMes, 2);
	var fechaDesde = ano.toString() + "-" + mes.toString() + "-01";
	
	if (!_i.huecosPortugal(fechaDesde, codSerie)) {
		return false;
	}
	return true;
}

function elganso_huecosPortugal(fechaDesde, codSerie)
{
	// Se quita esta función porque con la firma SAFT ya no es necesario generar las facturas en la tienda
	return true;
	var _i = this.iface;
	
	var codTerminal = flfact_tpv.iface.pub_valorDefectoTPV("codterminal");
  	var idEmpresa = AQUtil.sqlSelect("tpv_puntosventa pv INNER JOIN tpv_tiendas t ON pv.codtienda = t.codtienda", "t.idempresa", "pv.codtpv_puntoventa = '" + codTerminal + "'", "tpv_puntosventa");
 	 if (idEmpresa != flfactppal.iface.pub_valorDefecto("empresaportugal")) {
		sys.warnMsgBox("El punto de venta no pertenece a la empresa de Portugal");
		return false;
	}
    
	var codEjercicio = flfactppal.iface.ejercicioActual();
	
	if (codSerie != "NA" && codSerie != "NO" && codSerie != "OP"  && codSerie != "OB") {
		sys.warnMsgBox(sys.translate("La serie %1 no pertenece a Portugal").arg(codSerie));
		return false;
	}
	var hoy = new Date;
	hoy = AQUtil.addDays(hoy, -60);
	if (AQUtil.daysTo(fechaDesde, hoy.toString()) > 0) { /// No procesamos desde antes de hace dos meses para no renumerar muchas facturas. 2014 ya se ha presentado completo.
		return true;
	}

	var qB = new AQSqlQuery;
	qB.setSelect("f.idfactura");
	qB.setFrom("facturascli f LEFT OUTER JOIN tpv_comandas c ON f.idfactura = c.idfactura");
	qB.setWhere("f.codserie = '" + codSerie + "' AND f.codejercicio = '" + codEjercicio + "' AND f.fecha >= '" + fechaDesde + "' AND c.idtpv_comanda IS NULL");
	if (!qB.exec()) {
		return false;
	}
	var idFactura;
	var p = 0;
	AQUtil.createProgressDialog(sys.translate("Eliminando facturas sin venta asociada"), qB.size());
	while (qB.next()) {
		AQUtil.setProgress(++p);
		idFactura = qB.value("f.idfactura");
		if (!AQSql.del("facturascli", "idfactura = " + idFactura)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	
	var curF = new FLSqlCursor("facturascli");
	curF.select("codserie = '" + codSerie + "' AND fecha >= '" + fechaDesde + "' AND codejercicio = '" + codEjercicio + "' ORDER BY codigo");
	var primero = true;
	var codigo, numero;
	 p = 0;
	AQUtil.createProgressDialog(sys.translate("Revisando códigos de factura"), curF.size());
	while (curF.next()) {
		AQUtil.setProgress(++p);
		curF.setModeAccess(curF.Edit);
		curF.refreshBuffer();
		if (primero) {
			codigo = curF.valueBuffer("codigo");
			numero = curF.valueBuffer("numero");
			primero = false;
			continue;
		}
		numero = parseFloat(numero) + 1;
		codigo = codigo.toString().left(6) + flfactppal.iface.pub_cerosIzquierda(numero, 6);
		curF.setValueBuffer("numero", numero);
		curF.setValueBuffer("codigo", codigo);
		if (!curF.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	return true;
}

function elganso_egGenerarRecogidas(oParam)
{
	var _i = this.iface;

	var fechaIni = "2014-11-01";
	
	var qA = new AQSqlQuery;
	qA.setSelect("idalbaran");
	qA.setFrom("albaranescli");
	qA.setWhere("fecha >= '" + fechaIni + "' AND mg_nombreenv LIKE 'TIENDA - %' AND idrecogida IS NULL");
	//debug(qA.sql());
	if (!qA.exec()) {
		return false;
	}

	//AQUtil.createProgressDialog(sys.translate("Eliminando facturas sin venta asociada"), qB.size());
	_i.curRec_ = new FLSqlCursor("eg_recibosrecogida");
	_i.curAlb_ = new FLSqlCursor("albaranescli");
	_i.curLRec_ = new FLSqlCursor("eg_lineasrecibosrecogida");
	_i.curLAlb_ = new FLSqlCursor("lineasalbaranescli");

	var idAlbaran, idRecogida;
	
	while (qA.next()) {
		idAlbaran = qA.value("idalbaran");
		idRecogida = _i.crearRecogida(idAlbaran);
		if(!idRecogida)
			continue;

		_i.crearLineasRecogida(idRecogida, idAlbaran);
	}

	delete _i.curRec_;
	delete _i.curAlb_;
	delete _i.curLRec_;
	delete _i.curLAlb_;

	return true;
}

function elganso_crearRecogida(idAlbaran)
{
	var _i = this.iface;

	if(!idAlbaran || idAlbaran == 0)
		return false;

	_i.curAlb_.select("idalbaran = " + idAlbaran);

	if(!_i.curAlb_.first())
		return false;

	_i.curAlb_.setModeAccess(_i.curAlb_.Edit);
	_i.curAlb_.refreshBuffer();

	_i.curRec_.setModeAccess(_i.curRec_.Insert);
	_i.curRec_.refreshBuffer();

	_i.datosRecogida();

	if (!_i.curRec_.commitBuffer()) {
		return false;
	}

	var idRecogida = _i.curRec_.valueBuffer("idrecogida");

	_i.curAlb_.setValueBuffer("idrecogida",idRecogida);
	if(!_i.curAlb_.commitBuffer())
		return false;

	return idRecogida;
}

function elganso_datosRecogida()
{
	var _i = this.iface;
	var hoy = new Date();
	var ahora = hoy.toString().right(8);
	var usuario = sys.nameUser(); 

	_i.curRec_.setValueBuffer("codigo",flfacturac.iface.pub_obtenerCodigoRecogida());
	_i.curRec_.setValueBuffer("fecha",_i.curAlb_.valueBuffer("fecha"));
	_i.curRec_.setValueBuffer("nombrecliente",_i.curAlb_.valueBuffer("nombrecliente"));
	_i.curRec_.setValueBuffer("cifnif",_i.curAlb_.valueBuffer("cifnif"));
	_i.curRec_.setValueBuffer("total",_i.curAlb_.valueBuffer("total"));
	_i.curRec_.setValueBuffer("observaciones",_i.curAlb_.valueBuffer("observaciones"));
	_i.curRec_.setValueBuffer("neto",_i.curAlb_.valueBuffer("neto"));
	_i.curRec_.setValueBuffer("totaliva",_i.curAlb_.valueBuffer("totaliva"));
	_i.curRec_.setValueBuffer("mg_numcliente",_i.curAlb_.valueBuffer("mg_numcliente"));
	_i.curRec_.setValueBuffer("mg_email",_i.curAlb_.valueBuffer("mg_email"));
	_i.curRec_.setValueBuffer("mg_confactura",_i.curAlb_.valueBuffer("mg_confactura"));
	_i.curRec_.setValueBuffer("mg_metodopago",_i.curAlb_.valueBuffer("mg_metodopago"));
	_i.curRec_.setValueBuffer("mg_pesototal",_i.curAlb_.valueBuffer("mg_pesototal"));
	_i.curRec_.setValueBuffer("egcodvtaweb",_i.curAlb_.valueBuffer("numero"));
	_i.curRec_.setValueBuffer("idusuarioalta",usuario);
	_i.curRec_.setValueBuffer("fechaalta",hoy);
	_i.curRec_.setValueBuffer("horaalta",ahora);
	_i.curRec_.setValueBuffer("idusuariomod",usuario);
	_i.curRec_.setValueBuffer("fechamod",hoy);
	_i.curRec_.setValueBuffer("horamod",ahora);
	_i.curRec_.setValueBuffer("codtiendarecogida",_i.curAlb_.valueBuffer("mg_apellidosenv"));
}

function elganso_crearLineasRecogida(idRecogida, idAlbaran)
{
	debug("elganso_crearLineasRecogida");

	var _i = this.iface;

	if(!idAlbaran || idAlbaran == 0 || !idRecogida || idRecogida == 0) {
		debug("false 1");
		return false;
	}

debug("idrecogida " + idRecogida);

	_i.curLAlb_.select("idalbaran = " + idAlbaran);

	while(_i.curLAlb_.next()) {
debug("entra while");
		_i.curAlb_.setModeAccess(_i.curAlb_.Edit);
		_i.curAlb_.refreshBuffer();

		_i.curLRec_.setModeAccess(_i.curLRec_.Insert);
		_i.curLRec_.refreshBuffer();
		_i.curLRec_.setValueBuffer("idrecogida",idRecogida);

		_i.datosLineaRecogida();

		if (!_i.curLRec_.commitBuffer()) {
			debug("false 2");
			return false;
		}
	}

	debug("true");
	return true;
}

function elganso_datosLineaRecogida()
{
	var _i = this.iface;
	var hoy = new Date();
	var ahora = hoy.toString().right(8);
	var usuario = sys.nameUser(); 
	debug("pvp untario " + _i.curLAlb_.valueBuffer("pvpunitario"));
	_i.curLRec_.setValueBuffer("referencia",_i.curLAlb_.valueBuffer("referencia"));
	_i.curLRec_.setValueBuffer("descripcion",_i.curLAlb_.valueBuffer("descripcion"));
	_i.curLRec_.setValueBuffer("talla",_i.curLAlb_.valueBuffer("talla"));
	_i.curLRec_.setValueBuffer("color",_i.curLAlb_.valueBuffer("color"));
	_i.curLRec_.setValueBuffer("cantidad",_i.curLAlb_.valueBuffer("cantidad"));
	_i.curLRec_.setValueBuffer("pvpunitario",_i.curLAlb_.valueBuffer("pvpunitarioiva"));
	_i.curLRec_.setValueBuffer("pvptotal",_i.curLAlb_.valueBuffer("pvptotal"));
	_i.curLRec_.setValueBuffer("totalenalbaran",_i.curLAlb_.valueBuffer("totalenalbaran"));
	_i.curLRec_.setValueBuffer("codimpuesto",_i.curLAlb_.valueBuffer("codimpuesto"));
	_i.curLRec_.setValueBuffer("iva",_i.curLAlb_.valueBuffer("iva"));
	_i.curLRec_.setValueBuffer("dtolineal",_i.curLAlb_.valueBuffer("dtolineal"));
	_i.curLRec_.setValueBuffer("barcode",_i.curLAlb_.valueBuffer("barcode"));
	_i.curLRec_.setValueBuffer("idusuarioalta",usuario);
	_i.curLRec_.setValueBuffer("fechaalta",hoy);
	_i.curLRec_.setValueBuffer("horaalta",ahora);
	_i.curLRec_.setValueBuffer("idusuariomod",usuario);
	_i.curLRec_.setValueBuffer("fechamod",hoy);
	_i.curLRec_.setValueBuffer("horamod",ahora);
	//_i.curRec_.setValueBuffer("idsincro","");
}

function elganso_controlSincroVentas()
{
	var _i = this.iface;

	var d = new Date;
	var hoy = d.toString().left(10);
	var ahora = d.toString().right(8);
	
	var todas = flfact_tpv.iface.pub_valorDefectoTPV("todastiendassincro");
	todas = todas.toString().split(",").join("', '");
	
	var qT = new AQSqlQuery;
	qT.setSelect("t.codtienda, fst.fechasincro, fst.horasincro");
	qT.setFrom("tpv_tiendas t INNER JOIN tpv_fechasincrotienda fst ON t.codtienda = fst.codtienda AND fst.esquema = 'VENTAS_TPV'");
	qT.setWhere("t.codtienda IN ('" + todas + "') AND (fst.fechasincro < '" + hoy + "' OR (fst.fechasincro = '" + hoy + "' AND fst.horasincro + interval '3 hours' < '" + ahora + "')) ORDER BY t.codtienda");
	if (!qT.exec()) {
		return false;
	}
debug(qT.sql());
	var lista = "";
	while (qT.next()) {
		lista += sys.translate("La tienda %1 no se sincroniza desde el día %2 a las %3").arg(qT.value("t.codtienda")).arg(AQUtil.dateAMDtoDMA(qT.value("fst.fechasincro"))).arg(qT.value("fst.horasincro").toString().right(8));
		lista += "\n";
	}
	if (lista != "") {
		_i.enviaCorreoDia(sys.translate("GRAVE: Tiendas no sincronizadas"), lista);
	}
	
	return true;
}

function elganso_datosCorreoDia()
{
	if(sys.nameBD() == "comun_elganso" && sys.nameUser() == "javier") {
		return {
			"to" : "javier@yeboyebo.es",
			"hostsmtp" : "smtp.gmail.com",
			"tipocxsmtp" : "SSL",
			"usuariosmtp" : "vigilancia.yeboyebo@gmail.com",
			"passwordsmtp" : "555zapato",
			"tipoautsmtp" : "Plain",
			"puertosmtp" : "465"
		};	
	}

	if((sys.nameBD() == "comun_elganso" || sys.nameBD() == "lorena_elganso_portugal") && sys.nameUser() == "lorena") {
		return {
			"to" : "lorena@yeboyebo.es",
			"hostsmtp" : "smtp.gmail.com",
			"tipocxsmtp" : "SSL",
			"usuariosmtp" : "vigilancia.yeboyebo@gmail.com",
			"passwordsmtp" : "555zapato",
			"tipoautsmtp" : "Plain",
			"puertosmtp" : "465"
		};	
	}
 
	return {
		"to" : "antonio@yeboyebo.es,santiago@yeboyebo.es,soporte@elganso.com,lorena@yeboyebo.es,javier@yeboyebo.es, jose@yeboyebo.es, jesus@yeboyebo.es",
		"hostsmtp" : "smtp.gmail.com",
		"tipocxsmtp" : "SSL",
		"usuariosmtp" : "vigilancia.yeboyebo@gmail.com",
		"passwordsmtp" : "555zapato",
		"tipoautsmtp" : "Plain",
		"puertosmtp" : "465"
	};
}

function elganso_enviaCorreoDia(subject, mensaje)
{
debug("enviaCorreo");
	var _i = this.iface;
	
	var oDM = _i.datosCorreoDia();

	_i.oCorreo = new AQSmtpClient;  
	var oCorreo = _i.oCorreo;
	connect(oCorreo, "statusChanged(QString, int)", _i, "statusChanged()");

	oCorreo.setMailServer(oDM.hostsmtp);
	oCorreo.setPort(oDM.puertosmtp);
	switch (oDM.tipocxsmtp) {
		case "SSL": {
			oCorreo.setConnectionType(AQS.SmtpSslConnection);  
			break;
		}
		case "TLS": {
			oCorreo.setConnectionType(AQS.SmtpTlsConnection);
			break;
		}
		default: {
			return false;
		}
	}
		
	switch (oDM.tipoautsmtp) {
		case "Plain": {
			oCorreo.setAuthMethod(AQS.SmtpAuthPlain);
			break;
		}
		case "Login": {
			oCorreo.setAuthMethod(AQS.SmtpAuthLogin);
			break;
		}
		default: {
			return false;
		}
	}
	//** Tambien se puede usar el método Login
	//** Algunos servidores sólo soportan Login
	//** GMail soporta los dos Plain y Login
	//** _i.correo_.setAuthMethod(AQS.SmtpAuthLogin);
	var rutaF = Dir.home + "/dummyfile.txt";
	File.write(rutaF, "Hola");

	oCorreo.setUser(oDM.usuariosmtp);  
	oCorreo.setPassword(oDM.passwordsmtp);  
	try {
		oCorreo.setMimeType("text/plain");
		oCorreo.setBody(mensaje);
	} catch (e) {
		oCorreo.setBody(mensaje);
	}
	oCorreo.setFrom(oDM.usuariosmtp);
	oCorreo.setTo(oDM.to);
	oCorreo.setSubject(subject);
	oCorreo.addAttachment(rutaF);
debug("Correo " + oDM.usuariosmtp + " - " +  oDM.to + " " +  subject + " " + oDM.passwordsmtp + " " + oDM.hostsmtp + " " + oDM.puertosmtp + " " + oDM.tipocxsmtp + " " + oDM.tipoautsmtp);
	oCorreo.startSend();
	
	return true;
}

function elganso_statusChanged(msg, code)
{
	var _i = this.iface;
	switch(code) {
		case AQS.SmtpSendOk: {
		debug("SmtpSendOk");
			//sys.infoMsgBox(sys.translate("Email enviado correctamente"));
			break;
		}
		case AQS.SmtpError: {
		debug("SmtpError");
		}
		case AQS.SmtpMxDnsError: {
		debug("SmtpMxDnsError");
		}
		case AQS.SmtpSocketError: {
		debug("SmtpSocketError");
		}
		case AQS.SmtpAttachError: {
		debug("SmtpAttachError");
		}
		case AQS.SmtpServerError: {
		debug("SmtpServerError");
		}
		case AQS.SmtpClientError: {
				debug("SmtpClientError");
			//sys.errorMsgBox(sys.translate("Error al enviar el email al proveedor %1 %2").arg(code).arg(msg));
			break;
		}
	}
  debug("STATUS CHANGED " + msg + " :  " + code);
// sys.warnMsgBox("STATUS CHANGED " + msg + " :  " + code);
}

function elganso_egInventariosBorrados(oParam)
{
	var _i = this.iface;
	var listaTiendas = Input.getText(sys.translate("Lista de tiendas separada por comas y sin espacios"));
	if (!listaTiendas) {
		return false;
	}
	var corregir = MessageBox.information(sys.translate("¿Corregir?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton) == MessageBox.Yes;
	
	if (!_i.procesaInventariosBorrados(listaTiendas, corregir ? "T" : "F")) {
		return false;
	}
	return true;
}

function elganso_procesaInventariosBorrados(listaTiendas, corregir)
{
	var _f = formtpv_tiendas.iface;
	var aT = listaTiendas.split(",");
	AQUtil.createProgressDialog(sys.translate("Conectando a tiendas" ), aT.length);
	var codTienda;
	for (var i = 0; i < aT.length; i++) {
		AQUtil.setProgress(i);
		codTienda = aT[i];
		AQUtil.setLabelText(sys.translate("Conectando a %1").arg(codTienda));
		if (!_f.pub_conectar(codTienda, false)) {
			continue;
		}
		var dbO = AQSql.database(codTienda);
		var qC = new FLSqlQuery();
		qC.setSelect("l.idsincro, l.idstock, l.id");
		qC.setFrom("stocks s INNER JOIN lineasregstocks l ON s.idstock = l.idstock");
		qC.setWhere("s.codalmacen = '" + codTienda + "' and l.fecha >= '2014-01-01'");
		if (!qC.exec()) {
			return false;
		}
		var aLineas = [];
		var idSincro;
		while (qC.next()) {
			idSincro = qC.value("l.idsincro");
			AQUtil.setLabelText(sys.translate("Comprobando idsincro %1").arg(idSincro));
			if (!dbO.isOpen()) {
				debug("Conexión perdida");
				break;
			}
			if (!AQUtil.sqlSelect("lineasregstocks", "id", "idsincro = '" + idSincro + "'", "lineasregstocks", codTienda)) {
			debug("idSincro " + idSincro);
				aLineas.push(idSincro);
				if (corregir == "T") {
				debug("Corrigiendo");
					if (!AQUtil.execSql("DELETE FROM lineasregstocks WHERE id = " + qC.value("l.id"))) {
						return false;
					}
					if (!formregstocks.iface.revisarStock("idstock = " + qC.value("l.idstock"))) {
						return false;
					}
				}
			}
		}
		AQUtil.setLabelText(sys.translate("Desconectando de %1").arg(codTienda));
		if (!_f.pub_desconectar(codTienda, false)) {
			continue;
		}
		//debug("Lineas " + aLineas.join("\n"));
	}
	
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	
	return true;
}

function elganso_dameTiendasXEsquema(paramTienda, esquema)
{
	var _i = this.iface;
	var tiendas = "";
	
	if (paramTienda.left(1) == "+") {
		var numTiendas = parseFloat(paramTienda.right(paramTienda.length - 1));
debug("numTiendas " + numTiendas);
		var qT = new AQSqlQuery();
		qT.setSelect("t.codtienda");
		qT.setFrom("tpv_tiendas t LEFT OUTER JOIN tpv_fechasincrotienda fst ON t.codtienda = fst.codtienda AND fst.esquema = '" + esquema + "'");
		qT.setWhere("t.sincroactiva AND fst.codtienda IS NULL AND t.servidor IS NOT NULL ORDER BY t.codtienda");
		if (!qT.exec()) {
			return false;
		}
		var i = 0;
		while (qT.next() && i < numTiendas) {
			if (!formtpv_tiendas.iface.pub_conectar(qT.value("t.codtienda"), true))
				continue;
			tiendas += tiendas == "" ? "" : ",";
			tiendas += qT.value("t.codtienda");
			i++;
		}
		qT.setWhere("t.sincroactiva AND t.servidor IS NOT NULL ORDER BY fst.fechasincro, fst.horasincro, t.codtienda");
		if (!qT.exec()) {
			return false;
		}
		while (qT.next() && i < numTiendas) {
			if (!formtpv_tiendas.iface.pub_conectar(qT.value("t.codtienda"), true))
				continue;
			tiendas += tiendas == "" ? "" : ",";
			tiendas += qT.value("t.codtienda");
			i++;
		}
	} else if (paramTienda.startsWith("TODAS") || paramTienda.startsWith("ECI") || paramTienda.startsWith("NOECI")) {
		tiendas = formtpv_tiendas.iface.dameTiendasSincro(paramTienda);
	} else {
		tiendas = paramTienda;
	}
debug("tiendas " + tiendas);
	return tiendas;
}

function elganso_egCheckStocks(tiendas, paramCorregir)
{
	var _i = this.iface;
	var _f = formtpv_tiendas.iface;
	
	var oRes = {"status" : "ok", "msg" : ""};
	var initCheck = flfactppal.iface.dameTiempoActual();

	var silent = true;
	if (typeof(tiendas) != "string") {
		tiendas = Input.getText(sys.translate("Tienda"));
		silent = false;
		if (!tiendas) {
			oRes.msg += "\n" + sys.translate("Error en checkStocks. No se han informado tiendas a comprobar.");
			//oRes.status = "warn";
			return oRes;
		}
		corregir = MessageBox.information(sys.translate("¿Corregir?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton) == MessageBox.Yes;
	} else {
		corregir = paramCorregir == "T";
	}
	tiendas = _i.dameTiendasXEsquema(tiendas, "CHECK_STOCK");

	var listaTiendas = tiendas.split(",");
	
	var codTienda;
	_i.inventarios_ = {};
	_i.ventasAbiertas_ = {};
	_i.enviosIncompletos_ = {};
	_i.recepcionesIncompletas_ = {};

	var nombreLog = formtpv_tiendas.iface.dameNombreLog("CHECKSTOCK");
	var dirLog = flfact_tpv.iface.pub_valorDefectoTPV("dirlogs");

	if (!dirLog || dirLog == "")
		dirLog = Dir.home;
	var nombreFile;
	if (dirLog.endsWith("/"))
		nombreFile = dirLog + nombreLog;
	else
		nombreFile = dirLog + "/" + nombreLog;

	if(!flfactppal.iface.pub_abreLogFile("CHECKSTOCK", nombreFile))
		sys.infoMsgBox("No se ha creado el fichero del log de comprobación de stocks");

	for (var i = 0; i < listaTiendas.length; i++) {
		codTienda = listaTiendas[i];
	
		if (!_f.pub_conectar(codTienda, silent)) {
			flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", sys.translate("No se ha podido conectar a la tienda %1").arg(codTienda));
			continue;
		}
		var dbL = AQSql.database("default");
	  	var dbT = AQSql.database(codTienda);
	  
		var mngModT = dbT.managerModules(); // Para evitar que se cierre dbAux
	  	var mngModL = dbL.managerModules();
	  
	  	var progreso = 0, total = 0;
	  	var msg = "";
	  	var aStock = [];
	  	
		var qLocal = new FLSqlQuery;
		qLocal.setSelect("idstock, barcode, referencia, talla, cantidad");
		qLocal.setFrom("stocks");
		qLocal.setWhere("codalmacen = '" + codTienda + "' ORDER BY barcode");
		if (!qLocal.exec()) {
			oRes.msg += "\n" + sys.translate("Error en checkStocks. La consulta a la central ha fallado.");
			// oRes.status = "warn";
			return oRes;
		}
		var qTienda = new FLSqlQuery("", codTienda);
		qTienda.setSelect("idstock, barcode, referencia, talla, cantidad");
		qTienda.setFrom("stocks");
		qTienda.setWhere("codalmacen = '" + codTienda + "' ORDER BY barcode");
		if (!qTienda.exec()) {
			oRes.msg += "\n" + sys.translate("Error en checkStocks. La consulta a la tienda %1 ha fallado.").arg(codTienda);
			// oRes.status = "warn";
			return oRes;
		}
		var claveL, claveT;
	  	var hayLocal = qLocal.first();
	  	var hayTienda = qTienda.first();
	  	var tabla = "stocks";
	  	
	  	if (!silent) {
			AQUtil.createProgressDialog(sys.translate("Comprobando stocks en %1...").arg(codTienda), qLocal.size());
	  	} else {
			flfactalma.iface.creaPDSilent(qLocal.size());
	  	}
	  	
	  	var cxCortada = false;
		//while ((hayLocal || hayTienda) && progreso < 1000) {
		while (hayLocal || hayTienda) {
		total++;
		if (!(progreso % 100)) {
		  var fakeSha = mngModT.shaOfFile(tabla); // Para evitar que se cierre dbAux
		  fakeSha = mngModL.shaOfFile(tabla);
		}
		if (!dbL.isOpen() || !dbT.isOpen()) {
		  if (!flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", "CONEXIÓN CORTADA!")) {
		    sys.infoMsgBox("CONEXIÓN CORTADA!");
		  }
		  debug("conexión cortada 2");
		  cxCortada = true;
		  break;
		}
		if (hayLocal && hayTienda) {
		  claveL = qLocal.value("barcode");
		  claveT = qTienda.value("barcode");
		  
		  //debug("Clave Local " + claveL);
		  //debug("Clave Tienda " + claveT);
		  if (claveL == claveT) {
		  	if (qLocal.value("cantidad") != qTienda.value("cantidad")) {
		  		aStock.push({ "barcode" : qLocal.value("barcode"), "idstockcentral" : qLocal.value("idstock"), "idstocktienda" : qTienda.value("idstock")});
		  		msg = "Barcode " + qLocal.value("barcode") + " referencia " + qLocal.value("referencia") + " talla " + qLocal.value("talla") + " Central: " + qLocal.value("cantidad") + " " + codTienda + ": " + qTienda.value("cantidad");
		  		debug("aStock long = " + aStock.length + " Mensaje " + msg);
		  		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
		  	}
		    hayLocal = qLocal.next();
		    if (!silent) {
		      AQUtil.setProgress(progreso++);
		    } else {
		      flfactalma.iface.setProgressPDSilent(progreso++);
		    }
		    hayTienda = qTienda.next();
		  } else if (claveL > claveT) {
		  		msg = "Barcode en " + codTienda + " no existe en cental. Barcode " + qTienda.value("barcode") + " referencia " + qTienda.value("referencia") + " talla " + qTienda.value("talla");
		  		debug(msg);
		  		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
		    	hayTienda = qTienda.next();
		  } else {
		  		msg = "Barcode en central no existe en " + codTienda + ". Barcode " + qLocal.value("barcode") + " referencia " + qLocal.value("referencia") + " talla " + qLocal.value("talla");
		  		debug(msg);
		  		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
		    	hayLocal = qLocal.next();
				if (!silent) {
				  AQUtil.setProgress(progreso++);
				} else {
				  flfactalma.iface.setProgressPDSilent(progreso++);
				}
		    }
		} else if (!hayLocal) {
			msg = "Barcode en " + codTienda + " no existe en cental. Barcode " + qTienda.value("barcode") + " referencia " + qTienda.value("referencia") + " talla " + qTienda.value("talla");
	  		debug(msg);
	  		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
			hayTienda = qTienda.next();
		} else {
	  		msg = "Barcode en central no existe en " + codTienda + ". Barcode " + qLocal.value("barcode") + " referencia " + qLocal.value("referencia") + " talla " + qLocal.value("talla");
	  		debug(msg);
	  		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
			hayLocal = qLocal.next();
		    if (!silent) {
		      AQUtil.setProgress(progreso++);
		    } else {
		      flfactalma.iface.setProgressPDSilent(progreso++);
		    }
		}
	  }
	  if (!silent) {
	  	AQUtil.destroyProgressDialog();
	  }
	  if (cxCortada) {
	  	continue;
	  }
	  _i.canStockMal_ = 0;
	  _i.canStockMalUser_ = 0;
	  _i.canStockMalAuto_ = 0;
	  	var funcion = "compruebaStockBarcode";
		var oParam = new Object;
		oParam.errorMsg = sys.translate("Error en la función %1").arg(funcion);
		oParam.codTienda = codTienda;
		oParam.corregir = corregir;
		var f = new Function("oParam", "return formmt_procesos.iface." + funcion + "(oParam)");
		for (var i = 0; i < aStock.length; i++) {
		    _i.canStockMal_++;
			if (sys.nameBD() == "comun_elganso") {
				//if (i > 5) break;
			}
			oParam.oStock = aStock[i];
			/*
			if (!_i.compruebaStockBarcode(codTienda, aStock[i], corregir)) {
				return false;
			}
			*/
			if (!sys.runTransaction(f, oParam)) {
				oRes.msg += "\n" + sys.translate("Error en checkStocks. No se ha completado la transacción (compruebaStockBarcode).");
				// oRes.status = "warn";
				return oRes;
			}
		}
		if (total > 0) {
		    oRes.msg += "\n";
			var por = (_i.canStockMal_ * 100) / total;
			por = AQUtil.roundFieldValue(por, "pedidoscli", "total");
			oRes.msg += oRes.msg == "" ? "" : "\n";
			oRes.msg += codTienda + ". Comprobados " + _i.canStockMal_ + " casos sobre " + total + " (" + por + "%)";
			
			var porUser = (_i.canStockMalUser_ * 100) / total;
			porUser = AQUtil.roundFieldValue(porUser, "pedidoscli", "total");
			oRes.msg += "\n" + codTienda + ". Stocks mal por usuario " + _i.canStockMalUser_ + " casos sobre " + total + " (" + porUser + "%)";
			
			_i.canStockMalAuto_ = _i.canStockMal_ - _i.canStockMalUser_;
			var porAuto = (_i.canStockMalAuto_ * 100) / total;
			porAuto = AQUtil.roundFieldValue(porAuto, "pedidoscli", "total");
			oRes.msg += "\n" + codTienda + ". Stocks mal automáticos " + _i.canStockMalAuto_ + " casos sobre " + total + " (" + porAuto + "%)";
	  		debug(oRes.msg);
	  		
	  		debug("Por " + por);

	  		// if(por > 1.0)
	  		// 	oRes.status = oRes.status == "ok" ? "warn" : oRes.status;
	  		/*
			if (por > 0.0 && silent) {
			    var sInventarios = "";
	            for (i in _i.inventarios_) {
		            sInventarios += sys.translate("Inventario en %1 con ID.Sincro %2 no ha sido enviado").arg(_i.inventarios_[i]).arg(i) + "\n";
	            }
	            oRes.msg += "\n\n" + sInventarios;
			debug("Enviando email");
				_i.enviaCorreoDia("El Ganso. GRAVE: Stock descuadrado en " + codTienda + " al " + por + "%", oRes.msg);
			}
			*/
  		}
  		var fechaInit = initCheck.toString().left(10);
  		var horaInit = initCheck.toString().right(8);

  		if(AQUtil.sqlSelect("tpv_fechasincrotienda", "id", "codtienda = '" + codTienda + "' AND esquema = 'CHECK_STOCK'")) {
  			if(!AQUtil.sqlUpdate("tpv_fechasincrotienda", ["fechasincro", "horasincro"], [fechaInit, horaInit], "codtienda = '" + codTienda + "' AND esquema = 'CHECK_STOCK'")) {
  				oRes.msg += "\n" + sys.translate("Error en checkStocks. No se ha podido actualizar el registro de tpv_fechasincrotienda para la tienda %1").arg(codTienda);	
				// oRes.status = oRes.status == "ok" ? "warn" : oRes.status;
				return oRes;
			}
		}
		else {
			if(!AQUtil.sqlInsert("tpv_fechasincrotienda", ["codtienda", "esquema", "fechasincro", "horasincro"], [codTienda, "CHECK_STOCK", fechaInit, horaInit])) {
  				oRes.msg += "\n" + sys.translate("Error en checkStocks. No se ha podido crear el registro de tpv_fechasincrotienda para la tienda %1").arg(codTienda);	
				// oRes.status = oRes.status == "ok" ? "warn" : oRes.status;
				return oRes;
			}	
		}
	}
	var sInventarios = "", sVentas = "", sEnvios = "", sRecepciones = "";
	for (i in _i.inventarios_) {
		sInventarios += sys.translate("Inventario en %1 con ID.Sincro %2 no ha sido enviado").arg(_i.inventarios_[i]).arg(i) + "\n";
	}
	oRes.msg += "\n\n" + sInventarios;
	for (i in _i.ventasAbiertas_) {
		sVentas += sys.translate("Venta en %1 con código %2 no está cerrada").arg(_i.ventasAbiertas_[i]).arg(i) + "\n";
	}
	oRes.msg += "\n\n" + sVentas;
	for (i in _i.enviosIncompletos_) {
		sEnvios += sys.translate("Enví­o en %1 con código %2 no está completado").arg(_i.enviosIncompletos_[i]).arg(i) + "\n";
	}
	oRes.msg += "\n\n" + sEnvios;
	for (i in _i.recepcionesIncompletas_) {
		sRecepciones += sys.translate("Recepción en %1 con código %2 no está completada").arg(_i.recepcionesIncompletas_[i]).arg(i) + "\n";
	}
	oRes.msg += "\n\n" + sRecepciones;
	flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", oRes.msg);

	return oRes;
}

function elganso_egCheckPuntos(tiendas, paramCorregir)
{
	var _i = this.iface;
	var _f = formtpv_tiendas.iface;
	
	var oRes = { "status" : "ok", "msg" :""};
	var initCheck = flfactppal.iface.dameTiempoActual();

	var silent = true;
	if (typeof(tiendas) != "string") {
		tiendas = Input.getText(sys.translate("Tienda"));
		silent = false;
		if (!tiendas) {
			oRes.msg += "\n" + sys.translate("Error en checkPuntos. No se han informado tiendas a comprobar.");
			oRes.status = "warn";
			return oRes;
		}
		corregir = MessageBox.information(sys.translate("¿Corregir?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton) == MessageBox.Yes;
		//corregir = false;
	} else {
		corregir = paramCorregir == "T";
	}
	tiendas = _i.dameTiendasXEsquema(tiendas, "CHECK_PUNTOS");

	var listaTiendas = tiendas.split(",");
	
	var codTienda, codTiendaSiguiente;
	
	var nombreLog = formtpv_tiendas.iface.dameNombreLog("CHECKPUNTOS");
	var dirLog = flfact_tpv.iface.pub_valorDefectoTPV("dirlogs");

	if (!dirLog || dirLog == ""){
		dirLog = Dir.home;
	}
	var nombreFile;
	if (dirLog.endsWith("/")){
		nombreFile = dirLog + nombreLog;
	} else {
		nombreFile = dirLog + "/" + nombreLog;
	}
	if(!flfactppal.iface.pub_abreLogFile("CHECKPUNTOS", nombreFile)){
		sys.infoMsgBox("No se ha creado el fichero del log de comprobación de puntos");
	}

	for (var i = 0; i < listaTiendas.length; i++) {
		codTienda = listaTiendas[i];
		codTiendaSiguiente = i == (listaTiendas.length - 1) ? listaTiendas[0] : listaTiendas[i + 1];

		var fechaHasta = AQUtil.sqlSelect("tpv_fechasincrotienda", "fechasincro", "esquema = 'TX_PUNTOS' AND codtienda = '" + codTienda + "'");
	
		if (!_f.pub_conectar(codTienda, silent)) {
			flfactppal.iface.pub_appendTextToLogFile("CHECKPUNTOS", sys.translate("No se ha podido conectar a la tienda %1").arg(codTienda));
			continue;
		}
		var dbL = AQSql.database("default");
	  	var dbT = AQSql.database(codTienda);
	  
		var mngModT = dbT.managerModules(); // Para evitar que se cierre dbAux
	  	var mngModL = dbL.managerModules();
	  
	  	var progreso = 0, total = 0, mal = 0;
	  	var msg = "";
	  	var aStock = [];
	  	
		var qLocal = new FLSqlQuery;
		qLocal.setSelect("codtarjetapuntos, saldopuntos");
		qLocal.setFrom("tpv_tarjetaspuntos");
		//qLocal.setWhere("codtarjetapuntos LIKE '" + codTiendaSiguiente + "%' AND fechamod < '" + fechaHasta + "' ORDER BY codtarjetapuntos");
		qLocal.setWhere("fechamod < '" + fechaHasta + "' ORDER BY codtarjetapuntos");
		if (!qLocal.exec()) {
			oRes.msg += "\n" + sys.translate("Error en checkPuntos. La consulta a la central ha fallado.");
			oRes.status = "warn";
			return oRes;
		}
		var qTienda = new FLSqlQuery("", codTienda);
		qTienda.setSelect("codtarjetapuntos, saldopuntossinc");
		qTienda.setFrom("tpv_tarjetaspuntos");
		//qTienda.setWhere("codtarjetapuntos LIKE '" + codTiendaSiguiente + "%' AND fechamod < '" + fechaHasta + "' ORDER BY codtarjetapuntos");
		qTienda.setWhere("fechamod < '" + fechaHasta + "' ORDER BY codtarjetapuntos");
		if (!qTienda.exec()) {
			oRes.msg += "\n" + sys.translate("Error en checkPuntos. La consulta a la tienda %1 ha fallado.").arg(codTienda);
			oRes.status = "warn";
			return oRes;
		}
		var claveL, claveT;
	  	var hayLocal = qLocal.first();
	  	var hayTienda = qTienda.first();
	  	var tabla = "tpv_tarjetaspuntos";
	  	
	  	if (!silent) {
			AQUtil.createProgressDialog(sys.translate("Comprobando tarjetas de la tienda %1 en %1...").arg(codTiendaSiguiente).arg(codTienda), qLocal.size());
	  	} else {
			flfactalma.iface.creaPDSilent(qLocal.size());
	  	}
	  	
	  	var cxCortada = false;
		//while ((hayLocal || hayTienda) && progreso < 1000) {
		var tarjetas = [];
		while (hayLocal || hayTienda) {
			total++;
			if (!(progreso % 100)) {
			  var fakeSha = mngModT.shaOfFile(tabla); // Para evitar que se cierre dbAux
			  fakeSha = mngModL.shaOfFile(tabla);
			}
			if (!dbL.isOpen() || !dbT.isOpen()) {
			  if (!flfactppal.iface.pub_appendTextToLogFile("CHECKPUNTOS", "CONEXIÓN CORTADA!")) {
			    sys.infoMsgBox("CONEXIÓN CORTADA!");
			  }
			  debug("conexión cortada 2");
			  cxCortada = true;
			  break;
			}
			if (hayLocal && hayTienda) {
			  claveL = qLocal.value("codtarjetapuntos");
			  claveT = qTienda.value("codtarjetapuntos");
			  
			  //debug("Clave Local " + claveL);
			  //debug("Clave Tienda " + claveT);
			  if (claveL == claveT) {
			  	if (qLocal.value("saldopuntos") != qTienda.value("saldopuntossinc")) {
			  		msg = "Tarjeta " + qLocal.value("codtarjetapuntos") + " Central: " + qLocal.value("saldopuntos") + " " + codTienda + ": " + qTienda.value("saldopuntossinc");
			  		debug("Mensaje " + msg);
			  		if (corregir) {
			  			tarjetas.push(claveL);
			    		//AQUtil.execSql("UPDATE tpv_tarjetaspuntos SET fechamod = CURRENT_DATE, horamod = CURRENT_DATE WHERE codtarjetapuntos = '" + claveL + "'");
			    	}
			  		flfactppal.iface.pub_appendTextToLogFile("CHECKPUNTOS", msg);
			  		mal++;
			  	}
			    hayLocal = qLocal.next();
			    if (!silent) {
			      AQUtil.setProgress(progreso++);
			    } else {
			      flfactalma.iface.setProgressPDSilent(progreso++);
			    }
			    hayTienda = qTienda.next();
			  } else if (claveL > claveT) {
			  		msg = "Tarjeta en " + codTienda + " no existe en cental. Tarjeta " + qTienda.value("codtarjetapuntos");
			  		debug(msg);
			  		flfactppal.iface.pub_appendTextToLogFile("CHECKPUNTOS", msg);
			    	hayTienda = qTienda.next();
			    	mal++;
			  } else {
			  		msg = "Tarjeta en central no existe en " + codTienda + ". Tarjeta " + qLocal.value("codtarjetapuntos");
			  		debug(msg);
			  		flfactppal.iface.pub_appendTextToLogFile("CHECKPUNTOS", msg);
			    	hayLocal = qLocal.next();
			    	if (corregir) {
			    		tarjetas.push(claveL);
			    		//AQUtil.execSql("UPDATE tpv_tarjetaspuntos SET fechamod = CURRENT_DATE, horamod = CURRENT_DATE WHERE codtarjetapuntos = '" + claveL + "'");
			    	}
					if (!silent) {
					  AQUtil.setProgress(progreso++);
					} else {
					  flfactalma.iface.setProgressPDSilent(progreso++);
					}
					mal++;
			    }
			} else if (!hayLocal) {
				msg = "Tarjeta en " + codTienda + " no existe en cental. Tarjeta " + qTienda.value("codtarjetapuntos");
		  		debug(msg);
		  		flfactppal.iface.pub_appendTextToLogFile("CHECKPUNTOS", msg);
				hayTienda = qTienda.next();
				mal++;
			} else {
		  		msg = "Tarjeta en central no existe en " + codTienda + ". Tarjeta " + qLocal.value("codtarjetapuntos");
		  		debug(msg);
		  		flfactppal.iface.pub_appendTextToLogFile("CHECKPUNTOS", msg);
				hayLocal = qLocal.next();
				if (corregir) {
		    		tarjetas.push(claveL);
		    		//AQUtil.execSql("UPDATE tpv_tarjetaspuntos SET fechamod = CURRENT_DATE, horamod = CURRENT_DATE WHERE codtarjetapuntos = '" + claveL + "'");
		    	}
			    if (!silent) {
			      AQUtil.setProgress(progreso++);
			    } else {
			      flfactalma.iface.setProgressPDSilent(progreso++);
			    }
			    mal++;
			}
	  	}
	  	if (corregir) {
	  		for (var i = 0; i < tarjetas.length; i++) {
	  			AQUtil.execSql("UPDATE tpv_tarjetaspuntos SET fechamod = CURRENT_DATE, horamod = CURRENT_DATE WHERE codtarjetapuntos = '" + tarjetas[i] + "'");
	  		}
		}
	  	if (!silent) {
		  	AQUtil.destroyProgressDialog();
	  	}
	  	if (cxCortada) {
	  		continue;
	  	}

		var por = total == 0 ? 0 : (mal * 100) / total;
		por = AQUtil.roundFieldValue(por, "pedidoscli", "total");
		oRes.msg += oRes.msg == "" ? "" : "\n";
		oRes.msg += codTienda + ". " + mal + " casos incorrectos sobre " + total + " (" + por + "%)";
		debug(oRes.msg);
		var fechaInit = initCheck.toString().left(10);
		var horaInit = initCheck.toString().right(8);

		if(AQUtil.sqlSelect("tpv_fechasincrotienda", "id", "codtienda = '" + codTienda + "' AND esquema = 'CHECK_PUNTOS'")) {
			if(!AQUtil.sqlUpdate("tpv_fechasincrotienda", ["fechasincro", "horasincro"], [fechaInit, horaInit], "codtienda = '" + codTienda + "' AND esquema = 'CHECK_PUNTOS'")) {
				oRes.msg += "\n" + sys.translate("Error en checkPuntos. No se ha podido actualizar el registro de tpv_fechasincrotienda para la tienda %1").arg(codTienda);
				oRes.status = oRes.status == "ok" ? "warn" : oRes.status;
				return oRes;
			}
		} else {
			if(!AQUtil.sqlInsert("tpv_fechasincrotienda", ["codtienda", "esquema", "fechasincro", "horasincro"], [codTienda, "CHECK_PUNTOS", fechaInit, horaInit])) {
				oRes.msg += "\n" + sys.translate("Error en checkPuntos. No se ha podido crear el registro de tpv_fechasincrotienda para la tienda %1").arg(codTienda);	
				oRes.status = oRes.status == "ok" ? "warn" : oRes.status;
				return oRes;
			}	
		}
	}
	flfactppal.iface.pub_appendTextToLogFile("CHECKPUNTOS", oRes.msg);
	return oRes;
}

function elganso_compruebaStockBarcode(oParam)
{
	var _i = this.iface;
	
	var codTienda =	oParam.codTienda;
	var corregir = oParam.corregir;
	var oStock = oParam.oStock;
	
	var msg = "Comprobando movimientos y regularizaciones para barcode " + oStock.barcode;
	debug(msg);
	flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
	
	var qMovL = new FLSqlQuery;
	qMovL.setSelect("idmovimiento, fechareal, horareal, idlineaco, idlineatto, idlineattd, cantidad, idstock");
	qMovL.setFrom("movistock");
	qMovL.setWhere("idstock = " + oStock.idstockcentral + " AND estado = 'HECHO' ORDER BY fechareal, horareal, cantidad");
	if (!qMovL.exec()) {
		return false;
	}
	var qMovT = new FLSqlQuery("", codTienda);
	qMovT.setSelect("idmovimiento, fechareal, horareal, idlineaco, idlineatto, idlineattd, cantidad, idstock");
	qMovT.setFrom("movistock");
	qMovT.setWhere("idstock = " + oStock.idstocktienda + " AND estado = 'HECHO' ORDER BY fechareal, horareal, cantidad");
	if (!qMovT.exec()) {
		return false;
	}
	
	var claveL, claveT;
  	var hayLocal = qMovL.first();
  	var hayTienda = qMovT.first();
  	
	while (hayLocal || hayTienda) {
  		claveL = hayLocal ? qMovL.value("fechareal").toString().left(10) + "_" + qMovL.value("horareal").toString().right(8) + "_" + qMovL.value("cantidad") : claveL;
  		claveT = hayTienda ? qMovT.value("fechareal").toString().left(10) + "_" + qMovT.value("horareal").toString().right(8) + "_" + qMovT.value("cantidad") : claveT;
    	if (hayLocal && hayTienda) {
      //debug("Clave Local " + claveL);
      //debug("Clave Tienda " + claveT);
      if (claveL == claveT) {
        hayLocal = qMovL.next();
        hayTienda = qMovT.next();
      } else if (claveL > claveT) {
      		msg = "Barcode " + oStock.barcode + ". Movimiento en " + codTienda + " " + qMovT.value("idmovimiento") + " F_H_Cantidad " + claveT + " no existen en central";
      		msg += _i.datosMovCheckStock(qMovT, codTienda, corregir, undefined);
      		debug(msg);
      		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
        	hayTienda = qMovT.next();
      } else {
      		msg = "Barcode " + oStock.barcode + ". Movimiento en central " + qMovL.value("idmovimiento") + " F_H_Cantidad " + claveL + " no existen en " + codTienda;
      		msg += _i.datosMovCheckStock(qMovL, undefined,  corregir, codTienda);
      		debug(msg);
      		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
        	hayLocal = qMovL.next();
        }
    } else if (!hayLocal) {
		msg = "Barcode " + oStock.barcode + ". Movimiento en " + codTienda + " " + qMovT.value("idmovimiento") + " F_H_Cantidad " + claveT + " no existen en central";
  		msg += _i.datosMovCheckStock(qMovT, codTienda, corregir, undefined);
  		debug(msg);
  		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
    	hayTienda = qMovT.next();
    } else {
  		msg = "Barcode " + oStock.barcode + ". Movimiento en central " + qMovL.value("idmovimiento") + " F_H_Cantidad " + claveL + " no existen en " + codTienda;
  		msg += _i.datosMovCheckStock(qMovL, undefined, corregir, codTienda);
  		debug(msg);
  		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
    	hayLocal = qMovL.next();
	}
  }
  
  	var qRegL = new FLSqlQuery;
	qRegL.setSelect("id, fecha, hora, idsincro, cantidadfin, egidsincroinv, egidlineapack");
	qRegL.setFrom("lineasregstocks");
	qRegL.setWhere("idstock = " + oStock.idstockcentral + " ORDER BY idsincro");
	if (!qRegL.exec()) {
		return false;
	}
	var qRegT = new FLSqlQuery("", codTienda);
	qRegT.setSelect("id, fecha, hora, idsincro, cantidadfin, egidsincroinv, egidlineapack");
	qRegT.setFrom("lineasregstocks");
	qRegT.setWhere("idstock = " + oStock.idstocktienda + " ORDER BY idsincro");
	if (!qRegT.exec()) {
		return false;
	}
	
	var claveL, claveT;
  	var hayLocal = qRegL.first();
  	var hayTienda = qRegT.first();
  	
	while (hayLocal || hayTienda) {
  		claveL = hayLocal ? qRegL.value("idsincro") : claveL;
  		claveT = hayTienda ? qRegT.value("idsincro") : claveT;
    	if (hayLocal && hayTienda) {
      //debug("Clave Local " + claveL);
      //debug("Clave Tienda " + claveT);
      if (claveL == claveT) {
        hayLocal = qRegL.next();
        hayTienda = qRegT.next();
      } else if (claveL > claveT) {
      		msg = "Barcode " + oStock.barcode + ". Regularización en " + codTienda + " " + qRegT.value("id") + " F_H_Cantidad " + qRegT.value("fecha").toString().left(10) + ":" + qRegT.value("hora").toString().right(8) + " cantidad " + qRegT.value("cantidadfin") + " no existe en central";
      		msg += _i.datosRegCheckStock(qRegT, codTienda, corregir, undefined);
      		debug(msg);
      		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
        	hayTienda = qRegT.next();
      } else {
      		msg = "Barcode " + oStock.barcode + ". Regularización en central " + qRegL.value("id") + " F_H_Cantidad " + qRegL.value("fecha").toString().left(10) + ":" + qRegL.value("hora").toString().right(8) + " cantidad " + qRegL.value("cantidadfin") + " no existe en " + codTienda;
      		msg += _i.datosRegCheckStock(qRegL, undefined, corregir, codTienda);
      		debug(msg);
      		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
        	hayLocal = qRegL.next();
        }
    } else if (!hayLocal) {
  		msg = "Barcode " + oStock.barcode + ". Regularización en " + codTienda + " " + qRegT.value("id") + " F_H_Cantidad " + qRegT.value("fecha").toString().left(10) + ":" + qRegT.value("hora").toString().right(8) + " cantidad " + qRegT.value("cantidadfin") + " no existe en central";
  		msg += _i.datosRegCheckStock(qRegT, codTienda, corregir, undefined);
  		debug(msg);
  		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
    	hayTienda = qRegT.next();
    } else {
  		msg = "Barcode " + oStock.barcode + ". Regularización en central " + qRegL.value("id") + " F_H_Cantidad " + qRegL.value("fecha").toString().left(10) + ":" + qRegL.value("hora").toString().right(8) + " cantidad " + qRegL.value("cantidadfin") + " no existe en " + codTienda;
  		msg += _i.datosRegCheckStock(qRegL, undefined, corregir, codTienda);
  		debug(msg);
  		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
    	hayLocal = qRegL.next();
	}
  }

	//Update a pelo de la cantidad de la tienda sobre la central
	if(corregir) {
		var canTienda = AQUtil.quickSqlSelect("stocks", "cantidad", "idstock = " + oStock.idstocktienda, codTienda);
		AQUtil.execSql("UPDATE stocks SET cantidad = " + canTienda + " WHERE idstock = " + oStock.idstockcentral);
	}
  
	return true;
}

function elganso_datosMovCheckStock(qMov, codTienda, corregir, tiendaObjetivo)
{
	var _i = this.iface;
	var msg = "";
	codTienda = codTienda && codTienda != "" ? codTienda : "default";
	tiendaObjetivo = tiendaObjetivo && tiendaObjetivo != "" ? tiendaObjetivo : "default";
	
	if (qMov.value("idlineaco")) {
		var codComanda = AQUtil.quickSqlSelect("tpv_lineascomanda lc INNER JOIN tpv_comandas c ON lc.idtpv_comanda = c.idtpv_comanda", "c.codigo", "lc.idtpv_linea = " + qMov.value("idlineaco"), codTienda);
		msg += " Venta " + codComanda;
		if (AQUtil.quickSqlSelect("tpv_comandas", "estado", "codigo = '" + codComanda + "'", codTienda) == 'Abierta') {
			msg += " La venta " + codComanda + " no se ha cerrado";
			_i.ventasAbiertas_[codComanda] = codTienda;
			_i.canStockMalUser_ ++;
		}
		else {
			if (corregir && codTienda != "default") {
				
				AQUtil.execSql("UPDATE tpv_comandas SET sincronizada = false WHERE codigo = '" + codComanda + "'", codTienda);
				msg += " Venta marcada para sincronizar";
				var idLinea = qMov.value("idlineaco");
				var idMovimiento = AQUtil.quickSqlSelect("tpv_lineascomanda l INNER JOIN movistock ms ON l.idtpv_linea = ms.idlineaco", "ms.idmovimiento", "l.idtpv_linea = " + idLinea + " AND l.barcode = ms.barcode AND l.cantidad <> (ms.cantidad * -1)", codTienda);
				if (idMovimiento) {
					var cantLinea = AQUtil.quickSqlSelect("tpv_lineascomanda", "cantidad", "idtpv_linea = " + idLinea, codTienda);
					AQUtil.execSql("UPDATE movistock SET cantidad = " + (cantLinea * -1) + " WHERE idlineaco = " + idLinea, codTienda);
					msg += " ___Actualizada cantidad del movimiento";
				}
/*
				var barcode = AQUtil.quickSqlSelect("tpv_lineascomanda", "barcode", "idtpv_linea = " + qMov.value("idlineaco"));
				var idLinea = qMov.value("idlineaco");
				if(!idLinea) {
					msg += " Venta marcada para sincronizar";
					return "";
				}

				var cantLinea = AQUtil.quickSqlSelect("tpv_lineascomanda", "cantidad", "idtpv_linea = " + idLinea, tiendaObjetivo);
				var cantMov = AQUtil.quickSqlSelect("movistock", "cantidad", "idlineaco = " + idLinea, tiendaObjetivo);
				if(cantLinea != (cantMov * -1)) {
					AQUtil.execSql("UPDATE movistock SET cantidad = " + (cantLinea * -1) + " WHERE idlineaco = " + idLinea, tiendaObjetivo);
				}
*/					
			}
		}
	} else if (qMov.value("idlineatto")) {
		var barcode = AQUtil.quickSqlSelect("tpv_lineasmultitransstock", "barcode", "idlinea = " + qMov.value("idlineatto"), codTienda);
		var numLinea = AQUtil.quickSqlSelect("tpv_lineasmultitransstock", "numlinea", "idlinea = " + qMov.value("idlineatto"), codTienda);
		var codViaje = AQUtil.quickSqlSelect("tpv_lineasmultitransstock", "idviajemultitrans", "idlinea = " + qMov.value("idlineatto"), codTienda);

		if (!AQUtil.quickSqlSelect("tpv_viajesmultitransstock", "enviocompletado", "idviajemultitrans = '" + codViaje + "'", codTienda)) {
			msg += " El envío " + codViaje + " no se ha completado.";
			_i.enviosIncompletos_[codViaje] = codTienda;
			_i.canStockMalUser_ ++;
		}
		else {
			var qV = new FLSqlQuery("", tiendaObjetivo);
			qV.setSelect("idlinea, idviajemultitrans, codalmadestino, codalmaorigen");
			qV.setFrom("tpv_lineasmultitransstock");
			qV.setWhere("barcode = '" + barcode + "' AND idviajemultitrans = '" + codViaje + "' AND numlinea = " + numLinea);
			if (!qV.exec()) {
				return "";
			}
			if (qV.first() && corregir) {
				msg += " Viaje " + codViaje + " desde " + qV.value("codalmaorigen") + " hacia " + qV.value("codalmadestino");
				if (codTienda == "default") {
					AQUtil.execSql("UPDATE tpv_viajesmultitransstock SET ptesincroenvio = true WHERE idviajemultitrans = '" + codViaje + "'", tiendaObjetivo);
					AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET excentral = 'PTE' WHERE idlinea = " + qV.value("idlinea"), tiendaObjetivo);
					msg += " Viaje marcado para sincronizar";
				}
			}
			if (corregir) {
				var fechaex = AQUtil.quickSqlSelect("tpv_lineasmultitransstock", "fechaex", "idlinea = " + qMov.value("idlineatto"), codTienda);
				var horaex = AQUtil.quickSqlSelect("tpv_lineasmultitransstock", "horaex", "idlinea = " + qMov.value("idlineatto"), codTienda);
				if (fechaex && horaex) {
					AQUtil.execSql("UPDATE movistock SET fechareal = '" + fechaex.toString().left(10) + "', horareal = '" + horaex.toString().right(8) + "' WHERE idmovimiento = " + qMov.value("idmovimiento"), codTienda);
					msg += " Fechas ajustadas para el movimiento origen_________________________________________________________________________________________";
					if(codTienda == "default")
						formregstocks.iface.revisarStock("idstock = " + qMov.value("idstock"));
					else
						msg += " Sincronizar envios y recepciones";
				}
			}
		}
	} else if (qMov.value("idlineattd")) {
		var barcode = AQUtil.quickSqlSelect("tpv_lineasmultitransstock", "barcode", "idlinea = " + qMov.value("idlineattd"), codTienda);
		var numLinea = AQUtil.quickSqlSelect("tpv_lineasmultitransstock", "numlinea", "idlinea = " + qMov.value("idlineattd"), codTienda);
		var codViaje = AQUtil.quickSqlSelect("tpv_lineasmultitransstock", "idviajemultitrans", "idlinea = " + qMov.value("idlineattd"), codTienda);

		if (!AQUtil.quickSqlSelect("tpv_viajesmultitransstock", "recepcioncompletada", "idviajemultitrans = '" + codViaje + "'", codTienda)) {
			msg += " La recepción " + codViaje + " no se ha completado.";
			_i.recepcionesIncompletas_[codViaje] = codTienda;
			_i.canStockMalUser_ ++;
		}
		else {
			var qV = new FLSqlQuery("", tiendaObjetivo);
			qV.setSelect("idlinea, idviajemultitrans, codalmadestino, codalmaorigen");
			qV.setFrom("tpv_lineasmultitransstock");
			qV.setWhere("barcode = '" + barcode + "' AND idviajemultitrans = '" + codViaje + "' AND numlinea = " + numLinea);
			if (!qV.exec()) {
				return "";
			}
			if (qV.first() && corregir) {
				msg += " Viaje " + codViaje + " desde " + qV.value("codalmaorigen") + " hacia " + qV.value("codalmadestino");
				if (codTienda == "default") {
					AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET rxcentral = 'PTE' WHERE idlinea = " + qV.value("idlinea"), tiendaObjetivo);
					msg += " Viaje marcado para sincronizar";
				}
			}
			if (corregir) {
				var fecharx = AQUtil.quickSqlSelect("tpv_lineasmultitransstock", "fecharx", "idlinea = " + qMov.value("idlineattd"), codTienda);
				var horarx = AQUtil.quickSqlSelect("tpv_lineasmultitransstock", "horarx", "idlinea = " + qMov.value("idlineattd"), codTienda);
				if (fecharx && horarx) {
					AQUtil.execSql("UPDATE movistock SET fechareal = '" + fecharx.toString().left(10) + "', horareal = '" + horarx.toString().right(8) + "' WHERE idmovimiento = " + qMov.value("idmovimiento"), codTienda);
					msg += " Fechas ajustadas para el movimiento destino_________________________________________________________________________________________";
					if(codTienda == "default")
						formregstocks.iface.revisarStock("idstock = " + qMov.value("idstock"));
					else
						msg += " Sincronizar envios y recepciones";
				}
			}
		}
	}
	return msg;
}

function elganso_datosRegCheckStock(qReg, codTienda, corregir, tiendaObjetivo)
{
	var _i = this.iface;
	var msg = " . Inventario " + qReg.value("egidsincroinv");
	codTienda = codTienda && codTienda != "" ? codTienda : "default";
	tiendaObjetivo = tiendaObjetivo && tiendaObjetivo != "" ? tiendaObjetivo : "default";

	if (codTienda != "default" && corregir) {
		if (qReg.value("egidlineapack")) {
			if (!AQUtil.execSql("UPDATE lineasregstocks SET sincronizado = false WHERE id = " + qReg.value("egidlineapack"), codTienda)) {
				return false;
			}
			msg += " Actualizada su línea de regularización de pack " + qReg.value("egidlineapack") + " en " + codTienda;
		}
	}
	
	if (qReg.value("egidsincroinv")) {
		var idSincro = AQUtil.quickSqlSelect("eg_inventarios", "idsincro", "idsincro = '" + qReg.value("egidsincroinv") + "'", codTienda);
		if (!idSincro) {
			msg += " El inventario " + qReg.value("egidsincroinv") + " no existe";
		} else {
			if (!AQUtil.quickSqlSelect("eg_inventarios", "enviado", "idsincro = '" + qReg.value("egidsincroinv") + "'", codTienda)) {
				msg += " El inventario " + qReg.value("egidsincroinv") + " no se ha enviado";
				_i.inventarios_[qReg.value("egidsincroinv")] = codTienda;
				_i.canStockMalUser_ ++;
			} else {
				if (corregir && codTienda != "default") {
					AQUtil.execSql("UPDATE eg_inventarios SET sincronizado = false WHERE idsincro = '" + qReg.value("egidsincroinv") + "'", codTienda);
					AQUtil.execSql("UPDATE lineasregstocks SET sincronizado = false WHERE egidsincroinv = '" + qReg.value("egidsincroinv") + "'", codTienda);
					msg += " Inventario marcado para sincronizar";
				}
			}
		}
	}
	return msg;
}

function elganso_serieMYaAlmacenAMAY(oParam)
{
	var _i = this.iface;
	
	var qP = new FLSqlQuery;
	qP.setSelect("idpedido, codigo");
	qP.setFrom("pedidoscli");
	qP.setWhere("codserie = 'MY' AND codalmacen <> 'AMAY'");
	if (!qP.exec()) {
		return false;
	}
	var lista = "";
	while (qP.next()) {
		lista += "Pedido " + qP.value("codigo") + "\n";
		if (!AQUtil.execSql("UPDATE pedidoscli SET codalmacen = 'AMAY' WHERE idpedido = " + qP.value("idpedido"))) {
			return false;
		}
		if (!_i.reprocesaStockLineasPedido(qP.value("idpedido"))) {
			return false;
		}
	}
	var qA = new FLSqlQuery;
	qA.setSelect("idalbaran, codigo");
	qA.setFrom("albaranescli");
	qA.setWhere("codserie = 'MY' AND codalmacen <> 'AMAY'");
	if (!qA.exec()) {
		return false;
	}
	while (qA.next()) {
		lista += "Albarán " + qA.value("codigo") + "\n";
		if (!AQUtil.execSql("UPDATE albaranescli SET codalmacen = 'AMAY' WHERE idalbaran = " + qA.value("idalbaran"))) {
			return false;
		}
		if (!_i.reprocesaStockLineasAlbaran(qA.value("idalbaran"))) {
			return false;
		}
	}
	sys.infoMsgBox(sys.translate("Se han procesado los siguientes documentos: \n%1").arg(lista));
	return true;
}

function elganso_reprocesaPacksAZPR(oParam)
{
	var _i = this.iface;
	
	var qP = new FLSqlQuery;
	qP.setSelect("idalbaran, codigo");
	qP.setFrom("albaranesprov");
	qP.setWhere("codalmacen = 'AZPR'");
	if (!qP.exec()) {
		return false;
	}
	var lista = "";
	while (qP.next()) {
		lista += "Albarán " + qP.value("codigo") + "\n";
		if (!_i.reprocesaStockLineasAlbaranProv(qP.value("idalbaran"))) {
			return false;
		}
	}
	sys.infoMsgBox(sys.translate("Se han procesado los siguientes documentos: \n%1").arg(lista));
	return true;
}

function elganso_reprocesaStockLineasPedido(idPedido)
{
	var _i = this.iface;

	var curL = new FLSqlCursor("lineaspedidoscli");
	curL.select("idpedido = " + idPedido);
	if (!curL.first()) {
		return false;
	}
	curL.setModeAccess(curL.Edit);
	curL.refreshBuffer();
	if (!flfactalma.iface.borrarEstructura(curL)) {
		return false;
	}
	if (!flfactalma.iface.generarEstructura(curL)) {
		return false;
	}
	return true;
}

function elganso_reprocesaStockLineasAlbaran(idAlbaran)
{
	var _i = this.iface;

	var curL = new FLSqlCursor("lineasalbaranescli");
	curL.select("idalbaran = " + idAlbaran);
	if (!curL.first()) {
		return false;
	}
	curL.setModeAccess(curL.Edit);
	curL.refreshBuffer();
	if (!flfactalma.iface.borrarEstructura(curL)) {
		return false;
	}
	if (!flfactalma.iface.generarEstructura(curL)) {
		return false;
	}
	return true;
}

function elganso_reprocesaStockLineasAlbaranProv(idAlbaran) /// (Solo packs)
{
	var _i = this.iface;

	var curL = new FLSqlCursor("lineasalbaranesprov");
	curL.select("idalbaran = " + idAlbaran);
	
	while (curL.next()) {
		curL.setModeAccess(curL.Edit);
		curL.refreshBuffer();
		debug("Referencia " + curL.valueBuffer("referencia"));
	
		if (!flfactalma.iface.borrarEstructura(curL)) {
			return false;
		}
		if (!flfactalma.iface.generarEstructura(curL)) {
			return false;
		}
	}
/*
  	if (AQUtil.sqlSelect("articulos", "stockcomp", "referencia = '" + curL.valueBuffer("referencia") + "'")) {
  	debug("ES PACK____");
		if (!flfactalma.iface.borrarEstructura(curL)) {
			return false;
		}
		if (!flfactalma.iface.generarEstructuraPack(curL)) {
			return false;
		}
	}
	*/
	return true;
}

function elganso_dameFechaActual(oParam)
{
	var _i = this.iface;
	
	var f = AQUtil.quickSqlSelect("factppal_general", "CURRENT_DATE", "1 = 1");
	debug(f.toString().left(10));

	var t = AQUtil.quickSqlSelect("factppal_general", "CURRENT_TIME", "1 = 1");
	debug(t);
	debug(t.toString().right(8));

	return true;
}

function elganso_limpieza()
{
	var _i = this.iface;
	var msg = "";
	var funciones = [];
	var antes, despues, ok;

	var oP = {};
	oP.fecha = flfactppal.iface.dameFechaActual();

	funciones.push(["egLimpiatpv_almamultitransstock", "tpv_almamultitransstock"]);
	funciones.push(["egLimpiatpv_artmultitransstock", "tpv_artmultitransstock"]);
	funciones.push(["egLimpiatpv_barcodemultitransstock", "tpv_barcodemultitransstock"]);
	funciones.push(["egLimpiamrw_datoenviobin", "mrw_datoenviobin"]);

	msg += "LIMPIEZA DE REGISTROS\n\n";
	for(var i = 0; i < funciones.length; i++) {
		antes = AQUtil.sqlSelect(funciones[i][1], "count(*)", "1 = 1");
		f = new Function("oP", "return formmt_procesos.iface." + funciones[i][0] + "(oP);");
		ok = f(oP)
		despues = AQUtil.sqlSelect(funciones[i][1], "count(*)", "1 = 1");
		if (ok) {
			msg += "\n\n";
			msg += "Tabla " + funciones[i][1] + ":\n";
			msg += "Antes " + AQUtil.formatoMiles(antes) + " registros.\n";
			msg += "Después " + AQUtil.formatoMiles(despues) + " registros.\n";
			msg += "Eliminados " + AQUtil.formatoMiles(antes - despues) + " registros.";
		}
		else
			msg += (msg == "" ? "" : "\n\n") + "Hubo un error durante la limpieza de la tabla " + funciones[i][1];
	}
	debug(msg);

	_i.enviaCorreoDia("Limpieza de registros", msg);
	return true;
}

function elganso_egLimpiatpv_almamultitransstock(oP)
{
	if(!AQUtil.execSql("DELETE FROM tpv_almamultitransstock WHERE codmultitransstock NOT IN (SELECT DISTINCT(codmultitransstock) FROM tpv_viajesmultitransstock WHERE estado IN ('PTE ENVIO','ENVIADO PARCIAL') AND fecha >= '2014-01-01');"))
		return false;
	return true;
}

function elganso_egLimpiatpv_artmultitransstock(oP)
{
	if(!AQUtil.execSql("DELETE FROM tpv_artmultitransstock WHERE codmultitransstock NOT IN (SELECT DISTINCT(codmultitransstock) FROM tpv_viajesmultitransstock WHERE estado IN ('PTE ENVIO','ENVIADO PARCIAL') AND fecha >= '2014-01-01');"))
		return false;
	return true;
}

function elganso_egLimpiatpv_barcodemultitransstock(oP)
{
	if(!AQUtil.execSql("DELETE FROM tpv_barcodemultitransstock WHERE codmultitransstock NOT IN (SELECT DISTINCT(codmultitransstock) FROM tpv_viajesmultitransstock WHERE estado IN ('PTE ENVIO','ENVIADO PARCIAL') AND fecha >= '2014-01-01');"))
		return false;
	return true;
}

function elganso_egLimpiamrw_datoenviobin(oP)
{
	if(!AQUtil.execSql("DELETE FROM mrw_datoenviobin WHERE idalbaran NOT IN (SELECT idalbaran FROM albaranescli WHERE fecha > CURRENT_DATE - INTERVAL '90 days');"))
		return false;
	return true;
}

function elganso_diagnostico(oParam)
{
	var _i = this.iface;
	//var silent = (oParam == "SILENT");
	var horaInitDiagnostico = flfactppal.iface.dameTiempoActual();
	
	var oP = {
		silent : true
	};
	
	var _fA = flfactalma.iface;
	var _fP = flfactppal.iface;
	var _fTpv = flfact_tpv.iface;
	
	var silent = !sys.interactiveGUI();
	var nombreLog;
	if (silent) {
		var nombreLog = formtpv_tiendas.iface.dameNombreLog("DIAGNOSTICO");
		nombreLog_ = _fA.pub_ponLogName(nombreLog);
		
		var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
		if (!dirLog || dirLog == "") {
			dirLog = Dir.home;
		}
		dirLog += dirLog.endsWith("/") ? "" : "/";
		var logFile_ = dirLog + nombreLog;
		if (!_fP.pub_abreLogFile(nombreLog_, logFile_)) {
			sys.infoMsgBox("No se ha creado el fichero del log de la sincronización.");
		}
		_fP.pub_appendTextToLogFile(nombreLog_, sys.translate("Comenzando diagnóstico"));
	}	
	
	var status = "ok";
	var msg = "", msgLog;
	var funciones = [];
	//funciones.push(["egCheckSincroStockMagento", sys.translate("Control de stocks que no han sincronizado con Magento")]);
	funciones.push(["egCheckSincroVentasTpv", sys.translate("Control de sincronización del esquema de ventas.")]);
	funciones.push(["egCheckSincroStocks", sys.translate("Control de sincronización del esquema de stocks.")]);
	funciones.push(["egCheckSincroTxPuntos", sys.translate("Control de sincronización del esquema de transmisión de puntos (TX_PUNTOS).")]);
	//funciones.push(["egCheckStockDiffs", sys.translate("Control de diferencias entre stocks en la central y en la tienda.")]);
	//funciones.push(["egCheckInventariosDiffs", sys.translate("Control de diferencias entre inventarios en la central y en la tienda.")]);
	//funciones.push(["egCheckViajesDiffs", sys.translate("Control de diferencias entre viajes en la central y en la tienda.")]);
	funciones.push(["egCheckPuntosDiffs", sys.translate("Control de diferencias entre puntos en la central y en la tienda.")]);
	funciones.push(["egCheckVentasFacturadas", sys.translate("Control de sincronización del esquema de ventas facturadas.")]);
	funciones.push(["egCheckSincroClientesyPedidos", sys.translate("Control de sincronización de clientes y pedidos de la web.")]);
	funciones.push(["egComprobarPedidosNoSincronizados", sys.translate("Comprobar pedidos no sincronizados")]);
	funciones.push(["egComprobarVentasTpvWeb", sys.translate("Comprobar generación de ventas web")]);
	funciones.push(["egComprobarFacturasPortugal", sys.translate("Comprobar firma de facturas de portugal")]);
	//funciones.push(["egCheckSincroFicheros", sys.translate("Control de sincronización de ficheros de instalación.")]);
	funciones.push(["egCheckLineasViajeTransito", sys.translate("Control de líneas de viaje en tránsito.")]);
	var oRes;
	var f;
	for (var i = 0; i < funciones.length; i++) {
		f = new Function("oP", "return formmt_procesos.iface." + funciones[i][0] + "(oP);");
		if (silent) {
			_fP.pub_appendTextToLogFile(nombreLog_, funciones[i][1]);
		}
		oRes = f(oP);
		if (!oRes) {
			status = "error"
			msgLog = sys.translate("ERROR en \"%1\"").arg(funciones[i, 1]);
		} else {
			if(status == "ok")
				status = oRes.status;
			else if(oRes.status == "error")
				status = oRes.status;

			if(oRes.msg != "")
				msgLog = oRes.msg;
			else if(oRes.status == "ok")
				msgLog = sys.translate("OK");
			else if(oRes.status == "warn")
				msgLog = sys.translate("Hay errores leves");
			else 
				msgLog = sys.translate("¡Error! Hay procesos que requieren tu atención");
		}
		msg += msg == "" ? oRes.desc : "\n\n" + oRes.desc;
		msg += "\n--------------------------------------------------------------------------";
		msg += msgLog != "" ? "\n" + msgLog : "";
		if (silent) {
			_fP.pub_appendTextToLogFile(nombreLog_, msgLog);
		}
	}
	if(status == "ok")
		asunto = sys.translate("Diagnóstico ElGanso: comprobaciones correctas");
	else if(status == "warn")
		asunto = sys.translate("Diagnóstico ElGanso: hay errores leves.");
	else 
		asunto = sys.translate("¡ERROR! Diagnóstico ElGanso: hay procesos que requieren tu atención");

	if (!silent) {
		sys.infoMsgBox(asunto + "\n" + msg);
	}
	if((status != "ok") || _i.egCheckRangoHorasEsquema("MAIL_DIAGNOSTICO", horaInitDiagnostico))
		_i.enviaCorreoDia(asunto, msg);
	return true;
}

function elganso_egCheckSincroStockMagento(oParam)
{
	var oRes = { "ok" : true, "msg" :""};
	
	var hoy = flfactppal.iface.pub_dameFechaActual();
	var stocksNoSinc = AQUtil.sqlSelect("eg_sincrostockweb", "COUNT(*)", "fecha < '" + hoy + "' AND NOT sincronizado");
	stocksNoSinc = isNaN(stocksNoSinc) ? 0 : stocksNoSinc;
	if (stocksNoSinc > 0) {
		oRes.ok = false;
		oRes.msg = sys.translate("Hay %1 stocks por sincronizar con Magento").arg(stocksNoSinc);
	}
	return oRes;
}

function elganso_egCheckSincroEsquema(esquema, horasSinSincro)
{
	var _i = this.iface;

	var oRes = { "status" : "ok", "msg" :""};

	var fecha = flfactppal.iface.pub_dameFechaActual();
	var hora = flfactppal.iface.pub_dameHoraActual();
	var ahora = Date.parse(fecha + "T" + hora);

	if(!_i.egCheckRangoHorasEsquema(esquema, Date(ahora).toString()))
		return oRes;

	horasSinSincro *= -3600000;

	var tiempoSincro = Date(ahora + horasSinSincro).toString();
	var fechaSincro = tiempoSincro.left(10);
	var horaSincro = tiempoSincro.right(8);

	var qSincro = new AQSqlQuery;
	qSincro.setSelect("t.descripcion, fst.fechasincro, fst.horasincro");
	qSincro.setFrom("tpv_tiendas t INNER JOIN tpv_fechasincrotienda fst ON t.codtienda = fst.codtienda AND fst.esquema = '" + esquema + "' AND t.sincroactiva");
	qSincro.setWhere("(fst.fechasincro < '" + fechaSincro + "' OR (fst.fechasincro = '" + fechaSincro + "' AND fst.horasincro < '" + horaSincro + "')) ORDER BY fst.fechasincro, fst.horasincro");
	if (!qSincro.exec()) {
		return false;
	}
	var tiendasSinSincro = 0;
	while (qSincro.next()) {
		tiendasSinSincro++;
		oRes.msg += sys.translate("La tienda %1 no sincroniza el esquema %2 desde el día %3 a las %4").arg(qSincro.value("t.descripcion")).arg(esquema).arg(AQUtil.dateAMDtoDMA(qSincro.value("fst.fechasincro"))).arg(qSincro.value("fst.horasincro").toString().right(8));
		oRes.msg += "\n";
	}

	//Provisional
	if(esquema != "VENTAS_TPV")
		return oRes;

	if(tiendasSinSincro > 0 && tiendasSinSincro <= 5)
		oRes.status = "warn";
	else if(tiendasSinSincro > 5)
		oRes.status = "error";

	return oRes;
}

function elganso_egCheckRangoHorasEsquema(esquema, tiempoActual)
{	
	var fechaActual = tiempoActual.left(10);
	tiempoActual = Date.parse(tiempoActual);

	var horaMax, horaMin;
	switch(esquema) {
		case "MAIL_DIAGNOSTICO": {
			horaMin = Date.parse(fechaActual + "T21:30:00");
			horaMax = Date.parse(fechaActual + "T23:30:00");
			break;
		}
		case "VENTAS_TPV": {
			horaMin = Date.parse(fechaActual + "T10:00:00");
			horaMax = Date.parse(fechaActual + "T23:00:00");
			break;
		}
		case "TX_FLFILES": {
			horaMin = Date.parse(fechaActual + "T21:30:00");
			horaMax = Date.parse(fechaActual + "T23:00:00");
			break;
		}
		case "STOCKS": {
			horaMin = false;
			horaMax = false;
			break;
		}
		default: {
			horaMin = false;
			horaMax = false;
			break;
		}
	}

	if(!horaMin || !horaMax)
		return true;
	if((tiempoActual - horaMin) < 0)
		return false;
	if((tiempoActual - horaMax) > 0)
		return false;

	return true;
}

function elganso_egCheckSincroVentasTpv(oParam)
{
	var _i = this.iface;

	oRes = _i.egCheckSincroEsquema("VENTAS_TPV", 4);
	oRes.desc = "Sincronización de Ventas de TPV";

	return oRes;
}
function elganso_egCheckSincroTxPuntos(oParam)
{
	var _i = this.iface;

	oRes = _i.egCheckSincroEsquema("TX_PUNTOS", 4);
	oRes.desc = "Sincronización de transmisión de puntos (TX_PUNTOS)";

	return oRes;
}

function elganso_egCheckSincroStocks(oParam)
{
	var _i = this.iface;

	oRes = _i.egCheckSincroEsquema("STOCKS", 18);
	oRes.desc = "Sincronización de Stocks";

	return oRes;
}

function elganso_egCheckStockDiffs(oParam)
{
	var _i = this.iface;

	oRes = _i.egCheckStocks("+6", "T");
	oRes.desc = "Comprobación de Stocks erróneos";

	return oRes;
}

function elganso_egCheckViajesDiffs(oParam)
{
	var _i = this.iface;

	oRes = _i.egCheckViajes("+6", "T");
	oRes.desc = "Comprobación de Viajes erróneos";

	return oRes;
}

function elganso_egCheckInventariosDiffs(oParam)
{
	var _i = this.iface;

	oRes = _i.egCheckInventarios("+6", "T");
	oRes.desc = "Comprobación de Inventarios erróneos";

	return oRes;
}

function elganso_egCheckPuntosDiffs(oParam)
{
	var _i = this.iface;

	oRes = _i.egCheckPuntos("+4", "F");
	oRes.desc = "Comprobación de puntos erróneos";

	return oRes;
}

function elganso_egCheckVentasFacturadas(oParam)
{
	var oRes = { "status" : "ok", "msg" :"", "desc" : "Comprobación de Ventas facturadas" };

	var fechaMin = "2015-05-13";

	var qSincro = new AQSqlQuery;
	qSincro.setSelect("f.fecha, c.egcodfactura, f.codigo, c.codigo");
	qSincro.setFrom("tpv_comandas c inner join facturascli f on c.idfactura = f.idfactura");
	qSincro.setWhere("c.egcodfactura <> f.codigo AND f.fecha >= '" + fechaMin + "' ORDER BY f.fecha");
	if (!qSincro.exec()) {
		return false;
	}
	while (qSincro.next()) {
		oRes.status = oRes.status == "ok" ? "warn" : oRes.status;
		oRes.msg += sys.translate("La factura %1 del día %2 no coincide con el código %3 que tiene su venta (Ticket No. %4)").arg(qSincro.value("f.codigo")).arg(AQUtil.dateAMDtoDMA(qSincro.value("f.fecha"))).arg(qSincro.value("c.egcodfactura")).arg(qSincro.value("c.codigo"));
		oRes.msg += "\n";
	}

	return oRes;
}

function elganso_egCheckSincroClientesyPedidos(oParam)
{
	var oRes = { "status" : "ok", "msg" : "", "desc" : "Comprobación de Sincronización de clientes y pedidos" };

	var qSincro = new AQSqlQuery;
	qSincro.setSelect("estado");
	qSincro.setFrom("mg_importfiles");
	qSincro.setWhere("estado <> 'OK'");
	if (!qSincro.exec()) {
		return false;
	}
	if(qSincro.size() > 0) {
		oRes.status = "error";
		oRes.msg = sys.translate("Error en la sincronización de clientes y pedidos de la web");
	}
	return oRes;
}

function elganso_egCheckSincroFicheros(oParam)
{
	var _i = this.iface;
	var oRes = { "status" : "ok", "msg" : "", "desc" : "Comprobación de sincronización de ficheros de instalación" };

	//if(!_i.egCheckRangoHorasEsquema("TX_FLFILES", flfactppal.iface.dameTiempoActual()))
	//	return oRes;

	if(!_i.egConexionCentralInstalacion()) {
		oRes.status = "warn";
		oRes.msg = "No se ha podido conectar con la central de instalación";
		return oRes;
	}

	var f = AQUtil.sqlSelect("factppal_general", "fechaultinst", "1 = 1", "", "instalacion");
	var h = AQUtil.sqlSelect("factppal_general", "horaultinst", "1 = 1", "", "instalacion");

	if(!f || f == "" || !h || h == "")
		return oRes;

	f = f.toString().left(10);
	h = h.toString().right(8);

	var q = new FLSqlQuery("", "instalacion");
	q.setSelect("codtienda, fechasincro, horasincro");
	q.setFrom("tpv_fechasincrotienda");
	q.setWhere("esquema = 'TX_FLFILES' AND (fechasincro < '" + f + "' OR (fechasincro = '" + f + "' AND horasincro < '" + h + "'))");
	if (!q.exec()) {
		oRes.status = "error";
		oRes.msg = "Error en la consulta.";
		return oRes;	
	}
	while(q.next()) {
		oRes.status = oRes.status == "ok" ? "warn" : oRes.status;
		oRes.msg += oRes.msg == "" ? "La última instalación en central se hizo el día " + AQUtil.dateAMDtoDMA(f) + " a las " + h : "";
		oRes.msg += "\nLa tienda " + q.value("codtienda") + " no sincroniza ficheros desde " + AQUtil.dateAMDtoDMA(q.value("fechasincro")) + " a las " + q.value("horasincro");
	}
	debug(oRes.status);
	debug(oRes.msg);

	return oRes;
}

function elganso_egCheckLineasViajeTransito(oParam)
{
	var _i = this.iface;
	var oRes = { "status" : "ok", "msg" : "", "desc" : "Comprobación de líneas de viaje en tránsito" };

	var silent = false;
	if ("silent" in oParam) {
		silent = oParam.silent;
	}
	var corregir = false;
	if (!silent) {
		corregir = MessageBox.information(sys.translate("¿Corregir?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton) == MessageBox.Yes;
	}

	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var q = new FLSqlQuery();
	q.setSelect("l.idlinea");
	q.setFrom("tpv_viajesmultitransstock v INNER JOIN tpv_lineasmultitransstock l ON v.idviajemultitrans = l.idviajemultitrans LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineattd");
	q.setWhere("ms.idmovimiento IS NULL AND l.estado = 'EN TRANSITO' AND v.fecha >= '2015-01-01' AND v.estado <> 'CANCELADO' AND NOT l.cerradorx ORDER BY l.idlinea");
	if (!q.exec()) {
		// oRes.status = "error";
		oRes.msg = "Error en la consulta.";
		return oRes;	
	}
	var cuenta = 0, p = 0;
	if (!silent) {
		AQUtil.createProgressDialog(sys.translate("Revisando líneas"), q.size());
	}
	while(q.next()) {
		if (!silent) {
			AQUtil.setProgress(++p);
		}
		if (corregir) {
			curL.select("idlinea = " + q.value("l.idlinea"));
			if (!curL.first()) {
				if (!silent) {
					AQUtil.destroyProgressDialog();
				}
				// oRes.status = "error";
				oRes.msg = "Error al tratar de localizar la línea " + q.value("l.idlinea");
				return oRes;
			}
			if (!flfactalma.iface.borrarEstructuraMTDestino(curL)) {
				if (!silent) {
					AQUtil.destroyProgressDialog();
				}
				// oRes.status = "error";
				oRes.msg = "Error al borrar la estructura de movimientos destino de la línea " + q.value("l.idlinea");
				return oRes;
			}
			if (!flfactalma.iface.generarEstructuraMTDestino(curL)) {
				if (!silent) {
					AQUtil.destroyProgressDialog();
				}
				// oRes.status = "error";
				oRes.msg = "Error al generar la estructura de movimientos destino de la línea " + q.value("l.idlinea");
				return oRes;
			}
		}
		if (!silent) {
			AQUtil.destroyProgressDialog();
		}
		cuenta++;
		debug("Linea " + q.value("l.idlinea"));
		debug(cuenta);
		//if (cuenta > 10) break;
	}
	if (cuenta == 0) {
		// oRes.status = "ok";
		oRes.msg = "OK. No hay líneas de viajes en tránsito sin movimiento pendiente de recibir";
	} else {
		// oRes.status = "error";
		oRes.msg = sys.translate("Error. Hay %1 líneas de viajes en tránsito sin movimiento pendiente de recibir").arg(cuenta);
	}
		
	debug(oRes.status);
	debug(oRes.msg);
	if (!silent) {
		sys.infoMsgBox(oRes.msg);
	}
	
	return oRes;
}


function elganso_egPonTiendaJornadas()
{
	var oRes = { "ok" : true, "msg" : "Tiendas actualizadas en jornadas."};
	var curJ = new FLSqlCursor("cp_jornadas");
	curJ.select("1=1");
	
	var p = 0;
	
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Actualizando campo tiendas de las jornadas"), AQUtil.sqlSelect("cp_jornadas", "COUNT(*)", "1=1"));
	while (curJ.next()) {
		AQUtil.setProgress(p++);
		curJ.setModeAccess(curJ.Edit);
		curJ.refreshBuffer();
		curJ.setValueBuffer("codtienda", curJ.valueBuffer("idsincro").toString().left(4));
		curJ.setValueBuffer("desctienda", AQUtil.sqlSelect("tpv_tiendas", "descripcion", "codtienda = '" + curJ.valueBuffer("idsincro").toString().left(4) + "'"));
		if(!curJ.commitBuffer()){
			oRes.msg += sys.translate("\nLa jornada %1 no se ha actualizado").arg(curJ.valueBuffer("idjornada"));
		}
	}

	AQUtil.destroyProgressDialog();
	
	return oRes;
}

function elganso_egActualizaTiempoJornadas()
{
	var oRes = { "ok" : true, "msg" :"Tiempo de las jornadas actualizado y formateado."};
	var curTJ = new FLSqlCursor("cp_tramosjornada");
	curTJ.select("1=1");
	
	var p = 0;
	
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Actualizando y formateando horas trabajadas y pausadas de las jornadas"), AQUtil.sqlSelect("cp_tramosjornada", "COUNT(*)", "1=1"));
	
	while (curTJ.next()) {
		AQUtil.setProgress(p++);
		curTJ.setModeAccess(curTJ.Edit);
		curTJ.refreshBuffer();
		if(!curTJ.commitBuffer()){
			oRes.msg += sys.translate("\nTramo de la jornada %1 no se ha actualizado").arg(curTJ.valueBuffer("idjornada"));
		}
	}

	AQUtil.destroyProgressDialog();
	
	return oRes;
}

function elganso_egActualizaCantidadPlanProd()
{
	var curPlan = new FLSqlCursor("eg_planproduccion");
	curPlan.select("1 = 1");

	while(curPlan.next()) {
		curPlan.setModeAccess(curPlan.Edit);
		curPlan.refreshBuffer();

		curPlan.setValueBuffer("cantidad", formRecordeg_planproduccion.iface.commonCalculateField("cantidad", curPlan));

		if(!curPlan.commitBuffer()) {
			sys.warnMsgBox("Ha ocurrido un error.");
			return false;
		}
	}

	return true;
}

function elganso_egActualizaCantRecibidaPlanProd()
{
	var curPlan = new FLSqlCursor("eg_planproduccion");
	curPlan.select("1 = 1");

	while(curPlan.next()) {
		curPlan.setModeAccess(curPlan.Edit);
		curPlan.refreshBuffer();

		curPlan.setValueBuffer("cantrecibida", formRecordeg_planproduccion.iface.commonCalculateField("cantrecibida", curPlan));

		if(!curPlan.commitBuffer()) {
			sys.warnMsgBox("Ha ocurrido un error.");
			return false;
		}
	}

	return true;
}

function elganso_egSincronizaFicherosCentral()
{
	var _i = this.iface;

	var nombreLog = formtpv_tiendas.iface.dameNombreLog("RX_FLFILES");
	var nombreFile;
	_i.nombreLog_ = flfactalma.iface.pub_ponLogName(nombreLog);
	var dirLog = flfact_tpv.iface.pub_valorDefectoTPV("dirlogs");
	if(!dirLog || dirLog == "")
		dirLog = Dir.home;
	if(dirLog.endsWith("/"))
		nombreFile = dirLog + _i.nombreLog_;
	else
		nombreFile = dirLog + "/" + _i.nombreLog_;
	if(!flfactppal.iface.pub_abreLogFile(_i.nombreLog_, nombreFile))
		sys.infoMsgBox("No se ha creado el fichero del log de la sincronización.");

	if(_i.egCompruebaInstalacion()) {
		if(!_i.egSincronizaRxFlfiles())
			return false;
	}

	return true;
}

function elganso_egCompruebaInstalacion()
{
	var _i = this.iface;

	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Comprobando última instalación.")){
		sys.infoMsgBox("Comprobando última instalación.");
	}

	if(!_i.egConexionCentralInstalacion())
		return false;

	var fechaUltInst = AQUtil.sqlSelect("factppal_general", "fechaultinst", "1 = 1", "", "instalacion");
	var horaUltInst = AQUtil.sqlSelect("factppal_general", "horaultinst", "1 = 1", "", "instalacion");

	if(!fechaUltInst || fechaUltInst == "" || !horaUltInst || horaUltInst == "") {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Todavía no se ha instalado.")){
			sys.infoMsgBox("Todavía no se ha instalado.");
		}
		return false;
	}

	var fechaUltRx = AQUtil.sqlSelect("tpv_fechasincrotienda", "fechasincro", "codtienda = 'ACEN' AND esquema = 'RX_FLFILES'");
	var horaUltRx = AQUtil.sqlSelect("tpv_fechasincrotienda", "horasincro", "codtienda = 'ACEN' AND esquema = 'RX_FLFILES'");

	if(!fechaUltRx || fechaUltRx == "" || !horaUltRx || horaUltRx == "") {
		return true;
	}

	fechaUltInst = fechaUltInst.toString().left(10);
	horaUltInst = horaUltInst.toString().right(8);
	fechaUltRx = fechaUltRx.toString().left(10);
	horaUltRx = horaUltRx.toString().right(8);

	if(fechaUltInst > fechaUltRx || (fechaUltInst == fechaUltRx && horaUltInst > horaUltRx)) {
		return true;
	}

	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Los ficheros ya están actualizados. No será necesaria la sincronización.")){
		sys.infoMsgBox("Los ficheros ya están actualizados. No será necesaria la sincronización.");
	}

	return false;
}

function elganso_egConexionCentralInstalacion()
{
	var _i = this.iface;
	var sTimeOut = 10;
	var masParamCon = "connect_timeout=" + sTimeOut.toString() + ";nogui";
	var nombreBD, usuario, password, puerto;
	
	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Conectando...")){
		sys.infoMsgBox("Conectando...");
	}

	try{
		//hardcodeado
		codTienda = "instalacion";
		host = "localhost";
		driver = "PostgreSQL";
		if(sys.nameBD().startsWith("comun")) {
			nombreBD = "comun_elganso_instalacion";
			usuario = "javier";
			password = "555zapato";
			puerto = "55432";
		}
		else {
			nombreBD = "elganso_instalacion";
			usuario = "elganso";
			password = "elganso";
			puerto = "5432";
		}
		if (!AQSql.addDatabase(driver, nombreBD, usuario, password, host, puerto, codTienda, masParamCon)) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se ha podido conectar con la BD " + nombreBD + ".")){
				sys.infoMsgBox("No se ha podido conectar con la BD " + nombreBD + ".");
			}
			return false;
		}
	}catch (e) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se ha podido conectar con la BD " + nombreBD + ".")){
			sys.infoMsgBox("No se ha podido conectar con la BD " + nombreBD + ".");
		}
		return false;
	}

	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Conectado correctamente.")){
		sys.infoMsgBox("Conectado correctamente.");
	}
	return true;
}

function elganso_egSincronizaRxFlfiles()
{
	var _i = this.iface;

	flfactalma.iface.pub_establecerConexionesSinc("default", "instalacion");
	if (!flfactalma.iface.pub_sincronizarTrans(true, "RX_FLFILES")) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Falló la sincronización del esquema RX_FLFILES.")){
			sys.warnMsgBox("Falló la sincronización del esquema RX_FLFILES.");
		}
		return false;
	}
	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Esquema RX_FLFILES sincronizado con éxito.")){
		sys.infoMsgBox("Esquema RX_FLFILES sincronizado con éxito.");
	}

	var result = flfactalma.iface.pub_dameResultadosSincro();
	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "\n" + result + "\n")){
		sys.infoMsgBox(result);
		return;
	}

	return true;
}

function elganso_egSincronizaFicherosTiendas()
{
	var _i = this.iface;
	var tiendasSincro = "";
	var fechaInst = flfactppal.iface.valorDefecto("fechaultinst");
	var horaInst = flfactppal.iface.valorDefecto("horaultinst");

	if(!fechaInst || fechaInst == "" || !horaInst || horaInst == "") {
		sys.infoMsgBox("Todavía no se ha instalado.");
		return true;
	}

	fechaInst = fechaInst.toString().left(10);
	horaInst = horaInst.toString().right(8);

	var q = new FLSqlQuery();
	q.setSelect("t.codtienda");
	q.setFrom("tpv_tiendas t LEFT OUTER JOIN tpv_fechasincrotienda fst ON t.codtienda = fst.codtienda AND fst.esquema = 'TX_FLFILES'");
	q.setOrderBy("t.codtienda");

	q.setWhere("t.sincroactiva AND (fst.codtienda IS NULL OR (fst.fechasincro < '" + fechaInst + "' OR (fst.fechasincro = '" + fechaInst + "' AND fst.horasincro < '" + horaInst + "')))");
	if(!q.exec()) {
		sys.warnMsgBox("Falló la consulta.");
		debug(q.sql());
		return false;
	}
	while(q.next()) {
		tiendasSincro += tiendasSincro == "" ? q.value("t.codtienda") : ("," + q.value("t.codtienda"));
	}

	if(tiendasSincro == "") {
		sys.infoMsgBox("Ninguna tienda necesita sincronización.");
		return true;
	}

	formtpv_tiendas.iface.silentSincro(tiendasSincro, "TX_FLFILES");
	return true;
}

function elganso_egMantenimientoRegistros()
{
	var _i = this.iface;
	var hoy = flfactppal.iface.dameFechaActual();
	var ahora = flfactppal.iface.dameHoraActual();
	var aTiendas = _i.dameTiendasXEsquema("TODAS", "ACCIONES_SINCRO").split(",");
	var tiendasSC = "", tiendasOk = "";

	_i.nombreLog_ = formtpv_tiendas.iface.dameNombreLog("ACCIONES_SINCRO_");
	var dirLog = flfact_tpv.iface.pub_valorDefectoTPV("dirlogs");

	if (!dirLog || dirLog == ""){
		dirLog = Dir.home;
	}
	var nombreFile;
	if (dirLog.endsWith("/")){
		nombreFile = dirLog + _i.nombreLog_;
	} else {
		nombreFile = dirLog + "/" + _i.nombreLog_;
	}
	if(!flfactppal.iface.pub_abreLogFile(_i.nombreLog_, nombreFile)){
		sys.infoMsgBox("No se ha creado el fichero del log de comprobación de stocks");
	}

	flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Ejecutando acciones de mantenimiento de registros.");
	flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Tiendas: " + aTiendas.join(","));

	for(var i = 0; i < aTiendas.length; i++) {
		flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Tienda: " + aTiendas[i]);
		flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Conectando...");
		if (!formtpv_tiendas.iface.pub_conectar(aTiendas[i], true)) {
			flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se ha podido conectar a la tienda " + aTiendas[i]);
			tiendasSC += tiendasSC == "" ? "" : ","
			tiendasSC += aTiendas[i];
			continue;
		}

		flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Conectado correctamente a " + aTiendas[i]);

		var fechaSincro = AQUtil.sqlSelect("tpv_fechasincrotienda", "fechasincro", "codtienda = '" + aTiendas[i] + "' AND esquema = 'ACCIONES_SINCRO'");
		var horaSincro = AQUtil.sqlSelect("tpv_fechasincrotienda", "horasincro", "codtienda = '" + aTiendas[i] + "' AND esquema = 'ACCIONES_SINCRO'");

		if(!fechaSincro || fechaSincro == "" || !horaSincro || horaSincro == "") {
			fechaSincro = "1975-01-01";
			horaSincro = "00:00:00";
		}
		else {
			fechaSincro = fechaSincro.toString().left(10);
			horaSincro = horaSincro.toString().right(8);
		}
		
		flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Ejecutando acciones desde " + fechaSincro + " " + horaSincro);

		var q = new FLSqlQuery();
		q.setSelect("accion, param");
		q.setFrom("eg_acciones_sincro");
		q.setWhere("fecha > '" + fechaSincro + "' OR (fecha = '" + fechaSincro + "' AND hora > '" + horaSincro + "')");

		if(!q.exec()) {
			debug(q.sql());
			flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Falló la consulta.");
			return false;
		}

		flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Ejecutando " + q.size() + " acciones.");

		while(q.next()) {
			flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, q.value("accion") + " " + q.value("param"));
			switch(q.value("accion")) {
				case "Eliminar referencia":
					var ref = AQUtil.sqlSelect("articulos", "referencia", "referencia = '" + q.value("param") + "'");
					if(ref && ref != "")
						continue;

					if(!AQUtil.execSql("DELETE FROM traducciones WHERE tabla = 'articulos' AND idcampo = '" + q.value("param") + "'", aTiendas[i])) {
						flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se han podido eliminar las traducciones para la referencia " + q.value("param"));
						return false;
					}
					if(!AQUtil.execSql("DELETE FROM atributosarticulos WHERE referencia = '" + q.value("param") + "'", aTiendas[i])) {
						flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se han podido eliminar los barcodes para la referencia " + q.value("param"));
						return false;
					}
					if(!AQUtil.execSql("DELETE FROM articulos WHERE referencia = '" + q.value("param") + "'", aTiendas[i])) {
						flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se ha podido eliminar la referencia " + q.value("param"));
						return false;
					}
					break;
				case "Eliminar barcode":
					var bar = AQUtil.sqlSelect("atributosarticulos", "barcode", "barcode = '" + q.value("param") + "'");
					if(bar && bar != "")
						continue;

					if(!AQUtil.execSql("DELETE FROM atributosarticulos WHERE barcode = '" + q.value("param") + "'", aTiendas[i])) {
						flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se ha podido eliminar el barcode " + q.value("param"));
						return false;
					}
					break;
				default:
					flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Caso no contemplado: " + q.value("accion"));
					break;
			}
		}

		flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Actualizando la fecha de sincronización.");

		if(fechaSincro == "1975-01-01") {
			if(!AQUtil.sqlInsert("tpv_fechasincrotienda", ["codtienda", "esquema", "fechasincro", "horasincro"], [aTiendas[i], "ACCIONES_SINCRO", hoy, ahora])) {
				flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se ha podido crear la fecha de sincronización para la tienda " + aTiendas[i]);
				return false;
			}
		}
		else {
			if(!AQUtil.sqlUpdate("tpv_fechasincrotienda", ["fechasincro", "horasincro"], [hoy, ahora], "codtienda = '" + aTiendas[i] + "' AND esquema = 'ACCIONES_SINCRO'")) {
				flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se ha podido actualizar la fecha de sincronización para la tienda " + aTiendas[i]);
				return false;
			}
		}

		tiendasOk += tiendasOk == "" ? "" : ","
		tiendasOk += aTiendas[i];
		flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Tienda " + aTiendas[i] + " actualizada correctamente.");
		flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "");
	}

	flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Proceso completado correctamente.");
	if(tiendasSC && tiendasSC != "")
		flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Tiendas sin conexión: " + tiendasSC);
	if(tiendasOk && tiendasOk != "")
		flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Tiendas Ok: " + tiendasOk);
	return true;
}

function elganso_egCheckInventarios(tiendas, paramCorregir)
{
	var _i = this.iface;

	var oRes = {"status" : "ok", "msg" : ""};
	var initCheck = flfactppal.iface.dameTiempoActual();

	var silent = true;
	if (typeof(tiendas) != "string") {
		tiendas = Input.getText(sys.translate("Tienda"));
		silent = false;
		if (!tiendas) {
			oRes.msg += "\n" + sys.translate("Error en checkInventarios. No se han informado tiendas a comprobar.");
			oRes.status = "warn";
			return oRes;
		}
		corregir = MessageBox.information(sys.translate("¿Corregir?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton) == MessageBox.Yes;
	} else {
		corregir = paramCorregir == "T";
	}
	tiendas = _i.dameTiendasXEsquema(tiendas, "CHECK_INVENTARIOS");

	var aTiendas = tiendas.split(",");

	var nombreLog = formtpv_tiendas.iface.dameNombreLog("CHECKINVENTARIOS");
	var dirLog = flfact_tpv.iface.pub_valorDefectoTPV("dirlogs");

	if (!dirLog || dirLog == "")
		dirLog = Dir.home;
	var nombreFile;
	if (dirLog.endsWith("/"))
		nombreFile = dirLog + nombreLog;
	else
		nombreFile = dirLog + "/" + nombreLog;

	if(!flfactppal.iface.pub_abreLogFile("CHECKINVENTARIOS", nombreFile))
		sys.infoMsgBox("No se ha creado el fichero del log de comprobación de inventarios.");

	var codTienda, invError;
	for (var i = 0; i < aTiendas.length; i++) {
		codTienda = aTiendas[i];
		invError = 0;
		flfactppal.iface.pub_appendTextToLogFile("CHECKINVENTARIOS", "\n" + "Comprobando " + codTienda);
	
		if (!formtpv_tiendas.iface.pub_conectar(codTienda, silent)) {
			oRes.msg += "\n" + sys.translate("Error en checkInventarios. No se ha podido conectar con la tienda %1").arg(codTienda);
			continue;
		}

		cx = codTienda;
		var codAlmacen = AQUtil.sqlSelect("tpv_tiendas", "codalmacen", "codtienda = '" + codTienda + "'");
			
		var qT = new FLSqlQuery ("", cx);
		qT.setSelect("i.idsincro, COUNT(*)");
		qT.setFrom("eg_inventarios i LEFT OUTER JOIN lineasregstocks l ON i.idsincro = l.egidsincroinv");
		qT.setWhere("i.codAlmacen = '" + codAlmacen + "' AND i.enviado AND i.sincronizado GROUP BY i.idsincro ORDER BY i.idsincro");
		if (!qT.exec())
			return oRes;

		var idInv, lineasRegT, lineasRegC;
		while(qT.next()) {
			idInv = qT.value("i.idsincro");
			lineasRegT = qT.value("COUNT(*)");
			lineasRegC = AQUtil.sqlSelect("lineasregstocks", "COUNT(*)", "egidsincroinv = '" + idInv + "'");

			lineasRegT = isNaN(lineasRegT) ? 0 : lineasRegT;
			lineasRegC = isNaN(lineasRegC) ? 0 : lineasRegC;

			if (lineasRegC == lineasRegT)
				continue;
			
			invError++;
			flfactppal.iface.pub_appendTextToLogFile("CHECKINVENTARIOS", "\n" + "Inventario erróneo. " + codTienda + ";" + idInv + ";" + lineasRegC + ";" + lineasRegT);

			if (corregir) {
				AQUtil.execSql("UPDATE lineasregstocks SET sincronizado = false WHERE egidsincroinv = '" + idInv + "'", cx);
				AQUtil.execSql("UPDATE eg_inventarios SET sincronizado = false WHERE idsincro = '" + idInv + "'", cx);
				AQUtil.execSql("UPDATE lineasregstocks l SET barcode = (SELECT barcode FROM stocks WHERE idstock = l.idstock) WHERE egidsincroinv = '" + idInv + "' AND barcode IS NULL", cx);
				AQUtil.execSql("UPDATE lineasregstocks l SET talla = (SELECT talla FROM stocks WHERE idstock = l.idstock) WHERE egidsincroinv = '" + idInv + "' AND talla IS NULL", cx);
			}
		}
		oRes.msg += "\n" + codTienda + ". " + invError + " inventarios erróneos.";

		if (corregir) {
			flfactppal.iface.pub_appendTextToLogFile("CHECKINVENTARIOS", "\n" + "Sincronizando.");
			formtpv_tiendas.iface.silentSincro(codTienda, "INVENTARIOS");
		}

		var fechaInit = initCheck.toString().left(10);
		var horaInit = initCheck.toString().right(8);

		flfactppal.iface.pub_appendTextToLogFile("CHECKINVENTARIOS", "\n" + "Actualizando FST.");
		if(AQUtil.sqlSelect("tpv_fechasincrotienda", "id", "codtienda = '" + codTienda + "' AND esquema = 'CHECK_INVENTARIOS'")) {
			if(!AQUtil.sqlUpdate("tpv_fechasincrotienda", ["fechasincro", "horasincro"], [fechaInit, horaInit], "codtienda = '" + codTienda + "' AND esquema = 'CHECK_INVENTARIOS'")) {
				oRes.msg += "\n" + sys.translate("Error en checkInventarios. No se ha podido actualizar el registro de tpv_fechasincrotienda para la tienda %1").arg(codTienda);	
				oRes.status = oRes.status == "ok" ? "warn" : oRes.status;
				return oRes;
			}
		}
		else {
			if(!AQUtil.sqlInsert("tpv_fechasincrotienda", ["codtienda", "esquema", "fechasincro", "horasincro"], [codTienda, "CHECK_INVENTARIOS", fechaInit, horaInit])) {
				oRes.msg += "\n" + sys.translate("Error en checkInventarios. No se ha podido crear el registro de tpv_fechasincrotienda para la tienda %1").arg(codTienda);	
				oRes.status = oRes.status == "ok" ? "warn" : oRes.status;
				return oRes;
			}	
		}
		flfactppal.iface.pub_appendTextToLogFile("CHECKINVENTARIOS", "\n" + "Fin comprobación " + codTienda);
	}
	flfactppal.iface.pub_appendTextToLogFile("CHECKINVENTARIOS", "\n" + oRes.msg);
	return oRes;
}

function elganso_egCheckViajes(tiendas, paramCorregir)
{
	var _i = this.iface;

	var oRes = {"status" : "ok", "msg" : ""};
	var initCheck = flfactppal.iface.dameTiempoActual();

	var silent = true;
	if (typeof(tiendas) != "string") {
		tiendas = Input.getText(sys.translate("Tienda"));
		silent = false;
		if (!tiendas) {
			oRes.msg += "\n" + sys.translate("Error en checkViajes. No se han informado tiendas a comprobar.");
			oRes.status = "warn";
			return oRes;
		}
		corregir = MessageBox.information(sys.translate("¿Corregir?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton) == MessageBox.Yes;
	} else {
		corregir = paramCorregir == "T";
	}
	tiendas = _i.dameTiendasXEsquema(tiendas, "CHECK_VIAJES");
	var fecha = "2015-09-01";

	var aTiendas = tiendas.split(",");

	var nombreLog = formtpv_tiendas.iface.dameNombreLog("CHECKVIAJES");
	var dirLog = flfact_tpv.iface.pub_valorDefectoTPV("dirlogs");

	if (!dirLog || dirLog == "")
		dirLog = Dir.home;
	var nombreFile;
	if (dirLog.endsWith("/"))
		nombreFile = dirLog + nombreLog;
	else
		nombreFile = dirLog + "/" + nombreLog;

	if(!flfactppal.iface.pub_abreLogFile("CHECKVIAJES", nombreFile))
		sys.infoMsgBox("No se ha creado el fichero del log de comprobación de viajes.");

	var codTienda;
	for (var i = 0; i < aTiendas.length; i++) {
		codTienda = aTiendas[i];
	
		if (!formtpv_tiendas.iface.pub_conectar(codTienda, silent)) {
			oRes.msg += "\n" + sys.translate("Error en checkViajes. No se ha podido conectar con la tienda %1").arg(codTienda);
			continue;
		}

		var oEnviosTC = _i.egSincronizarViajesIncompletos(codTienda, fecha, corregir);
		if(oEnviosTC.ok)
			oRes.msg += "\n" + codTienda + ". " + oEnviosTC.viajesError + " envíos T/C erróneos.";
		else
			oRes.msg += "\n" + codTienda + ". Error al comprobar envíos T/C.";

		var oRecepcionTC = _i.egSincronizarViajesRecepcionIncompletos(codTienda, fecha, corregir);
		if(oRecepcionTC.ok)
			oRes.msg += "\n" + codTienda + ". " + oRecepcionTC.viajesError + " recepciones T/C erróneas.";
		else
			oRes.msg += "\n" + codTienda + ". Error al comprobar recepciones T/C.";

		var oRecepcionCT = _i.egSincronizarViajesRecepcionTiendaIncompletos(codTienda, fecha, corregir);
		if(oRecepcionCT.ok)
			oRes.msg += "\n" + codTienda + ". " + oRecepcionCT.viajesError + " recepciones C/T erróneas.";
		else
			oRes.msg += "\n" + codTienda + ". Error al comprobar recepciones C/T.";

		if (corregir) {
			formtpv_tiendas.iface.silentSincro(codTienda, "TPV_RECEPCION_MULTITRANS");
			formtpv_tiendas.iface.silentSincro(codTienda, "TPV_ENVIO_MULTITRANS");
		}

		var fechaInit = initCheck.toString().left(10);
		var horaInit = initCheck.toString().right(8);

		if(AQUtil.sqlSelect("tpv_fechasincrotienda", "id", "codtienda = '" + codTienda + "' AND esquema = 'CHECK_VIAJES'")) {
			if(!AQUtil.sqlUpdate("tpv_fechasincrotienda", ["fechasincro", "horasincro"], [fechaInit, horaInit], "codtienda = '" + codTienda + "' AND esquema = 'CHECK_VIAJES'")) {
				oRes.msg += "\n" + sys.translate("Error en checkViajes. No se ha podido actualizar el registro de tpv_fechasincrotienda para la tienda %1").arg(codTienda);	
				oRes.status = oRes.status == "ok" ? "warn" : oRes.status;
				return oRes;
			}
		}
		else {
			if(!AQUtil.sqlInsert("tpv_fechasincrotienda", ["codtienda", "esquema", "fechasincro", "horasincro"], [codTienda, "CHECK_VIAJES", fechaInit, horaInit])) {
				oRes.msg += "\n" + sys.translate("Error en checkViajes. No se ha podido crear el registro de tpv_fechasincrotienda para la tienda %1").arg(codTienda);	
				oRes.status = oRes.status == "ok" ? "warn" : oRes.status;
				return oRes;
			}	
		}
	}
	flfactppal.iface.pub_appendTextToLogFile("CHECKVIAJES", "\n" + oRes.msg);
	return oRes;
}

function elganso_egSincronizarViajesIncompletos(codTienda, desde, corregir)
{
	var _i = this.iface;
	var oRes = {"ok": false, "viajesError": 0};
	
	cx = codTienda;
	var codAlmacen = AQUtil.sqlSelect("tpv_tiendas","codalmacen","codtienda = '" + codTienda + "'");
		
	var qT = new FLSqlQuery ("", cx);
	qT.setSelect("v.idviajemultitrans, v.fecha, v.codalmadestino, v.estado, COUNT(*)");
	qT.setFrom("tpv_viajesmultitransstock v INNER JOIN tpv_lineasmultitransstock lv ON v.idviajemultitrans = lv.idviajemultitrans");
	qT.setWhere("v.fecha >= '" + desde + "' AND lv.codalmaorigen = '" + codAlmacen + "' AND v.estado NOT IN ('PTE ENVIO', 'ENVIADO PARCIAL') AND v.enviocompletado GROUP BY v.idviajemultitrans, v.fecha, v.codalmadestino, v.estado ORDER BY v.idviajemultitrans");
	if (!qT.exec())
		return oRes;

	var lineasC, lineasT;
	var idViaje, fechaV, estadoC, estadoT, codAlmaDestino;
	while (qT.next()) {
		idViaje = qT.value("v.idviajemultitrans");
		fechaV = qT.value("v.fecha");
		codAlmaDestino = qT.value("v.codalmadestino");
		estadoT = qT.value("v.estado");
		lineasT = qT.value("COUNT(*)");
		lineasC = AQUtil.sqlSelect("tpv_lineasmultitransstock", "COUNT(*)", "idviajemultitrans = '" + idViaje + "'");
		estadoC = AQUtil.sqlSelect("tpv_viajesmultitransstock", "estado", "idviajemultitrans = '" + idViaje + "'");
		if(!estadoC)
			estadoC = "NO EXISTE";

		lineasT = isNaN(lineasT) ? 0 : lineasT;
		lineasC = isNaN(lineasC) ? 0 : lineasC;
	
		if (lineasC == lineasT)
			continue;
		
		oRes.viajesError++;
		flfactppal.iface.pub_appendTextToLogFile("CHECKVIAJES", "\n" + "envío T/C Erróneo. " + codTienda + ";" + idViaje + ";" + fechaV + ";" + estadoC + ";" + lineasC + ";" + estadoT + ";" + lineasT + ";" + codAlmaDestino);

		if (corregir)
			AQUtil.execSql("UPDATE tpv_viajesmultitransstock SET ptesincroenvio = true WHERE idviajemultitrans = '" + idViaje + "'", cx);
	}
	flfactppal.iface.pub_appendTextToLogFile("CHECKVIAJES", "\n" + "Fin comprobación envíos T/C.");
	oRes.ok = true;
	return oRes;
}

function elganso_egSincronizarViajesRecepcionIncompletos(codTienda, desde, corregir)
{
	var _i = this.iface;
	var oRes = {"ok": false, "viajesError": 0};
	
	cx = codTienda;
	var codAlmacen = AQUtil.sqlSelect("tpv_tiendas","codalmacen","codtienda = '" + codTienda + "'");

	var qT = new FLSqlQuery ("", cx);
	qT.setSelect("v.idviajemultitrans, v.fecha, v.codalmaorigen, v.estado");
	qT.setFrom("tpv_viajesmultitransstock v INNER JOIN tpv_lineasmultitransstock lv ON v.idviajemultitrans = lv.idviajemultitrans");
	qT.setWhere("v.fecha >= '" + desde + "' AND lv.codalmadestino = '" + codAlmacen + "' AND v.estado NOT IN ('PTE ENVIO', 'ENVIADO PARCIAL', 'EN TRANSITO', 'RECIBIDO PARCIAL') AND v.recepcioncompletada GROUP BY v.idviajemultitrans, v.fecha, v.codalmaorigen, v.estado ORDER BY v.idviajemultitrans");
	if (!qT.exec())
		return oRes;

	var idViaje, fechaV, estadoC, estadoT, codAlmaOrigen;
	while (qT.next()) {
		idViaje = qT.value("v.idviajemultitrans");
		fechaV = qT.value("v.fecha");
		codAlmaOrigen = qT.value("v.codalmaorigen");
		estadoT = qT.value("v.estado");
		estadoC = AQUtil.sqlSelect("tpv_viajesmultitransstock", "estado", "idviajemultitrans = '" + idViaje + "'");
		if(!estadoC)
			estadoC = "NO EXISTE";

		if (estadoC == estadoT)
			continue;
		
		oRes.viajesError++;
		flfactppal.iface.pub_appendTextToLogFile("CHECKVIAJES", "\n" + "Recepción T/C Errónea. " + codTienda + ";" + idViaje + ";" + fechaV + ";" + estadoC + ";" + estadoT + ";" + codAlmaOrigen);

		if (corregir) {
			AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET rxtienda = 'OK' WHERE idviajemultitrans = '" + idViaje + "'", cx);
			AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET rxcentral = 'PTE' WHERE idviajemultitrans = '" + idViaje + "'", cx);
		}
	}
	flfactppal.iface.pub_appendTextToLogFile("CHECKVIAJES", "\n" + "Fin comprobación recepciones T/C.");
	oRes.ok = true;
	return oRes;
}

function elganso_egSincronizarViajesRecepcionTiendaIncompletos(codTienda, desde, corregir)
{
	var _i = this.iface;
	var oRes = {"ok": false, "viajesError": 0};
	
	cx = codTienda;
	var codAlmacen = AQUtil.sqlSelect("tpv_tiendas","codalmacen","codtienda = '" + codTienda + "'");

	var qC = new FLSqlQuery ("");
	qC.setSelect("v.idviajemultitrans, v.fecha, v.codalmaorigen, v.estado, COUNT(*)");
	qC.setFrom("tpv_viajesmultitransstock v INNER JOIN tpv_lineasmultitransstock lv ON v.idviajemultitrans = lv.idviajemultitrans");
	qC.setWhere("v.fecha >= '" + desde + "' AND lv.codalmadestino = '" + codAlmacen + "' AND v.enviocompletado AND NOT v.recepcioncompletada GROUP BY v.idviajemultitrans, v.fecha, v.codalmaorigen, v.estado ORDER BY v.idviajemultitrans");
	if (!qC.exec())
		return oRes;

	var lineasC, lineasT;
	var idViaje, fechaV, estadoC, estadoT, codAlmaOrigen;
	while (qC.next()) {
		idViaje = qC.value("v.idviajemultitrans");
		fechaV = qC.value("v.fecha");
		codAlmaOrigen = qC.value("v.codalmaorigen");
		estadoC = qC.value("v.estado");
		lineasC = qC.value("COUNT(*)");
		lineasT = AQUtil.sqlSelect("tpv_lineasmultitransstock", "COUNT(*)", "idviajemultitrans = '" + idViaje + "'", "", cx);
		estadoT = AQUtil.sqlSelect("tpv_viajesmultitransstock", "estado", "idviajemultitrans = '" + idViaje + "'", "", cx);
		if(!estadoT)
			estadoT = "NO EXISTE";

		lineasT = isNaN(lineasT) ? 0 : lineasT;
		lineasC = isNaN(lineasC) ? 0 : lineasC;

		if (lineasT == lineasC)
			continue;
		
		oRes.viajesError++;
		flfactppal.iface.pub_appendTextToLogFile("CHECKVIAJES", "\n" + "Recepción C/T Errónea. " + codTienda + ";" + idViaje + ";" + fechaV + ";" + estadoC + ";" + lineasC + ";" + estadoT + ";" + lineasT + ";" + codAlmaOrigen);

		if (corregir) {
			AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET rxtienda = 'PTE' WHERE idviajemultitrans = '" + idViaje + "'");
			AQUtil.execSql("UPDATE tpv_viajesmultitransstock SET ptesincroenvio = true WHERE idviajemultitrans = '" + idViaje + "'");
		}
	}
	flfactppal.iface.pub_appendTextToLogFile("CHECKVIAJES", "\n" + "Fin comprobación recepciones C/T.");
	oRes.ok = true;
	return oRes;
}

function elganso_egMarcaViajesCancelados()
{
	var _i = this.iface;
	var _fA = flfactalma.iface;
	var _fT = flfact_tpv.iface;
/*
	var dialog = new Dialog;
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var gB = new GroupBox;
	gB.title = sys.translate("Pegue la lista de viajes");
	dialog.add( gB );
	var teTabla = new TextEdit;
	gB.add( teTabla );

	if(!dialog.exec() ) {
		return;
	}
	var texto = teTabla.text;
	var aLineas = texto.split("\n");
	var nL = aLineas.length;

debug(nL + " líneas");
*/
	var q = new FLSqlQuery;
	q.setSelect("idviajemultitrans");
	q.setFrom("tpv_viajesmultitransstock");
	q.setWhere("fecha < '2015-01-01' AND estado = 'EN TRANSITO'");
	if (!q.exec()) {
		return false;
	}
	var nL = q.size();

	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	curL.setActivatedCheckIntegrity(false);
	curL.setActivatedCommitActions(false);

	var idViaje, codMulti, descripcion;
	AQUtil.createProgressDialog(sys.translate("Procesando viajes"), nL);
	//for (var i = 0; i < nL; i++) {
	var i = 0;
	while (q.next()) {
		//idViaje = aLineas[i];
		i++;
		idViaje = q.value("idviajemultitrans");
		AQUtil.setProgress(i);
		AQUtil.setLabelText(sys.translate("Procesando viaje %1").arg(idViaje));
		curL.select("idviajemultitrans = '" + idViaje + "'");
		while (curL.next()) {
			curL.setModeAccess(curL.Edit);
			curL.refreshBuffer();
			codMulti = curL.valueBuffer("codmultitransstock");

			debug("--------------------------> línea " + curL.valueBuffer("numlinea") + " de viaje " + idViaje);
			if (curL.valueBuffer("estado") != 'EN TRANSITO') {
				continue;
			}
			descripcion = curL.valueBuffer("descripcion");
			descripcion = "(MENOR 2015) " + descripcion;
			descripcion = descripcion.left(100);
			curL.setValueBuffer("descripcion", descripcion);
			curL.setValueBuffer("estado", "CANCELADO");

			//_fA.generarEstructuraMTOrigen(curL);
			_fA.borrarEstructuraMTDestino(curL);
			if (!curL.commitBuffer()) {
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
		if (!_fT.totalizarViaje(codMulti, idViaje)) {
			debug("Totaliza viaje " + idViaje + " multi " + codMulti);
			AQUtil.destroyProgressDialog();
			return false;
		}
		debug("--------------------------> Viaje OK " + idViaje);
		/*
		if (i > 1000) {
			break;
		}
		*/
	}
	AQUtil.destroyProgressDialog();

	return true;
}

function elganso_egCheckLineasVentaVariosMovs(oParam)
{
	var _i = this.iface;

	var curL = new FLSqlCursor("tpv_lineascomanda");
	curL.setActivatedCheckIntegrity(false);
	curL.setActivatedCommitActions(false);

	var q = new AQSqlQuery;
	q.setSelect("l.idtpv_linea");
	q.setFrom("tpv_lineascomanda l INNER JOIN movistock ms ON l.idtpv_linea = ms.idlineaco");
	q.setWhere("1 = 1 GROUP BY l.idtpv_linea HAVING COUNT(*) > 1 ORDER BY l.idtpv_linea");
	if (!q.exec()) {
		return false;
	}
	var res = MessageBox.information(sys.translate("Hay %1 casos. ¿Corregir?").arg(q.size()), MessageBox.Yes, MessageBox.No);
	if (res != MessageBox.Yes) {
		return true;
	}
	AQUtil.createProgressDialog(sys.translate("Procesando líneas"), q.size());
	var p = 0;
	while (q.next()) {
		AQUtil.setProgress(++p);
		curL.select("idtpv_linea = " + q.value("l.idtpv_linea"));
		if (!curL.first()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		curL.setModeAccess(curL.Edit);
		curL.refreshBuffer();
		if (flfactppal.iface.pub_extension("tallcol_barcode")) {
			var barcode = curL.valueBuffer("barcode");
			if (!AQUtil.quickSqlSelect("atributosarticulos", "barcode", "barcode = '" + barcode + "'")) {
				continue;
			}
		} else {
			var referencia = curL.valueBuffer("referencia");
			if (!AQUtil.quickSqlSelect("articulos", "referencia", "referencia = '" + referencia + "'")) {
				continue;
			}
		}
		if (!flfactalma.iface.borrarEstructura(curL)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		if (!flfactalma.iface.generarEstructura(curL)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		debug("línea " + curL.valueBuffer("idtpv_linea") + " procesada.");
		//if (p > 10) break;
	}
	AQUtil.destroyProgressDialog();
	return true;
}

function elganso_egCorregirLineasViajesSinMovimiento()
{
	var _i = this.iface;
	var p;
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var q = new FLSqlQuery();

	q.setSelect("l.idlinea");
	q.setFrom("tpv_lineasmultitransstock l LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineatto");
	q.setWhere("NOT l.cerradoex AND ((cantpteenvio > 0 AND cantenviada = 0) OR (cantenviada > 0)) AND ms.idlineatto IS NULL and l.estado <> 'CANCELADO'");
	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	AQUtil.createProgressDialog("Corrigiendo movimientos de stock en líneas de viaje origen...", q.size());
	p = 0;
	while(q.next()) {
		debug(p);
		AQUtil.setProgress(p++);
		curL.select("idlinea = " + q.value("l.idlinea"));
		if(!curL.first()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
		curL.setModeAccess(curL.Edit);
		curL.refreshBuffer();

		if (!flfactalma.iface.borrarEstructuraMTOrigen(curL)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTOrigen(curL)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
		if(!curL.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
	}
	AQUtil.destroyProgressDialog();

	q.setFrom("tpv_lineasmultitransstock l LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineattd");
	q.setWhere("NOT l.cerradorx AND ((cantpterecibir > 0 AND cantrecibida = 0) OR (cantrecibida > 0)) AND ms.idlineattd IS NULL and l.estado <> 'CANCELADO'");
	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	AQUtil.createProgressDialog("Corrigiendo movimientos de stock en líneas de viaje destino...", q.size());
	p = 0;
	while(q.next()) {
		AQUtil.setProgress(p++);
		curL.select("idlinea = " + q.value("l.idlinea"));
		if(!curL.first()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
		curL.setModeAccess(curL.Edit);
		curL.refreshBuffer();

		if (!flfactalma.iface.borrarEstructuraMTDestino(curL)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTDestino(curL)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
		if(!curL.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
	}
	AQUtil.destroyProgressDialog();

	return true;
}

function elganso_egComprobarPedidosNoSincronizados()
{
	var _i = this.iface;
	
	var oRes = { "status" : "ok", "msg" : "", "desc" : "Comprobación de pedidos no sincronizados" };

	var conexion = "";
	
	conexion = "WEBM";
	formtpv_tiendas.iface.pub_conectar(conexion);
	var msg = "PEDIDOS NO SINCRONIZADOS";

	var hoy = new Date();

	/*var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione una fecha dentro del mes a comprobar");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFecha = new DateEdit;
	dFecha.label = sys.translate("Fecha");
	dFecha.date = hoy;
	dialog.add(dFecha);

	if (!dialog.exec()) {
		return false;
	}*/
	
	var fecha = hoy.toString().left(8);

	//CONSTRUYENDO QRY PEDIDOS MAGENTO
	var qO = new FLSqlQuery("",conexion);
	qO.setSelect("increment_id");
	qO.setFrom("sales_flat_order");
	qO.setWhere("status in ('complete','processing') and synchronized = 1 and created_at like '" + fecha + "%' and increment_id != '620007251-1'");
//debug(qO.sql());
	//CONSTRUYENDO QRY ALBARANES
	var qA = new FLSqlQuery("");
	qA.setSelect("codigo");
	qA.setFrom("tpv_comandas");

	if(!qO.exec()) {
		//sys.warnMsgBox(sys.translate("Falló la consulta."));
		oRes.status = "error";
		oRes.msg = sys.translate("Falló la consulta");
		
		return oRes;
	}

	AQUtil.createProgressDialog("Buscando pedidos no sincronizados...", qO.size());
	var p = 0;
	while(qO.next()) {
		AQUtil.setProgress(p++);

		qA.setWhere("codigo = 'WEB" + qO.value("increment_id") + "'");
//debug(qA.sql());
		if(!qA.exec()) {
			oRes.status = "error";
			oRes.msg = sys.translate("Falló la consulta");
			//sys.warnMsgBox(sys.translate("Falló la consulta."));
			return oRes;
		}

	
		if(!qA.first()) {
			msg += "\n" + qO.value("increment_id");
		}
	}


	
	AQUtil.destroyProgressDialog();
	
	if(msg == "") {
		msg += "\nNo hay pedidos sin sincronizar";
	}

	
	/*var dialog = new Dialog;
	dialog.okButtonText = sys.translate("Aceptar");
		
	var texto = new TextEdit;
	texto.text = msg;
	dialog.add( texto );

	dialog.exec();*/
	oRes.status = "error";
	oRes.msg = msg;
	debug(msg);
	return oRes;
}

function elganso_egRegularizarStockT14()
{
	var _i = this.iface;

	var bd = sys.nameBD();
	var codAlmacen;
	if (bd == "elganso" || bd == "comun_elganso") {
		codAlmacen = Input.getText(sys.translate("Lista de tiendas locales separada por ','"));
	} else {
		codAlmacen = AQUtil.sqlSelect("tpv_tiendas", "codtienda", "nombrebd = '" + bd + "'");
		var validos = ["ABER", "ACAD", "ACAR", "APAR", "AVIT", "ABUR", "ALGR", "APLM", "AMAQ", "APLA", "AFUE", "AGIJ", "AKRD", "APTV", "ASEV", "AAMS", "AGRA", "AMAL", "ANOV", "WEBM", "AWUK", "AROM", "AEST", "AOUR", "ASSB", "AVIG", "AZAR", "AAQU", "AART", "ACCO", "AGPZ", "AJJN", "ALIC", "AMAY", "AMOR", "ASAL", "AEHU", "AALM", "ACAS", "ACBA", "ACOR", "AFER", "ALIL", "ARAM", "ASAN", "AVAL", "AVLL", "ACON", "AMIL", "AMUR", "APAL", "APAM", "ASER", "AVID", "AZIE", "ATEF", "AEPA", "AEAC", "AEBI", "AEAL", "ALAB", "AEDI", "AERC", "AEGR", "AESJ", "AEMB", "AWBC", "AEGJ", "AMON", "AEOV", "AETF", "AEVI", "ACCZ", "AEBU", "TELE", "AEPM", "AZOU", "AECA", "AEVL", "APAS", "ANER", "AEEL", "ABAZ", "AEZG", "AEJA", "AEOP", "AESA", "UNIF", "AELI", "AECN", "AECO", "PERS", "AELB", "AMBE", "AECM", "AECS", "AESP", "AET1", "ASTG", "AEJE", "AELE", "AEMA", "AESF", "AEPR", "ABMA", "AEGY", "AGLA", "AESC", "AEPS", "AEPZ", "AESE", "ACES", "AECP", "AEVA", "AF20", "AWES", "ANEA", "AOVI", "APLN", "AETM", "AREN", "ABIL", "AEPL", "ACOL", "AFRB"];
		var i;
		for (i = 0; i < validos.length; i++) {
			if (codAlmacen == validos[i]) {
				break;
			}
		}
		if (i == validos.length) {
			sys.warnMsgBox(sys.translate("El almacén %1 no es un almacén válido para esta función").arg(codAlmacen));
			return false;
		}
	}
	if (!codAlmacen) {
		sys.warnMsgBox(sys.translate("No se ha establecido el almacén"));
		return false;
	}
	if (AQUtil.sqlSelect("tpv_tiendas", "outlet", "codtienda IN ('" + codAlmacen + "')")) {
		sys.warnMsgBox(sys.translate("El almacén %1 es un outlet. No puede ejecutar esta función").arg(codAlmacen));
		return false;
	}
	var idEmpresa = AQUtil.sqlSelect("tpv_tiendas", "idempresa", "codtienda IN ('" + codAlmacen + "')");
	if (idEmpresa == 4 || idEmpresa == 21) {
		sys.warnMsgBox(sys.translate("El almacén %1 pertenece a Mexico o a Chile. No puede ejecutar esta función").arg(codAlmacen));
		return false;
	}
	
	var q = new AQSqlQuery;
	q.setSelect("s.cantidad, s.idstock, s.barcode, s.codalmacen");
	q.setFrom("stocks s");
	q.setWhere("s.codalmacen in  ('" + codAlmacen + "') AND s.referencia IN (SELECT referencia FROM articulos WHERE anno = '14' AND referencia NOT IN ('1070ATEMP140001', '1030ATEMP140001', '1030ATEMP140002', '1020ATEMP140001', '1020ATEMP140002', '1020ATEMP140003', '1020ATEMP140004', '1020ATEMP140005', '1020ATEMP140006', '1050s140006', '1050s140008', '1050s140009', '1050s140028', '1050s140029', '1050s140030', '1050s140031', '1050s140032', '1050s140033', '1050s140034', '1050s140035', '1050s140175', '1050s140176', '1050s140177', '1050s140178', '1050s140179', '1050s140180', '1050s140181', '1050s140182', '3110s140026', '3110s140027', '4110s140117', '4110s140118', '4110s140119', '4110s140120', '4110s140121', '4070s140074', '4070s140075', '4070s140082', '4070s140083', '4070s140084', '4070s140085', '4070s140102', '4070s140103', '4070s140086', '4070s140087', '4070s140088', '4070s140089', '4070s140090', '4070W140050', '4070W140051', '4070s140093', '4070s140127', '4070s140128', '4070s140129', '4070s140130', '4070s140131', '4070s140132', '4070s140133', '4070s140134', '4070s140135', '4070s140136', '4070s140137', '4070s140138', '4070s140139', '4070s140140', '4070s140141', '4070s140142', '4070s140143', '4070s140144', '4070s140145', '4070s140146', '4070s140147', '4070s140148', '4070s140149', '4070s140150', '4070s140151', '4070s140152', '4070s140153', '4070s140154', '4070s140155', '4070s140156', '4070s140157', '4070s140158', '4070s140193', '4070s140080', '4070s140081', '1030W140051', '1030W140052', '1030W140053', '1030W140054', '1030W140181', '1030ATEMP140001', '1030ATEMP140002', '1050W140016', '1050W140017', '1050W140018', '1050W140060', '1050W140061', '1050W140062', '1050W140063', '1050W140064', '1050W140065', '1050W140187', '1050W140188', '1050W140189', '1050W140190', '1050W140191', '1050W140192', '1020ATEMP140001', '1020ATEMP140002', '1020ATEMP140003', '1020ATEMP140004', '1020W140182', '1020ATEMP140005', '1020ATEMP140006', '1020W140185', '1020W140187', '1020W140188', '1020W140190', '2070W140009', '3110W140001', '3110W140017', '3110W140018', '3110W140019', '3110W140020', '3050W140003', '3050W140004', '3110W140001', '3110W140002', '3110W140003', '3110W140004', '3110W140005', '3110W140006', '4110W140029', '4110W140030', '4110W140031', '4110W140032', '4110W140033', '4110W140034', '4110W140171', '4110W140172', '4110W140173', '4110W140174', '4110W140175', '4110W140176', '4110W140193', '4110W140194', '4110W140195', '4110W140196', '4110W140197', '4110W140198', '4110W140222', '4110W140223', '4110W140224', '4110W140225', '4110W140226', '4070W140240', '4070W140241', '4070W140242', '4070W140243', '4070W140224', '4070W140225', '4070W140226', '4070W140227', '4070W140039', '4070W140040', '4070W140041', '4070W140042', '4070W140043', '4070W140044', '4070W140045', '4070W140046', '4070W140047', '4070W140048', '4070W140049', '4070W140050', '4070W140051', '4070W140052', '4070W140053', '4070W140054', '4070W140055', '4070W140056', '4070W140057', '4070W140058', '4070W140059', '4070W140060', '4070W140061', '4070W140062', '4070W140063', '4070W140064', '4070W140182', '4070W140183', '4070W140184', '4070W140185', '4070W140186', '4070W140187', '4070W140188', '4070W140189', '4070W140190', '4070W140191', '4070W140192', '4070W140193', '4070W140194', '4070W140195', '4070W140196', '4070W140197', '4070W140198', '4070W140199', '4070W140200', '4070W140201', '4070W140244', '4070W140245', '4070W140246', '4070W140247', '4070W140228', '4070W140229', '4070W140230', '4070W140231', '4070W140236', '4070W140237', '4070W140238', '4070W140239', '4070W140071', '4070W140072', '4070W140073', '4070W140074', '4070W140075', '4070W140076', '4070W140202', '4070W140203', '4070W140204', '4070W140205', '4070W140206', '4070W140207', '4070W140208', '4070W140209', '4070W140210', '4070W140211', '4070W140212', '4070W140213', '4070W140215', '4070W140216'))  and s.cantidad <> 0");
	if (!q.exec()) {
		sys.warnMsgBox(sys.translate("Error al ejecutar la consulta"));
		return false;
	}
	var idStock;
	AQUtil.createProgressDialog(sys.translate("Regularizando artículos de la temporada 14"), q.size());
	var p = 0;
	var d = new Date;
	var fecha = d.toString().left(10);
	var hora = d.toString().right(8);
	var curReg = new FLSqlCursor("lineasregstocks");
	while (q.next()) {
		debug("Regularizando " + q.value("s.codalmacen") + " " + q.value("s.barcode") + " " + q.value("s.cantidad"));
		AQUtil.setProgress(++p);
		idStock = q.value("s.idstock");
		curReg.setModeAccess(curReg.Insert);
		curReg.refreshBuffer();
		curReg.setValueBuffer("idstock", idStock);
		curReg.setValueBuffer("fecha", fecha);
		curReg.setValueBuffer("hora", hora);
		curReg.setValueBuffer("cantidadini", q.value("s.cantidad"));
		curReg.setValueBuffer("cantidadfin", 0);
		curReg.setValueBuffer("motivo", "REG_T14");
		curReg.setValueBuffer("ptecalculo", false);
		if (!curReg.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		/*if (p > 0) {
			break;
		}*/
	}
	AQUtil.destroyProgressDialog();
	sys.infoMsgBox(sys.translate("%1 stocks regularizados.").arg(p));
	return true;
}

function elganso_egCrearSeriesTiendaEnCentral()
{
	var _i = this.iface;
	
	var codEjercicio = Input.getText(sys.translate("Escriba el código de ejercicio a completar la serie"));
	if (!codEjercicio) {
		return false;
	}
	
	var q = new AQSqlQuery;
	q.setSelect("prefijocod,descripcion");
	q.setFrom("tpv_tiendas");
	q.setWhere("prefijocod NOT IN (SELECT codserie from secuenciasejercicios WHERE codejercicio = '" + codEjercicio + "')");
		
	if(!q.exec()){
		sys.warnMsgBox(sys.translate("No se ha ejecutado la consulta correctamente"));
		return false;
	}
	
	var curSecEj= new FLSqlCursor("secuenciasejercicios");
	var curSeries= new FLSqlCursor("series");
	
	while(q.next()){
		if(!AQUtil.sqlSelect("series", "codserie", "codserie = '" + q.value("prefijocod") + "'")){
			curSeries.setModeAccess(curSeries.Insert);
			curSeries.refreshBuffer();
			curSeries.setValueBuffer("codserie", q.value("prefijocod"));
			curSeries.setValueBuffer("descripcion", q.value("descripcion"));
			if(!curSeries.commitBuffer()){
				sys.warnMsgBox(sys.translate("Fallo en el commitBuffer de la tabla series"));
				return false;	
			}
		}
	
		curSecEj.setModeAccess(curSecEj.Insert);
		curSecEj.refreshBuffer();
		curSecEj.setValueBuffer("codejercicio", codEjercicio);
		curSecEj.setValueBuffer("codserie", q.value("prefijocod"));
		if(!curSecEj.commitBuffer()){
			sys.warnMsgBox(sys.translate("Fallo en el commitBuffer de la tabla secuenciasejercicios"));
			return false;	
		}
	}
	
	return true;
}

/*
function elganso_egGeneraFacturasPortugal(silent)
{
	debug("elganso_egGeneraFacturasPortugal");
	//var codComanda = Input.getText("Comanda");

	var hoy = new Date();
	//ayer = AQUtil.addDays(ayer, -1);
	var fechaFin = hoy;
	var fechaIni = "2016-01-01";//AQUtil.addDays(ayer, -10);

	if(!silent) {
		var dialog = new Dialog;
		dialog.caption = sys.translate("Seleccione fecha de Inicio");
		dialog.okButtonText = sys.translate("Aceptar");
		dialog.cancelButtonText = sys.translate("Cancelar");

		var comanda = new TextEdit;
		comanda.label = sys.translate("Comanda");
		dialog.add(comanda);

		var dFechaIni = new DateEdit;
		dFechaIni.label = sys.translate("Inicio");
		dFechaIni.date = ayer;
		dialog.add(dFechaIni);

		var dFechaFin = new DateEdit;
		dFechaFin.label = sys.translate("Inicio");
		dFechaFin.date = ayer
		dialog.add(dFechaFin);


		if (!dialog.exec()) {
			return false;
		}
	
		fechaIni = dFechaIni.date;
		fechaFin = dFechaFin.date;
	}

	//var codComanda = comanda.text;

	var where = "";
	//if(codComanda && codComanda != "") {
	//	where = "codigo = '" + codComanda + "'";
	//} else {
		where = "fecha >= '" + fechaIni + "' and fecha <= '" + fechaFin + "'";
	//}
	
	var empresaPortugal = AQUtil.sqlSelect("facturac_general","idempresaedicom","1=1");
	if(!empresaPortugal) {
		if(!silent) {
			sys.warnMsgBox(sys.translate("Antes de continuar debe establecer la empresa de portugal en los datos generales del módulo de facturación"));
		}
		else {
			debug("Antes de continuar debe establecer la empresa de portugal en los datos generales del módulo de facturación");
		}
		return false;
	}

	var tiendasPortugal = "";

	var qTiendas = new FLSqlQuery();
	qTiendas.setFrom("tpv_tiendas");
	qTiendas.setSelect("codtienda");
	qTiendas.setWhere("idempresa = " + empresaPortugal);
	
	if (!qTiendas.exec()) { 
		return false;
	}

	
	while(qTiendas.next()) {
		if(tiendasPortugal != "") {
			tiendasPortugal += ",";
		}
		tiendasPortugal += "'" + qTiendas.value("codtienda") + "'";
	}

	var q = new FLSqlQuery();
	q.setFrom("tpv_comandas");
	q.setSelect("idtpv_comanda");
	q.setWhere(where + " and codtienda in (" + tiendasPortugal + ") and (total <> 0 and idtpv_comanda in (select idtpv_comanda from tpv_pagoscomanda)) and (idfactura is null or idfactura = 0)");
	debug(q.sql());
	if (!q.exec()) { debug("false");
		return false; 
	}
	
debug("facturas " + q.size());
	if(!silent) {
		AQUtil.createProgressDialog(sys.translate("Generando Facturas Portugal..." ), q.size());
	}
	var p = 0;	
	while(q.next()) {debug("next");
		if(!silent) {
			AQUtil.setProgress(++p);
		}

		idComanda = q.value("idtpv_comanda");
		var oParam = new Object;
	    	oParam.errorMsg = sys.translate("Error al generar la factura");
	    	oParam.idComanda = idComanda;
	    	oParam.codFactu = undefined;
	    	var f = new Function("oParam", "return formtpv_comandas.iface.generarFacturaPTCentral(oParam)");
	    	if (!sys.runTransaction(f, oParam)) {	
			if(!silent) {
				AQUtil.destroyProgressDialog();
			}
			debug("false 2");
	      		return false;
	    	}
	}
	if(!silent) {
		AQUtil.destroyProgressDialog();
	}
debug("fin");
	return true;
}
*/
function elganso_egRellenarHuecosVentasActurus()
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setSelect("t.codtienda, pv.codtpv_puntoventa");
	q.setFrom("tpv_tiendas t INNER JOIN tpv_puntosventa pv ON t.codtienda = pv.codtienda");
	q.setWhere("t.idempresa = 1 ORDER BY t.codtienda, pv.codtpv_puntoventa");
	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta de tiendas."));
		debug(q.sql());
		return false;
	}

	var tienda, puntoventa, ultTicket, ticket, existe, fecha, hora, ticketAnt;
	var curVenta = new FLSqlCursor("tpv_comandas");
	curVenta.setActivatedCommitActions(false);
	curVenta.setActivatedCheckIntegrity(false);
	while(q.next()) {
		tienda = q.value("t.codtienda");
		puntoventa = q.value("pv.codtpv_puntoventa");

        if(puntoventa.length == 4)
            puntoventa += "0";

		ultTicket = AQUtil.sqlSelect("tpv_comandas", "codigo", "codtienda = '" + tienda + "' AND codigo like '" + puntoventa + "%' ORDER BY codigo DESC LIMIT 1");
		if(ultTicket) {
			ultTicket = ultTicket.right(ultTicket.length - puntoventa.length);
			if(ultTicket)
				ultTicket = parseFloat(ultTicket);
		}
		if(!ultTicket)
			ultTicket = 0;

		debug("puntoventa -> " + puntoventa + " --- Ult -> " + ultTicket);
		AQUtil.createProgressDialog("Buscando huecos para " + puntoventa, ultTicket);
		var p = 0;
		for(var i = 1; i < ultTicket; i++) {
			AQUtil.setProgress(p++);

			ticket = puntoventa + flfactppal.iface.pub_cerosIzquierda(i, 12 - puntoventa.length);
			existe = AQUtil.sqlSelect("tpv_comandas", "codigo", "codigo = '" + ticket + "'");
			if(!existe) {
				ticketAnt = puntoventa + flfactppal.iface.pub_cerosIzquierda(i - 1, 12 - puntoventa.length);
				fecha = AQUtil.sqlSelect("tpv_comandas", "fecha", "codigo = '" + ticketAnt + "'");
				hora = AQUtil.sqlSelect("tpv_comandas", "hora", "codigo = '" + ticketAnt + "'");

				if(!fecha)
					fecha = "2012-10-01";
				if(!hora)
					hora = "10:00:00";

				curVenta.setModeAccess(curVenta.Insert);
				curVenta.refreshBuffer();

				curVenta.setValueBuffer("codigo", ticket);
				curVenta.setValueBuffer("codalmacen", tienda);
				curVenta.setValueBuffer("codtienda", tienda);
				curVenta.setValueBuffer("codtpv_puntoventa", puntoventa);
				curVenta.setValueBuffer("fecha", fecha);
				curVenta.setValueBuffer("hora", hora);
				curVenta.setValueBuffer("estado", "Anulada");
				curVenta.setValueBuffer("codpago", "CONT");
				curVenta.setValueBuffer("tipopago", "Efectivo");
				curVenta.setValueBuffer("codtpv_agente", "9999");
				curVenta.setValueBuffer("tipodoc", "VENTA");
				curVenta.setValueBuffer("total", 0);
				curVenta.setValueBuffer("saldopendiente", 0);
				curVenta.setValueBuffer("saldoconsumido", 0);
				curVenta.setValueBuffer("saldonosincro", 0);
				curVenta.setValueBuffer("pagado", 0);
				curVenta.setValueBuffer("neto", 0);
				curVenta.setValueBuffer("pendiente", 0);
				curVenta.setValueBuffer("totaliva", 0);
				curVenta.setValueBuffer("ptesaldo", false);
				curVenta.setValueBuffer("editable", false);
				curVenta.setValueBuffer("ptesincrofactura", false);
				curVenta.setValueBuffer("anulada", true);
				curVenta.setValueBuffer("sincronizada", true);

				if(!curVenta.commitBuffer()) {
					sys.warnMsgBox("Ocurrió un error creando la venta");
					return false;
				}
			}
		}
		AQUtil.destroyProgressDialog();
	}
	return true;
}

function elganso_egComprobarFacturasPortugal(oParam)
{
	var oRes = { "status" : "ok", "msg" : "", "desc" : "Comprobación de firma de facturas de portugal" };
	
	/// Buscar comandas anteriores a hoy sin factura
	var hoy = new Date();
	var ayer = AQUtil.addDays(hoy, -1);
	
	var empresaPortugal = AQUtil.sqlSelect("facturac_general","idempresaedicom","1=1");
	if(!empresaPortugal) {
		oRes.status = "error";
		oRes.msg = sys.translate("Error: No está establecida la empresa de portugal");
		debug(oRes.msg);
		return oRes;
	}

	var tiendasPortugal = "";

	var qTiendas = new FLSqlQuery();
	qTiendas.setFrom("tpv_tiendas");
	qTiendas.setSelect("codtienda");
	qTiendas.setWhere("idempresa = " + empresaPortugal);
	
	if (!qTiendas.exec()) { 
		oRes.status = "error";
		oRes.msg = sys.translate("Error: No hay tiendas para la empresa de portugal");
		debug(oRes.msg);
		return oRes;
	}
	
	while(qTiendas.next()) {
		if(tiendasPortugal != "") {
			tiendasPortugal += ",";
		}
		tiendasPortugal += "'" + qTiendas.value("codtienda") + "'";
	}

//SELECT idtpv_comanda,fecha, hora FROM tpv_comandas WHERE fecha >= '2016-01-01' and ((fecha = '2016-05-18' and hora < '20:00:00') or fecha <= '2016-05-17') and codtienda in ('AOOP','AOLI','ACOL','ANOV') and (total <> 0 and idtpv_comanda in (select idtpv_comanda from tpv_pagoscomanda)) and (idfactura is null or idfactura = 0);

	var hora = hoy.toString().right(8);
	debug("hora " + hora);

	var whereFechas = "";

	if(hora >= "20:00:00") {
		whereFechas = "fecha >= '2016-01-01' and ((fecha = '" + hoy + "' and hora < '20:00:00') or fecha <= '" + ayer + "')";
	}
	else {
		whereFechas = "fecha >= '2016-01-01' and ((fecha = '" + ayer + "' and hora < '20:00:00') or fecha < '" + ayer + "')";
	}

	var q = new FLSqlQuery();
	q.setFrom("tpv_comandas");
	q.setSelect("idtpv_comanda");
	q.setWhere(whereFechas + " and codtienda in (" + tiendasPortugal + ") and (total <> 0 and idtpv_comanda in (select idtpv_comanda from tpv_pagoscomanda)) and (idfactura is null or idfactura = 0)");
	debug(q.sql());
	if (!q.exec()) { 
		oRes.status = "error";
		oRes.msg = sys.translate("Error: Fallo al ejecutar la consulta");
		debug(oRes.msg);
		return oRes;
	}

	if(q.size() > 0) {
		oRes.status = "error";
		oRes.msg = sys.translate("Error: Hay ventas anteriores a hoy sin facturar");
		debug(oRes.msg);
		return oRes;
	}

	var codEjercicio = AQUtil.sqlSelect("ejercicios", "codejercicio", "idempresa = 7 AND fechainicio <= '" + hoy + "' AND fechafin >= '" + hoy + "'");

	if(AQUtil.sqlSelect("facturascli","count(*)","codejercicio = '" + codEjercicio + "' and tpv = true and (hashedicom is null or hashedicom = '')") > 0) {
		oRes.status = "error";
		oRes.msg = sys.translate("Error: Hay facturas de portugal sin firmar");
		debug(oRes.msg);
		return oRes;
	}

	return oRes;
}

function elganso_egComprobarPartidasCC(oParam)
{
	var q = new FLSqlQuery();
	q.setFrom("co_partidas p inner join co_partidascc c on p.idpartida = c.idpartida");
	q.setSelect("p.idasiento, abs(p.debe-p.haber), abs(SUM(c.importe))");
	q.setWhere("1=1 group by p.idpartida having abs(p.debe-p.haber) <> abs(SUM(c.importe)) order by p.idasiento")
	
	if (!q.exec()) { 
		sys.warnMsgBox(sys.translate("Se produjo un error en la consulta"));
		return false;
	}
	
	AQUtil.createProgressDialog(sys.translate( "scripts","Comprobando partidas por centros de coste..."), q.size());
	var msg = "";
	var asiento, ejercicio;

	var qA = new FLSqlQuery();
	qA.setFrom("co_asientos");
	qA.setSelect("numero, codejercicio");

	while(q.next()) {
		qA.setWhere("idasiento = " + q.value("p.idasiento"));
		if (!qA.exec()) { 
			sys.warnMsgBox(sys.translate("Se produjo un error en la consulta"));
			return false;
		}

		if (!qA.first()) { 
			sys.warnMsgBox(sys.translate("Error al obtener el asiento"));
			return false;
		}

		msg += "\nAsiento: " + qA.value("numero") + " Ejercicio: " + qA.value("codejercicio") + "      " + q.value("abs(p.debe-p.haber)") + " != " + q.value("abs(SUM(c.importe))");
	}

	if(msg) {
		msg = "Error: Hay partidas con cenctros de coste incorrectos:\n" + msg;

		var dialog = new Dialog;
		dialog.okButtonText = sys.translate("Aceptar");
		
		var texto = new TextEdit;
		texto.text = msg;
		dialog.add( texto );

		dialog.exec();

	}
		
	return true;
}

function elganso_egGenerarAsientoDevolValesArqueo(oParam)
{ 
	var oP = [];

	var empresaPpal = flfactppal.iface.pub_valorDefecto("empresappal");

	var curArqueos = new FLSqlCursor("tpv_arqueos");
	curArqueos.select("diahasta >= '2016-01-01' and idasientovale is NULL and sincronizado = true AND codtienda in (select codtienda from tpv_tiendas where idempresa = " + empresaPpal + ")");
	
	AQUtil.createProgressDialog(sys.translate("Generando asientos..." ), curArqueos.size());
	var paso = 0;

	while(curArqueos.next()) {
		AQUtil.setProgress(paso++);
		oP.curArqueo = curArqueos;
	debug(curArqueos.valueBuffer("idtpv_arqueo") + " - " + curArqueos.valueBuffer("diahasta"));

		oP.errorMsg = sys.translate("Error en la función sincroDevolValesArqueoFactura");
		var f = new Function("oParam", "return flfact_tpv.iface.sincroDevolValesArqueoFactura(oP)");

		if (!sys.runTransaction(f, oP)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}

	AQUtil.destroyProgressDialog();

	return true;
}

function elganso_ejecutarFuncion()
{
	var _i = this.iface;
	var util:FLUtil = new FLUtil();
	var funcion = this.cursor().valueBuffer( "funcion" ).toString();
	
	switch ( funcion ) {

		case "egGenerarAsientosArqueo": {
			var res:Object = MessageBox.information(util.translate("scripts",  "¿Seguro que desea ejecutar esta función?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton);
			if (res != MessageBox.Yes)
				return;

			_i.egGenerarAsientosArqueo();
			break;
		}
		case "egGenerarAsientoDevolValesArqueo": {
			var res:Object = MessageBox.information(util.translate("scripts",  "¿Seguro que desea ejecutar esta función?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton);
			if (res != MessageBox.Yes)
				return;

			_i.egGenerarAsientoDevolValesArqueo();
			break;
		}
		default: {
			if (!_i.__ejecutarFuncion()) {
				return;
			}
		}
	}
}

function elganso_egCorregirPagosTarjetaArqueo(oParam)
{ 
	var q = new FLSqlQuery();
	q.setTablesList("tpv_arqueos");
	q.setFrom("tpv_arqueos");
	q.setSelect("idtpv_arqueo, pagostarjeta");
	q.setWhere("1=1")
	
	if (!q.exec()) { 
		debug("error en la consulta " + q.sql());
		return false;
	}
	
	AQUtil.createProgressDialog(sys.translate("Actualizando total pagos tarjeta..." ), q.size());
	
	var totalPagosTarjeta;

	var paso = 0;
	while(q.next()) {
	
		AQUtil.setProgress(paso++);

		totalPagosTarjeta = AQUtil.sqlSelect("tpv_pagoscomanda","sum(importe)","codpago = 'TARJ' and idtpv_arqueo = '" + q.value("idtpv_arqueo") + "'");

		totalPagosTarjeta = AQUtil.roundFieldValue(totalPagosTarjeta, "tpv_arqueos","pagostarjeta");

		debug(q.value("idtpv_arqueo"));
		debug("sum = " + totalPagosTarjeta + " - arqueo = " + q.value("pagostarjeta"));
		if(totalPagosTarjeta != q.value("pagostarjeta")) {
			if(!AQUtil.execSql("UPDATE tpv_arqueos set pagostarjeta = " + totalPagosTarjeta + " where idtpv_arqueo = '" + q.value("idtpv_arqueo") + "'")) {
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
		
	}

	AQUtil.destroyProgressDialog();
	return true;
}

function elganso_egCorregirArqueoPagos()
{
	var _i = this.iface;

	var tienda = Input.getText(sys.translate("Código de tienda"));
	if(!tienda || tienda == "")
		return false;
	if(!AQUtil.sqlSelect("tpv_tiendas", "codtienda", "codtienda = '" + tienda + "'")) {
		sys.warnMsgBox(sys.translate("No existe la tienda " + tienda));
		return false;
	}
	var arqueoIni = Input.getText(sys.translate("Nº arqueo inicio\nEj: Arqueo RM000016 -> Nº 16"));
	if(!arqueoIni || arqueoIni == "")
		return false;
	if(isNaN(arqueoIni) || arqueoIni < 1) {
		sys.warnMsgBox(sys.translate("Arqueo no válido"));
		return false;	
	}
	var arqueoFin = Input.getText(sys.translate("Nº arqueo fin\nEj: Arqueo RM000022 -> Nº 22"));
	if(!arqueoFin || arqueoFin == "")
		return false;
	if(isNaN(arqueoFin) || arqueoFin < 1 || arqueoFin < arqueoIni) {
		sys.warnMsgBox(sys.translate("Arqueo no válido"));
		return false;	
	}

	var prefijocod = AQUtil.sqlSelect("tpv_tiendas", "prefijocod", "codtienda = '" + tienda + "'");
	var fechaPago, codArqueo, fechaArqueo, codArqueoCorrecto, arqueosAfectados = [], oParam = {};
	var curPagos = new FLSqlCursor("tpv_pagoscomanda");
	var curArqueo = new FLSqlCursor("tpv_arqueos");
	curPagos.setActivatedCommitActions(false);
	AQUtil.createProgressDialog("Corrigiendo arqueos...", arqueoFin - arqueoIni);
	var p = 0;
	var idPagos = "";
	for(num = arqueoIni; num <= arqueoFin; num++) {
		AQUtil.setProgress(p++);
		codArqueo = prefijocod + flfactppal.iface.cerosIzquierda(num, 6);

		if(!AQUtil.execSql("update tpv_pagoscomanda set editable = true where idtpv_arqueo = '" + codArqueo + "'"))
			return false;

		fechaArqueo = AQUtil.sqlSelect("tpv_arqueos", "diadesde", "idtpv_arqueo = '" + codArqueo + "'");
		curPagos.select("idtpv_arqueo = '" + codArqueo + "'");
		idPagos = "";
		while(curPagos.next()) {
			curPagos.setModeAccess(curPagos.Edit);
			curPagos.refreshBuffer();

			fechaPago = curPagos.valueBuffer("fecha");
			if(fechaPago == fechaArqueo)
				continue;

			if(idPagos != "") {
				idPagos += ",";
			}
			idPagos += curPagos.valueBuffer("idpago");

			curArqueo.select("diadesde = '" + fechaPago + "' AND codtienda = '" + tienda + "'");
			if(!curArqueo.first()) {
				curArqueo.setModeAccess(curArqueo.Insert);
				curArqueo.refreshBuffer();

				curArqueo.setValueBuffer("diadesde", fechaPago);
				curArqueo.setValueBuffer("diahasta", fechaPago);
				curArqueo.setValueBuffer("horadesde", "09:00:00");
				curArqueo.setValueBuffer("horahasta", "21:00:00");
				curArqueo.setValueBuffer("abierta", true);
				curArqueo.setValueBuffer("sincronizado", false);
				curArqueo.setValueBuffer("nogenerarasiento", false);
				curArqueo.setValueBuffer("codtienda", tienda);
				curArqueo.setValueBuffer("ptoventa", AQUtil.sqlSelect("tpv_puntosventa", "codtpv_puntoventa", "codtienda = '" + tienda + "'"));
				curArqueo.setValueBuffer("codtpv_agenteapertura", "9999");
				curArqueo.setValueBuffer("totalcaja", 0);
				curArqueo.setValueBuffer("totaltarjeta", 0);
				curArqueo.setValueBuffer("totalvale", 0);
				curArqueo.setValueBuffer("totalpuntos", 0);
				curArqueo.setValueBuffer("pagosefectivo", 0);
				curArqueo.setValueBuffer("pagostarjeta", 0);
				curArqueo.setValueBuffer("pagosvale", 0);
				curArqueo.setValueBuffer("pagospuntos", 0);
				curArqueo.setValueBuffer("diferenciaefectivo", 0);
				curArqueo.setValueBuffer("diferenciatarjeta", 0);
				curArqueo.setValueBuffer("diferenciavale", 0);
				curArqueo.setValueBuffer("diferenciapuntos", 0);
				curArqueo.setValueBuffer("devolucionesvale", 0);
				curArqueo.setValueBuffer("totalpagos", 0);
				curArqueo.setValueBuffer("totalmov", 0);
				curArqueo.setValueBuffer("inicio", 0);
				curArqueo.setValueBuffer("m001", 0);
				curArqueo.setValueBuffer("m002", 0);
				curArqueo.setValueBuffer("m005", 0);
				curArqueo.setValueBuffer("m010", 0);
				curArqueo.setValueBuffer("m020", 0);
				curArqueo.setValueBuffer("m050", 0);
				curArqueo.setValueBuffer("m1", 0);
				curArqueo.setValueBuffer("m2", 0);
				curArqueo.setValueBuffer("b5", 0);
				curArqueo.setValueBuffer("b10", 0); 
				curArqueo.setValueBuffer("b20", 0);
				curArqueo.setValueBuffer("b50", 0);
				curArqueo.setValueBuffer("b100", 0);
				curArqueo.setValueBuffer("b200", 0);
				curArqueo.setValueBuffer("b500", 0);

				codArqueoCorrecto = formRecordtpv_arqueos.iface.codigoArqueo(curArqueo);
				curArqueo.setValueBuffer("idtpv_arqueo", codArqueoCorrecto);

				if(!curArqueo.commitBuffer()) {
					AQUtil.destroyProgressDialog();
					sys.warnMsgBox(sys.translate("Error al crear los arqueos."));
					return false;
				}
				curArqueo.setModeAccess(curArqueo.Edit);
				curArqueo.refreshBuffer();
			}
			else {
				curArqueo.setModeAccess(curArqueo.Edit);
				curArqueo.refreshBuffer();

				codArqueoCorrecto = curArqueo.valueBuffer("idtpv_arqueo");
			}

			curPagos.setValueBuffer("idtpv_arqueo", codArqueoCorrecto);
			if(arqueosAfectados.join("///").find(codArqueo) == -1)
				arqueosAfectados.push(codArqueo);

			if(!curPagos.commitBuffer()) {
				AQUtil.destroyProgressDialog();
				sys.warnMsgBox(sys.translate("Error al actualizar los pagos."));
				return false;
			}
			if(!flfact_tpv.iface.totalPagosArqueo(curPagos)) {
				AQUtil.destroyProgressDialog();
				sys.warnMsgBox(sys.translate("Error al recalcular los arqueos."));
				return false;
			}
			oParam.curArqueo = curArqueo;
			if(flfact_tpv.iface.tiendasEmpresaPpal().find(tienda) != -1 && !flfact_tpv.iface.sincroArqueoFactura(oParam)) {
				AQUtil.destroyProgressDialog();
				sys.warnMsgBox(sys.translate("Error al crear los asientos de arqueo."));
				return false;
			}
		}

		if(!AQUtil.execSql("UPDATE tpv_pagoscomanda SET editable = false where idtpv_arqueo = '" + codArqueo + "'"))
			return false;

		if(idPagos && idPagos != "") {
			if(!AQUtil.execSql("UPDATE tpv_pagoscomanda SET editable = false where idpago in (" + idPagos + ")"))
				return false;	
		}
		
	}
	AQUtil.destroyProgressDialog();
	//Recalcular totales arqueos
	for(var i = 0; i < arqueosAfectados.length; i++) {
		curArqueo.select("idtpv_arqueo = '" + arqueosAfectados[i] + "'");
		if(!curArqueo.first()) {
			sys.warnMsgBox(sys.translate("Error al recalcular los arqueos."));
			return false;
		}

		curArqueo.setModeAccess(curArqueo.Edit);
		curArqueo.refreshBuffer();

		curArqueo.setValueBuffer("pagosefectivo", formRecordtpv_arqueos.iface.commonCalculateField("pagosefectivo", curArqueo));
		curArqueo.setValueBuffer("pagostarjeta", formRecordtpv_arqueos.iface.commonCalculateField("pagostarjeta", curArqueo));
		curArqueo.setValueBuffer("pagosvale", formRecordtpv_arqueos.iface.commonCalculateField("pagosvale", curArqueo));
		curArqueo.setValueBuffer("pagospuntos", formRecordtpv_arqueos.iface.commonCalculateField("pagospuntos", curArqueo));
		curArqueo.setValueBuffer("diferenciaefectivo", formRecordtpv_arqueos.iface.commonCalculateField("diferenciaEfectivo", curArqueo));
		curArqueo.setValueBuffer("diferenciatarjeta", formRecordtpv_arqueos.iface.commonCalculateField("diferenciaTarjeta", curArqueo));
		curArqueo.setValueBuffer("diferenciavale", formRecordtpv_arqueos.iface.commonCalculateField("diferenciaVale", curArqueo));
		curArqueo.setValueBuffer("diferenciapuntos", formRecordtpv_arqueos.iface.commonCalculateField("diferenciaPuntos", curArqueo));
		curArqueo.setValueBuffer("devolucionesvale", formRecordtpv_arqueos.iface.commonCalculateField("devolucionesvale", curArqueo));
		curArqueo.setValueBuffer("totalpagos", formRecordtpv_arqueos.iface.commonCalculateField("totalpagos", curArqueo));

		if(!curArqueo.commitBuffer()) {
			sys.warnMsgBox(sys.translate("Error al recalcular los arqueos."));
			return false;
		}
	}

	return true;
}

function elganso_egBorrarFacturasArqueos(oParam)
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setFrom("tpv_arqueos a inner join facturascli f on a.idfactura = f.idfactura");
	q.setSelect("a.idfactura, f.codejercicio, f.codserie");
	q.setWhere("a.diadesde >= '2016-01-01' and a.idfactura is not null");
	
	if (!q.exec()) { 
		debug(q.sql());
		sys.warnMsgBox("Error al ejecutar la consulta");
		return false;
	}
	
	AQUtil.createProgressDialog(sys.translate("Eliminando facturas..." ), q.size());

	var paso = 0;
	
	var subcuentas = "";
	var serieEjercicio = [];
	var ejercicios = [];
	var qP = new FLSqlQuery();
	qP.setFrom("co_partidas");
	qP.setSelect("idsubcuenta");

	while(q.next()) {
		AQUtil.setProgress(paso++);
		debug("//////// paso " + paso + " de " + q.size() + " ///////////////////////////////////////////////////");
		debug("idfactura = " + q.value("a.idfactura"));

		qP.setWhere("idasiento in (select idasiento from facturascli where idfactura = " + q.value("a.idfactura") + ") group by idsubcuenta");	
		if (!qP.exec()) { 
			debug(qP.sql());
			sys.warnMsgBox("Error al ejecutar la consulta");
			return false;
		}
		while(qP.next()) {
			if(subcuentas != "") {
				subcuentas += ",";
			}
			subcuentas = qP.value("idsubcuenta");
		}

		if(q.value("f.codejercicio") in serieEjercicio) {
			if(serieEjercicio[q.value("f.codejercicio")].search(q.value("f.codserie")) == -1) {
				serieEjercicio[q.value("f.codejercicio")] += "," + q.value("f.codserie");
			}
		}
		else {
			ejercicios[ejercicios.length] = q.value("f.codejercicio");
			serieEjercicio[q.value("f.codejercicio")] = q.value("f.codserie");
		}
			
		if(!_i.borrarFactura(q.value("a.idfactura"))) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		
	}

	AQUtil.destroyProgressDialog();

	if(!_i.actualizaSaldoSubcuentas(subcuentas))
		return false;

	var series = [];
	for(var e = 0; e < ejercicios.length; e++) {
		series = serieEjercicio[ejercicios[e]].split(",");
		for(var s = 0; s < series.length; s++) {
			debug("Ejercicio " + ejercicios[e] + "   Serie " + series[s]);
			if(!flfacturac.iface.recalcularHuecos(series[s], ejercicios[e], "nfacturacli")) {
				return false;
			}
		}
	}

	return true; 
}

function elganso_egBorrarFacturaRectVentas(oParam)
{
	var _i = this.iface;
	
	var q = new FLSqlQuery();
	q.setFrom("tpv_comandas c inner join facturascli f on c.egidfacturarec = f.idfactura");
	q.setSelect("c.egidfacturarec, f.codejercicio, f.codserie");
	q.setWhere("c.fecha >= '2016-01-01' and c.egidfacturarec is not null");
	
	if (!q.exec()) { 
		debug(q.sql());
		sys.warnMsgBox("Error al ejecutar la consulta");
		return false;
	}
	
	AQUtil.createProgressDialog(sys.translate("Eliminando facturas..."), q.size());

	var paso = 0;
	
	var subcuentas = "";
	var serieEjercicio = [];
	var ejercicios = [];
	var qP = new FLSqlQuery();
	qP.setFrom("co_partidas");
	qP.setSelect("idsubcuenta");

	while(q.next()) {
		AQUtil.setProgress(paso++);
		debug("//////// paso " + paso + " de " + q.size() + " ///////////////////////////////////////////////////");
		debug("idfactura = " + q.value("c.egidfacturarec"));

		if (!AQUtil.execSql("UPDATE tpv_comandas SET egidfacturarec = NULL WHERE egidfacturarec = " + q.value("c.egidfacturarec"))) {
			sys.warnMsgBox("Error al borrar la factura");
			AQUtil.destroyProgressDialog();
			return false;
		}

		
		qP.setWhere("idasiento in (select idasiento from facturascli where idfactura = " + q.value("c.egidfacturarec") + ") group by idsubcuenta");	
		if (!qP.exec()) { 
			debug(qP.sql());
			sys.warnMsgBox("Error al ejecutar la consulta");
			return false;
		}
		while(qP.next()) {
			if(subcuentas != "") {
				subcuentas += ",";
			}
			subcuentas = qP.value("idsubcuenta");
		}

		if(q.value("f.codejercicio") in serieEjercicio) {
			if(serieEjercicio[q.value("f.codejercicio")].search(q.value("f.codserie")) == -1) {
				serieEjercicio[q.value("f.codejercicio")] += "," + q.value("f.codserie");
			}
		}
		else {
			ejercicios[ejercicios.length] = q.value("f.codejercicio");
			serieEjercicio[q.value("f.codejercicio")] = q.value("f.codserie");
		}
			
		if(!_i.borrarFactura(q.value("c.egidfacturarec"))) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}

	AQUtil.destroyProgressDialog();

	if(!_i.actualizaSaldoSubcuentas(subcuentas))
		return false;

	var series = [];
	for(var e = 0; e < ejercicios.length; e++) {
		series = serieEjercicio[ejercicios[e]].split(",");
		for(var s = 0; s < series.length; s++) {
			debug("Ejercicio " + ejercicios[e] + "   Serie " + series[s]);
			if(!flfacturac.iface.recalcularHuecos(series[s], ejercicios[e], "nfacturacli")) {
				return false;
			}
		}
	}

	return true; 
}

function elganso_borrarFactura(idFactura)
{
	if(!idFactura)
		return false;

	if (!AQUtil.execSql("DELETE FROM lineasfacturascli WHERE idfactura = " + idFactura)) {
		return false;
	}
	if (!AQUtil.execSql("DELETE FROM lineasivafactcli WHERE idfactura = " + idFactura)) {
		return false;
	}
	if (!AQUtil.execSql("DELETE FROM pagosdevolcli WHERE idrecibo in (select idrecibo from reciboscli where idfactura = " + idFactura + ")")) {
		return false;
	}
	if (!AQUtil.execSql("DELETE FROM reciboscli WHERE idfactura = " + idFactura)) {
		return false;
	}
	if (!AQUtil.execSql("DELETE FROM co_partidascc WHERE idpartida in (select idpartida from co_partidas where idasiento in (select idasiento from facturascli where idfactura = " + idFactura + "))")) {
		return false;
	}
	if (!AQUtil.execSql("DELETE FROM co_partidas WHERE idasiento in (select idasiento from facturascli where idfactura = " + idFactura + ")")) {
		return false;
	}
	if (!AQUtil.execSql("DELETE FROM co_asientos WHERE idasiento in (select idasiento from facturascli where idfactura = " + idFactura + ")")) {
		return false;
	}

	if (!AQUtil.execSql("DELETE FROM facturascli WHERE idfactura = " + idFactura)) {
		return false;
	}

	return true;
}

function elganso_actualizaSaldoSubcuentas(subcuentas)
{
	if(!subcuentas || subcuentas == "")
		return true;

	var _fc = flcontppal.iface;
	var _i = this.iface;
	
	var qS = new FLSqlQuery();
	qS.setFrom("co_subcuentas");
	qS.setSelect("idsubcuenta");
	qS.setWhere("idsubcuenta in (" + subcuentas + ")");
	if(!qS.exec())
		return false;

	while(!qS.next()) {
		if(!_fc.calcularSaldo(qS.value("idsubcuenta")))
			return false;
	}

	return true;
}

function elganso_egCerrarRecepcionViajesTransitoCentral()
{
	var _i = this.iface;
	var almacenes = "'ACEN','AZPR','AZKA','ATAR'";

	var curViajes = new FLSqlCursor("tpv_viajesmultitransstock");
	var curLineas = new FLSqlCursor("tpv_lineasmultitransstock");
	var curMovi = new FLSqlCursor("movistock");

	curViajes.select("codalmadestino IN (" + almacenes + ") AND estado = 'EN TRANSITO'");
	AQUtil.createProgressDialog(sys.translate("Cerrando recepciones..."), curViajes.size());
	var p = 0;

	while(curViajes.next()) {
		AQUtil.setProgress(p++);
		curViajes.setModeAccess(curViajes.Edit);
		curViajes.refreshBuffer();

		curLineas.select("idviajemultitrans = '" + curViajes.valueBuffer("idviajemultitrans") + "'");
		while(curLineas.next()) {
			curLineas.setModeAccess(curViajes.Edit);
			curLineas.refreshBuffer();

			curMovi.select("idlineattd = " + curLineas.valueBuffer("idlinea") + " AND estado = 'PTE'");
			while(curMovi.next()) {
				curMovi.setModeAccess(curMovi.Del);
				curMovi.refreshBuffer();

				if(!curMovi.commitBuffer()) {
					AQUtil.destroyProgressDialog();
					sys.warnMsgBox(sys.translate("Error eliminando los movimientos de stock."))
					return false;
				}
			}

			curLineas.setValueBuffer("estado", "RECIBIDO");
			curLineas.setValueBuffer("cerradorx", true);
			curLineas.setValueBuffer("rxtienda", "OK");
			curLineas.setValueBuffer("rxcentral", "OK");
			curLineas.setValueBuffer("codagenterx", "9999");
			curLineas.setValueBuffer("fecharx", flfactppal.iface.dameFechaActual());
			curLineas.setValueBuffer("horarx", flfactppal.iface.dameHoraActual());
			curLineas.setValueBuffer("comentariosrx", "Cerrada desde la central por un proceso automático");

			if(!curLineas.commitBuffer()) {
				AQUtil.destroyProgressDialog();
				sys.warnMsgBox(sys.translate("Error actualizando las líneas."));
				return false;
			}
		}

		curViajes.setValueBuffer("recepcioncompletada", true);
		curViajes.setValueBuffer("estado", "RECIBIDO");
		curViajes.setValueBuffer("ptesincroenvio", false);

		if(!curViajes.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Error actualizando los viajes."));
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	return true;
}

function elganso_egCargaProveedoresCsv()
{
	var _i = this.iface;
	var _fP = flfactppal.iface;
	
	var file = FileDialog.getOpenFileName(sys.translate("Fichero CSV (*.csv;)"), sys.translate("Elegir fichero csv con proveedores a importar"));
	var fichero = new File(file);
	
	var msg = "\nProceso de importarción de proveedores\n";	
	
	try {
   	fichero.open(File.ReadOnly);
  } catch (e) {
   	sys.warnMsgBox(sys.translate("Imposible abrir el fichero para lectura.\nCompruebe que la ruta es válida y que los permisos de lectura son correctos"));
   	return false;
  }
  	
	var np = 1;
	var numProv = "";
	var aError = [];
	var linea;
	var aLinea = [];
	var oProveedor = new Object;  	
	
	var numLineasProv = _fP.pub_dameRespuestaTexto("Número de l­neas de proveedores: ");
	AQUtil.createProgressDialog("Importando proveedores...", numLineasProv);	

	/// Para evitar el encabezado
	if(!fichero.eof){ 
	 	linea = fichero.readLine();
	} 
  
  oProveedor.codEjercicio = _fP.pub_ejercicioActual();
  var numDigitosEjercicio = AQUtil.sqlSelect("ejercicios","longsubcuenta","codejercicio = '" + oProveedor.codEjercicio + "'");
    
	while(!fichero.eof) {
		AQUtil.setProgress(np++);
		linea = fichero.readLine();
		aLinea = linea.split("ð");
		
		oProveedor.nombre = aLinea[0];
  	oProveedor.nombreComercial = aLinea[1];
  	oProveedor.cifNif = aLinea[2];
  	oProveedor.codProveedor = aLinea[3];
  	oProveedor.direccion = aLinea[4];
  	oProveedor.ciudad = aLinea[5];
  	oProveedor.codPostal = aLinea[6];
  	oProveedor.iban = aLinea[14];
  	if(oProveedor.iban && oProveedor.iban != ""){
	  	oProveedor.codPais = oProveedor.iban.left(2);
	  }
	  else{
			oProveedor.codPais = AQUtil.sqlSelect("paises", "codpais", "nombre like '%" + aLinea[7] + "%'");
			if(!oProveedor.codPais && aLinea[7].toUpperCase() == "GRAN BRETAÑA"){
				oProveedor.codPais = "GB";
			}
  	}
  	oProveedor.telefono = aLinea[8];
  	oProveedor.fax = aLinea[9];
  	oProveedor.email = aLinea[10];
  	oProveedor.diasPlazos = aLinea[12].left(2);
  	oProveedor.codPago = AQUtil.sqlSelect("formaspago", "codpago", "codpago = '" + aLinea[11].left(2) + oProveedor.diasPlazos + "'");
  	if(!oProveedor.codPago){
		  var curFormasPago = new FLSqlCursor("formaspago");  
	    curFormasPago.setModeAccess(curFormasPago.Insert);
	    curFormasPago.refreshBuffer();
	    curFormasPago.setValueBuffer("codpago", aLinea[11].left(2) + oProveedor.diasPlazos);
	    curFormasPago.setValueBuffer("descripcion", aLinea[11] + " " + aLinea[12]);
	    
	    if(!curFormasPago.commitBuffer()){
	    	return false;
	    }  		
		  var curPlazos = new FLSqlCursor("plazos");  
	    curPlazos.setModeAccess(curPlazos.Insert);
	    curPlazos.refreshBuffer();
	    curPlazos.setValueBuffer("codpago", aLinea[11].left(2) + oProveedor.diasPlazos);
	    curPlazos.setValueBuffer("aplazado", 100);
	    curPlazos.setValueBuffer("dias", oProveedor.diasPlazos);
	    
	    if(!curPlazos.commitBuffer()){
	    	return false;
	    }
	    oProveedor.codPago = aLinea[11].left(2) + oProveedor.diasPlazos;
  	}
  	
  	if(aLinea[13] == "INTRACOMUNITARIO"){
  		oProveedor.regimenIva = "UE";
  	}
  	else{
  		oProveedor.regimenIva = "General";
  	}
  	
  	oProveedor.bic = aLinea[15];
  	oProveedor.codSubcuenta = aLinea[16];
  	
		if(oProveedor.codProveedor.length < 6) {
			oProveedor.codProveedor = _fP.pub_cerosIzquierda(oProveedor.codProveedor,6);
		}
		if(oProveedor.codSubcuenta.length < numDigitosEjercicio){
			var prefijo = oProveedor.codSubcuenta.left(3);
			var sufijo = oProveedor.codSubcuenta.right(oProveedor.codSubcuenta.length - 3);
			sufijo = _fP.pub_cerosIzquierda(sufijo,(numDigitosEjercicio - 3));
			debug("////////// SUFIJO: " + sufijo + "-");
			oProveedor.codSubcuenta = prefijo + sufijo;
		}
		else if(oProveedor.codSubcuenta.length > numDigitosEjercicio){
			var prefijo = oProveedor.codSubcuenta.left(3);
			var sufijo = oProveedor.codSubcuenta.right(numDigitosEjercicio - 3);
			oProveedor.codSubcuenta = prefijo + sufijo;
		}
		
    if(!_i.comprobarProveedorCsv(oProveedor)){
			aError.push([np,linea,"No se ha realizado el commitBuffer."]);
    }
    if(!_i.comprobarSubcuentaEjercicioProv(oProveedor)){
			aError.push([np,linea,"No se ha podido generar la subcuenta para el ejercicio actual."]);
    }
    if(!_i.comprobarDireccionProv(oProveedor)){
			aError.push([np,linea,"No se ha podido generar la dirección."]);
    }
    if(!_i.comprobarCtaBancoProv(oProveedor)){
			aError.push([np,linea,"No se ha podido generar la cuenta bancaria."]);
    }
		
	}
	
	AQUtil.destroyProgressDialog();
		
	if(aError.length != 0) {
		msg += "\n\nLas siguientes líneas han tenido conflicto y no han podido ser importadas.\n";
		for(var i = 0; i < aError.length; i++) {
			msg += "\n - línea: " + aError[i][0] + " - " + aError[i][1] + "  - Tipo: " + aError[i][2];
		}
	}
	msg += "\n\nIMPORTACIÓN DE PROVEEDORES FINALIZADO";
	
	sys.infoMsgBox(msg);
	return true;
}

function elganso_comprobarProveedorCsv(oProveedor)
{
  var _i = this.iface;
  
  var curProveedores = new FLSqlCursor("proveedores");  
	curProveedores.select("cifnif = '" + oProveedor.cifNif + "'");
	if (curProveedores.first()){
    curProveedores.setModeAccess(curProveedores.Edit);
	}
	else{
    curProveedores.setModeAccess(curProveedores.Insert);	
	}
			
  curProveedores.refreshBuffer();
  curProveedores.setValueBuffer("codproveedor", oProveedor.codProveedor);
  curProveedores.setValueBuffer("nombre", oProveedor.nombre);
  curProveedores.setValueBuffer("nombrecomercial", oProveedor.nombreComercial);
  curProveedores.setValueBuffer("cifnif", oProveedor.cifNif);
  curProveedores.setValueBuffer("telefono1", oProveedor.telefono);
  curProveedores.setValueBuffer("fax", oProveedor.fax);
  curProveedores.setValueBuffer("email", oProveedor.email);
  curProveedores.setValueBuffer("telefono1", oProveedor.telefono);
  curProveedores.setValueBuffer("regimeniva", oProveedor.regimenIva);
  curProveedores.setValueBuffer("codpago", oProveedor.codPago);
  curProveedores.setValueBuffer("codsubcuenta", oProveedor.codSubcuenta);
  
  if(!curProveedores.commitBuffer()){
  	return false;
  }
  
  return true;
}

function elganso_comprobarSubcuentaEjercicioProv(oProveedor)
{
  var _i = this.iface;
  
	var	idSubcuenta = AQUtil.quickSqlSelect("co_subcuentas", "idsubcuenta", "codejercicio = '" + oProveedor.codEjercicio + "' AND codsubcuenta = '" + oProveedor.codSubcuenta + "'");
		
	if(!idSubcuenta || idSubcuenta == ""){
		var idCuenta = AQUtil.sqlSelect("co_cuentas","idcuenta","idcuentaesp = 'PROVEE' AND codejercicio = '" + oProveedor.codEjercicio + "' AND codcuenta = '" + oProveedor.codSubcuenta.left(3) + "'");
		
		if(!idCuenta){
			return false;
		}
		
    var curSubcuenta = new FLSqlCursor("co_subcuentas");
		with (curSubcuenta) {
			setModeAccess(curSubcuenta.Insert);
			refreshBuffer();
			setValueBuffer("codsubcuenta", oProveedor.codSubcuenta);
			setValueBuffer("descripcion", oProveedor.nombre);
			setValueBuffer("idcuenta", idCuenta);
			setValueBuffer("codcuenta", oProveedor.codSubcuenta.left(3));
			setValueBuffer("coddivisa", flfactppal.iface.valorDefectoEmpresa("coddivisa"));
			setValueBuffer("codejercicio", oProveedor.codEjercicio);
		}
		if (!curSubcuenta.commitBuffer()) {
			return false;
		}

		idSubcuenta = curSubcuenta.valueBuffer("idsubcuenta");
	}
    
    debug("idSubcuenta: " + idSubcuenta);
    
	var idSubcuentaProv = AQUtil.quickSqlSelect("co_subcuentasprov", "idsubcuenta", "codejercicio = '" + oProveedor.codEjercicio + "' AND codsubcuenta = '" + oProveedor.codSubcuenta + "'");
		
	if(!idSubcuentaProv || idSubcuentaProv == ""){
  	if (!flfactppal.iface.crearSubcuentaProv(oProveedor.codSubcuenta, idSubcuenta, oProveedor.codProveedor, oProveedor.codEjercicio)) {
  		debug("///////////////////// vuelve por aquí");
    	return false;
  	}
  }
  return true;
}

function elganso_comprobarDireccionProv(oProveedor)
{
  var _i = this.iface;
  
  var curDirProv = new FLSqlCursor("dirproveedores");  
  curDirProv.select("direccion like '%" + oProveedor.direccion + "%'");
	if (curDirProv.first()){
    curDirProv.setModeAccess(curDirProv.Edit);
	}
	else{
    curDirProv.setModeAccess(curDirProv.Insert);	
	}
			
  curDirProv.refreshBuffer();
  curDirProv.setValueBuffer("codproveedor", oProveedor.codProveedor);
  curDirProv.setValueBuffer("descripcion", oProveedor.direccion);
  curDirProv.setValueBuffer("direccion", oProveedor.direccion);
  if(oProveedor.codPais && oProveedor.codPais != 0 && oProveedor.codPais != ""){
	  curDirProv.setValueBuffer("codpais", oProveedor.codPais);
	}
  curDirProv.setValueBuffer("telefono", oProveedor.telefono);
  curDirProv.setValueBuffer("direccionppal", true);
  curDirProv.setValueBuffer("ciudad", oProveedor.ciudad);
  curDirProv.setValueBuffer("codpostal", oProveedor.codPostal.left(10));
  
  if(!curDirProv.commitBuffer()){
  	return false;
  }
  return true;
}

function elganso_comprobarCtaBancoProv(oProveedor)
{
  var _i = this.iface;
  
  if(!oProveedor.iban || oProveedor.iban == ""){
  	return false;
  }

  var curCtaBcoProv = new FLSqlCursor("cuentasbcopro"); 
  curCtaBcoProv.select("iban = '" + oProveedor.iban + "'");
	if (curCtaBcoProv.first()){
    curCtaBcoProv.setModeAccess(curCtaBcoProv.Edit);
	}
	else{
    curCtaBcoProv.setModeAccess(curCtaBcoProv.Insert);	
	}  
			
  curCtaBcoProv.refreshBuffer();
  curCtaBcoProv.setValueBuffer("codproveedor", oProveedor.codProveedor);
  curCtaBcoProv.setValueBuffer("bic", oProveedor.bic);
  curCtaBcoProv.setValueBuffer("iban", oProveedor.iban);
  curCtaBcoProv.setValueBuffer("codpais", oProveedor.codPais);
  curCtaBcoProv.setValueBuffer("codigocuenta", oProveedor.iban.right(oProveedor.iban.length - 4));
  
  var codCuenta = AQUtil.sqlSelect("cuentasbcopro","MAX(codcuenta)","1=1");
  if(!codCuenta){
  	codCuenta = "000001";
  }
  else{
  	codCuenta = flfactppal.iface.pub_cerosIzquierda((parseFloat(codCuenta) + 1), 6);
  }
	curCtaBcoProv.setValueBuffer("codcuenta", codCuenta);
  
  if(oProveedor.codPais == "ES"){
	  curCtaBcoProv.setValueBuffer("ctaentidad", oProveedor.iban.mid(5,4));
	  curCtaBcoProv.setValueBuffer("ctaagencia", oProveedor.iban.mid(9,4));
	  curCtaBcoProv.setValueBuffer("ctadc", oProveedor.iban.mid(13,2));
	  curCtaBcoProv.setValueBuffer("cuenta", oProveedor.iban.right(10));
	}
	
  if(!curCtaBcoProv.commitBuffer()){
  	return false;
  }
  
  return true;
}

function elganso_egComprobarVentasTpvWeb()
{
	var _i = this.iface;

	var oRes = { "status" : "ok", "msg" : "", "desc" : "Comprobación de ventas web" };

	var hoy = new Date();
	var ayer = AQUtil.addDays(hoy, -1);
	if(AQUtil.sqlSelect("albaranescli","idalbaran","(idtpv_arqueo is null or idtpv_arqueo = '') and codigo like 'WEB%' and fecha >= '2016-01-01' and fecha <= '" + ayer + "'")) {
		debug("Hay albaranes sin venta generada");
		oRes.status = "error";
		oRes.msg = sys.translate("Hay albaranes sin venta generada");
		return oRes;
	}

	if(AQUtil.sqlSelect("tpv_arqueos","diadesde","diadesde >= '2016-01-01' and idtpv_arqueo like'WE%' group by diadesde having count(*) > 1")) {
		debug("Hay arqueos web repetidos");;
		oRes.status = "error";
		oRes.msg = sys.translate("Hay arqueos web repetidos");
		return oRes;
	}


	return oRes;	
}

function elganso_incluirGastosEnvioWebVentasFacturas()
{
	var _i = this.iface;

	var idTpvComandaHasta = "5569914";
	var idTpvComandaExcluida = "5563929";
	
	var q = new FLSqlQuery();
	q.setSelect("tpv_comandas.codtienda, tpv_comandas.codigo, tpv_comandas.idtpv_comanda, facturascli.idfactura, albaranescli.mg_gastosenv, albaranescli.codserie");
	q.setFrom("tpv_comandas INNER JOIN albaranescli ON tpv_comandas.codigo = albaranescli.codigo LEFT JOIN facturascli ON tpv_comandas.idfactura = facturascli.idfactura");
	q.setWhere("tpv_comandas.codigo like 'WEB%' AND tpv_comandas.idtpv_comanda NOT IN (SELECT idtpv_comanda from tpv_lineascomanda WHERE descripcion like 'Gastos%') AND tpv_comandas.idtpv_comanda < " + idTpvComandaHasta + " AND tpv_comandas.idtpv_comanda <> " + idTpvComandaExcluida +" AND albaranescli.mg_gastosenv > 0 AND albaranescli.fecha > '2015-12-31'");
	
	debug(q.sql());
	if (!q.exec()) {
		sys.errorMsgBox("No se pudo ejecuta la consulta");
		return false;
	}
	
	while(q.next()) {
		if(!_i.insertLineaGastos(q)){
			return false;
		}
 	}
	
	return true;
}	

function elganso_insertLineaGastos(q)
{
	var _i = this.iface;

	var curTPVcomLin = new FLSqlCursor("tpv_lineascomanda");
  curTPVcomLin.setActivatedCommitActions(false);
  curTPVcomLin.setModeAccess(curTPVcomLin.Insert);
  curTPVcomLin.refreshBuffer();

  curTPVcomLin.setValueBuffer("idtpv_comanda", q.value("tpv_comandas.idtpv_comanda"));
  curTPVcomLin.setValueBuffer("referencia", "");
  curTPVcomLin.setValueBuffer("descripcion", "Gastos de envío");
  curTPVcomLin.setValueBuffer("cantidad", 1);
  curTPVcomLin.setValueBuffer("codimpuesto", (q.value("albaranescli.codserie") == "A") ? "GEN" : "EXT");
  curTPVcomLin.setValueBuffer("iva", formRecordtpv_lineascomanda.iface.pub_commonCalculateField("iva", curTPVcomLin));
  curTPVcomLin.setValueBuffer("dtolineal", 0);
  curTPVcomLin.setValueBuffer("dtopor", 0);
  curTPVcomLin.setValueBuffer("barcode", "");
  curTPVcomLin.setValueBuffer("ivaincluido", true);
  curTPVcomLin.setValueBuffer("pvpunitarioiva", q.value("albaranescli.mg_gastosenv"));
  curTPVcomLin.setValueBuffer("pvpunitario", formRecordtpv_lineascomanda.iface.pub_commonCalculateField("pvpunitario2", curTPVcomLin));
  curTPVcomLin.setValueBuffer("pvpsindtoiva", formRecordtpv_lineascomanda.iface.pub_commonCalculateField("pvpsindtoiva2", curTPVcomLin));
  curTPVcomLin.setValueBuffer("pvpsindto", formRecordtpv_lineascomanda.iface.pub_commonCalculateField("pvpsindto2", curTPVcomLin));
  curTPVcomLin.setValueBuffer("pvptotaliva", formRecordtpv_lineascomanda.iface.pub_commonCalculateField("pvptotaliva2", curTPVcomLin));
  curTPVcomLin.setValueBuffer("pvptotal", formRecordtpv_lineascomanda.iface.pub_commonCalculateField("pvptotal2", curTPVcomLin));
  curTPVcomLin.setValueBuffer("codcomanda", q.value("tpv_comandas.codigo"));
  curTPVcomLin.setValueBuffer("codtienda", q.value("tpv_comandas.codtienda"));
  curTPVcomLin.setValueBuffer("ptestock", false);
  curTPVcomLin.setValueBuffer("idsincro", formRecordtpv_lineascomanda.iface.pub_commonCalculateField("idsincro", curTPVcomLin));
  if (!curTPVcomLin.commitBuffer()){
  	sys.warnMsgBox("Fallo al guardar la línea de la comanda: " + q.value("tpv_comandas.codigo"));
    return false;
	}
	if(q.value("facturascli.idfactura") && q.value("facturascli.idfactura") != "" && q.value("facturascli.idfactura") != 0 && q.value("facturascli.idfactura") != undefined){
		
		var numLinea = AQUtil.sqlSelect("lineasfacturascli","MAX(numlinea)","idfactura = " + q.value("facturascli.idfactura"));
		
		if(!numLinea){
	  	sys.warnMsgBox("La factura " + q.value("tpv_comandas.idfactura") + " no tiene líneas");
			return false;
		}
		flfact_tpv.iface.numLinea_ = numLinea;
		if(!flfact_tpv.iface.copiarLinea(q.value("facturascli.idfactura"), curTPVcomLin)){
	  	sys.warnMsgBox("Fallo al guardar la línea de la factura: " + q.value("tpv_comandas.idfactura"));
			return false;
		}
		if(!_i.totalizarFacturaGastos(q.value("facturascli.idfactura"))){
	  	sys.warnMsgBox("Fallo al totalizar la factura: " + q.value("tpv_comandas.idfactura"));
			return false;
		}
		
	}
	
	return true;
}	

function elganso_totalizarFacturaGastos(idFactura)
{
	var _i = this.iface;

	flfact_tpv.iface.curFactura = new FLSqlCursor("facturascli");
	flfact_tpv.iface.curFactura.select("idfactura = " + idFactura);
	if (!flfact_tpv.iface.curFactura.first()) {
		return false;
	}
	flfact_tpv.iface.curFactura.setModeAccess(flfact_tpv.iface.curFactura.Edit);
	flfact_tpv.iface.curFactura.refreshBuffer();
	
	var curComanda;
	
	if(!flfact_tpv.iface.totalesFactura(curComanda)){
		return false;
	}
	
	if (!flfact_tpv.iface.curFactura.commitBuffer()) {
		return false;
	}	
  
  return true;
}

function elganso_recalcularTotalesProduccion()
{
	var _i = this.iface;

	var fecha = new Date();//_i.obtenerFechaHoy();

	var q = new FLSqlQuery();
	q.setSelect("idpedido");
	q.setFrom("pedidosprov");
	q.setWhere("fecha BETWEEN '2016-05-01' AND '" + fecha + "' AND codplanprod is not null");

	if (!q.exec()) { 
		sys.warnMsgBox(sys.translate("Fallo en la consulta"));
		return false;
	}

	AQUtil.createProgressDialog("Recalculando totales...", q.size());
	var p = 0;

	while(q.next()){
		AQUtil.setProgress(p++);

		if(!_i.editarPedidosProduccion(q.value("idpedido"))){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

		var idAlbaran = AQUtil.sqlSelect("lineasalbaranesprov", "idalbaran", "idpedido = " + q.value("idpedido"));
		if(idAlbaran){
			if(!_i.editarAlbaranesProduccion(q.value("idpedido"))){
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}
		}
	}
	
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
  return true;
}
/*
function elganso_obtenerFechaHoy()
{
	var fecha = new Date();
	var dia = fecha.getDate().toString();
  if (dia.length < 2) {
    dia = "0" + dia;
  }
  var mes = fecha.getMonth().toString();
  if (mes.length < 2) {
    mes = "0" + mes;
  }
  var anyo = fecha.getYear().toString();

  fecha = dia + "-" + mes + "-" + anyo;
	return fecha;
}*/
function elganso_editarPedidosProduccion(idPedido)
{		
		var _i = this.iface;
		if(!_i.editarTotalesLineasPedidos(idPedido)){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
		if(!_i.editarTotalesPedidos(idPedido)){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	return true;
}
function elganso_editarTotalesLineasPedidos(idPedido)
{		
		var _i = this.iface;

		var cCF = formRecordlineaspedidosprov.iface.pub_commonCalculateField;

		var curLineasPedidosProv = new FLSqlCursor("lineaspedidosprov");
		curLineasPedidosProv.select("idpedido = '" + idPedido + "'");

			while(curLineasPedidosProv.next()){
				curLineasPedidosProv.setModeAccess(curLineasPedidosProv.Edit);
				curLineasPedidosProv.refreshBuffer();
				curLineasPedidosProv.setValueBuffer("pvpunitario",cCF("pvpunitario", curLineasPedidosProv));
				curLineasPedidosProv.setValueBuffer("pvpsindto", cCF("pvpsindto", curLineasPedidosProv));
				curLineasPedidosProv.setValueBuffer("dtopor", cCF("dtopor", curLineasPedidosProv));
				curLineasPedidosProv.setValueBuffer("dtolineal", cCF("dtolineal", curLineasPedidosProv));
				curLineasPedidosProv.setValueBuffer("pvptotal", cCF("pvptotal", curLineasPedidosProv));
				if(!curLineasPedidosProv.commitBuffer()){
						return false;
				}
			}
	return true;
}

function elganso_editarTotalesPedidos(idPedido)
{		
	var _i = this.iface;

	var cCF = formRecordlineaspedidosprov.iface.pub_commonCalculateField;

	var curPedidosProv = new FLSqlCursor("pedidosprov");	
	curPedidosProv.select("idpedido = " + idPedido);
		
	if(curPedidosProv.first()){
		curPedidosProv.setModeAccess(curPedidosProv.Edit);
		curPedidosProv.refreshBuffer();

		curPedidosProv.setUnLock("editable", true);
		curPedidosProv.select("idpedido = " + idPedido);
			if(curPedidosProv.first()){
				curPedidosProv.setModeAccess(curPedidosProv.Edit);
				curPedidosProv.refreshBuffer();
				curPedidosProv.setValueBuffer("neto", formpedidosprov.iface.pub_commonCalculateField("neto", curPedidosProv));
				curPedidosProv.setValueBuffer("totaliva", formpedidosprov.iface.pub_commonCalculateField("totaliva", curPedidosProv));
				curPedidosProv.setValueBuffer("totalirpf", formpedidosprov.iface.pub_commonCalculateField("totalirpf", curPedidosProv));
				curPedidosProv.setValueBuffer("totalrecargo", formpedidosprov.iface.pub_commonCalculateField("totalrecargo", curPedidosProv));
				curPedidosProv.setValueBuffer("total", formpedidosprov.iface.pub_commonCalculateField("total", curPedidosProv));
				curPedidosProv.setValueBuffer("totaleuros", formpedidosprov.iface.pub_commonCalculateField("totaleuros", curPedidosProv));
				if (!curPedidosProv.commitBuffer()) {
					return false;
				}
			}
			curPedidosProv.select("idpedido = " + idPedido);

			if(curPedidosProv.first()){
				curPedidosProv.setUnLock("editable", false);
			}
		}		
			
	return true;
}

function elganso_editarAlbaranesProduccion(idPedido)
{		
		var _i = this.iface;

		if(!_i.editarTotalesLineasAlbaran(idPedido)){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
		if(!_i.editarTotalesAlbaran(idPedido)){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	return true;
}

function elganso_editarTotalesLineasAlbaran(idPedido)
{		
	var _i = this.iface;

	var cCF = formRecordlineaspedidosprov.iface.pub_commonCalculateField;

	var curLineasAlbaranesProv = new FLSqlCursor("lineasalbaranesprov");	
	curLineasAlbaranesProv.select("idpedido = '" + idPedido + "'");

	var aAlbaranes = [];

	while(curLineasAlbaranesProv.next()){
		curLineasAlbaranesProv.setModeAccess(curLineasAlbaranesProv.Edit);
		curLineasAlbaranesProv.refreshBuffer();

		if(aAlbaranes.length > 0){
			for(var i = 0; i < aAlbaranes.length; i++){
				if(aAlbaranes[i] == curLineasAlbaranesProv.valueBuffer("idalbaran")){
					continue;
				}			
				aAlbaranes.push(curLineasAlbaranesProv.valueBuffer("idalbaran"));
			}
		}
		else{
			aAlbaranes.push(curLineasAlbaranesProv.valueBuffer("idalbaran"));
		}

		curLineasAlbaranesProv.setValueBuffer("pvpunitario", cCF("pvpunitario", curLineasAlbaranesProv));
		curLineasAlbaranesProv.setValueBuffer("pvpsindto", cCF("pvpsindto", curLineasAlbaranesProv));
		curLineasAlbaranesProv.setValueBuffer("dtopor", cCF("dtopor", curLineasAlbaranesProv));
		curLineasAlbaranesProv.setValueBuffer("dtolineal", cCF("dtolineal", curLineasAlbaranesProv));
		curLineasAlbaranesProv.setValueBuffer("pvptotal", cCF("pvptotal", curLineasAlbaranesProv));

		if(!curLineasAlbaranesProv.commitBuffer()){
				return false;
		}
	}
	return aAlbaranes;
}

function elganso_editarTotalesAlbaran(idPedido)
{
	var cCF = formRecordlineaspedidosprov.iface.pub_commonCalculateField;

	var q = new FLSqlQuery();
	q.setSelect("albaranesprov.idalbaran");
	q.setFrom("albaranesprov INNER JOIN lineasalbaranesprov ON albaranesprov.idalbaran = lineasalbaranesprov.idalbaran");
	q.setWhere("lineasalbaranesprov.idpedido = " + idPedido + "GROUP BY albaranesprov.idalbaran");
 
 	if(!q.exec()){
 		sys.warnMsgBox(sys.translate("Fallo al ejecutar la consulta de albaranes"));
 		return false;
 	}
 	
	while(q.next()){
		var curAlbaranesProv = new FLSqlCursor("albaranesprov");	
		curAlbaranesProv.select("idalbaran = " + q.value(0));
		
		if(curAlbaranesProv.first()){
			curAlbaranesProv.setModeAccess(curAlbaranesProv.Edit);
			curAlbaranesProv.refreshBuffer();
			curAlbaranesProv.setValueBuffer("neto", formalbaranesprov.iface.pub_commonCalculateField("neto", curAlbaranesProv));
			curAlbaranesProv.setValueBuffer("totaliva", formalbaranesprov.iface.pub_commonCalculateField("totaliva", curAlbaranesProv));
			curAlbaranesProv.setValueBuffer("irpf", formalbaranesprov.iface.pub_commonCalculateField("irpf", curAlbaranesProv));
			curAlbaranesProv.setValueBuffer("totalirpf", formalbaranesprov.iface.pub_commonCalculateField("totalirpf", curAlbaranesProv));
			curAlbaranesProv.setValueBuffer("totalrecargo", formalbaranesprov.iface.pub_commonCalculateField("totalrecargo", curAlbaranesProv));
			curAlbaranesProv.setValueBuffer("total", formalbaranesprov.iface.pub_commonCalculateField("total", curAlbaranesProv));
			curAlbaranesProv.setValueBuffer("totaleuros", formalbaranesprov.iface.pub_commonCalculateField("totaleuros", curAlbaranesProv));
			if(!curAlbaranesProv.commitBuffer()){
				return false;
			}
		}	
	}
			
	return true;
}

function elganso_recalcularCosteMedioArticulos()
{

	if (!AQUtil.execSql("UPDATE articulos SET costemedio = 0 WHERE 1=1")) {
		return false;
	}
				
	
	var q = new FLSqlQuery();
	q.setSelect("referencia");
	q.setFrom("lineaspedidosprov");
	q.setWhere("1=1 GROUP BY referencia");
	
	if(!q.exec()){
		return false;
	}
	
	AQUtil.createProgressDialog(sys.translate("Actualizando coste medio de los artículos..." ), q.size());
	var paso = 0;
	
	while(q.next()) {
		AQUtil.setProgress(paso++);		
		if (!flfactalma.iface.cambiarCosteMedioPedido(q.value("referencia"))) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
	
}

function elganso_egCorregirPartidasCentrosCoste()
{
	var _i = this.iface;

	var fecha = "2016-01-01";

	/*var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = fecha;
	dialog.add(dFechaIni);

	if (!dialog.exec()) {
		return false;
	}
	
	fecha = dFechaIni.date;*/

	var q = new FLSqlQuery();
	q.setSelect("a.idasiento");
	q.setFrom("co_partidas p inner join co_asientos a on p.idasiento = a.idasiento");
	q.setWhere("(p.codsubcuenta like '7%' or p.codsubcuenta like '6%') and p.idpartida not in (select idpartida from co_partidascc) and a.fecha >= '" + fecha + "' group by a.idasiento");
	
	debug(q.sql());

	if(!q.exec()){
		return false;
	}
	
	AQUtil.createProgressDialog(sys.translate("Actualizando centros de coste en partidas"), q.size());
	var paso = 0;
	//var asientosCorregidos = "";
	while(q.next()) {
		AQUtil.setProgress(paso++);

		//if(asientosCorregidos != "") asientosCorregidos += ", ";
		//asientosCorregidos += q.value("a.idasiento");

		if(!flcontppal.iface.crearCentrosCosteAsiento(q.value("a.idasiento"))) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}	
//debug(asientosCorregidos);
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elganso_recalcularLineasFacturasVentas()
{
	var _i = this.iface;
	
	var q = new FLSqlQuery();
	q.setSelect("tpv_comandas.codigo,tpv_comandas.idfactura, lineasfacturascli.idlinea, tpv_comandas.idtpv_comanda");
	q.setFrom("tpv_comandas INNER JOIN facturascli ON tpv_comandas.idfactura = facturascli.idfactura INNER JOIN lineasfacturascli ON lineasfacturascli.idfactura = facturascli.idfactura");
	q.setWhere("tpv_comandas.fecha > '2015-12-31' AND tpv_comandas.idfactura is not null AND lineasfacturascli.descripcion LIKE 'Descuento por pagos con puntos de la venta%'");
	debug(q.sql());

	if(!q.exec()){
		return false;
	}
	
	AQUtil.createProgressDialog(sys.translate("Recalculando líneas de factura.."), q.size());
	var paso = 0;
	while(q.next()) {
		AQUtil.setProgress(paso++);
		
		if(!_i.editarLineasVenta(q)){
			return false;
		}
		if(!_i.recalcularTotalesFactura(q)){
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elganso_editarLineasVenta(q)
{
	var _i = this.iface;
	
	var codPagoPuntosTpv = flfact_tpv.iface.valorDefectoTPV("pagopunto");
	
	var importePuntos = AQUtil.sqlSelect("tpv_pagoscomanda", "importe", "idtpv_comanda='" + q.value(3) + "' AND codpago='" + codPagoPuntosTpv + "'");
	
	var curLineaFactura = new FLSqlCursor("lineasfacturascli");
	curLineaFactura.select("idlinea = '" + q.value(2) + "'");

	if(curLineaFactura.first()){	
		curLineaFactura.setModeAccess(curLineaFactura.Edit);
		curLineaFactura.refreshBuffer();
	
		var iva = AQUtil.sqlSelect("tpv_lineascomanda", "iva", "idtpv_comanda='" + q.value(3) + "' AND idtpv_linea <> '" + q.value(2) + "'");
		
		var codImpuesto = AQUtil.sqlSelect("tpv_lineascomanda", "codimpuesto", "idtpv_comanda='" + q.value(3) + "'");

		var denominador = (100 + parseFloat(iva))/100;
		var pvpUnitario = importePuntos/denominador;
		var pvpTotal = pvpUnitario*denominador;

		curLineaFactura.setValueBuffer("pvpunitario", pvpUnitario*-1);
		curLineaFactura.setValueBuffer("ivaincluido", true);
		curLineaFactura.setValueBuffer("pvpsindto", pvpUnitario*-1);
		curLineaFactura.setValueBuffer("codimpuesto", codImpuesto);
		curLineaFactura.setValueBuffer("iva", iva);
		curLineaFactura.setValueBuffer("pvptotal", pvpUnitario*-1);
		curLineaFactura.setValueBuffer("recargo", 0);
		curLineaFactura.setValueBuffer("dtolineal", 0);
		curLineaFactura.setValueBuffer("dtopor", 0);
		curLineaFactura.setValueBuffer("pvpunitarioiva", pvpTotal*-1);
		curLineaFactura.setValueBuffer("pvpsindtoiva", pvpTotal*-1);
		curLineaFactura.setValueBuffer("pvptotaliva", pvpTotal*-1);

		if(!curLineaFactura.commitBuffer()){
			return false;
		}
	}
	return true;
}

function elganso_recalcularTotalesFactura(q)
{
	var _i = this.iface;
	
	flfact_tpv.iface.curFactura = new FLSqlCursor("facturascli");
	flfact_tpv.iface.curFactura.select("idfactura = '" + q.value(1) + "'");
	
	if(flfact_tpv.iface.curFactura.first()){
		flfact_tpv.iface.curFactura.setModeAccess(flfact_tpv.iface.curFactura.Edit);
		flfact_tpv.iface.curFactura.refreshBuffer();
		if (!flfact_tpv.iface.totalesFactura(flfact_tpv.iface.curFactura)){
	 		return false;
	 	}
	 	if(!flfact_tpv.iface.curFactura.commitBuffer()){
	 		return false;
	 	}
 	}
	return true;
}

function elganso_egCorregirVentasWeb()
{
	var _i = this.iface;

	var fecha = "2016-07-18";

	/*var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = fecha;
	dialog.add(dFechaIni);

	if (!dialog.exec()) {
		return false;
	}
	
	fecha = dFechaIni.date;*/

	var q = new FLSqlQuery();
	q.setSelect("idtpv_comanda, codigo, idfactura");
	q.setFrom("tpv_comandas");
	q.setWhere("codigo like 'WEB%' and fecha >= '" + fecha + "' and estado <> 'Anulada' order by fecha");
	
	debug(q.sql());

	if(!q.exec()){debug("no exec");
		return false;
	}
	
	AQUtil.createProgressDialog(sys.translate("Corrigiendo ventas web..."), q.size());
	var paso = 0;

	var curLV = new FLSqlCursor("tpv_lineascomanda");
	//curLV.setActivatedCommitActions(false);
	//curLV.setActivatedCheckIntegrity(false);

	var tieneIva;
	var dto;
	while(q.next()) {
		debug("actualizando /////////////////  "  + q.value("codigo"));
		AQUtil.setProgress(paso++);

		tieneIva = false;
		dto = 0;

		// Abrir venta
		if (!AQUtil.execSql("UPDATE tpv_comandas SET editable = true, sincronizada = false, estado = 'Abierta' WHERE idtpv_comanda = " + q.value("idtpv_comanda"))) {
			debug("no update comandas antes");
			return false;
		}

		//Recalcular Lineas
		var iva = AQUtil.sqlSelect("tpv_lineascomanda","sum(pvpunitarioiva-pvpunitario)","idtpv_comanda = " + q.value("idtpv_comanda"));

		if(iva && iva != 0) {
			tieneIva = true;
		}

		debug("tieneIva " + tieneIva);

		curLV.select("idtpv_comanda = " + q.value("idtpv_comanda"));
		
		while(curLV.next()) {
			debug(1);
			curLV.setModeAccess(curLV.Edit);
			curLV.refreshBuffer();
			var total = parseFloat(curLV.valueBuffer("pvpunitarioiva"));
			var totalSinIva = parseFloat(curLV.valueBuffer("pvpunitario"));
			dto += parseFloat(curLV.valueBuffer("dtolineal"));
			curLV.setValueBuffer("ivaincluido",true);
			curLV.setValueBuffer("dtolineal",0);
			if(tieneIva) {
				curLV.setValueBuffer("codimpuesto","GEN");
				curLV.setValueBuffer("iva",21);
				curLV.setValueBuffer("pvpunitarioiva",total);
				curLV.setValueBuffer("pvpunitario",totalSinIva);
				curLV.setValueBuffer("pvpsindto",totalSinIva);
				curLV.setValueBuffer("pvptotal",totalSinIva);
				curLV.setValueBuffer("pvptotaliva",total);
				curLV.setValueBuffer("pvpsindtoiva",total);
			}
			else {
				curLV.setValueBuffer("codimpuesto","EXT");
				curLV.setValueBuffer("iva",0);
				curLV.setValueBuffer("pvpunitarioiva",totalSinIva);
				curLV.setValueBuffer("pvpunitario",totalSinIva);
				curLV.setValueBuffer("pvpsindto",totalSinIva);
				curLV.setValueBuffer("pvptotal",totalSinIva);
				curLV.setValueBuffer("pvptotaliva",totalSinIva);
				curLV.setValueBuffer("pvpsindtoiva",totalSinIva);
			}
			if(!curLV.commitBuffer()) {
				debug("no commit linea");
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}
		}

		//Crear Línea Dto
		if(dto && dto != 0) {
			if(!formmg_importexport.iface.crearLineaDescuento(q.value("idtpv_comanda"), q.value("codigo"), dto, iva)) {
				debug("no crear linea descuento");
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}
		}

		//Regenerar factura
		debug("factura " + q.value("idfactura"));
		if(q.value("idfactura") && q.value("idfactura") != "" && q.value("idfactura") != 0 && q.value("idfactura") != "NULL") {
		debug("regenerando factura");


			var codFactura = AQUtil.sqlSelect("facturascli","codigo","idfactura = " + q.value("idfactura"));

			if(!codFactura) {
				debug("no se encontró la factura " + q.value("idfactura"));
				return false;
			}

			if (!AQUtil.execSql("UPDATE tpv_comandas SET egcodfactura = '" + codFactura + "', idfactura = NULL WHERE idtpv_comanda = " + q.value("idtpv_comanda"))) {
				debug("error al quitar el idfactura");
				return false;
			}

			var curFactura = new FLSqlCursor("facturascli");
			curFactura.select("idfactura = " + q.value("idfactura"));
			if(!curFactura.first()) {
				debug("error al buscar la factura");
				return false;
			}
			
			curFactura.setModeAccess(curFactura.Del);
			curFactura.refreshBuffer();
			if(!curFactura.commitBuffer()) {
				debug("error al borrar la factura");
				return false;
			}
debug("factura borrada");

			var oParam = new Object;
		    oParam.errorMsg = sys.translate("Error al generar la factura");
		    oParam.idComanda = q.value("idtpv_comanda");
		    oParam.codFactu = undefined;
			if(!formtpv_comandas.iface.generarFacturaTR(oParam)) {
				debug("error al generar la factura");
				return false;
			}
			debug("factura regenerada");
		}


		// Cerrar venta
		if (!AQUtil.execSql("UPDATE tpv_comandas SET ptesincrofactura = false, editable = false, estado = 'Cerrada' WHERE idtpv_comanda = " + q.value("idtpv_comanda"))) {
			debug("no update comandas despues");
			return false;
		}
	}	

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elganso_egComprobarVentasWebAbiertas()
{
	var _i = this.iface;

	var oRes = { "status" : "ok", "msg" : "", "desc" : "Comprobación de ventas web abiertas" };

	var fecha = "2016-07-18";

	var q = new FLSqlQuery();
	q.setSelect("c.codigo, c.idtpv_comanda, c.total, c.pagado, p.importe");
	q.setFrom("tpv_comandas c INNER JOIN tpv_pagoscomanda p on c.idtpv_comanda = p.idtpv_comanda");
	q.setWhere("c.codigo like 'WEB%' and c.fecha >= '" + fecha + "' and c.estado = 'Abierta' order by c.fecha");
	
	debug(q.sql());

	if(!q.exec()){
		oRes.status = "error";
		oRes.msg = "Error al ejecutar la consulta";
		return oRes;
	}
	
	AQUtil.createProgressDialog(sys.translate("Comprobando ventas web..."), q.size());
	var paso = 0;

	var ventasIncorrectas = "";
	while(q.next()) {
		if(q.value("c.total") != q.value("c.pagado") || q.value("c.total") != q.value("p.importe")) {
				if(ventasIncorrectas && ventasIncorrectas != "") {
					ventasIncorrectas += ", ";		
				}
				ventasIncorrectas += q.value("c.codigo");
		}
		else {
			if(!AQUtil.execSql("UPDATE tpv_comandas set estado = 'Cerrada', editable = false where idtpv_comanda = " + q.value("c.idtpv_comanda"))) {
				oRes.status = "error";
				oRes.msg = "Error al actualizar las ventas";
				return oRes;
			}
		}
	}

	if(ventasIncorrectas && ventasIncorrectas != "") {
		oRes.status = "error";
		oRes.msg = "Ventas con importes erroneos: " + ventasIncorrectas;
	}

	debug(oRes.msg);
	return oRes;
}

function elganso_recalcularStocks20161203()
{
	var _i = this.iface;

	var almacenTienda = flfact_tpv.iface.pub_almacenActual();

	if(!almacenTienda){
		sys.warnMsgBox(sys.translate("No hay almacén para la tienda actual"));
		return false;
	}

	var q = new FLSqlQuery();

	q.setSelect("stocks.idstock");
	q.setFrom("lineasregstocks INNER JOIN stocks ON lineasregstocks.idstock = stocks.idstock");
	q.setWhere("lineasregstocks.motivo = 'Regularizacion automatica 20161203' AND stocks.codalmacen = '" + almacenTienda + "'");


	if(!q.exec()){
		sys.warnMsgBox(sys.translate("Fallo en la consulta"));
		return false;
	}

	if(q.size() == 0){
		sys.warnMsgBox(sys.translate("No hay datos para actualizar."));
		return false;
	}
	

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Procesando stocks"), q.size());
	var p = 0;

	while (q.next()) {
		AQUtil.setProgress(p++);

		if (!formregstocks.iface.revisarStock("idstock = " + q.value("stocks.idstock"))) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	
	AQUtil.destroyProgressDialog();
	
	return true;

}


function elganso_recalcularStocks()
{
	var _i = this.iface;

	var dialog = new Dialog();
	dialog.caption = "Datos Stocks";
	dialog.okButtonText = "Aceptar";
	dialog.cancelButtonText = "Cancelar";  
	
	var texto = new Label;
	texto.text = sys.translate("Seleccione artículo y almacén (Vacío si para todos los registros):");
	dialog.add(texto);
	    
	var grupo = new GroupBox;
	dialog.add(grupo);   
	
	var referencia = new LineEdit;
	referencia.label = "Referencia:";
	referencia.text = "";	
	grupo.add(referencia);

	var codAlmacen = new LineEdit;
	codAlmacen.label = "Almacén:";
	codAlmacen.text = "";	
	grupo.add(codAlmacen);

	if(!dialog.exec() ) {
		return alse;
	}
	
	var oParam = new Object;
    oParam.codAlmacen = codAlmacen.text;
    oParam.referencia = referencia.text;

    if(!flfactalma.iface.actualizarStocks(oParam)){
    	return false;
    }

    return true;
}

function elganso_generaVentasPrueba()
{
	var _i = this.iface;

	var curVentas = new FLSqlCursor("tpv_comandas");
	var curLinea = new FLSqlCursor("tpv_lineascomanda");
	var curPago = new FLSqlCursor("tpv_pagoscomanda");

	var codTerminal = flfact_tpv.iface.pub_valorDefectoTPV("codterminal");
	var codTienda = flfact_tpv.iface.pub_tiendaActual();
	var codAlmacen = AQUtil.sqlSelect("tpv_tiendas","codalmacen","codtienda = '" + codTienda + "'")
	var referencia = "0000ATEMP00007";
	var barcode = "8433613430841";

	AQUtil.createProgressDialog(sys.translate("Generando ventas de prueba..."), 100);
	var hoy = new Date();
	var ahora = hoy.toString().right(8);

	for(var i=0; i<100; i++) {
		AQUtil.setProgress(i);
		curVentas.setModeAccess(curVentas.Insert);
		curVentas.refreshBuffer();

		curVentas.setValueBuffer("codtpv_puntoventa", codTerminal);
		curVentas.setValueBuffer("codtpv_agente","9999");
		curVentas.setValueBuffer("neto",24.79);
		curVentas.setValueBuffer("totaliva",5.21);
		curVentas.setValueBuffer("total",30);
		curVentas.setValueBuffer("pagado",30);
		curVentas.setValueBuffer("editable",false);
		curVentas.setValueBuffer("estado","Cerrada");
		curVentas.setValueBuffer("codalmacen", codAlmacen);
		curVentas.setValueBuffer("codtienda", codTienda);
		curVentas.setValueBuffer("fecha", hoy);
		curVentas.setValueBuffer("hora", ahora);
		curVentas.setValueBuffer("codpago", "CONT");
		curVentas.setValueBuffer("codigo", flfact_tpv.iface.obtenerCodigoComanda(curVentas));
		
		if(!curVentas.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

		var idVenta = curVentas.valueBuffer("idtpv_comanda");
		if(!idVenta) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
		var codComanda = curVentas.valueBuffer("codigo");
		if(!codComanda) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

		curLinea.setModeAccess(curLinea.Insert);
		curLinea.refreshBuffer();

		curLinea.setValueBuffer("idtpv_comanda",idVenta);
		curLinea.setValueBuffer("codcomanda",codComanda);
		curLinea.setValueBuffer("referencia",referencia);
		curLinea.setValueBuffer("descripcion","Tarjeta regalo web 30?");
		curLinea.setValueBuffer("barcode",barcode);
		curLinea.setValueBuffer("talla","TU");
		curLinea.setValueBuffer("color","U");
		curLinea.setValueBuffer("cantidad",1);
		curLinea.setValueBuffer("pvpunitario",24.79);
		curLinea.setValueBuffer("pvpsindto",24.79);
		curLinea.setValueBuffer("pvptotal",24.79);
		curLinea.setValueBuffer("codimpuesto","GEN");
		curLinea.setValueBuffer("iva",21);
		curLinea.setValueBuffer("ivaincluido",true);
		curLinea.setValueBuffer("pvpunitarioiva",30);
		curLinea.setValueBuffer("pvptotaliva",30);
		curLinea.setValueBuffer("pvpsindtoiva",30);
		curLinea.setValueBuffer("codtienda",codTienda);
		curLinea.setValueBuffer("idsincro", formRecordtpv_lineascomanda.iface.pub_commonCalculateField("idsincro", curLinea));

		if(!curLinea.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

		curPago.setModeAccess(curPago.Insert);
		curPago.refreshBuffer();

		curPago.setValueBuffer("idtpv_comanda",idVenta);
		curPago.setValueBuffer("codcomanda",codComanda);
		curPago.setValueBuffer("importe",30);
		curPago.setValueBuffer("estado","Pagado");
		curPago.setValueBuffer("estado","Pagado");
		curPago.setValueBuffer("codpago","CONT");
		curPago.setValueBuffer("editable",false);
		curPago.setValueBuffer("codtpv_puntoventa",codTerminal);
		curPago.setValueBuffer("codtpv_agente","9999");
		curPago.setValueBuffer("codtienda",codTienda);
		curPago.setValueBuffer("fecha",hoy);
		curPago.setValueBuffer("idsincro", formRecordtpv_pagoscomanda.iface.pub_commonCalculateField("idsincro", curPago));
		
		if(!curPago.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	return true;
}

function elganso_dameBarcodeViejo(barCode)
{
	var _i = this.iface;

	if(!barCode){
		return false;
	}

	var viejoBarcode = "";
	var dC = "";
	var secuenciaBarcode = parseFloat(barCode.toString().mid(7,5));

	if(barCode.toString().left(7) == "8435002"){
		if(secuenciaBarcode <= 18338){
			viejoBarcode = "8433614" + barCode.toString().mid(7,5);
		}
		else{
			viejoBarcode = "8435002" + barCode.toString().mid(7,5);
		}
	}
	else if(barCode.toString().left(7) == "8445005"){
		if(secuenciaBarcode <= 18338){
			viejoBarcode = "8433614" + barCode.toString().mid(7,5);
		}
		else if(secuenciaBarcode > 18338 && secuenciaBarcode <= 18694){
			viejoBarcode = "8435002" + barCode.toString().mid(7,5);
		}
		else{
			viejoBarcode = "8445005" + barCode.toString().mid(7,5);
		}
	}
	else{
		return barCode;
	}

	dC = formRecordarticulos.iface.digitoControlEAN(viejoBarcode);
	viejoBarcode = viejoBarcode + dC.toString();
	if(viejoBarcode.length != 13){
		return false;
	}

	return viejoBarcode;

}

function elganso_dameBarcodeNuevo(barCode)
{
	var _i = this.iface;

	if(barCode.toString().left(7) != "8433614" && barCode.toString().left(7) != "8435002"){
		return barCode;
	}

	var nuevoBarcode = flfactalma.iface.pub_valorDefectoAlmacen("prefijobarcode").toString() + barCode.toString().mid(7,5);
	dC = formRecordarticulos.iface.digitoControlEAN(nuevoBarcode);
	nuevoBarcode = nuevoBarcode + dC.toString();

	if(nuevoBarcode.length != 13){
		flfactppal.iface.ponMsgError(sys.translate("No se ha podido devolver el barCode nuevo."),"warn",this);
		return false;
	}

	return nuevoBarcode;
}


//// FUN ELGANSO ////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_definition sii */
/////////////////////////////////////////////////////////////////
//// SII ////////////////////////////////////////////////////////

function sii_init()
{
	var _i = this.iface;
	_i.__init();
	_i.funciones.push(["insertaSIIFacCli", "Inserta registros en sii_facturascli"]);	
	_i.funciones.push(["insertaSIIFacProv", "Inserta registros en sii_facturasprov"]);
	_i.funciones.push(["actualizarEstadoSIIFacCli", "Actualiza el estado SII en facturas de cliente"]);
	_i.funciones.push(["actualizarEstadoSIIFacProv", "Actualiza el estado SII en facturas de proveedor"]);
	_i.funciones.push(["insertaSIIFacProv_q", "Regenera libro de facturas de proveedor"]);

}
function sii_insertaSIIFacCli(oParam) 
{
	var _i = this.iface;
	var where = "";

	var codigo = Input.getText(sys.translate("Código de la Factura o escribir TODAS para todas las facturas"));
	if (!codigo) {
		return;
	}
	
	if(codigo != "TODAS") {	
		where = "f.codigo = '" + codigo + "'";
		//AQUtil.sqlDelete("sii_facturascli", "numseriefactura = '" + codigo + "'");
	} else {
		_i.renumerarSSIFacCli();
		where = "1=1";
		//AQUtil.sqlDelete("sii_facturascli", where);
	}
	
	where += " AND lfe.estadoregistro IN ('CORRECTO','ACEPTADOCONERRORES') and  f.codigo is not null and fc.numseriefactura is null ORDER BY lfe.idcomunicacion ASC";

	var oParam, estadoRegistro;
	var oFacturas = new Object;
	var q = new AQSqlQuery;	
	q.setSelect("lfe.estadoregistro, lfe.idlrfe");
	q.setFrom("facturascli f INNER JOIN sii_lrfacturasemitidas lfe ON f.codigo = lfe.numseriefactura LEFT OUTER JOIN sii_facturascli fc ON fc.numseriefactura = f.codigo");
	q.setWhere(where); 				
	if (!q.exec()){
		return;
	}  
	AQUtil.createProgressDialog(sys.translate("Insertando facturas"), q.size());
	var p = 0;
	while(q.next())
	{		

		AQUtil.setProgress(p++);
		formsii_comunicaciones.iface.insertaSIIFacturasCli(q.value("lfe.idlrfe"), q.value("lfe.estadoregistro"));

	}
	AQUtil.destroyProgressDialog();
	flfactppal.iface.ponMsgError(sys.translate("Se han insertado %1 registros").arg(p),"info",this);
	return true;
}

function sii_renumerarSSIFacCli()
{
	var _i = this.iface;
	var q = new AQSqlQuery;	
	q.setSelect("id");
	q.setFrom("sii_facturascli");
	q.setWhere("1=1 order by id ASC"); 				
	if (!q.exec()){
		return;
	}  	
	var p = 1;
	while(q.next())
	{	
		if (!AQUtil.execSql("UPDATE sii_facturascli SET id= " + p + " WHERE id = " + q.value("id"))) {
			return false;
		}
		p++;		

	}
}

function sii_renumerarSSIFacProv()
{
	var _i = this.iface;
	var q = new AQSqlQuery;	
	q.setSelect("id");
	q.setFrom("sii_facturasprov");
	q.setWhere("1=1 order by id ASC"); 				
	if (!q.exec()){
		return;
	}  	
	var p = 1;
	while(q.next())
	{	
		debug("p: "+p);
		if (!AQUtil.execSql("UPDATE sii_facturasprov SET id= " + p + " WHERE id = " + q.value("id"))) {
			return false;
		}
		p++;		

	}
}

/*function sii_insertaSIIFacProv(oParam) 
{
	var _i = this.iface;
	var where = "";
	var cifnifemisor;
	var codigo = Input.getText(sys.translate("Número de la Factura de proveedor o escribir TODAS para todas las facturas"));
	if (!codigo) {
		return;
	}
	if(codigo != "TODAS") {
		cifnifemisor = Input.getText(sys.translate("cifnifemisor de la factura"));
		if (!cifnifemisor) {
			return;
		}
	}
	
	
	if(codigo != "TODAS") {	
		where = "lfr.numseriefactura = '" + codigo + "' and cifnifemisor = '" + cifnifemisor + "' ";
		//AQUtil.sqlDelete("sii_facturasprov", "numseriefactura = '" + codigo + "'");
	} else {
		where = "1=1";
		_i.renumerarSSIFacProv();
		//AQUtil.sqlDelete("sii_facturasprov", where);
	}
	
	where += " AND lfr.estadoregistro IN ('CORRECTO','ACEPTADOCONERRORES') and  (f.numproveedor is not null OR f.dua is not null) and fp.numseriefactura is null ORDER BY lfr.idcomunicacion ASC";


	var oParam, estadoRegistro;
	var oFacturas = new Object;
	var q = new AQSqlQuery;	
	q.setSelect("lfr.estadoregistro, lfr.idlrfr");	
	q.setFrom("facturasprov f INNER JOIN sii_lrfacturasrecibidas lfr ON (f.numproveedor = lfr.numseriefactura OR f.dua=lfr.numseriefactura) LEFT OUTER JOIN sii_facturasprov fp ON (fp.numseriefactura = f.numproveedor OR fp.numseriefactura = f.dua)");
	q.setWhere(where); 	
				
	if (!q.exec()){
		AQUtil.destroyProgressDialog();
		return;
	}  
	AQUtil.createProgressDialog(sys.translate("Insertando facturas"), q.size());
	var p = 0;
	while(q.next())
	{		
		AQUtil.setProgress(p++);
		formsii_comunicaciones.iface.insertaSIIFacturasProv(q.value("lfr.idlrfr"), q.value("lfr.estadoregistro"));

	}
	AQUtil.destroyProgressDialog();
	flfactppal.iface.ponMsgError(sys.translate("Se han insertado %1 registros").arg(p),"info",this);
	return true;
}*/

function sii_insertaSIIFacProv(oParam) 
{
	var _i = this.iface;
	var where = "";
	var cifnifemisor;
	var codigo;
	if("codigo" in oParam && oParam.codigo != "") {
		codigo = oParam.codigo;
	} else {
		codigo = Input.getText(sys.translate("Número de la Factura de proveedor o escribir TODAS para todas las facturas"));
		if (!codigo) {
			return;
		}	
	} 
	if("cifnifemisor" in oParam && cifnifemisor != "") {
		cifnifemisor = oParam.cifnifemisor;	
	} else {

		if(codigo != "TODAS") {
			cifnifemisor = Input.getText(sys.translate("cifnifemisor de la factura"));
			if (!cifnifemisor) {
				return;
			}
		}
	}
	
	
	if(codigo != "TODAS") {	
		where = "lfr.numseriefactura = '" + codigo + "' and lfr.cifnifemisor = '" + cifnifemisor + "' ";
		//AQUtil.sqlDelete("sii_facturasprov", "numseriefactura = '" + codigo + "'");
	} else {
		where = "1=1";
		_i.renumerarSSIFacProv();
		//AQUtil.sqlDelete("sii_facturasprov", where);
	}
	
	where += " AND lfr.estadoregistro IN ('CORRECTO','ACEPTADOCONERRORES') and  (f.numproveedor is not null) and fp.numseriefactura is null ORDER BY lfr.idcomunicacion ASC";


	var estadoRegistro;
	var oFacturas = new Object;
	var q = new AQSqlQuery;	
	q.setSelect("lfr.estadoregistro, lfr.idlrfr");	
	q.setFrom("facturasprov f INNER JOIN sii_lrfacturasrecibidas lfr ON (f.numproveedor = lfr.numseriefactura) LEFT OUTER JOIN sii_facturasprov fp ON (fp.numseriefactura = f.numproveedor)");
	q.setWhere(where); 	
	//debug("q1 de inserta sii_facturasprov: " + q.sql());			
	if (!q.exec()){
		AQUtil.destroyProgressDialog();
		return;
	}  
	AQUtil.createProgressDialog(sys.translate("Insertando facturas"), q.size());
	var p = 0;
	while(q.next())
	{		
		AQUtil.setProgress(p++);
		formsii_comunicaciones.iface.insertaSIIFacturasProv(q.value("lfr.idlrfr"), q.value("lfr.estadoregistro"));

	}
	AQUtil.destroyProgressDialog();


	if(codigo != "TODAS") {	
		where = "lfr.numseriefactura = '" + codigo + "' and lfr.cifnifemisor = '" + cifnifemisor + "' ";
		//AQUtil.sqlDelete("sii_facturasprov", "numseriefactura = '" + codigo + "'");
	} else {
		where = "1=1";
		_i.renumerarSSIFacProv();
		//AQUtil.sqlDelete("sii_facturasprov", where);
	}
	
	where += " AND lfr.estadoregistro IN ('CORRECTO','ACEPTADOCONERRORES') and  (f.dua is not null) and fp.numseriefactura is null ORDER BY lfr.idcomunicacion ASC";


	var estadoRegistro;
	var oFacturas = new Object;
	var q = new AQSqlQuery;	
	q.setSelect("lfr.estadoregistro, lfr.idlrfr");	
	q.setFrom("facturasprov f INNER JOIN sii_lrfacturasrecibidas lfr ON (f.dua = lfr.numseriefactura) LEFT OUTER JOIN sii_facturasprov fp ON (fp.numseriefactura = f.dua)");
	q.setWhere(where); 	
	//debug("q2 de inserta sii_facturasprov: " + q.sql());			
	if (!q.exec()){
		AQUtil.destroyProgressDialog();
		return;
	}  
	AQUtil.createProgressDialog(sys.translate("Insertando facturas"), q.size());

	while(q.next())
	{		
		AQUtil.setProgress(p++);
		formsii_comunicaciones.iface.insertaSIIFacturasProv(q.value("lfr.idlrfr"), q.value("lfr.estadoregistro"));

	}
	AQUtil.destroyProgressDialog();

	if("codigo" in oParam && oParam.codigo != "") {
		return true;
	}

	flfactppal.iface.ponMsgError(sys.translate("Se han insertado %1 registros").arg(p),"info",this);
	return true;
}

function sii_actualizarEstadoSIIFacCli(oParam) 
{
	var _i = this.iface;
	var where = "";
	
	where += "lfe.estadoregistro IN ('CORRECTO','ACEPTADOCONERRORES') ORDER BY idcomunicacion ASC"

	
	
	var q = new AQSqlQuery;	
	q.setSelect("lfe.estadoregistro, f.idfactura");
	q.setFrom("facturascli f INNER JOIN sii_lrfacturasemitidas lfe ON f.codigo = lfe.numseriefactura");
	q.setWhere(where); 				
	if (!q.exec()){
		return;
	} 
debug("Consulta actualizarEstadoSIIFacCli: " + q.sql());	 
	AQUtil.createProgressDialog(sys.translate("Actualizando estado SII en facturas de clientes"), q.size());
	var p = 0;
	while(q.next())
	{		
		AQUtil.setProgress(p++);
		if(!formsii_comunicaciones.iface.actualizaEstadoSiiFraCli(q.value("lfe.estadoregistro"), q.value("f.idfactura"))) {
			return false;
		}	
		

	}
	AQUtil.destroyProgressDialog();
	flfactppal.iface.ponMsgError(sys.translate("Se han actualizado %1 registros").arg(p),"info",this);
	return true;
}

function sii_actualizarEstadoSIIFacProv(oParam) 
{
	var _i = this.iface;
	var where = "";
	
	where += "lfr.estadoregistro IN ('CORRECTO','ACEPTADOCONERRORES') ORDER BY idcomunicacion ASC"

	
	
	var q = new AQSqlQuery;	
	q.setSelect("lfr.estadoregistro, f.idfactura, f.dua, lfr.numseriefactura");
	q.setFrom("facturasprov f INNER JOIN sii_lrfacturasrecibidas lfr ON (f.numproveedor = lfr.numseriefactura OR f.dua = lfr.numseriefactura)");
	q.setWhere(where); 				
	if (!q.exec()){
		return;
	}  
	AQUtil.createProgressDialog(sys.translate("Actualizando estado SII y/o estado SII DUA en facturas de proveedores"), q.size());
	var p = 0;
	var dua;
	while(q.next())
	{		
		AQUtil.setProgress(p++);

		dua = q.value("f.dua");
		if(dua && dua != "") {
			if(!formsii_comunicaciones.iface.actualizaEstadoSiiDuaFraProv(q.value("lfr.estadoregistro"), q.value("lfr.numseriefactura"),q.value("f.idfactura"))) {
				return false;
			}
			
		} else {
			if(!formsii_comunicaciones.iface.actualizaEstadoSiiFraProv(q.value("lfr.estadoregistro"), q.value("lfr.numseriefactura"),q.value("f.idfactura"))) {
				return false;
			}
		}	

	}
	AQUtil.destroyProgressDialog();
	flfactppal.iface.ponMsgError(sys.translate("Se han actualizado %1 registros").arg(p),"info",this);
	return true;
}

function sii_insertaSIIFacProv_q(oParam) 
{
	
	var _i = this.iface;
	var where = "";
	var cifnifemisor;
	var SQLtoDate = "";
    if (!flcontsii.iface.esMySQL()) {
            SQLtoDate = "::date";
    }

	var codigo = Input.getText(sys.translate("Número de la Factura de proveedor o escribir TODAS para todas las facturas"));
	if (!codigo) {
		return;
	}
	if(codigo != "TODAS") {
		cifnifemisor = Input.getText(sys.translate("cifnifemisor de la factura"));
		if (!cifnifemisor) {
			return;
		}
	}
	
	var idPresentacion;
	//caso 1: Existe presentacion y comunicacion
	//caso 2: No existe presentacion ni comuniacion (lo han borrado o sobreescrito)
	var csvAnt= "";
	var q = new AQSqlQuery;	
	q.setSelect("q.csvpresentacion, c.idcomunicacion, q.numseriefactura, q.fechacontabledua, q.numseriefactura, q.cifnif, q.fechapresentacion, q.fechapresentacion, q.cifnifpresentador, q.periodo, q.idlrfr,q.horapresentacion,q.cifnifemisor");	
	q.setFrom("sii_lrfacturasrecibidas_q q LEFT OUTER JOIN sii_comunicaciones c ON c.csv = q.csvpresentacion");
	q.setWhere("q.numseriefactura NOT IN (SELECT sii_facturasprov.numseriefactura FROM sii_facturasprov) order by q.csvpresentacion"); 
	debug("q: "+q.sql());					
	if (!q.exec()){
		AQUtil.destroyProgressDialog();
		return;
	}  
	AQUtil.createProgressDialog(sys.translate("Insertando facturas"), q.size());
	var p = 0;
	
	while(q.next())
	{
		AQUtil.setProgress(p++);
		var csv = q.value("q.csvpresentacion");	
		debug("\n\nfactura: "+q.value("q.numseriefactura"));
		var idComunicacion = q.value("c.idcomunicacion")
		var claveTipo = q.value("q.clavetipo");
		var fechaDua = q.value("q.fechacontabledua");
		var numSerieFactura = q.value("q.numseriefactura");
		var cifnif = q.value("q.cifnif");
		var cifnifEmisor = q.value("q.cifnifemisor");

		var fechaPresentacion = q.value("q.fechapresentacion");
		var horaPresentacion = q.value("q.horapresentacion");
		var fechaInicio = q.value("q.fechapresentacion");
		var fechaFin = q.value("q.fechapresentacion");
		var cifNifPresentador = q.value("q.cifnifpresentador"); 
		var periodo = q.value("q.periodo");  
		var idVersion = flcontsii.iface.dameVersionSii();
		var idlrfr = q.value("q.idlrfr")
		var idFactura = AQUtil.sqlSelect("facturasprov","idfactura","numproveedor = '" + numSerieFactura + "' and cifnif = '" + cifnifEmisor + "'");		
		if(!idFactura) {
			idFactura = AQUtil.sqlSelect("facturasprov","idfactura","dua = '" + numSerieFactura + "'");
		}
		if(!idFactura) {
			continue;
		}
		var idAsiento= AQUtil.sqlSelect("facturasprov","idasiento","idfactura = " + idFactura);		
		var codEjercicio = AQUtil.sqlSelect("facturasprov","codejercicio","idfactura = " + idFactura);
		var ejercicio = AQUtil.sqlSelect("facturasprov","ejercicio","idfactura = " + idFactura);

		if(idComunicacion && idComunicacion != "") {			
			//Existe presentacion pero no está insertado en sii_facturasprov
			if(!_i.crearRegistrosLRFR(idlrfr,idAsiento, idComunicacion,idFactura)) {
				AQUtil.destroyProgressDialog();
				debug("ERROR 1");
				return false;
			}
		} else  {
			
			//No existe presentación
			//1. crear presentación
			

			if(csvAnt != csv) {
			

				var curP = new FLSqlCursor("sii_presentaciones");
				curP.setActivatedCommitActions(false);
	  			curP.setActivatedCheckIntegrity(false);
				
				curP.setModeAccess(curP.Insert);
				curP.refreshBuffer();
				curP.setValueBuffer("codejercicio",codEjercicio);
				curP.setValueBuffer("idversion",idVersion);
				curP.setValueBuffer("fecha",fechaPresentacion);
				curP.setValueBuffer("hora",horaPresentacion);

				var qMax = new AQSqlQuery;	
				qMax.setSelect("min(fechapresentacion),max(fechapresentacion)");	
				qMax.setFrom("sii_lrfacturasrecibidas_q");
				qMax.setWhere("csvpresentacion = '" + csv + "'"); 					
			
				if (!qMax.exec()){	
					AQUtil.destroyProgressDialog();
					debug("ERROR 2");
					return false;
				}
				if(qMax.first()) {
					fechaInicio = qMax.value("min(fechapresentacion)");
					fechaFin = qMax.value("max(fechapresentacion)");
				}  
				curP.setValueBuffer("fechainicio",fechaInicio);
				curP.setValueBuffer("fechafin",fechaFin);
				curP.setValueBuffer("estado","CERRADA");
				curP.setValueBuffer("suministrarpfr",true);
				curP.setValueBuffer("suministrarbi",true);
				curP.setValueBuffer("suministrarfr",true);
				curP.setValueBuffer("suministraros",true);
				curP.setValueBuffer("generarcomunicaciones",true);
				curP.setValueBuffer("generarconsultas",true);
				curP.setValueBuffer("tipoperiodo","Mes");
				if(!curP.commitBuffer()) {
					AQUtil.destroyProgressDialog();
					debug("ERROR 3");
					return false;
				}
				
				idPresentacion = curP.valueBuffer("idPresentacion");
				
				csvAnt = csv;	  			
			}
			
  			//2.crear comunicacion
  			var idComuniacion;
			var curC = new FLSqlCursor("sii_comunicaciones");
			curC.setActivatedCommitActions(false);
  			curC.setActivatedCheckIntegrity(false);
			curC.select("csv = '" + csv + "'");
			if (!curC.first()) {
				
				curC.setModeAccess(curC.Insert);
				curC.refreshBuffer();
				curC.setValueBuffer("estado","ABIERTA")
				curC.setValueBuffer("nifpresentador", cifNifPresentador);
				curC.setValueBuffer("idpresentacion", idPresentacion);
				curC.setValueBuffer("nombrerazon", flcontsii.iface.valorDefectoDatosFiscales("apellidosrs",codEjercicio));
				curC.setValueBuffer("fechapresentacion",fechaPresentacion);
				curC.setValueBuffer("ejercicio",ejercicio);
				curC.setValueBuffer("tipocomunicacion","A0"); //lo presuponemos
				curC.setValueBuffer("cifnif", cifNifPresentador);
				curC.setValueBuffer("estadoglobal","CORRECTO"); // PENSAR MEJOR
				curC.setValueBuffer("csv", csv);
				curC.setValueBuffer("periodo", periodo);
				curC.setValueBuffer("tipolibro","Facturas Recibidas");
				curC.setValueBuffer("idversion",idVersion);
				curC.setValueBuffer("horapresentacion",horaPresentacion);
				curC.setValueBuffer("idperiodo",AQUtil.sqlSelect("sii_periodos","idperiodo","periodo='"+periodo+"' and codejercicio='"+codEjercicio+"'"));
				if(!curC.commitBuffer()) {
					AQUtil.destroyProgressDialog();
					debug("ERROR 4");
					return false;
				}
				idComunicacion = curC.valueBuffer("idcomunicacion");

			} else {
				
				idComunicacion = curC.valueBuffer("idcomunicacion");
			} 
			var idLRFRNuevo =_i.crearRegistrosLRFR(idlrfr,idAsiento, idComunicacion,idFactura);
			if(!idLRFRNuevo) {
				AQUtil.destroyProgressDialog();
				debug("ERROR 4.5");
				return false;
			}

			if(!_i.crearRegistroLRFRImp(idlrfr,idLRFRNuevo)) {
				AQUtil.destroyProgressDialog();
				debug("ERROR 4.8");
				return false;
			}
 
			
			//actualizar estado estado global presentacion
  			
      		var estado = flcontsii.iface.dameEstadoGlobalPresentacion(idPresentacion);
        	if (!estado) {
				AQUtil.destroyProgressDialog();
				debug("ERROR 5");
				return false;
        	}
        	
       		if (!AQUtil.execSql("UPDATE sii_presentaciones SET estadoglobal = '" + estado + "' WHERE idpresentacion = " + idPresentacion)) {
				AQUtil.destroyProgressDialog();
				debug("ERROR 6");
				return false;
        	}
        	
        }



        var oParamFra = new Object;
        oParamFra.codigo = numSerieFactura;
        oParamFra.cifnifemisor = cifnifEmisor;
        _i.insertaSIIFacProv(oParamFra)
    }
    AQUtil.destroyProgressDialog();
    return true;
}

function sii_crearRegistrosLRFR(idlrfr,idAsiento, idComunicacion,idFactura)
{
	var _i = this.iface;
	
  	_i.curLRFR_ = new FLSqlCursor("sii_lrfacturasrecibidas");
  	_i.curLRFR_.setModeAccess(_i.curLRFR_.Insert);
  	_i.curLRFR_.refreshBuffer();
  	_i.curLRFR_.setValueBuffer("idfactura",idFactura);
  	_i.curLRFR_.setValueBuffer("idasiento",idAsiento);
  	_i.curLRFR_.setValueBuffer("idcomunicacion",idComunicacion);
  	_i.curLRFR_.setValueBuffer("advertencias",false);

  	var curLRFQ = new FLSqlCursor("sii_lrfacturasrecibidas_q");
  	curLRFQ.select("idlrfr = " + idlrfr);
  	curLRFQ.setModeAccess(curLRFQ.Browse);
  	curLRFQ.refreshBuffer();
  	if(!curLRFQ.first()) {
  		debug("sii_crearRegistrosLRFR KO 1");
  		return true;
  	}

  	var aCamposLinea = AQUtil.nombreCampos("sii_lrfacturasrecibidas");
  	var totalCampos = aCamposLinea[0];
  	var campoInformado = [];
  	
  	for (var i = 1; i <= totalCampos; i++) {
    	campoInformado[aCamposLinea[i]] = false;
  	}
  	for (var i = 1; i <= totalCampos; i++) {
    	if (!_i.copiaCampoLRFR(aCamposLinea[i], curLRFQ, campoInformado)) {
    		debug("sii_crearRegistrosLRFR KO 2");
      		return false;
    	}
    }
   
    if (!_i.curLRFR_.commitBuffer()) {
    	debug("sii_crearRegistrosLRFR KO 3");
		return false;
	}
	
	
	return _i.curLRFR_.valueBuffer("idlrfr");
}


function sii_copiaCampoLRFR(nombreCampo, curLRFQ, campoInformado)
{
	var _i = this.iface;
	if (campoInformado[nombreCampo]) {
		return true;
	}
	var nulo = false;

	switch (nombreCampo) {
		case "idasiento":
		case "advertencias":
		case "idcomunicacion":
		case "idfactura":
		case "idlrfr": {		
			return true;
			break;
		}
		case "estadoregistro": {
			if(curLRFQ.valueBuffer("estadoregistro") == "CORRECTA") {
				valor = "CORRECTO";
			} else if(curLRFQ.valueBuffer("estadoregistro") == "ACEPTADACONERRORES") {
				valor = "ACEPTADOCONERRORES";
			}
			break;
		}
		default: {
			if (curLRFQ.isNull(nombreCampo)) {
				nulo = true;
			} else {
				valor = curLRFQ.valueBuffer(nombreCampo);
			}
		}
	}
	if (nulo) {
		_i.curLRFR_.setNull(nombreCampo);
	} else {
		_i.curLRFR_.setValueBuffer(nombreCampo, valor);
	}
	campoInformado[nombreCampo] = true;
	return true;	
}

function sii_crearRegistroLRFRImp(idlrfr,idlrfrNuevo)
{
	var _i = this.iface;

	_i.curLRFRIMP_ = new FLSqlCursor("sii_lrfr_importes");
  	_i.curLRFRIMP_.setModeAccess(_i.curLRFR_.Insert);
  	_i.curLRFRIMP_.refreshBuffer();
  	_i.curLRFRIMP_.setValueBuffer("idlrfr",idlrfrNuevo);


  	var aCamposLineaImp = AQUtil.nombreCampos("sii_lrfr_importes");
  	var totalCamposImp = aCamposLineaImp[0];
  	var campoInformadoImp = [];


	var curLRFIMPQ = new FLSqlCursor("sii_lrfr_importes_q");
  	curLRFIMPQ.select("idlrfr = " + idlrfr);
  	curLRFIMPQ.setModeAccess(curLRFIMPQ.Browse);
  	curLRFIMPQ.refreshBuffer();
  	while (curLRFIMPQ.next()) {

	  	for (var i = 1; i <= totalCamposImp; i++) {
	    	campoInformadoImp[aCamposLineaImp[i]] = false;
	  	}
	  	for (var i = 1; i <= totalCamposImp; i++) {
	    	if (!_i.copiaCampoLRFRIMP(aCamposLineaImp[i], curLRFIMPQ, campoInformadoImp)) {
	    		debug("sii_crearRegistrosLRFRQ KO 2");
	      		return false;
	    	}
	    }
	    if (!_i.curLRFRIMP_.commitBuffer()) {
	    	debug("sii_crearRegistrosLRFRQ KO 3");
			return false;
		}
  		
  	}
  	return true;

}

function sii_copiaCampoLRFRIMP(nombreCampo, curLRFIMPQ, campoInformado)
{
	
	var _i = this.iface;
	if (campoInformado[nombreCampo]) {
		return true;
	}

	var nulo = false;

	switch (nombreCampo) {
		case "id":
		case "idlrfr":{		
			return true;
			break;
		}		
		default: {
			if (curLRFIMPQ.isNull(nombreCampo)) {
				nulo = true;
			} else {
				valor = curLRFIMPQ.valueBuffer(nombreCampo);
			}
		}
	}
	

	if (nulo) {
		_i.curLRFRIMP_.setNull(nombreCampo);
	} else {
		_i.curLRFRIMP_.setValueBuffer(nombreCampo, valor);
	}

	campoInformado[nombreCampo] = true;
	
	return true;	
}


/** @class_definition webservice */
/////////////////////////////////////////////////////////////////
//// WEBSERVICE /////////////////////////////////////////////////
function webservice_init() 
{
	var _i = this.iface;

	_i.__init();
	_i.funciones.push(["testWebService","Test del programa de web service"]);
}

function webservice_testWebService()
{
	// var xEntrada = new FLDomDocument();
	// if (!xEntrada.setContent("<midoc><minodo valor='hola'>Contenido interesante</minodo></midoc>")) {
	// 	debug("Falló setContent");
	// 	return;
	// }
	// var sEntrada = xEntrada.toString();
	// debug(sEntrada);
	// sEntrada = formSTR.reemplazar(sEntrada, "\n", " ");
	// debug(sEntrada);

	var oEntrada = {"clave1": "valor1", "clave2": "valor2"};
	var sEntrada = formUTIL.jsonToString(oEntrada);
	// debug(sEntrada);

	var oArgs = {
		"metodo":"test",
		"url":"https://wiipii.local/servicios/wiipiiserver.php",
		"ws":"wiipiiserver/cargaFacturasWeb"
	};
    // var sArgs = "'" + formUTIL.jsonToString(oArgs) + "'";

    var salida = _i.llamaWebService(oArgs, sEntrada);
    var oEntrada = {
		"pide": "nada"
	}
}

function webservice_llamaWebService(oArgs, sEntrada)
{
	var _i = this.iface;

    var sArgs = formUTIL.jsonToString(oArgs);
    var ejecutablePython = AQUtil.readSettingEntry("scripts/webservice/ejecutablepythonws");
	/*var comando = ["python3", "/home/antonio/datos/mayton/20190305_servicio_web_wipii/clientews.py", sArgs];*/
	var comando = ["python3", ejecutablePython, sArgs];

    var txtcomando = comando.join(" ");
    debug("CMD -> " + txtcomando);

    /*debug("STDIN -> " + stdin_text);*/

    var p = Process.executeNoSplit(comando, sEntrada);
    if (p != 0) {
        debug("CMD -> Err code: " + p);
        debug("STDErr: " + Process.stderr );
        debug("STDOut: " + Process.stdout );
    }
    var res = {}
    if (Process.stderr != "") {
    	debug("ERROR");
        res["ok"] = false;
        res["salida"] = Process.stderr + "\n" + Process.stdout;
    } else {
        res["ok"] = true;
        debug("OK");
        res["salida"] = Process.stdout;
    }
    var salida = Process.stdout;
    debug("Salida: " + salida);

 	//    var xSalida = new FLDomDocument();
 	//    if (!xSalida.setContent(salida)) {
	// 	debug("Falló setContent salida");
	// 	return;
	// }
	// debug(xSalida.toString());

	return salida;
}
//// WEBSERVICE /////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_definition saftpt */
/////////////////////////////////////////////////////////////////
//// SAFT PT ////////////////////////////////////////////////////

function saftpt_init()
{
	var _i = this.iface;

	_i.__init();
	_i.funciones.push(["convertirXmlSaftCsv", "Convertir XML datos de SAFT a csv para realizar tareas de comprobación de datos."]);	
}

function saftpt_convertirXmlSaftCsv()
{
  	var _i = this.iface;

  	return true;
/*
  	var archivo = FileDialog.getOpenFileName("*.xml");
	
	if(!archivo) {
		sys.warnMsgBox(sys.translate("No existe el fichero."));
		return false;
	}
	
	var contenido = File.read(archivo);
	var xml = new FLDomDocument();
	if (!xml.setContent(contenido)) {
		sys.warnMsgBox(sys.translate("Ha ocurrido un error durante la importación."));
		return false;
	}

	//var nodoPadre = xml.elementsByTagName("env:Body").item(0).firstChild().toElement();


	return true;*/
}

//// SAFT PT ////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_definition contNav */
/////////////////////////////////////////////////////////////////
//// CONT NAV ///////////////////////////////////////////////////

function contNav_init()
{
  var _i = this.iface;
	
	_i.__init();
	_i.funciones.push(["crearGruposContablesNav", "Crear grupos contables"]);
}

function contNav_crearGruposContablesNav()
{
  	var _i = this.iface;

  	if(!_i.comprobarPGC()){
  		sys.infoMsgBox("Debe crear el pgc2008 antes de crear los grupos contables");
  		return false;
  	}
  	if(!_i.crearGruposContables()){
  		return false;
  	}

  	return true;
}

function contNav_comprobarPGC()
{
  	var _i = this.iface;


  	return true;
}

function contNav_crearGruposContables()
{
  	var _i = this.iface;

  	if(!_i.crearGruposContablesNeg()){
  		sys.infoMsgBox("Fallo crearGruposContablesNeg");
  		return false;
  	}
  	if(!_i.crearGruposContablesPro()){
  		sys.infoMsgBox("Fallo crearGruposContablesPro");
  		return false;
  	}
  	if(!_i.crearGruposContablesExi()){
  		sys.infoMsgBox("Fallo crearGruposContablesExi");
  		return false;
  	}
  	if(!_i.crearGruposContablesIvaNeg()){
  		sys.infoMsgBox("Fallo crearGruposContablesIvaNeg");
  		return false;
  	}
  	if(!_i.crearGruposContablesProNeg()){
  		sys.infoMsgBox("Fallo crearGruposContablesProNeg");
  		return false;
  	}
  	if(!_i.crearGruposContablesIvaProNeg()){
  		sys.infoMsgBox("Fallo crearGruposContablesIvaProNeg");
  		return false;
  	}
  	if(!_i.crearGruposContablesProv()){
  		sys.infoMsgBox("Fallo crearGruposContablesProv");
  		return false;
  	}
  	if(!_i.crearGruposContablesCli()){
  		sys.infoMsgBox("Fallo crearGruposContablesCli");
  		return false;
  	}

  	return true;
}

function contNav_crearGruposContablesNeg()
{
  	var _i = this.iface;

  	var oParam = new Object;

  	oParam.tabla = "gruposcontablesneg";
  	oParam.campos = "codgrupo,descripcion";
  	oParam.aDatos = [["'EXIVA','Ceuta, Melilla y Canarias (Exentos IVA)'"],["'EXPORT','Otros clientes y proveedores (no UE)'"],["'NACIONAL','Clientes y proveedores nac.'"],["'EU','Clientes y proveedores UE'"]];

  	if(!_i.insertRegistroGrupoContable(oParam)){
  		return false;
  	}

  	return true;
}

function contNav_crearGruposContablesPro()
{
  	var _i = this.iface;

  	var oParam = new Object;

  	oParam.tabla = "gruposcontablespro";
  	oParam.campos = "codgrupo,descripcion";
  	oParam.aDatos = [["'MERCADERÍA','Mercadería'"],["'TRANSPORTE','Transporte'"],["'ALQUILERES','Alquileres de locales'"],["'SERVICIOS','Servicios'"]];

  	if(!_i.insertRegistroGrupoContable(oParam)){
  		return false;
  	}

  	return true;
}

function contNav_crearGruposContablesExi()
{
  	var _i = this.iface;

  	var oParam = new Object;

  	oParam.tabla = "gruposcontablesexi";
  	oParam.campos = "codgrupo,descripcion";
  	oParam.aDatos = [];

  	if(!_i.insertRegistroGrupoContable(oParam)){
  		return false;
  	}

  	return true;
}

function contNav_crearGruposContablesIvaNeg()
{
  	var _i = this.iface;

  	var oParam = new Object;

  	oParam.tabla = "gruposcontablesivaneg";
  	oParam.campos = "codgrupoivaneg,descripcion,aplicarrecargo,siniva,modelo349,sii_exentaiva";
  	oParam.aDatos = [["'EXIVA','Ceuta, Melilla y Canarias (Exentos IVA)',false,true,false, false"],["'EXPORT','Otros clientes y proveedores (no UE)',false,true,false, false"],["'NACIONAL','Clientes y proveedores nac.',false,false,false, false"],["'EU','Clientes y proveedores UE',false,false,false, false"],["'NAC.REC.','Clientes nacionales con Recargo de Equivalencia',true,false,false, false"],["'CUE','Clientes UE',false,true,false, false"],["'PUE','Proveedores UE',false,false,false, false"]];

  	if(!_i.insertRegistroGrupoContable(oParam)){
  		return false;
  	}

  	return true;
}

function contNav_crearGruposContablesProNeg()
{
  	var _i = this.iface;

  	var longSubcuenta = AQUtil.sqlSelect("ejercicios","longsubcuenta", "codejercicio = '" + flfactppal.iface.pub_ejercicioActual() + "'");
  	var codSubcuentaVMerca = "7" + flfactppal.iface.pub_cerosIzquierda("", (longSubcuenta-1));
  	var codSubcuentaDVMerca = "708" + flfactppal.iface.pub_cerosIzquierda("", (longSubcuenta-3));
  	var codSubcuentaCMerca = "6" + flfactppal.iface.pub_cerosIzquierda("", (longSubcuenta-1));
  	var codSubcuentaDCMerca = "608" + flfactppal.iface.pub_cerosIzquierda("", (longSubcuenta-3));
  	var codSubcuentaVAlqui = "752" + flfactppal.iface.pub_cerosIzquierda("", (longSubcuenta-3));
  	var codSubcuentaCAlqui = "621" + flfactppal.iface.pub_cerosIzquierda("", (longSubcuenta-3));
  	var codSubcuentaCTrans = "624" + flfactppal.iface.pub_cerosIzquierda("", (longSubcuenta-3));
  	var codSubcuentaVServi = "705" + flfactppal.iface.pub_cerosIzquierda("", (longSubcuenta-3));
  	var codSubcuentaCServi = "607" + flfactppal.iface.pub_cerosIzquierda("", (longSubcuenta-3));

  	var oParam = new Object;

  	oParam.tabla = "gruposcontablesproneg";
  	oParam.campos = "codgrupocontablepro,codgrupocontableneg,codsubcuentaven,codsubcuentadven,codsubcuentacom,codsubcuentadcom";
  	oParam.aDatos = [["'MERCADERÍA'","'NACIONAL'","'" + codSubcuentaVMerca + "'","'" + codSubcuentaDVMerca + "'","'" + codSubcuentaCMerca + "'","'" + codSubcuentaDCMerca + "'"],["'MERCADERÍA'","'EXIVA'","'" + codSubcuentaVMerca + "'","'" + codSubcuentaDVMerca + "'","'" + codSubcuentaCMerca + "'","'" + codSubcuentaDCMerca + "'"],["'MERCADERÍA'","'EU'","'" + codSubcuentaVMerca + "'","'" + codSubcuentaDVMerca + "'","'" + codSubcuentaCMerca + "'","'" + codSubcuentaDCMerca + "'"],["'MERCADERÍA'","'EXPORT'","'" + codSubcuentaVMerca + "'","'" + codSubcuentaDVMerca + "'","'" + codSubcuentaCMerca + "'","'" + codSubcuentaDCMerca + "'"],["'ALQUILERES'","'NACIONAL'","'" + codSubcuentaVAlqui + "'","''","'" + codSubcuentaCAlqui + "'","''"],["'ALQUILERES'","'EXIVA'","'" + codSubcuentaVAlqui + "'","''","'" + codSubcuentaCAlqui + "'","''"],["'ALQUILERES'","'EU'","'" + codSubcuentaVAlqui + "'","''","'" + codSubcuentaCAlqui + "'","''"],["'ALQUILERES'","'EXPORT'","'" + codSubcuentaVAlqui + "'","''","'" + codSubcuentaCAlqui + "'","''"],["'TRANSPORTE'","'NACIONAL'","''","''","'" + codSubcuentaCTrans + "'","''"],["'TRANSPORTE'","'EXIVA'","''","''","'" + codSubcuentaCTrans + "'","''"],["'TRANSPORTE'","'EU'","''","''","'" + codSubcuentaCTrans + "'","''"],["'TRANSPORTE'","'EXPORT'","''","''","'" + codSubcuentaCTrans + "'","''"],["'SERVICIOS'","'NACIONAL'","'" + codSubcuentaVServi + "'","''","'" + codSubcuentaCServi + "'","''"],["'SERVICIOS'","'EXIVA'","'" + codSubcuentaVServi + "'","''","'" + codSubcuentaCServi + "'","''"],["'SERVICIOS'","'EU'","'" + codSubcuentaVServi + "'","''","'" + codSubcuentaCServi + "'","''"],["'SERVICIOS'","'EXPORT'","'" + codSubcuentaVServi + "'","''","'" + codSubcuentaCServi + "'","''"]];

  	if(!_i.insertRegistroGrupoContable(oParam)){
  		return false;
  	}

  	return true;
}

function contNav_crearGruposContablesIvaProNeg()
{
  	var _i = this.iface;

  	var longSubcuenta = AQUtil.sqlSelect("ejercicios","longsubcuenta", "codejercicio = '" + flfactppal.iface.pub_ejercicioActual() + "'");
  	var codSubcuentaRep = "472" + flfactppal.iface.pub_cerosIzquierda("", (longSubcuenta-3));
  	var codSubcuenta = "477" + flfactppal.iface.pub_cerosIzquierda("", (longSubcuenta-3));

  	var oParam = new Object;

  	oParam.tabla = "gruposcontablesivaproneg";
  	oParam.campos = "codimpuesto,codgrupoivaneg,tipocalculo,codsubcuentarep,codsubcuentasop,codsubcuentarec";
  	oParam.aDatos = [["'GEN'","'NACIONAL'","'Normal'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'RED'","'NACIONAL'","'Normal'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'SRED'","'NACIONAL'","'Normal'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'GEN'","'EU'","'Normal'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'RED'","'EU'","'Normal'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'SRED'","'EU'","'Normal'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'GEN'","'EXIVA'","'No sujeto'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'RED'","'EXIVA'","'No sujeto'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'SRED'","'EXIVA'","'No sujeto'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'GEN'","'EXPORT'","'Normal'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'RED'","'EXPORT'","'Normal'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'SRED'","'EXPORT'","'Normal'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'GEN'","'CUE'","'Normal'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'RED'","'CUE'","'Normal'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'SRED'","'CUE'","'Normal'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'GEN'","'PUE'","'Reversión'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'RED'","'PUE'","'Reversión'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"],["'SRED'","'PUE'","'Reversión'","'" + codSubcuentaRep +"'","'" + codSubcuenta +"'","'" + codSubcuentaRep +"'"]];

  	if(!_i.insertRegistroGrupoContable(oParam)){
  		return false;
  	}

  	return true;
}

function contNav_crearGruposContablesProv()
{
  	var _i = this.iface;

  	var longSubcuenta = AQUtil.sqlSelect("ejercicios","longsubcuenta", "codejercicio = '" + flfactppal.iface.pub_ejercicioActual() + "'");
  	var codSubcuenta = "4" + flfactppal.iface.pub_cerosIzquierda("", (longSubcuenta-1));
  	var codSubcuentaAcree = "41" + flfactppal.iface.pub_cerosIzquierda("", (longSubcuenta-2));

  	var oParam = new Object;

  	oParam.tabla = "gruposcontablesprov";
  	oParam.campos = "codgrupo,codsubcuentaprov";
  	oParam.aDatos = [["'EXIVA','" + codSubcuenta + "'"],["'EXPORT','" + codSubcuenta + "'"],["'NACIONAL','" + codSubcuenta + "'"],["'EU','" + codSubcuenta + "'"],["'PUE','" + codSubcuenta + "'"],["'ACR.NAC','" + codSubcuentaAcree + "'"]];

  	if(!_i.insertRegistroGrupoContable(oParam)){
  		return false;
  	}

  	return true;
}

function contNav_crearGruposContablesCli()
{
  	var _i = this.iface;

  	var longSubcuenta = AQUtil.sqlSelect("ejercicios","longsubcuenta", "codejercicio = '" + flfactppal.iface.pub_ejercicioActual() + "'");
  	var codSubcuenta = "43" + flfactppal.iface.pub_cerosIzquierda("", (longSubcuenta-2));

  	var oParam = new Object;

  	oParam.tabla = "gruposcontablescli";
  	oParam.campos = "codgrupo,codsubcuentacli";
  	oParam.aDatos = [["'EXIVA','" + codSubcuenta + "'"],["'EXPORT','" + codSubcuenta + "'"],["'NACIONAL','" + codSubcuenta + "'"],["'EU','" + codSubcuenta + "'"],["'CUE','" + codSubcuenta + "'"]];

  	if(!_i.insertRegistroGrupoContable(oParam)){
  		return false;
  	}

  	return true;
}

function contNav_insertRegistroGrupoContable(oParam)
{
  	var _i = this.iface;

  	debug("/////////////// tabla: " + oParam.tabla);

  	if(oParam.aDatos.length > 0){
  		for(var i = 0; i < oParam.aDatos.length; i++){
			if (!AQUtil.execSql("INSERT INTO " + oParam.tabla + " (" + oParam.campos + ") VALUES (" + oParam.aDatos[i] + ")")) {
				return false;
			}
		}
	}
  	return true;
}

//// CONT NAV ///////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_definition articuloscomp */
/////////////////////////////////////////////////////////////////
//// ARTICULOSCOMP //////////////////////////////////////////////
function articuloscomp_init()
{
	var _i = this.iface;
	_i.__init();
	_i.funciones.push(["acInventarioTotal", "Regulariza a 0 todos los artículos a la fecha y almacén solicitados."]);	
}

function articuloscomp_acInventarioTotal(oParam)
{
	var _i = this.iface;
	var dialog = new Dialog;
	dialog.caption = "Inventario a 0";
	dialog.okButtonText = "Aceptar";
	dialog.cancelButtonText = "Cancelar";  
	var tallColor = false;  
	if(flfactppal.iface.pub_extension("tallcol_barcode")) {
		tallColor = true;
	}
	var texto = new Label;
	texto.text = sys.translate("Seleccione fecha y almacén:");
	dialog.add(texto);
	    
	var grupo = new GroupBox;
	dialog.add(grupo);   

	var fechaInv = new DateEdit;
	fechaInv.date = new Date();	
	fechaInv.label = sys.translate("Fecha:");
	grupo.add(fechaInv);
	
	var horaInv = new TimeEdit;
	horaInv.time = new Date();	
	horaInv.label = sys.translate("Hora:");
	grupo.add(horaInv);
	
	
	var codAlmacen = new LineEdit;
	codAlmacen.label = "Almacén:";
	var codAlmacenDef = flfactppal.iface.pub_valorDefectoEmpresa("codAlmacen");
	if(!codAlmacenDef) {
		codAlmacenDef = "";
	}
	codAlmacen.text = codAlmacenDef;	
	grupo.add(codAlmacen);
	if(!dialog.exec() ) {
		return;
	}
	
	var fecha = fechaInv.date;	
	var codAlmaInv = codAlmacen.text;
	var hora = horaInv.time.toString().right(8);

	
	debug("fecha: "+fecha);
	debug("codAlmacen: "+codAlmaInv);
	debug("hora: "+hora);
	
	var observaciones = sys.translate("Inventario a fecha %1 y hora %2 del almacén %3").arg(AQUtil.dateAMDtoDMA(fecha)).arg(hora).arg(codAlmaInv);
	
	
	var curInventario = new FLSqlCursor("inventarios");
	curInventario.setModeAccess(curInventario.Insert);
	curInventario.refreshBuffer();
	var codInventario = AQUtil.nextCounter("codinventario", curInventario);
	curInventario.setValueBuffer("codinventario",codInventario);
	curInventario.setValueBuffer("codalmacen",codAlmaInv);
	curInventario.setValueBuffer("fecha",new Date());
	curInventario.setValueBuffer("hora",new Date().toString().right(8));
	curInventario.setValueBuffer("observaciones",observaciones);
	if(!curInventario.commitBuffer()) {
		debug("error al crear inventario");
		return false;
	}
	var codInventario = curInventario.valueBuffer("codinventario");
	var selInv = "a.referencia,a.descripcion";
	var fromInv = "articulos a";
	var whereInv = "1=1";
	var orderInv = "a.referencia";
	
	if(tallColor) {
		selInv += ",at.barcode,at.talla,at.color"	
		fromInv+= " left outer join atributosarticulos at ON a.referencia=at.referencia"
		orderInv += ",at.barcode";
	}
	var obsLinea = sys.translate("Regularización por inventario %1").arg(codInventario);
	var q = new AQSqlQuery;	
	q.setSelect(selInv);
	q.setFrom(fromInv);
	q.setWhere(whereInv); 			
	q.setOrderBy(orderInv);
	if (!q.exec()){
		return;
	}  

	AQUtil.createProgressDialog(sys.translate("Generando líneas de inventario..." ), q.size());
	var paso = 0;
	while(q.next())
	{
		var referencia = q.value("a.referencia");
		var descripcion = q.value("a.descripcion");		
		var barcode;
		var talla;
		var color;
		var idStock;
		var whereStock = "referencia = '" + referencia + "' and codalmacen = '" + codAlmaInv + "'";
		var cantidadIni = 0;
		if(tallColor) {
			barcode = q.value("at.barcode");
			talla = q.value("at.talla");
			color = q.value("at.color");
			if(barcode && barcode != "") {
				whereStock += " and barcode = '" + barcode + "'";		
			}
		}

		var curStock = new FLSqlCursor("stocks");
		curStock.select(whereStock);
		curStock.setModeAccess(curStock.Browse);
    	curStock.refreshBuffer();
		if (!curStock.first()) {
			var oArticulo = new Object;
			if(barcode && barcode != "") {
				oArticulo["barcode"] = barcode;
			}
			oArticulo["referencia"] = referencia;
			idStock = flfactalma.iface.pub_crearStock(codAlmaInv, oArticulo);
    		

  		} else {  			
    		var oParam = new Object;
    		oParam.fechaMax = fecha;
    		cantidadIni = formRecordregstocks.iface.commonCalculateField("cantidad", curStock, oParam)
    		idStock = curStock.valueBuffer("idstock");
  		}


		var curLineas = new FLSqlCursor("lineasregstocks");		
		curLineas.setModeAccess(curLineas.Insert);
    	curLineas.refreshBuffer();
    	curLineas.setValueBuffer("codinventario",codInventario);
    	curLineas.setValueBuffer("referencia",referencia);
    	curLineas.setValueBuffer("codalmacendest",codAlmaInv);
    	curLineas.setValueBuffer("desarticulo",descripcion);
    	curLineas.setValueBuffer("idstock",idStock);
    	curLineas.setValueBuffer("fecha",fecha);
    	curLineas.setValueBuffer("hora",hora);
    	curLineas.setValueBuffer("motivo",obsLinea);    	
    	curLineas.setValueBuffer("cantidadini",cantidadIni);
    	curLineas.setValueBuffer("cantidadfin",0);
    	if(tallColor) {
    		if(barcode && barcode != "") {
    			curLineas.setValueBuffer("barcode",barcode);		
    		}
    		if(talla && talla != "") {
    			curLineas.setValueBuffer("talla",talla);	
    		}
    		if(color && color != "") {
    			curLineas.setValueBuffer("color",color);	
    		}

    	}
		if(!curLineas.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			return false;
		}  
		AQUtil.setProgress(paso++);
	}
	AQUtil.destroyProgressDialog();	
	return true;

}
//// ARTICULOSCOMP //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_definition elgansoCtr */
/////////////////////////////////////////////////////////////////
//// ELGANSOCTR /////////////////////////////////////////////////

function elgansoCtr_init() 
{
	var _i = this.iface;
	_i.__init();

	_i.funciones.push(["cargaAsientosBancarios", "Carga de asientos bancarios mediante ficheros (norma43)"]);
	_i.funciones.push(["egGenerarAsientosArqueosEdi", "Generar asientos de arqueos edi"]);
	_i.funciones.push(["egRecalcularPedidosProvContNueva", "Recalcular pedidos de proveedor asignando los grupos contables correctos"]);
	_i.funciones.push(["egRecalcularAlbaranesProvContNueva", "Recalcular albaranes de proveedor asignando los grupos contables correctos"]);
	_i.funciones.push(["egRecalcularPedidosCliContNueva", "Recalcular pedidos de cliente asignando los grupos contables correctos"]);
	_i.funciones.push(["egRecalcularAlbaranesCliContNueva", "Recalcular albaranes de cliente asignando los grupos contables correctos"]);
	_i.funciones.push(["movistockLineasComandasWeb", "Crear movimientos de stock para lineas de ventas web sin movistock"]);
	_i.funciones.push(["egRecalcularPedidosCliContNuevaCNR", "Recalcular pedidos de cliente con recargo de equivalencia según nueva contabilidad"]);
	_i.funciones.push(["egRecalcularAlbaranesCliContNuevaCNR", "Recalcular albaranes de cliente con recargo de equivalencia según nueva contabilidad"]);
	_i.funciones.push(["recalcularAlbaranesCli20161014", "Recalcular albaranes de cliente con problema en el cálculo del total sin iva de la línea"]);
	_i.funciones.push(["recalcularDocsCli20161018", "Recalcular documentos de cliente con descuento lineal incorrecto"]);
	_i.funciones.push(["envioEmailBienvenida", "Envíar email de bienvenida a las nuevas tarjetas de puntos."]);
	//_i.funciones.push(["egGeneraMovistockComandas", "Revisar ventas sin movimientos de stock desde 2016."]); ¿Incluye anuladas?
	_i.funciones.push(["egRevisaEnviosYRecepcionesViajes", "Revisa entradas y salidas por viaje con movimientos repetidos."]);
	_i.funciones.push(["egActualizarViajesTransitoOrigen", "Actualizar viajes de transito de origen"]);
	_i.funciones.push(["egActualizarViajesTransitoDestino", "Actualizar viajes de transito de destino"]);
	_i.funciones.push(["egActualizarViajesRxCerrada", "Actualizar viajes de transito de destino con cantidad recibida cero"]);
	_i.funciones.push(["procesarViajesWeb", "Procesar viajes Web"]);
	_i.funciones.push(["egRevisaStocks", "Revisar stocks"]);
	_i.funciones.push(["egRevisaLineasTransitoDobleStock", "Revisa líneas de viajes con dos movimientos asociados al mismo almacén TR"]);
	_i.funciones.push(["egPonerStockNegativoA0", "Pone a cero el stock negativo a cierta fecha"]);
	_i.funciones.push(["corregirTarjetasEmpleados", "Corregir tarjetas empleados"]);
	_i.funciones.push(["borrarAsientosMovimientos", "Borrar asientos de movimientos n43 del ejercicio actual"]);
	_i.funciones.push(["crearAsientosMovimientos", "Crear asientos de movimientos n43 del ejercicio actual sin asiento asignado"]);
	_i.funciones.push(["egGenerarAsientosArqueoWeb", "Genera los asientos de los arqueos WEB a partir del 1 de enero de 2017"]);
	_i.funciones.push(["egForzarSincroVentasTienda", "Fuerza la sincro de ventas cuyos pagos sí están en central a partir del 1 de enero de 2017"]);
	_i.funciones.push(["verificacionContable", "Verificación contable saldo cuentas del día por centro coste y subcuenta 700 sin IVA"]);
	_i.funciones.push(["actualizarViajesRecepcionadosFecha", "Actualizar viajes recepcionados en las tiendas y no sincronizados a central desde fecha seleccionada"]);
	//_i.funciones.push(["actualizarViajesRecepcionadosCeroFecha", "Actualizar viajes recepcionados como cerrados a 0 en las tiendas y no sincronizados a central antes de fecha seleccionada"]);
	_i.funciones.push(["actualizarViajesEnviadosFecha", "Actualizar viajes enviados desde las tiendas y no sincronizados con central con fecha seleccionada como ptesincroenvio true"]);
	_i.funciones.push(["egComprobarStocksMagento", "Comprueba si el stock de abanq es igual al de magento"]);	
	_i.funciones.push(["reiniciaSaldoTarjetasEmp", "Reinicia saldo tarjetas empleado"]);
	_i.funciones.push(["egCorregirLineasViajesRxSinMovimiento", "Corrige las líneas de recepcion de viaje sin movimientos de stock."]);
	_i.funciones.push(["eliminarAlbaranesCreadosDuplicadosCEN", "Eliminar albaranesprov CEN duplicados desde una fecha."]);
	_i.funciones.push(["eliminarAlbaranesCreadosDuplicadosCenDesde", "Eliminar albaranesprov CEN duplicados y eliminando sólo los de una fecha desde."]);
	_i.funciones.push(["egCorregirLineasViajesTxSinMovimiento", "Corrige las líneas de envío de viaje sin movimientos de stock PTE."]);
	_i.funciones.push(["diagnosticoCtr", "Diagnóstico de la situación actual de la base de datos central"]);
	_i.funciones.push(["crearMovStockTtd", "Crear movimientos de stock ttd de almacén TR"]);
	_i.funciones.push(["revisarPedidosMayor", "Revisar pedidos de mayor con datos incompletos."]);
	_i.funciones.push(["generarReposicionWEB", "Generar automáticamente reposición sugerida de WEB."]);
	_i.funciones.push(["cambiarAlmacenAlbaranesCli", "Cambiar el almacén de albaranescli y recalcular stocks."]);
	_i.funciones.push(["crearMovistockViajes", "Generar movimientos de stock de líneas de viajes de eg_lineasptesmovistock."]);
	_i.funciones.push(["arreglarEan14", "Arreglar los barcode con 14 digitos EAN en lugar de 13 en central y tienda."]);
	_i.funciones.push(["verificacionContableFacturasVenta", "Verificación contable saldo cuentas del día por centro coste y subcuenta 477 IVA"]);
	_i.funciones.push(["facturarVentasSii", "Facturación de ventas de caja para SII"]);
	_i.funciones.push(["egGenerarAsientosArqueo", "Genera los asientos de los arqueos a partir del 1 de enero de 2017"]);
	_i.funciones.push(["egActualizarContrapartidas", "Actualiza las contrapartidas a partir del 1 de enero de 2017"]);
	_i.funciones.push(["egRellenarCodigoFacturaVentaWebX", "Rellena los códigos de factura de las ventas Web con la serie AWEBX"]);
	_i.funciones.push(["egRegenerarAsientoNoContabilizadas", "Actualiza las facturas sin contabilidad de las ventas de empresas con contabilidad y regenera su asiento"]);
	_i.funciones.push(["egRegenerarAsientoPagoDevolProv", "Actualiza los pagos de recibos de proveedores."]);
	_i.funciones.push(["egBorrarPagosDuplicados", "Borra pagos duplicados con el mismo idsincro"]);
	_i.funciones.push(["egBorrarContabilidadLafayette", "Borra contabilidad de Lafayette"]);

	_i.funciones.push(["egImportarVentasEdi", "Importar Ventas Edi a partir de ficheros EDI"]);
	_i.funciones.push(["egCambiarVentasEdi", "Cambia ventas edi de una tienda a otra según su codigo operacional"]);
	_i.funciones.push(["egCorregirPagosEdiDuplicados", "Elimina pagos duplicados en comandas EDI"]);
	_i.funciones.push(["egRellenarPagosVentasEdi", "Rellena las ventas de los Edi con pagos con tarjeta por el total del importe de la venta."]);
	_i.funciones.push(["corregirCantidadRecibidaPlanesProduccion", "Corregir cantidad recibida en planes de producción y lineas de pedidos"]);
	_i.funciones.push(["generarAlbaranPedidosWEB", "Generar albaranes web de los pedidos WEB de tiendas."]);
	_i.funciones.push(["eg_marcaViajesExTienda", "Marcar viajes enviados en tienda que se han resincronizado mal."]);
	_i.funciones.push(["eg_marcaViajesExTiendaCerradoEx", "Marcar viajes enviados en tienda que se han resincronizado mal con cerradoex."]);
	_i.funciones.push(["eg_marcaViajesRxTiendaCerradoRx", "Marcar viajes enviados en tienda que se han resincronizado mal con cerradorx."]);
	_i.funciones.push(["eg_eliminarFacturasTiendas", "Eliminar facturas de ventas de tienda."]);
	_i.funciones.push(["eg_actualizarViajesEnviados", "Actualizar viajes enviados."]);
	_i.funciones.push(["eg_actualizarViajesRecibidos", "Actualizar viajes recibidos."]);
	_i.funciones.push(["eg_recalcularContAlbaranesProv2017", "Recalcular contabilidad albaranes proveedores 2017."]);
	_i.funciones.push(["eg_recalcularContFacturasProv2017", "Recalcular contabilidad facturas proveedores 2017."]);
	_i.funciones.push(["egRellenarCodigoFacturas", "Rellena los códigos de factura de las ventas anteriores al 1 de Julio de 2017"]);
	_i.funciones.push(["egRellenarCodigoFacturaVentaWebY", "Rellena los códigos de factura de las ventas anteriores al 1 de Julio de 2017 WEB"]);
	_i.funciones.push(["facturarVentasSiiTiendasMes", "Facturación de ventas de caja para SII por listado de tiendas y mes"]);
	_i.funciones.push(["borrarFacturasVentasTienda", "Borrar facturas de ventas de tienda"]);
	_i.funciones.push(["egRenumerarEgCodFacturaComandas", "Renumerar egcodfactura de ventas de tienda"]);
	_i.funciones.push(["revisionSeriesFacturas", "Revisa los huecos y la continuidad cronológica de las facturas"]);
	_i.funciones.push(["egImportarPedidosECI", "Importar pedidos ECI."]);
	_i.funciones.push(["egCorregirLineasViajesEstadoMovistockPTE", "Corregir movimientos de stock PTE cuyas líneas ya están enviadas."]);
	_i.funciones.push(["egCorregirLineasOrigenSinMovimiento", "Corregir movimientos de stock cuyas líneas no tienen movistock creado."]);
	_i.funciones.push(["controlFacturasWEBSerieX", "Eliminar y renumerar facturas serie X de Julio."]);
	_i.funciones.push(["crearRegistrosInicioContAnaliticaYear", "Crear registros iniciales para el año seleccionado."]);
	_i.funciones.push(["revisarHuecosFacturaTienda", "Revisa los huecos y la continuidad cronológica de las facturas de venta."]);
	_i.funciones.push(["cargaInventarioCierre2016", "Carga del inventario de cierre 2016."]);
	_i.funciones.push(["exportarPedidoEciEdi", "Exportar pedidos eci."]);
	_i.funciones.push(["egCorregirLineasViajesRxMovPendiente", "Corregir movimientos de líneas recibidas con movimiento PTE."]);
	_i.funciones.push(["egCorregirLineasViajesTxMovPendiente", "Corregir movimientos de líneas enviadas con movimiento PTE."]);
	_i.funciones.push(["egTotalizarInventariosTiendas", "Totalizar inventarios totales."]);
	_i.funciones.push(["egCorregirLineasViajesTxCanceladasMovPendiente", "Corregir movimientos de líneas canceladas con movimiento PTE."]);
	_i.funciones.push(["egRevisaStocksNeg", "Revisar los stocks negativos de los almacenes no logísticos ni web."]);
	_i.funciones.push(["egModificarLineasTransitoRXOK", "Modificar líneas en tránsito con rx tienda y central ok a canceladas"]);
	_i.funciones.push(["creaBonosEmpleados", "Crear bonos agentes TPV."]);
	_i.funciones.push(["actualizarInventariosSincroTiendas", "Actualizar campo sincronizado false en inventarios de tiendas sincronizados que no están en central."]);
	_i.funciones.push(["cargaInventarioSTO", "Cargar Inventario STO."]);
	_i.funciones.push(["egCorregirLineasViajesAlmacenTransito", "Corregir movimientos de stock de lineas de viajes de almacen de Transito."]);
	_i.funciones.push(["modificarAlmacenMovimientosPedidosPte", "Proceso modifica stocks ptes con almacén stock diferente almacén pedidocli."]);
	_i.funciones.push(["generarInventarioTiendaCopia", "Genera inventario a partir de otro inventario."]);
	_i.funciones.push(["regenerarPagosGL", "Regenera los pagos de ventas de Galerias Lafayette desde la fecha seleccionada."]);
	_i.funciones.push(["arreglarViajesRecibidosLineasTransito", "Marca en la tienda destino los viajes que en central están recibidos con líneas en tránsito."]);
	_i.funciones.push(["informarClaseTiendas", "Informar campo de clase de tienda para todas las tiendas."]);
	_i.funciones.push(["arreglarViajesViejosCerradosLogisAhoraEnTransito", "arreglarViajesViejosCerradosLogisAhoraEnTransito."]);
	_i.funciones.push(["egLineasCantEnviadaDuplicada", "egLineasCantEnviadaDuplicada."]);
	_i.funciones.push(["egRegenerarMovimientosStockTransito", "egRegenerarMovimientosStockTransito."]);
	_i.funciones.push(["egRevisaMovsTienda", "egRevisaMovsTienda."]);
	_i.funciones.push(["egCambiarFechaMovViajesTienda", "Cambiar la fecha de los movimientos de stocks de viajes en tienda por la fecha real del mimsmo movimiento en la central."]);
	_i.funciones.push(["recibeViajesUNIF", "Marca como recibidos los viajes en tránsito con destino UNIF"]);
	_i.funciones.push(["controlVentasLineasPagos", "Crea líneas y pagos para aquellas ventas que no los tengan a partir de una fecha"]);
	_i.funciones.push(["controlSecuenciaFacturasWeb", "Busca incoherencias entre código y fecha y saltos de numeración"]);
	_i.funciones.push(["corregirAsientosArqueosWeb", "Corrige asientos de arqueos web en los que no coinciden los importes con la suma de sus pagos"]);
	_i.funciones.push(["exportarTlogTiendas", "Exporta Tlog de las tiendas a un documento XML"]);
	_i.funciones.push(["crearRegistrosInicioContAnaliticaAuto", "Crear registros iniciales contabilidad analítica."]);
	_i.funciones.push(["creaBonosMasivo", "Crear bonos masivo seleccionando el importe mínimo y el número de bonos a crear."]);
	_i.funciones.push(["crearFacturaRectWebBonos", "Crear factura de cliente rectificativa por los bonos gastados en web."]);
	_i.funciones.push(["recibeViajesATAR", "Marca como recibidos los viajes en tránsito con destino ATAR"]);
	_i.funciones.push(["recibeViajesATAC", "Marca como recibidos los viajes en tránsito con destino ATAC"]);
	_i.funciones.push(["generaBonosFidelizacion", "Genera bonos de fidelización para tarjetas que no los tienen"]);
	_i.funciones.push(["arreglarAtributosArticulosDuplicados", "Arreglar atributosarticulos con referencia,talla y color duplicados"]);
	_i.funciones.push(["genFacturaEciEdi", "Generar ficheros EDICOM con las facturascli de liquidación mensual ECI"]);
	_i.funciones.push(["genBarcodesAmazon", "Generar barcodes prefijo bueno para Amazon"]);
	_i.funciones.push(["firmarFacturasSAFT", "Proceso para firmar las facturas de portugal que estén dentro de eg_saftportugal."]);
	_i.funciones.push(["revisarArticulosIdl", "Revisar artículos a reenviar a IDL."]);
	_i.funciones.push(["comprobarVentasSincronizadas", "Comprobar ventas sincronizadas."]);
	_i.funciones.push(["revisarIdSincroStock", "Revisar en las tiendas aquellos registros de stock sin idsincro informado."]);
	_i.funciones.push(["creaFicheroBarcodes", "Genera un fichero con barcodes para tarjetas regalo"]);
	_i.funciones.push(["insertRegularizacionesCeroDic2017", "insertRegularizacionesCeroDic2017"]);
	_i.funciones.push(["recalcularRegistrosJornadas", "recalcular los registros de cp_tramosjornada con idjornada incorrecto"]);
	_i.funciones.push(["crearFacturaAbonoListado", "Crear facturas de abono de un listado de facturas de cliente"]);
	_i.funciones.push(["eliminaVentasLafayette", "Elimina ventas de lafayette creadas erróneamente"]);
	_i.funciones.push(["gestionarFacturasVentaIDL", "Gestionar facturas de ventas en pdf para IDL"]);
	_i.funciones.push(["procesarRegistrosEcommerce", "Procesa registros tanto de idl_ecommerce como idl_ecommercedevoluciones"]);

}

function elgansoCtr_ejecutarFuncion()
{
	var _i = this.iface;
	var funcion = this.cursor().valueBuffer( "funcion" ).toString();
	
	switch ( funcion ) {
		case "egActualizarViajesTransitoOrigen": {
			return _i.egActualizarViajesTransitoOrigen();
			break;
		}
		case "egActualizarViajesTransitoDestino": {
			return _i.egActualizarViajesTransitoDestino();
			break;
		}
		case "eliminarAlbaranesCreadosDuplicadosCEN": {
			var res = _i.eliminarAlbaranesCreadosDuplicadosCEN();
			sys.infoMsgBox(sys.translate("Albaranes eliminados"));
			return res;
			break;
		}
		case "eliminarAlbaranesCreadosDuplicadosCenDesde": {
			var res = _i.eliminarAlbaranesCreadosDuplicadosCenDesde();
			sys.infoMsgBox(sys.translate("Albaranes eliminados"));
			return res;
			break;
		}
		case "egCorregirLineasViajesTxSinMovimiento": {
			var res = _i.egCorregirLineasViajesTxSinMovimiento();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "crearMovStockTtd": {
			var res = _i.crearMovStockTtd();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "arreglarEan14": {
			var res = _i.arreglarEan14();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "egRellenarCodigoFacturaVentaWebX": {
			var res = _i.egRellenarCodigoFacturaVentaWebX();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "egRegenerarAsientoNoContabilizadas": {
			var res = _i.egRegenerarAsientoNoContabilizadas();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "egImportarVentasEdi": {
			var res:Object = MessageBox.information(sys.translate("¿Seguro que desea ejecutar esta función?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton);
			if (res != MessageBox.Yes)
				return;

			var dialog = new Dialog;
			dialog.caption = "Indique el tipo de ventas que va a sincronizar";
			dialog.okButtonText = sys.translate("OK");
			dialog.cancelButtonText = sys.translate("Cancelar");
			
			var bgroup = new GroupBox;
			dialog.add(bgroup);
			
			var eci = new RadioButton;
			eci.text = sys.translate("ECI");
			eci.checked = false;
			bgroup.add(eci);
			
			var lafayette = new RadioButton;
			lafayette.text = sys.translate("LAFAYETTE");
			lafayette.checked = true;
			bgroup.add(lafayette);
			
			if (!dialog.exec())
				return true;

			var tipo = "";			
			if (lafayette.checked == true) {
				tipo = "LAFAYETTE";
			}
			else {
				if (eci.checked == true) {
					tipo = "ECI";
				}
			}

			_i.egImportarVentasEdi(tipo);
			break;			
		}
		case "cargaAsientosBancarios": {
			var res = _i.cargaAsientosBancarios();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "eg_marcaViajesExTienda": {
			var res = _i.eg_marcaViajesExTienda();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "eg_marcaViajesExTiendaCerradoEx": {
			var res = _i.eg_marcaViajesExTiendaCerradoEx();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "eg_marcaViajesRxTiendaCerradoRx": {
			var res = _i.eg_marcaViajesRxTiendaCerradoRx();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "eg_eliminarFacturasTiendas": {
			var res = _i.eg_eliminarFacturasTiendas();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "eg_actualizarViajesEnviados": {
			var res = _i.eg_actualizarViajesEnviados();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "eg_actualizarViajesRecibidos": {
			var res = _i.eg_actualizarViajesRecibidos();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "eg_recalcularContAlbaranesProv2017": {
			var res = _i.eg_recalcularContAlbaranesProv2017();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "eg_recalcularContFacturasProv2017": {
			var res = _i.eg_recalcularContFacturasProv2017();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "facturarVentasSiiTiendasMes": {
			var res = _i.facturarVentasSiiTiendasMes();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "egRellenarCodigoFacturas": {
			var res = _i.egRellenarCodigoFacturas();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "egImportarPedidosECI": {
			var tipo = 'ECI';
			_i.egImportarPedidosECI(tipo);
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			break;			
		}
		case "crearRegistrosInicioContAnaliticaYear": {
			var res = _i.crearRegistrosInicioContAnaliticaYear();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "egCorregirLineasViajesRxMovPendiente": {
			var res = _i.egCorregirLineasViajesRxMovPendiente();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "egCorregirLineasViajesTxMovPendiente": {
			var res = _i.egCorregirLineasViajesTxMovPendiente();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "egTotalizarInventariosTiendas": {
			var res = _i.egTotalizarInventariosTiendas();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "egCorregirLineasViajesTxCanceladasMovPendiente": {
			var res = _i.egCorregirLineasViajesTxCanceladasMovPendiente();
			return res;
			break;
		}
		case "egMarcaViajesCancelados": {
			var res = _i.egMarcaViajesCancelados();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "actualizarInventariosSincroTiendas": {
			var res = _i.actualizarInventariosSincroTiendas();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "egCorregirLineasViajesAlmacenTransito": {
			var res = _i.egCorregirLineasViajesAlmacenTransito();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "modificarAlmacenMovimientosPedidosPte": {
			var res = _i.modificarAlmacenMovimientosPedidosPte();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "crearMovistockViajes": {
			var res = _i.crearMovistockViajes();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "regenerarPagosGL": {
			var res = _i.regenerarPagosGL();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "arreglarViajesRecibidosLineasTransito": {
			var res = _i.arreglarViajesRecibidosLineasTransito();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "arreglarViajesViejosCerradosLogisAhoraEnTransito": {
			var res = _i.arreglarViajesViejosCerradosLogisAhoraEnTransito();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "egLineasCantEnviadaDuplicada": {
			var res = _i.egLineasCantEnviadaDuplicada();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "egRegenerarMovimientosStockTransito": {
			var res = _i.egRegenerarMovimientosStockTransito();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "egCambiarFechaMovViajesTienda": {
			var res = _i.egCambiarFechaMovViajesTienda();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "controlHuecosTickets": {
			var res = _i.controlHuecosTickets();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "controlVentasLineasPagos": {
			var res = _i.controlVentasLineasPagos();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "controlSecuenciaFacturasWeb": {
			var res = _i.controlSecuenciaFacturasWeb();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "exportarTlogTiendas": {
			var res = _i.exportarTlogTiendas();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "crearRegistrosInicioContAnaliticaAuto": {
			var res = _i.crearRegistrosInicioContAnaliticaAuto();
			sys.infoMsgBox(sys.translate("Proceso terminado"));
			return res;
			break;
		}
		case "arreglarAtributosArticulosDuplicados": {
			var res = _i.arreglarAtributosArticulosDuplicados();
			sys.infoMsgBox(sys.translate("Proceso arreglar duplicados terminado"));
			return res;
			break;
		}
		case "genFacturaEciEdi": {
			var res = _i.genFacturaEciEdi();
			sys.infoMsgBox(sys.translate("Proceso generar ficheros de facturascli ECI EDICOM terminado"));
			return res;
			break;
		}
		case "genBarcodesAmazon": {
			var res = _i.genBarcodesAmazon();
			sys.infoMsgBox(sys.translate("Proceso genBarcodesAmazon terminado"));
			return res;
			break;
		}
		case "firmarFacturasSAFT": {
			var res = _i.firmarFacturasSAFT();
			sys.infoMsgBox(sys.translate("Proceso firmarFacturasSAFT terminado"));
			return res;
			break;
		}
		case "revisarArticulosIdl": {
			var res = _i.revisarArticulosIdl();
			sys.infoMsgBox(sys.translate("Proceso revisarArticulosIdl terminado"));
			return res;
			break;
		}
		case "comprobarVentasSincronizadas": {
			var res = _i.comprobarVentasSincronizadas();
			sys.infoMsgBox(sys.translate("Proceso comprobarVentasSincronizadas terminado"));
			return res;
			break;
		}
		case "revisarIdSincroStock": {
			var res = _i.revisarIdSincroStock();
			sys.infoMsgBox(sys.translate("Proceso revisarIdSincroStock terminado"));
			return res;
			break;
		}
		case "creaFicheroBarcodes": {
			var res = _i.creaFicheroBarcodes();
			sys.infoMsgBox(sys.translate("Proceso creaFicheroBarcodes terminado"));
			return res;
			break;
		}
		case "insertRegularizacionesCeroDic2017": {
			var res = _i.insertRegularizacionesCeroDic2017();
			sys.infoMsgBox(sys.translate("Proceso insertRegularizacionesCeroDic2017 terminado"));
			return res;
			break;
		}
		case "recalcularRegistrosJornadas": {
			var res = _i.recalcularRegistrosJornadas();
			sys.infoMsgBox(sys.translate("Proceso recalcularRegistrosJornadas terminado"));
			return res;
			break;
		}
		case "crearFacturaAbonoListado": {
			var res = _i.crearFacturaAbonoListado();
			sys.infoMsgBox(sys.translate("Proceso crearFacturaAbonoListado terminado"));
			return res;
			break;
		}
		case "eliminaVentasLafayette": {
			var res = _i.eliminaVentasLafayette();
			sys.infoMsgBox(sys.translate("Proceso eliminaVentasLafayette terminado"));
			return res;
			break;	
		}
		case "gestionarFacturasVentaIDL": {
			var res = _i.gestionarFacturasVentaIDL();
			sys.infoMsgBox(sys.translate("Proceso gestionarFacturasVentaIDL terminado"));
			return res;
			break;	
		}
		case "procesarRegistrosEcommerce": {
			var res = _i.procesarRegistrosEcommerce();
			sys.infoMsgBox(sys.translate("Proceso procesarRegistrosEcommerce terminado"));
			return res;
			break;	
		}
		default: {
			if (!_i.__ejecutarFuncion()) {
				return;
			}
		}
	}
}

function elgansoCtr_cargaAsientosBancarios()
{
	var _i = this.iface;

	var curReg = new FLSqlCursor("n43_regsimportados");
	curReg.setActivatedCheckIntegrity(false);
	var curImp = new FLSqlCursor("n43_importados");
	curImp.setModeAccess(curImp.Insert);
	curImp.refreshBuffer();

	if(!formRecordn43_importados.iface.importar(curImp, curReg)) {
		sys.warnMsgBox(sys.translate("Hubo un problema en la creación de registros de importación."));
		return false;		
	}

	if(!curImp.commitBuffer()) {
		sys.warnMsgBox(sys.translate("No se ha importado correctamente el fichero."));
		return false;
	}

	var idImp = curImp.valueBuffer("idimportado");
	if(!_i.comprobarCuentasImportacion(idImp))
		return false;

	if(!formn43_movimientos.iface.capturar(idImp, true))
		return false;

	return true;
}

function elgansoCtr_comprobarCuentasImportacion(idimportado)
{
	var _i = this.iface;
	var curReg = new FLSqlCursor("n43_regsimportados");
	curReg.select("idimportado = " + idimportado + " AND codregistro = '11'");

	var cont, cta, subcta, subctabancaria;
	while(curReg.next()) {
		curReg.setModeAccess(curReg.Browse);
		curReg.refreshBuffer();

  		cont = curReg.valueBuffer("contenido").split(";");
  		debug(cont);
  		cta = AQUtil.sqlSelect("cuentasbanco", "codcuenta", "ctaentidad = '" + cont[0] + "' and ctaagencia = '" + cont[1] + "' and cuenta = '" + cont[2] + "'");
  		if (!cta) {
  			sys.warnMsgBox(sys.translate("No existe la siguiente cuenta:\nEntidad: %1\nOficina: %2\nCuenta: %3").arg(cont[0]).arg(cont[1]).arg(cont[2]));
  			return false;
  		}

  		subcta = AQUtil.sqlSelect("cuentasbanco", "idsubcuenta", "codcuenta = '" + cta + "'");
  		if (!subcta) {
  			sys.warnMsgBox(sys.translate("Debe indicar una subcuenta para la cuenta:\nEntidad: %1\nOficina: %2\nCuenta: %3").arg(cont[0]).arg(cont[1]).arg(cont[2]));
  			return false;
  		}

  		subctabancaria = AQUtil.sqlSelect("cuentasbanco", "idsubcuentabancaria", "codcuenta = '" + cta + "'");
  		if (!subctabancaria) {
  			sys.warnMsgBox(sys.translate("Debe indicar una subcuenta bancaria para la cuenta:\nEntidad: %1\nOficina: %2\nCuenta: %3").arg(cont[0]).arg(cont[1]).arg(cont[2]));
  			return false;
  		}
	}
	return true;
}

function elgansoCtr_egGenerarAsientosArqueosEdi()
{
	var _i = this.iface;

	var fecha = "2016-01-01";

	var hoy = new Date();

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha de Inicio");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = fecha;
	dialog.add(dFechaIni);

	var dFechaFin = new DateEdit;
	dFechaFin.label = sys.translate("Fin");
	dFechaFin.date = hoy;
	dialog.add(dFechaFin);


	if (!dialog.exec()) {
		return false;
	}

	var fechaIni = dFechaIni.date;
	var fechaFin = dFechaFin.date;

	var idEmpresaECI = flfactppal.iface.pub_valorDefecto("empresaeci");

	var q = new FLSqlQuery();
	q.setSelect("idtpv_arqueo, diadesde, diahasta");
	q.setFrom("tpv_arqueos");
	q.setWhere("diadesde >= '" + fechaIni + "' and diadesde <= '" + fechaFin + "' and codtienda in (select codtienda from tpv_tiendas where idempresa = " + idEmpresaECI + ")");
	
	debug(q.sql());

	if(!q.exec()){debug("no exec");
		return false;
	}
	
	AQUtil.createProgressDialog(sys.translate("Generando asientos arqueos..."), q.size());
	var paso = 0;

	var curArqueo = new FLSqlCursor("tpv_arqueos");
	
	while(q.next()) {
		
		AQUtil.setProgress(paso++);
		
		curArqueo.select("idtpv_arqueo = '" + q.value("idtpv_arqueo") + "'");
		if(!curArqueo.first()){
			AQUtil.destroyProgressDialog();
			return false;
		}
			
		curArqueo.setModeAccess(curArqueo.Edit);
		curArqueo.refreshBuffer();

		if(!flfact_tpv.iface.generarAsientoArqueo(curArqueo, true)){
			AQUtil.destroyProgressDialog();
			return false;
		}
			

		if(!curArqueo.commitBuffer()){
			AQUtil.destroyProgressDialog();
			return false;
		}
			
	}
	AQUtil.destroyProgressDialog();
	return true;
}

function elgansoCtr_egRecalcularPedidosProvContNueva()
{
	var _i = this.iface;
	
	if(!_i.recalcularPedidosProvContNueva()){
		return false;
	}

	return true;
}

function elgansoCtr_egRecalcularAlbaranesProvContNueva()
{
	var _i = this.iface;
	if(!_i.recalcularAlbaranesProvContNueva()){
		return false;
	}
	
	return true;
}

function elgansoCtr_recalcularPedidosProvContNueva()
{
	var _i = this.iface;
	
	var fecha = "2016-01-01";

	var hoy = new Date();

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha de Inicio Pedidos");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = fecha;
	dialog.add(dFechaIni);

	var dFechaFin = new DateEdit;
	dFechaFin.label = sys.translate("Fin");
	dFechaFin.date = hoy;
	dialog.add(dFechaFin);


	if (!dialog.exec()) {
		return false;
	}

	var fechaIni = dFechaIni.date;
	var fechaFin = dFechaFin.date;

	var q = new FLSqlQuery();
	q.setSelect("idpedido");
	q.setFrom("pedidosprov");
	q.setWhere("fecha BETWEEN '" + fechaIni + "' AND '" + fechaFin + "' AND editable");

	if (!q.exec()) { 
		sys.warnMsgBox(sys.translate("Fallo en la consulta"));
		return false;
	}

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Recalculando totales pedidos proveedor..."), q.size());
	var p = 0;
	
	if (!AQUtil.execSql("UPDATE pedidosprov SET codgrupoivaneg = (SELECT codgrupoivaneg from proveedores where pedidosprov.codproveedor = proveedores.codproveedor) WHERE codgrupoivaneg is null")) {
		return false;
	}

	while(q.next()){
		AQUtil.setProgress(p++);

		if(!_i.editarPedidosProvContNueva(q.value("idpedido"))){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
  return true;
}


function elgansoCtr_editarPedidosProvContNueva(idPedido)
{		
	var _i = this.iface;
	if(!_i.editarTotalesLineasPedidosProvContNueva(idPedido)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
	if(!_i.editarTotalesPedidosProvContNueva(idPedido)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
	return true;
}

function elgansoCtr_editarTotalesLineasPedidosProvContNueva(idPedido)
{		
	var _i = this.iface;

	var cCF = formRecordlineaspedidosprov.iface.pub_commonCalculateField;

	var curLineasPedidosProv = new FLSqlCursor("lineaspedidosprov");
	curLineasPedidosProv.select("idpedido = '" + idPedido + "'");

	while(curLineasPedidosProv.next()){
		curLineasPedidosProv.setModeAccess(curLineasPedidosProv.Edit);
		curLineasPedidosProv.refreshBuffer();
		curLineasPedidosProv.setValueBuffer("codimpuesto",cCF("codimpuesto", curLineasPedidosProv));
		curLineasPedidosProv.setValueBuffer("iva",cCF("iva", curLineasPedidosProv));
		curLineasPedidosProv.setValueBuffer("pvpunitario",cCF("pvpunitario", curLineasPedidosProv));
		curLineasPedidosProv.setValueBuffer("pvpsindto", cCF("pvpsindto", curLineasPedidosProv));
		curLineasPedidosProv.setValueBuffer("dtopor", cCF("dtopor", curLineasPedidosProv));
		curLineasPedidosProv.setValueBuffer("dtolineal", cCF("dtolineal", curLineasPedidosProv));
		curLineasPedidosProv.setValueBuffer("pvptotal", cCF("pvptotal", curLineasPedidosProv));
		if(!curLineasPedidosProv.commitBuffer()){
				return false;
		}
	}
	
	return true;
}

function elgansoCtr_editarTotalesPedidosProvContNueva(idPedido)
{		
	var _i = this.iface;

	var curPedidosProv = new FLSqlCursor("pedidosprov");	
	curPedidosProv.select("idpedido = " + idPedido);
		
	var editable;
	if(curPedidosProv.first()){
		curPedidosProv.setModeAccess(curPedidosProv.Edit);
		curPedidosProv.refreshBuffer();
		
		editable = curPedidosProv.valueBuffer("editable");
		if(!editable){
			curPedidosProv.setUnLock("editable", true);
		}
		curPedidosProv.select("idpedido = " + idPedido);
		if(curPedidosProv.first()){
			curPedidosProv.setModeAccess(curPedidosProv.Edit);
			curPedidosProv.refreshBuffer();
			curPedidosProv.setValueBuffer("neto", formpedidosprov.iface.pub_commonCalculateField("neto", curPedidosProv));
			curPedidosProv.setValueBuffer("totaliva", formpedidosprov.iface.pub_commonCalculateField("totaliva", curPedidosProv));
			curPedidosProv.setValueBuffer("totalirpf", formpedidosprov.iface.pub_commonCalculateField("totalirpf", curPedidosProv));
			curPedidosProv.setValueBuffer("totalrecargo", formpedidosprov.iface.pub_commonCalculateField("totalrecargo", curPedidosProv));
			curPedidosProv.setValueBuffer("total", formpedidosprov.iface.pub_commonCalculateField("total", curPedidosProv));
			curPedidosProv.setValueBuffer("totaleuros", formpedidosprov.iface.pub_commonCalculateField("totaleuros", curPedidosProv));
			if (!curPedidosProv.commitBuffer()) {
				return false;
			}
		}
			
		if(!editable){
			curPedidosProv.select("idpedido = " + idPedido);

			if(curPedidosProv.first()){
				curPedidosProv.setUnLock("editable", false);
			}
		}
	}		
			
	return true;
}

function elgansoCtr_recalcularAlbaranesProvContNueva()
{
	var _i = this.iface;
	
	var fecha = "2016-01-01";

	var hoy = new Date();

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha de Inicio Albaranes");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = fecha;
	dialog.add(dFechaIni);

	var dFechaFin = new DateEdit;
	dFechaFin.label = sys.translate("Fin");
	dFechaFin.date = hoy;
	dialog.add(dFechaFin);


	if (!dialog.exec()) {
		return false;
	}

	var fechaIni = dFechaIni.date;
	var fechaFin = dFechaFin.date;

	var q = new FLSqlQuery();
	q.setSelect("idalbaran");
	q.setFrom("albaranesprov");
	q.setWhere("fecha BETWEEN '" + fechaIni + "' AND '" + fechaFin + "' AND ptefactura");

	if (!q.exec()) { 
		sys.warnMsgBox(sys.translate("Fallo en la consulta"));
		return false;
	}
	
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Recalculando totales albaranes proveedor..."), q.size());

	if (!AQUtil.execSql("UPDATE albaranesprov SET codgrupoivaneg = (SELECT codgrupoivaneg from proveedores where albaranesprov.codproveedor = proveedores.codproveedor) WHERE codgrupoivaneg is null")) {
		return false;
	}
	var p = 0;

	while(q.next()){
		AQUtil.setProgress(p++);

		if(!_i.editarAlbaranesProvContNueva(q.value("idalbaran"))){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
  return true;
}

function elgansoCtr_editarAlbaranesProvContNueva(idAlbaran)
{		
		var _i = this.iface;

		if(!_i.editarTotalesLineasAlbaranProvContNueva(idAlbaran)){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
		if(!_i.editarTotalesAlbaranProvContNueva(idAlbaran)){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	return true;
}

function elgansoCtr_editarTotalesLineasAlbaranProvContNueva(idAlbaran)
{		
	var _i = this.iface;

	var cCF = formRecordlineaspedidosprov.iface.pub_commonCalculateField;

	var curLineasAlbaranesProv = new FLSqlCursor("lineasalbaranesprov");	
	curLineasAlbaranesProv.select("idalbaran = '" + idAlbaran + "'");

	while(curLineasAlbaranesProv.next()){
		curLineasAlbaranesProv.setModeAccess(curLineasAlbaranesProv.Edit);
		curLineasAlbaranesProv.refreshBuffer();

		
		curLineasAlbaranesProv.setValueBuffer("codimpuesto",cCF("codimpuesto", curLineasAlbaranesProv));
		curLineasAlbaranesProv.setValueBuffer("iva",cCF("iva", curLineasAlbaranesProv));
		curLineasAlbaranesProv.setValueBuffer("pvpunitario", cCF("pvpunitario", curLineasAlbaranesProv));
		curLineasAlbaranesProv.setValueBuffer("pvpsindto", cCF("pvpsindto", curLineasAlbaranesProv));
		curLineasAlbaranesProv.setValueBuffer("dtopor", cCF("dtopor", curLineasAlbaranesProv));
		curLineasAlbaranesProv.setValueBuffer("dtolineal", cCF("dtolineal", curLineasAlbaranesProv));
		curLineasAlbaranesProv.setValueBuffer("pvptotal", cCF("pvptotal", curLineasAlbaranesProv));

		if(!curLineasAlbaranesProv.commitBuffer()){
				return false;
		}
	}
	
	return true;
}

function elgansoCtr_editarTotalesAlbaranProvContNueva(idAlbaran)
{		
	var _i = this.iface;

	var curAlbaranesProv = new FLSqlCursor("albaranesprov");	
	curAlbaranesProv.select("idalbaran = " + idAlbaran);
		
	var editable;
	
	if(curAlbaranesProv.first()){
		curAlbaranesProv.setModeAccess(curAlbaranesProv.Edit);
		curAlbaranesProv.refreshBuffer();

		editable = curAlbaranesProv.valueBuffer("ptefactura");
		if(!editable){
			curAlbaranesProv.setUnLock("ptefactura", true);
		}
		curAlbaranesProv.select("idalbaran = " + idAlbaran);
		if(curAlbaranesProv.first()){
			curAlbaranesProv.setModeAccess(curAlbaranesProv.Edit);
			curAlbaranesProv.refreshBuffer();
			curAlbaranesProv.setValueBuffer("neto", formalbaranesprov.iface.pub_commonCalculateField("neto", curAlbaranesProv));
			curAlbaranesProv.setValueBuffer("totaliva", formalbaranesprov.iface.pub_commonCalculateField("totaliva", curAlbaranesProv));
			curAlbaranesProv.setValueBuffer("totalirpf", formalbaranesprov.iface.pub_commonCalculateField("totalirpf", curAlbaranesProv));
			curAlbaranesProv.setValueBuffer("totalrecargo", formalbaranesprov.iface.pub_commonCalculateField("totalrecargo", curAlbaranesProv));
			curAlbaranesProv.setValueBuffer("total", formalbaranesprov.iface.pub_commonCalculateField("total", curAlbaranesProv));
			curAlbaranesProv.setValueBuffer("totaleuros", formalbaranesprov.iface.pub_commonCalculateField("totaleuros", curAlbaranesProv));
			if (!curAlbaranesProv.commitBuffer()) {
				return false;
			}
		}	
			
		if(!editable){
			curAlbaranesProv.select("ptefactura = " + idAlbaran);

			if(curAlbaranesProv.first()){
				curAlbaranesProv.setUnLock("ptefactura", false);
			}
		}	
	}
		
	return true;
}

function elgansoCtr_egRecalcularPedidosCliContNueva()
{
	var _i = this.iface;
	
	if(!_i.recalcularPedidosCliContNueva()){
		return false;
	}

	return true;
}

function elgansoCtr_egRecalcularAlbaranesCliContNueva()
{
	var _i = this.iface;
	
	if(!_i.recalcularAlbaranesCliContNueva()){
		return false;
	}
	
	return true;
}

function elgansoCtr_recalcularPedidosCliContNueva()
{
	var _i = this.iface;
	
	var fecha = "2016-01-01";

	var hoy = new Date();

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha de Inicio Pedidos");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = fecha;
	dialog.add(dFechaIni);

	var dFechaFin = new DateEdit;
	dFechaFin.label = sys.translate("Fin");
	dFechaFin.date = hoy;
	dialog.add(dFechaFin);


	if (!dialog.exec()) {
		return false;
	}

	var fechaIni = dFechaIni.date;
	var fechaFin = dFechaFin.date;

	var q = new FLSqlQuery();
	q.setSelect("idpedido");
	q.setFrom("pedidoscli");
	q.setWhere("fecha BETWEEN '" + fechaIni + "' AND '" + fechaFin + "' AND editable");

	if (!q.exec()) { 
		sys.warnMsgBox(sys.translate("Fallo en la consulta"));
		return false;
	}

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Recalculando totales pedidos cliente..."), q.size());
	var p = 0;
	
	if (!AQUtil.execSql("UPDATE pedidoscli SET codgrupoivaneg = (SELECT codgrupoivaneg from clientes where pedidoscli.codcliente = clientes.codcliente) WHERE codgrupoivaneg is null")) {
		return false;
	}
	if (!AQUtil.execSql("UPDATE pedidoscli SET codgrupoivaneg = 'CNP' WHERE codgrupoivaneg is null")) {
		return false;
	}

	while(q.next()){
		AQUtil.setProgress(p++);

		if(!_i.editarPedidosCliContNueva(q.value("idpedido"))){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
  return true;
}


function elgansoCtr_editarPedidosCliContNueva(idPedido)
{		
	var _i = this.iface;
	if(!_i.editarTotalesLineasPedidosCliContNueva(idPedido)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
	if(!_i.editarTotalesPedidosCliContNueva(idPedido)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
	return true;
}

function elgansoCtr_editarTotalesLineasPedidosCliContNueva(idPedido)
{		
	var _i = this.iface;

	var cCF = formRecordlineaspedidoscli.iface.pub_commonCalculateField;

	var curLineasPedidosCli = new FLSqlCursor("lineaspedidoscli");
	curLineasPedidosCli.select("idpedido = '" + idPedido + "'");

	while(curLineasPedidosCli.next()){
		curLineasPedidosCli.setModeAccess(curLineasPedidosCli.Edit);
		curLineasPedidosCli.refreshBuffer();
		var codImpuesto = cCF("codimpuesto", curLineasPedidosCli);
		if(!codImpuesto || codImpuesto == "GEN"){
			codImpuesto = "D1";
		}
		curLineasPedidosCli.setValueBuffer("codimpuesto", codImpuesto);
		curLineasPedidosCli.setValueBuffer("iva",cCF("iva", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("pvpunitario",cCF("pvpunitario", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("pvpsindto", cCF("pvpsindto", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("dtopor", cCF("dtopor", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("dtolineal", cCF("dtolineal", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("pvptotal", cCF("pvptotal", curLineasPedidosCli));
		if(!curLineasPedidosCli.commitBuffer()){
				return false;
		}
	}
	
	return true;
}

function elgansoCtr_editarTotalesPedidosCliContNueva(idPedido)
{		
	var _i = this.iface;

	var curPedidosCli = new FLSqlCursor("pedidoscli");	
	curPedidosCli.select("idpedido = " + idPedido);
		
	var editable;
	if(curPedidosCli.first()){
		curPedidosCli.setModeAccess(curPedidosCli.Edit);
		curPedidosCli.refreshBuffer();
		
		editable = curPedidosCli.valueBuffer("editable");
		if(!editable){
			curPedidosCli.setUnLock("editable", true);
		}
		curPedidosCli.select("idpedido = " + idPedido);
		if(curPedidosCli.first()){
			curPedidosCli.setModeAccess(curPedidosCli.Edit);
			curPedidosCli.refreshBuffer();
			curPedidosCli.setValueBuffer("neto", formpedidoscli.iface.pub_commonCalculateField("neto", curPedidosCli));
			curPedidosCli.setValueBuffer("totaliva", formpedidoscli.iface.pub_commonCalculateField("totaliva", curPedidosCli));
			curPedidosCli.setValueBuffer("totalirpf", formpedidoscli.iface.pub_commonCalculateField("totalirpf", curPedidosCli));
			curPedidosCli.setValueBuffer("totalrecargo", formpedidoscli.iface.pub_commonCalculateField("totalrecargo", curPedidosCli));
			curPedidosCli.setValueBuffer("total", formpedidoscli.iface.pub_commonCalculateField("total", curPedidosCli));
			curPedidosCli.setValueBuffer("totaleuros", formpedidoscli.iface.pub_commonCalculateField("totaleuros", curPedidosCli));
			if (!curPedidosCli.commitBuffer()) {
				return false;
			}
		}
			
		if(!editable){
			curPedidosCli.select("idpedido = " + idPedido);

			if(curPedidosCli.first()){
				curPedidosCli.setUnLock("editable", false);
			}
		}
	}		
			
	return true;
}

function elgansoCtr_recalcularAlbaranesCliContNueva()
{
	var _i = this.iface;
	
	var fecha = "2016-01-01";

	var hoy = new Date();

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha de Inicio Albaranes");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = fecha;
	dialog.add(dFechaIni);

	var dFechaFin = new DateEdit;
	dFechaFin.label = sys.translate("Fin");
	dFechaFin.date = hoy;
	dialog.add(dFechaFin);


	if (!dialog.exec()) {
		return false;
	}

	var fechaIni = dFechaIni.date;
	var fechaFin = dFechaFin.date;
	
	var res = MessageBox.information(sys.translate("¿Albaranes con clientes de AbanQ?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton);
	var where = "";
	if (res != MessageBox.Yes){
		where = " AND codcliente is null";
	}
	else{
		where = " AND codcliente is not null";
	}

	var q = new FLSqlQuery();
	q.setSelect("idalbaran");
	q.setFrom("albaranescli");
	q.setWhere("fecha BETWEEN '" + fechaIni + "' AND '" + fechaFin + "' AND ptefactura" + where);

	if (!q.exec()) { 
		sys.warnMsgBox(sys.translate("Fallo en la consulta"));
		return false;
	}
	
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Recalculando totales albaranes cliente..."), q.size());

	if (!AQUtil.execSql("UPDATE albaranescli SET codgrupoivaneg = (SELECT codgrupoivaneg from clientes where albaranescli.codcliente = clientes.codcliente) WHERE codgrupoivaneg is null")) {
		return false;
	}
	if (!AQUtil.execSql("UPDATE albaranescli SET codgrupoivaneg = 'CNP' WHERE codgrupoivaneg is null")) {
		return false;
	}
	
	var p = 0;

	while(q.next()){
		AQUtil.setProgress(p++);

		if(!_i.editarAlbaranesCliContNueva(q.value("idalbaran"))){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
  return true;
}

function elgansoCtr_editarAlbaranesCliContNueva(idAlbaran)
{		
	var _i = this.iface;

	if(!_i.editarTotalesLineasAlbaranCliContNueva(idAlbaran)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
	if(!_i.editarTotalesAlbaranCliContNueva(idAlbaran)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
		
	return true;
}

function elgansoCtr_editarTotalesLineasAlbaranCliContNueva(idAlbaran)
{		
	var _i = this.iface;

	var cCF = formRecordlineaspedidoscli.iface.pub_commonCalculateField;

	var curLineasAlbaranesCli = new FLSqlCursor("lineasalbaranescli");	
	curLineasAlbaranesCli.select("idalbaran = '" + idAlbaran + "'");

	while(curLineasAlbaranesCli.next()){
		curLineasAlbaranesCli.setModeAccess(curLineasAlbaranesCli.Edit);
		curLineasAlbaranesCli.refreshBuffer();
		var codImpuesto = cCF("codimpuesto", curLineasAlbaranesCli);
		if(!codImpuesto || codImpuesto == "GEN" || codImpuesto == "NIN"){
			codImpuesto = "D1";
		}
		curLineasAlbaranesCli.setValueBuffer("codimpuesto", codImpuesto);
		curLineasAlbaranesCli.setValueBuffer("iva",cCF("iva", curLineasAlbaranesCli));
		curLineasAlbaranesCli.setValueBuffer("pvpunitario", cCF("pvpunitario", curLineasAlbaranesCli));
		curLineasAlbaranesCli.setValueBuffer("pvpsindto", cCF("pvpsindto", curLineasAlbaranesCli));
		curLineasAlbaranesCli.setValueBuffer("dtopor", cCF("dtopor", curLineasAlbaranesCli));
		curLineasAlbaranesCli.setValueBuffer("dtolineal", cCF("dtolineal", curLineasAlbaranesCli));
		curLineasAlbaranesCli.setValueBuffer("pvptotal", cCF("pvptotal", curLineasAlbaranesCli));

		if(!curLineasAlbaranesCli.commitBuffer()){
				return false;
		}
	}
	
	return true;
}

function elgansoCtr_editarTotalesAlbaranCliContNueva(idAlbaran)
{		
	var _i = this.iface;

	var curAlbaranesCli = new FLSqlCursor("albaranescli");	
	curAlbaranesCli.select("idalbaran = " + idAlbaran);
		
	var editable;
	
	if(curAlbaranesCli.first()){
		curAlbaranesCli.setModeAccess(curAlbaranesCli.Edit);
		curAlbaranesCli.refreshBuffer();

		editable = curAlbaranesCli.valueBuffer("ptefactura");
		if(!editable){
			curAlbaranesCli.setUnLock("ptefactura", true);
		}
		curAlbaranesCli.select("idalbaran = " + idAlbaran);
		if(curAlbaranesCli.first()){
			curAlbaranesCli.setModeAccess(curAlbaranesCli.Edit);
			curAlbaranesCli.refreshBuffer();
			curAlbaranesCli.setValueBuffer("neto", formalbaranescli.iface.pub_commonCalculateField("neto", curAlbaranesCli));
			curAlbaranesCli.setValueBuffer("totaliva", formalbaranescli.iface.pub_commonCalculateField("totaliva", curAlbaranesCli));
			curAlbaranesCli.setValueBuffer("totalirpf", formalbaranescli.iface.pub_commonCalculateField("totalirpf", curAlbaranesCli));
			curAlbaranesCli.setValueBuffer("totalrecargo", formalbaranescli.iface.pub_commonCalculateField("totalrecargo", curAlbaranesCli));
			curAlbaranesCli.setValueBuffer("total", formalbaranescli.iface.pub_commonCalculateField("total", curAlbaranesCli));
			curAlbaranesCli.setValueBuffer("totaleuros", formalbaranescli.iface.pub_commonCalculateField("totaleuros", curAlbaranesCli));
			if (!curAlbaranesCli.commitBuffer()) {
				return false;
			}
		}	
			
		if(!editable){
			curAlbaranesCli.select("idalbaran = " + idAlbaran);

			if(curAlbaranesCli.first()){
				curAlbaranesCli.setUnLock("ptefactura", false);
			}
		}	
	}
		
	return true;
}

function elgansoCtr_movistockLineasComandasWeb()
{
	var _i = this.iface;
	
	var q = new FLSqlQuery();
	q.setSelect("idtpv_linea,tpv_lineascomanda.idtpv_comanda");
	q.setFrom("tpv_lineascomanda inner join tpv_comandas on tpv_lineascomanda.idtpv_comanda = tpv_comandas.idtpv_comanda");
	q.setWhere("tpv_comandas.codtienda = 'AWEB' AND codigo like 'WEB%' AND fecha > '2015-12-31' AND codigo not in (SELECT codigo from albaranescli where codigo like 'WEB%' AND fecha > '2015-12-31') AND idtpv_linea not in (SELECT idlineaco from stocks INNER JOIN movistock ON stocks.idstock = movistock.idstock where stocks.codalmacen = 'AWEB' AND fechareal > '2015-12-31' AND idlineaco > 0)");

	if (!q.exec()) { 
		sys.warnMsgBox(sys.translate("Fallo en la consulta"));
		return false;
	}
	
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Creando movimientos de stock..."), q.size());
	
	var p = 0;
	var curLineaVenta = new FLSqlCursor("tpv_lineascomanda");	
	var cantidad;
	
	while(q.next()){
		AQUtil.setProgress(p++);
		curLineaVenta.select("idtpv_linea = " + q.value(0));
		
		if(!curLineaVenta.first()){
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				sys.warnMsgBox(sys.translate("No se ha localizado la línea con idtpv_comanda: ").arg(q.value(0)));
				return false;				
		}
		if (!AQUtil.execSql("UPDATE tpv_comandas SET estado = 'Abierta', sincronizada = false WHERE idtpv_comanda = " + q.value(1))) {
			return false;
		}		
		
		curLineaVenta.setModeAccess(curLineaVenta.Edit);
		curLineaVenta.refreshBuffer();
		cantidad = curLineaVenta.valueBuffer("cantidad");
		curLineaVenta.setValueBuffer("cantidad", 0);
		if (!curLineaVenta.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			sys.warnMsgBox(sys.translate("Falló al intentar actulizar el stock de la línea con idtpv_comanda: ").arg(q.value(0)));
			return false;
		}
		
		if(!curLineaVenta.first()){
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				sys.warnMsgBox(sys.translate("2) No se ha localizado la línea con idtpv_comanda: ").arg(q.value(0)));
				return false;				
		}
		curLineaVenta.setModeAccess(curLineaVenta.Edit);
		curLineaVenta.refreshBuffer();
		curLineaVenta.setValueBuffer("cantidad", cantidad);
		if (!curLineaVenta.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			sys.warnMsgBox(sys.translate("Falló al intentar actulizar el stock de la línea con idtpv_comanda: ").arg(q.value(0)));
			return false;
		}
		if (!AQUtil.execSql("UPDATE tpv_comandas SET estado = 'Cerrada', sincronizada = true WHERE idtpv_comanda = " + q.value(1))) {
			return false;
		}
			
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	
	return true;
}

function elgansoCtr_egRecalcularPedidosCliContNuevaCNR()
{
	var _i = this.iface;
	
	if(!_i.recalcularPedidosCliContNuevaCNR()){
		return false;
	}

	return true;
}

function elgansoCtr_egRecalcularAlbaranesCliContNuevaCNR()
{
	var _i = this.iface;
	
	if(!_i.recalcularAlbaranesCliContNuevaCNR()){
		return false;
	}
	
	return true;
}

function elgansoCtr_recalcularPedidosCliContNuevaCNR()
{
	var _i = this.iface;
	
	var fecha = "2016-01-01";

	var hoy = new Date();

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha de Inicio Pedidos");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = fecha;
	dialog.add(dFechaIni);

	var dFechaFin = new DateEdit;
	dFechaFin.label = sys.translate("Fin");
	dFechaFin.date = hoy;
	dialog.add(dFechaFin);


	if (!dialog.exec()) {
		return false;
	}

	var fechaIni = dFechaIni.date;
	var fechaFin = dFechaFin.date;

	var q = new FLSqlQuery();
	q.setSelect("idpedido");
	q.setFrom("pedidoscli INNER JOIN clientes ON pedidoscli.codcliente = clientes.codcliente");
	q.setWhere("fecha BETWEEN '" + fechaIni + "' AND '" + fechaFin + "' AND clientes.recargo");

	if (!q.exec()) { 
		sys.warnMsgBox(sys.translate("Fallo en la consulta"));
		return false;
	}

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Recalculando totales pedidos cliente..."), q.size());
	var p = 0;
	
	if (!AQUtil.execSql("UPDATE pedidoscli SET codgrupoivaneg = (SELECT codgrupoivaneg from clientes where pedidoscli.codcliente = clientes.codcliente) WHERE codgrupoivaneg <> 'CNR' AND codcliente IN (SELECT codcliente from clientes where recargo)")) {
		return false;
	}

	while(q.next()){
		AQUtil.setProgress(p++);

		if(!_i.editarPedidosCliContNuevaCNR(q.value("idpedido"))){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
  return true;
}


function elgansoCtr_editarPedidosCliContNuevaCNR(idPedido)
{		
	var _i = this.iface;
	if(!_i.editarTotalesLineasPedidosCliContNuevaCNR(idPedido)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
	if(!_i.editarTotalesPedidosCliContNuevaCNR(idPedido)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
	return true;
}

function elgansoCtr_editarTotalesLineasPedidosCliContNuevaCNR(idPedido)
{		
	var _i = this.iface;

	var cCF = formRecordlineaspedidoscli.iface.pub_commonCalculateField;

	var curLineasPedidosCli = new FLSqlCursor("lineaspedidoscli");
	curLineasPedidosCli.select("idpedido = '" + idPedido + "'");

	while(curLineasPedidosCli.next()){
		curLineasPedidosCli.setModeAccess(curLineasPedidosCli.Edit);
		curLineasPedidosCli.refreshBuffer();
		var codImpuesto = cCF("codimpuesto", curLineasPedidosCli);
		if(!codImpuesto || codImpuesto == "GEN"){
			codImpuesto = "D4";
		}
		curLineasPedidosCli.setValueBuffer("codimpuesto", codImpuesto);
		curLineasPedidosCli.setValueBuffer("iva",cCF("iva", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("recargo",cCF("recargo", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("pvpunitario",cCF("pvpunitario", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("pvpsindto", cCF("pvpsindto", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("dtopor", cCF("dtopor", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("dtolineal", cCF("dtolineal", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("pvptotal", cCF("pvptotal", curLineasPedidosCli));
		if(!curLineasPedidosCli.commitBuffer()){
				return false;
		}
	}
	
	return true;
}

function elgansoCtr_editarTotalesPedidosCliContNuevaCNR(idPedido)
{		
	var _i = this.iface;

	var curPedidosCli = new FLSqlCursor("pedidoscli");	
	curPedidosCli.select("idpedido = " + idPedido);
		
	var editable;
	if(curPedidosCli.first()){
		curPedidosCli.setModeAccess(curPedidosCli.Edit);
		curPedidosCli.refreshBuffer();
		
		editable = curPedidosCli.valueBuffer("editable");
		if(!editable){
			curPedidosCli.setUnLock("editable", true);
		}
		curPedidosCli.select("idpedido = " + idPedido);
		if(curPedidosCli.first()){
			curPedidosCli.setModeAccess(curPedidosCli.Edit);
			curPedidosCli.refreshBuffer();
			curPedidosCli.setValueBuffer("neto", formpedidoscli.iface.pub_commonCalculateField("neto", curPedidosCli));
			curPedidosCli.setValueBuffer("totaliva", formpedidoscli.iface.pub_commonCalculateField("totaliva", curPedidosCli));
			curPedidosCli.setValueBuffer("totalirpf", formpedidoscli.iface.pub_commonCalculateField("totalirpf", curPedidosCli));
			curPedidosCli.setValueBuffer("totalrecargo", formpedidoscli.iface.pub_commonCalculateField("totalrecargo", curPedidosCli));
			curPedidosCli.setValueBuffer("total", formpedidoscli.iface.pub_commonCalculateField("total", curPedidosCli));
			curPedidosCli.setValueBuffer("totaleuros", formpedidoscli.iface.pub_commonCalculateField("totaleuros", curPedidosCli));
			if (!curPedidosCli.commitBuffer()) {
				return false;
			}
		}
			
		if(!editable){
			curPedidosCli.select("idpedido = " + idPedido);

			if(curPedidosCli.first()){
				curPedidosCli.setUnLock("editable", false);
			}
		}
	}		
			
	return true;
}

function elgansoCtr_recalcularAlbaranesCliContNuevaCNR()
{
	var _i = this.iface;
	
	var fecha = "2016-01-01";

	var hoy = new Date();

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha de Inicio Albaranes");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = fecha;
	dialog.add(dFechaIni);

	var dFechaFin = new DateEdit;
	dFechaFin.label = sys.translate("Fin");
	dFechaFin.date = hoy;
	dialog.add(dFechaFin);

	if (!dialog.exec()) {
		return false;
	}

	var fechaIni = dFechaIni.date;
	var fechaFin = dFechaFin.date;
	
	var q = new FLSqlQuery();

	q.setSelect("idalbaran");
	q.setFrom("albaranescli INNER JOIN clientes ON albaranescli.codcliente = clientes.codcliente");
	q.setWhere("fecha BETWEEN '" + fechaIni + "' AND '" + fechaFin + "' AND clientes.recargo");

	if (!q.exec()) { 
		sys.warnMsgBox(sys.translate("Fallo en la consulta"));
		return false;
	}
	
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Recalculando totales albaranes cliente..."), q.size());

	if (!AQUtil.execSql("UPDATE albaranescli SET codgrupoivaneg = (SELECT codgrupoivaneg from clientes where albaranescli.codcliente = clientes.codcliente) WHERE codgrupoivaneg <> 'CNR' AND codcliente IN (SELECT codcliente from clientes where recargo)")) {
		return false;
	}
	
	var p = 0;

	while(q.next()){
		AQUtil.setProgress(p++);

		if(!_i.editarAlbaranesCliContNuevaCNR(q.value("idalbaran"))){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
  return true;
}

function elgansoCtr_editarAlbaranesCliContNuevaCNR(idAlbaran)
{		
	var _i = this.iface;

	if(!_i.editarTotalesLineasAlbaranCliContNuevaCNR(idAlbaran)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
	if(!_i.editarTotalesAlbaranCliContNuevaCNR(idAlbaran)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
		
	return true;
}

function elgansoCtr_editarTotalesLineasAlbaranCliContNuevaCNR(idAlbaran)
{		
	var _i = this.iface;

	var cCF = formRecordlineaspedidoscli.iface.pub_commonCalculateField;

	var curLineasAlbaranesCli = new FLSqlCursor("lineasalbaranescli");	
	curLineasAlbaranesCli.select("idalbaran = '" + idAlbaran + "'");

	while(curLineasAlbaranesCli.next()){
		curLineasAlbaranesCli.setModeAccess(curLineasAlbaranesCli.Edit);
		curLineasAlbaranesCli.refreshBuffer();
		var codImpuesto = cCF("codimpuesto", curLineasAlbaranesCli);
		
		debug("//////////////////// codImpuesto: " + codImpuesto);
		
		if(!codImpuesto || codImpuesto == "GEN" || codImpuesto == "NIN"){
			codImpuesto = "D4";
		}
		curLineasAlbaranesCli.setValueBuffer("codimpuesto", codImpuesto);
		curLineasAlbaranesCli.setValueBuffer("iva",cCF("iva", curLineasAlbaranesCli));
		curLineasAlbaranesCli.setValueBuffer("recargo",cCF("recargo", curLineasAlbaranesCli));
		curLineasAlbaranesCli.setValueBuffer("pvpunitario", cCF("pvpunitario", curLineasAlbaranesCli));
		curLineasAlbaranesCli.setValueBuffer("pvpsindto", cCF("pvpsindto", curLineasAlbaranesCli));
		curLineasAlbaranesCli.setValueBuffer("dtopor", cCF("dtopor", curLineasAlbaranesCli));
		curLineasAlbaranesCli.setValueBuffer("dtolineal", cCF("dtolineal", curLineasAlbaranesCli));
		curLineasAlbaranesCli.setValueBuffer("pvptotal", cCF("pvptotal", curLineasAlbaranesCli));

		if(!curLineasAlbaranesCli.commitBuffer()){
				return false;
		}
	}
	
	return true;
}

function elgansoCtr_editarTotalesAlbaranCliContNuevaCNR(idAlbaran)
{		
	var _i = this.iface;

	var curAlbaranesCli = new FLSqlCursor("albaranescli");	
	curAlbaranesCli.select("idalbaran = " + idAlbaran);
		
	var editable;
	
	if(curAlbaranesCli.first()){
		curAlbaranesCli.setModeAccess(curAlbaranesCli.Edit);
		curAlbaranesCli.refreshBuffer();

		editable = curAlbaranesCli.valueBuffer("ptefactura");
		if(!editable){
			curAlbaranesCli.setUnLock("ptefactura", true);
		}
		curAlbaranesCli.select("idalbaran = " + idAlbaran);
		if(curAlbaranesCli.first()){
			curAlbaranesCli.setModeAccess(curAlbaranesCli.Edit);
			curAlbaranesCli.refreshBuffer();
			curAlbaranesCli.setValueBuffer("neto", formalbaranescli.iface.pub_commonCalculateField("neto", curAlbaranesCli));
			curAlbaranesCli.setValueBuffer("totaliva", formalbaranescli.iface.pub_commonCalculateField("totaliva", curAlbaranesCli));
			curAlbaranesCli.setValueBuffer("totalirpf", formalbaranescli.iface.pub_commonCalculateField("totalirpf", curAlbaranesCli));
			curAlbaranesCli.setValueBuffer("totalrecargo", formalbaranescli.iface.pub_commonCalculateField("totalrecargo", curAlbaranesCli));
			curAlbaranesCli.setValueBuffer("total", formalbaranescli.iface.pub_commonCalculateField("total", curAlbaranesCli));
			curAlbaranesCli.setValueBuffer("totaleuros", formalbaranescli.iface.pub_commonCalculateField("totaleuros", curAlbaranesCli));
			if (!curAlbaranesCli.commitBuffer()) {
				return false;
			}
		}	
			
		if(!editable){
			curAlbaranesCli.select("idalbaran = " + idAlbaran);

			if(curAlbaranesCli.first()){
				curAlbaranesCli.setUnLock("ptefactura", false);
			}
		}	
	}
		
	return true;
}

function elgansoCtr_editarTotalesLineasAlbaranCli20161014(idAlbaran)
{		
	var _i = this.iface;

	var cCF = formRecordlineaspedidoscli.iface.pub_commonCalculateField;

	var curLineasAlbaranesCli = new FLSqlCursor("lineasalbaranescli");	
	curLineasAlbaranesCli.select("idalbaran = '" + idAlbaran + "'");

	while(curLineasAlbaranesCli.next()){
		curLineasAlbaranesCli.setModeAccess(curLineasAlbaranesCli.Edit);
		curLineasAlbaranesCli.refreshBuffer();
		curLineasAlbaranesCli.setValueBuffer("dtolineal", 0);
		curLineasAlbaranesCli.setValueBuffer("pvptotaliva", cCF("pvptotaliva2", curLineasAlbaranesCli));
		curLineasAlbaranesCli.setValueBuffer("pvpunitario", cCF("pvpunitario2", curLineasAlbaranesCli));
		curLineasAlbaranesCli.setValueBuffer("pvpsindto", cCF("pvpsindto2", curLineasAlbaranesCli));
		curLineasAlbaranesCli.setValueBuffer("pvptotal", cCF("pvptotal2", curLineasAlbaranesCli));

		if(!curLineasAlbaranesCli.commitBuffer()){
				return false;
		}
	}
	
	return true;
}

function elgansoCtr_editarAlbaranesCli20161014(idAlbaran)
{		
	var _i = this.iface;

	if(!_i.editarTotalesLineasAlbaranCli20161014(idAlbaran)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
	if(!_i.editarTotalesAlbaranCliContNuevaCNR(idAlbaran)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
		
	return true;
}

function elgansoCtr_recalcularAlbaranesCli20161014()
{
	var _i = this.iface;
	
	var fecha = "2016-01-01";

	var hoy = new Date();

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha de Inicio Albaranes");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = fecha;
	dialog.add(dFechaIni);

	var dFechaFin = new DateEdit;
	dFechaFin.label = sys.translate("Fin");
	dFechaFin.date = hoy;
	dialog.add(dFechaFin);


	if (!dialog.exec()) {
		return false;
	}

	var fechaIni = dFechaIni.date;
	var fechaFin = dFechaFin.date;
	
	var q = new FLSqlQuery();
	q.setSelect("a.idalbaran, a.codigo");
	q.setFrom("albaranescli a inner join lineasalbaranescli l on a.idalbaran = l.idalbaran");
	q.setWhere("a.fecha BETWEEN '" + fechaIni + "' AND '" + fechaFin + "' and a.codejercicio = '2016' and l.iva = 21 and abs(l.pvptotal - l.pvptotaliva) < 1 and a.codigo like '2016%' GROUP BY a.idalbaran, a.codigo");
	
	if (!q.exec()) { 
		sys.warnMsgBox(sys.translate("Fallo en la consulta"));
		return false;
	}
	
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Recalculando totales albaranes cliente..."), q.size());

		var p = 0;

	while(q.next()){
		debug("Procesando albarán " + q.value("a.codigo"));
		AQUtil.setProgress(p++);

		if(!_i.editarAlbaranesCli20161014(q.value("a.idalbaran"))){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
  return true;
}

function elgansoCtr_recalcularDocsCli20161018()
{
	var _i = this.iface;
	
	var fecha = "2016-01-01";

	var hoy = new Date();

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha de Inicio Docs");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = fecha;
	dialog.add(dFechaIni);

	var dFechaFin = new DateEdit;
	dFechaFin.label = sys.translate("Fin");
	dFechaFin.date = hoy;
	dialog.add(dFechaFin);

	if (!dialog.exec()) {
		return false;
	}

	var fechaIni = dFechaIni.date;
	var fechaFin = dFechaFin.date;
	
	var q = new FLSqlQuery();
	q.setSelect("a.idalbaran, a.codigo");
	q.setFrom("albaranescli a inner join lineasalbaranescli l on a.idalbaran = l.idalbaran");
	q.setWhere("a.fecha BETWEEN '" + fechaIni + "' AND '" + fechaFin + "' and a.codejercicio = '2016' and a.codigo like '2016%' and abs(l.pvpsindtoiva - l.pvptotaliva) > 0.2 and l.dtolineal = 0 and l.dtopor = 0 and a.codserie in ('RY', 'RX', 'MY', 'EM') GROUP BY a.idalbaran, a.codigo");
	
	if (!q.exec()) { 
		sys.warnMsgBox(sys.translate("Fallo en la consulta"));
		return false;
	}
	
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Recalculando totales albaranes cliente..."), q.size());

	var p = 0;

	while(q.next()){ 
		debug("Procesando albarán " + q.value("a.codigo"));
		AQUtil.setProgress(p++);

		if(!_i.editarAlbaranesCli20161014(q.value("a.idalbaran"))){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	var qP = new FLSqlQuery();
	qP.setSelect("a.idpedido, a.codigo");
	qP.setFrom("pedidoscli a inner join lineaspedidoscli l on a.idpedido = l.idpedido");
	qP.setWhere("a.fecha BETWEEN '" + fechaIni + "' AND '" + fechaFin + "' and a.codejercicio = '2016' and a.codigo like '2016%' and abs(l.pvpsindtoiva - l.pvptotaliva) > 0.2 and l.dtolineal = 0 and l.dtopor = 0 and a.codserie in ('RY', 'RX', 'MY', 'EM') GROUP BY a.idpedido, a.codigo");
	
	if (!qP.exec()) { 
		sys.warnMsgBox(sys.translate("Fallo en la consulta"));
		return false;
	}
	
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Recalculando totales pedidos cliente..."), qP.size());

	p = 0;

	while(qP.next()){
		debug("Procesando pedido " + qP.value("a.codigo"));
		AQUtil.setProgress(p++);

		if(!_i.editarPedidosCli20161018(qP.value("a.idpedido"))){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	var qF = new FLSqlQuery();
	qF.setSelect("a.idfactura, a.codigo");
	qF.setFrom("facturascli a inner join lineasfacturascli l on a.idfactura = l.idfactura");
	qF.setWhere("a.fecha BETWEEN '" + fechaIni + "' AND '" + fechaFin + "' and  a.codejercicio = '2016' and a.codigo like '2016%' and abs(l.pvpsindtoiva - l.pvptotaliva) > 0.2 and l.dtolineal = 0 and l.dtopor = 0 and a.codserie in ('RY', 'RX', 'MY', 'EM') AND a.codgrupoivaneg IS NOT NULL GROUP BY a.idfactura, a.codigo");

	debug(qF.sql());
	if (!qF.exec()) { 
		sys.warnMsgBox(sys.translate("Fallo en la consulta"));
		return false;
	}
	
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Recalculando totales facturas cliente..."), qF.size());

	p = 0;

	while(qF.next()){
		debug("Procesando factura " + qF.value("a.codigo"));
		AQUtil.setProgress(p++);

		if(!_i.editarFacturasCli20161018(qF.value("a.idfactura"))){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	
	
  return true;
}

function elgansoCtr_editarFacturasCli20161018(idFactura)
{		
	var _i = this.iface;
	if(!_i.editarTotalesLineasFacturasCli20161018(idFactura)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
	if(!_i.editarTotalesFacturasCli20161018(idFactura)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
	return true;
}

function elgansoCtr_editarPedidosCli20161018(idPedido)
{		
	var _i = this.iface;
	if(!_i.editarTotalesLineasPedidosCli20161018(idPedido)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
	if(!_i.editarTotalesPedidosCliContNueva(idPedido)){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}
	return true;
}

function elgansoCtr_editarTotalesLineasFacturasCli20161018(idFactura)
{		
	var _i = this.iface;

	var cCF = formRecordlineaspedidoscli.iface.pub_commonCalculateField;

	var curLineasFacturasCli = new FLSqlCursor("lineasfacturascli");
	curLineasFacturasCli.select("idfactura = '" + idFactura + "'");

	while(curLineasFacturasCli.next()){
		curLineasFacturasCli.setModeAccess(curLineasFacturasCli.Edit);
		curLineasFacturasCli.refreshBuffer();
		curLineasFacturasCli.setValueBuffer("iva", cCF("iva", curLineasFacturasCli));
		//curLineasFacturasCli.setValueBuffer("dtopor", cCF("dtopor", curLineasFacturasCli));
		curLineasFacturasCli.setValueBuffer("dtolineal", 0);
		curLineasFacturasCli.setValueBuffer("pvptotaliva", cCF("pvptotaliva2", curLineasFacturasCli));
		curLineasFacturasCli.setValueBuffer("pvpunitario",cCF("pvpunitario2", curLineasFacturasCli));
		curLineasFacturasCli.setValueBuffer("pvpsindto", cCF("pvpsindto2", curLineasFacturasCli));
		curLineasFacturasCli.setValueBuffer("pvptotal", cCF("pvptotal2", curLineasFacturasCli));
		if(!curLineasFacturasCli.commitBuffer()){
				return false;
		}
	}
	
	return true;
}

function elgansoCtr_editarTotalesLineasPedidosCli20161018(idPedido)
{		
	var _i = this.iface;

	var cCF = formRecordlineaspedidoscli.iface.pub_commonCalculateField;

	var curLineasPedidosCli = new FLSqlCursor("lineaspedidoscli");
	curLineasPedidosCli.select("idpedido = '" + idPedido + "'");

	while(curLineasPedidosCli.next()){
		curLineasPedidosCli.setModeAccess(curLineasPedidosCli.Edit);
		curLineasPedidosCli.refreshBuffer();
		curLineasPedidosCli.setValueBuffer("dtolineal", 0);
		curLineasPedidosCli.setValueBuffer("pvptotaliva", cCF("pvptotaliva2", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("iva",cCF("iva", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("pvpunitario",cCF("pvpunitario2", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("pvpsindto", cCF("pvpsindto2", curLineasPedidosCli));
		//curLineasPedidosCli.setValueBuffer("dtopor", cCF("dtopor", curLineasPedidosCli));
		curLineasPedidosCli.setValueBuffer("pvptotal", cCF("pvptotal2", curLineasPedidosCli));
		if(!curLineasPedidosCli.commitBuffer()){
				return false;
		}
	}
	
	return true;
}

function elgansoCtr_editarTotalesFacturasCli20161018(idFactura)
{		
	var _i = this.iface;

	var curFacturasCli = new FLSqlCursor("facturascli");	
	curFacturasCli.select("idfactura = " + idFactura);
		
	var editable;
	if(curFacturasCli.first()){
		curFacturasCli.setModeAccess(curFacturasCli.Edit);
		curFacturasCli.refreshBuffer();
		
		editable = curFacturasCli.valueBuffer("editable");
		if(!editable){
			curFacturasCli.setUnLock("editable", true);
		}
		curFacturasCli.select("idfactura = " + idFactura);
		if(curFacturasCli.first()){
			curFacturasCli.setModeAccess(curFacturasCli.Edit);
			curFacturasCli.refreshBuffer();
			curFacturasCli.setValueBuffer("neto", formfacturascli.iface.pub_commonCalculateField("neto", curFacturasCli));
			curFacturasCli.setValueBuffer("totaliva", formfacturascli.iface.pub_commonCalculateField("totaliva", curFacturasCli));
			curFacturasCli.setValueBuffer("totalirpf", formfacturascli.iface.pub_commonCalculateField("totalirpf", curFacturasCli));
			curFacturasCli.setValueBuffer("totalrecargo", formfacturascli.iface.pub_commonCalculateField("totalrecargo", curFacturasCli));
			curFacturasCli.setValueBuffer("total", formfacturascli.iface.pub_commonCalculateField("total", curFacturasCli));
			curFacturasCli.setValueBuffer("totaleuros", formfacturascli.iface.pub_commonCalculateField("totaleuros", curFacturasCli));
			if (!curFacturasCli.commitBuffer()) {
				return false;
			}
		}
			
		if(!editable){
			curFacturasCli.select("idfactura = " + idFactura);

			if(curPedidosCli.first()){
				curPedidosCli.setUnLock("editable", false);
			}
		}
	}		
			
	return true;
}

function elgansoCtr_envioEmailBienvenida()
{
	var _i = this.iface;
	
	var arrayTarjetas = [];
	
	var q = new FLSqlQuery();
	q.setSelect("email,codpais,nombre,codtarjetapuntos");
	q.setFrom("tpv_tarjetaspuntos");
	q.setWhere("eg_emailbienvenida = false OR eg_emailbienvenida is null");
	debug(q.sql());
	
	if (!q.exec()) {
		return false;
	}
	
	while(q.next()){
		arrayTarjetas.push(q.value(0) + "-" + q.value(1) + "-" + q.value(2) + "-" + q.value(3));
	}
	
	var listaFras = arrayTarjetas.toString();
	_i.mostrarError_ = false;


	var curSmtp = new FLSqlCursor("tpv_datosgenerales");
	curSmtp.select("1 = 1");
	if (!curSmtp.first()) {
		return false;
	}
	
	var vB = curSmtp.valueBuffer;

	var codificacion= AQUtil.readSettingEntry("scripts/flfacturac/encodingLocal");

	_i.listaNoEnviadas_ = "";
	var codTarjetaPuntos;
	_i.correos_ = [];
	var sigMap = new AQSignalMapper(this);
	connect(sigMap, "mapped(QString)", _i, "sigMap_mapped");
	
	AQUtil.createProgressDialog("Enviando emails", arrayTarjetas.length);
 	
 	for (var i = 0; i < arrayTarjetas.length; i++) {
			AQUtil.setProgress(i);
			var lineaArray = arrayTarjetas[i].split("-");
			
			email = lineaArray[0].toString();
			codpais = lineaArray[1];
			nombre = lineaArray[2];
			codTarjetaPuntos = lineaArray[3];
			
			if(!email || email == ""){
				if(!AQUtil.execSql("UPDATE tpv_tarjetaspuntos SET eg_emailbienvenida = true WHERE codtarjetapuntos = '" + codTarjetaPuntos + "'")){	
					return false;
				}
			}
			
			if (email.indexOf("@") == -1){
				if(!AQUtil.execSql("UPDATE tpv_tarjetaspuntos SET eg_emailbienvenida = true WHERE codtarjetapuntos = '" + codTarjetaPuntos + "'")){	
					return false;
				}
			}
			
			_i.correos_[codTarjetaPuntos] = new AQSmtpClient;
			var correo = _i.correos_[codTarjetaPuntos];
			sigMap.setMapping(_i.correos_[codTarjetaPuntos], codTarjetaPuntos);
			
			connect(_i.correos_[codTarjetaPuntos], "statusChanged(QString, int)", sigMap, "map()");
			
			correo.setMailServer(vB("hostcorreosaliente"));
			correo.setPort(vB("puertosmtp"));
			
			debug("tipocxsmtp");
			switch (vB("tipocxsmtp")) {
				case "SSL": {
					correo.setConnectionType(AQS.SmtpSslConnection);  
					break;
				}
				case "TLS": {
					correo.setConnectionType(AQS.SmtpTlsConnection);
					break;
				}
				default: {
				}
		}
		debug("tipoautsmtp");		
		switch (vB("tipoautsmtp")) {
			case "Plain": {
				correo.setAuthMethod(AQS.SmtpAuthPlain);
				break;
			}
			case "Login": {
				correo.setAuthMethod(AQS.SmtpAuthLogin);
				break;
			}
			default: {
				//return false;
			}
		}	
		
		var codIdiomaDefecto = "ES";
		var codIdioma = AQUtil.sqlSelect("paises", "codidioma", "codpais = '" + codpais + "'");
		codIdioma = codIdioma ? codIdioma : codIdiomaDefecto;
		
		var asunto = AQUtil.sqlSelect("idiomas","asuntoemail","codidioma = '" + codIdioma + "'");
		var cuerpo = AQUtil.sqlSelect("idiomas","emailfidelizacion","codidioma = '" + codIdioma + "'");
	
		if(!asunto || asunto == "") {
			asunto = AQUtil.sqlSelect("idiomas","asuntoemail","codidioma = '" + codIdiomaDefecto + "'");
		}
		if(!cuerpo || cuerpo == "") {
			cuerpo = AQUtil.sqlSelect("idiomas","emailfidelizacion","codidioma = '" + codIdiomaDefecto + "'");
		}
	
		var nombreCliente = nombre.toString().toUpperCase();
		if (!nombreCliente || nombreCliente == "") {
			return false;
		}
		
		correo.setUser(vB("usuariosmtp"));  
		correo.setPassword(vB("passwordsmtp"));	

		try {
				correo.setMimeType("text/plain");
				correo.setBody(cuerpo);
			} catch (e) {
				correo.setBody(cuerpo);
			}
			
			correo.setFrom("elgansociety@elganso.com");
			correo.setTo(email);
			correo.setSubject(asunto);
			correo.startSend();

 	}
 	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
 	return true;
}


function elgansoCtr_sigMap_mapped(codTarjetaPuntos)
{
	var _i = this.iface;
	var status =  _i.correos_[codTarjetaPuntos].lastStateCode();
	
	var msgError = "";
	
	switch (status) {
	
		case AQS.SmtpSendOk: {
			if(!AQUtil.execSql("UPDATE tpv_tarjetaspuntos SET eg_emailbienvenida = true WHERE codtarjetapuntos = '" + codTarjetaPuntos + "'")){	
				return false;
			}
			break;
		}
		case AQS.SmtpError: {
			msgError = sys.translate("Error en el envío del email");
			break;
		}
		case AQS.SmtpMxDnsError: {
		debug("SmtpMxDnsError");
			msgError = sys.translate("Error MX DNS  en el envío del email");
			break;
		}
		case AQS.SmtpSocketError: {
		debug("SmtpSocketError");
			msgError = sys.translate("Error de socket en el envío del email");
			break;
		}
		case AQS.SmtpAttachError: {
		debug("SmtpAttachError");
			msgError = sys.translate("Error al adjuntar archivos en el envío del email");
			break;
		}
		case AQS.SmtpServerError: {
		debug("SmtpServerError");
			msgError = sys.translate("Error de servidor en el envío del email");
			break;
		}
		case AQS.SmtpClientError: {
				debug("SmtpClientError");
			msgError = sys.translate("Error de cliente en el envío del email");
			break;
		}	
	}
	
	if (msgError != "" && _i.mostrarError_) {
		_i.mostrarError_ = false;
		sys.infoMsgBox(msgError + "\n" + sys.translate("Es posible que otros envíos hayan fallado también por esta causa"));
	}
}

function elgansoCtr_egGeneraMovistockComandas()
{
	var q = new AQSqlQuery;
	var cur = new FLSqlCursor;
	var p;
	
	q.setSelect("l.idtpv_linea");
	q.setFrom("tpv_comandas c INNER JOIN tpv_lineascomanda l ON c.idtpv_comanda = l.idtpv_comanda LEFT OUTER JOIN movistock ms ON l.idtpv_linea = ms.idlineaco");
	q.setWhere("c.codtienda = 'ALRV' AND c.fecha >= '2016-01-01' AND ms.idmovimiento IS NULL");
	if (!q.exec()) {
		return false;
	}
	cur = new FLSqlCursor("tpv_lineascomanda");
	AQUtil.createProgressDialog(sys.translate("Revisando líneas de venta"), q.size());
	p = 0;
	while (q.next()) {
		AQUtil.setProgress(++p);
		cur.select("idtpv_linea = " + q.value("l.idtpv_linea"));
		if (!cur.first()) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		cur.setModeAccess(cur.Browse);
		cur.refreshBuffer();
		if (!flfactalma.iface.generarEstructura(cur)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	return true;
}

function elgansoCtr_egRevisaEnviosYRecepcionesViajes(oParam)
{
	var q = new FLSqlQuery;
	q.setSelect("l.idlinea, ms.referencia, ms.idstock");
	q.setFrom("tpv_lineasmultitransstock l INNER JOIN movistock ms ON l.idlinea = ms.idlineattd");
	q.setWhere("l.fecharx >= '2016-01-01' AND ms.estado = 'HECHO' GROUP BY l.idlinea, ms.referencia, ms.idstock HAVING COUNT(*) > 1");
	if (!q.exec()) {
		return false;
	}
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	while (q.next()) {
		curL.select("idlinea = " + q.value("l.idlinea"));
		if (!curL.first()) {
			return false;
		}
		if (!flfactalma.iface.borrarEstructuraMTDestino(curL)) {
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTDestino(curL)) {
			return false;
		}
	}

	q.setSelect("l.idlinea, ms.referencia, ms.idstock");
	q.setFrom("tpv_lineasmultitransstock l INNER JOIN movistock ms ON l.idlinea = ms.idlineatto");
	q.setWhere("l.fechaex >= '2016-01-01' AND ms.estado = 'HECHO' GROUP BY l.idlinea, ms.referencia, ms.idstock HAVING COUNT(*) > 1");
	if (!q.exec()) {
		return false;
	}
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	while (q.next()) {
		curL.select("idlinea = " + q.value("l.idlinea"));
		if (!curL.first()) {
			return false;
		}
		if (!flfactalma.iface.borrarEstructuraMTOrigen(curL)) {
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTOrigen(curL)) {
			return false;
		}
	}

	// Líneas que no van a stock de misma referencia y talla
	q.setSelect("l.idlinea");
	q.setFrom("tpv_lineasmultitransstock l INNER JOIN articulos a ON l.referencia = a.referencia INNER JOIN movistock ms ON l.idlinea = ms.idlineatto INNER JOIN stocks s ON ms.idstock = s.idstock");
	q.setWhere("l.fechaex >= '2016-01-01' and (l.talla <> s.talla) and not a.stockcomp");
	if (!q.exec()) {
		return false;
	}
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	while (q.next()) {
		curL.select("idlinea = " + q.value("l.idlinea"));
		if (!curL.first()) {
			return false;
		}
		if (!flfactalma.iface.borrarEstructuraMTOrigen(curL)) {
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTOrigen(curL)) {
			return false;
		}
		if (!flfactalma.iface.borrarEstructuraMTDestino(curL)) {
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTDestino(curL)) {
			return false;
		}
	}
	return true;
}

function elgansoCtr_egRevisaLineasTransitoDobleStock()
{
	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha para actualizar los viajes");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var fecha = new DateEdit;
	fecha.label = sys.translate("Fecha:");
	fecha.date = fecha;
	dialog.add(fecha);

	if (!dialog.exec()) {
		return false;
	}

	var fecha = fecha.date;
	var _iA = flfactalma.iface;

	var q = new FLSqlQuery();	
	q.setSelect("l.idlinea");
	//select count(*) from tpv_lineasmultitransstock l inner join stocks s on l.barcode = s.barcode and l.codalmaorigen = s.codalmacen inner join movistock ms on l.idlinea = ms.idlineatto and ms.idstock = s.idstock left outer join movistock ms2 on l.idlinea = ms2.idlineatto AND  ms2.idstock <> s.idstock where l.fechaex >= '2016-11-01' and ms2.idmovimiento is null;
	q.setFrom("tpv_lineasmultitransstock l inner join movistock ms on l.idlinea = ms.idlineattd");
	q.setWhere("fechaex >= '" + fecha + "' group by idlinea, idstock having count(*) > 1 ORDER BY idlinea LIMIT 10000");
	debug("sql: "+q.sql());
	
	if (!q.exec()) {
		return;
	} 
	
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var p = 0;
	var cantRecibida;
	AQUtil.createProgressDialog( sys.translate("Procesando datos..." ), q.size());

	while(q.next())
	{	
		AQUtil.setProgress(p++);

		curL.select("idlinea = " + q.value("l.idlinea"));
		
		if (curL.first()) {
			curL.setModeAccess(curL.Browse);
			curL.refreshBuffer();

			if (!_iA.borrarEstructuraMTDestino(curL)) {
				return false;
			}
			if (!_iA.generarEstructuraMTDestino(curL)) {
				return false;
			}
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elgansoCtr_egActualizarViajesTransitoOrigen()
{

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha para actualizar los viajes");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var fecha = new DateEdit;
	fecha.label = sys.translate("Fecha:");
	fecha.date = fecha;
	dialog.add(fecha);

	if (!dialog.exec()) {
		return false;
	}

	var fecha = fecha.date;
	var _iA = flfactalma.iface;

	var q = new FLSqlQuery();
		
//	q.setSelect("l.idlinea");
//	q.setFrom("tpv_lineasmultitransstock l inner join movistock ms on l.idlinea = ms.idlineatto");
//	q.setWhere("fechaex >= '" + fecha + "' group by idlinea having count(*) = 1 ORDER BY idlinea LIMIT 10000");

	q.setSelect("idlineatto, SUM(cantidad)");
	q.setFrom("movistock");
	q.setWhere("fechareal >= '" + fecha + "' and idlineatto IS NOT NULL GROUP BY idlineatto having sum(cantidad) <> 0");
	debug("sql: "+ q.sql());
	
	if (!q.exec()){
		return;
	} 
	
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var p = 0;
	var cantRecibida;
	AQUtil.createProgressDialog( sys.translate("Procesando datos..." ), q.size());

	while(q.next())
	{	
		AQUtil.setProgress(p++);

		curL.select("idlinea = " + q.value(0));
		
		if (curL.first()) {
			curL.setModeAccess(curL.Browse);
			curL.refreshBuffer();

			if (!_iA.borrarEstructuraMTOrigen(curL)) {
				return false;
			}
			if (!_iA.generarEstructuraMTOrigen(curL)) {
				return false;
			}
		}
	}
debug("FIN OK");

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;

}

function elgansoCtr_egActualizarViajesTransitoDestino()
{

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha para actualizar los viajes");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var fecha = new DateEdit;
	fecha.label = sys.translate("Fecha:");
	fecha.date = fecha;
	dialog.add(fecha);

	if (!dialog.exec()) {
		return false;
	}

	var fecha = fecha.date;
	var _iA = flfactalma.iface;

	var q = new FLSqlQuery();	
	/*
	q.setSelect("l.idlinea");
	q.setFrom("tpv_lineasmultitransstock l inner join movistock ms on l.idlinea = ms.idlineattd");
	q.setWhere("fecharx >= '" + fecha + "' GROUP BY idlinea having count(*) = 1 ORDER BY idlinea LIMIT 10000");
	debug("sql: "+q.sql());
	*/
	q.setSelect("idlineattd, SUM(cantidad)");
	q.setFrom("movistock");
	q.setWhere("fechareal >= '" + fecha + "' and idlineattd IS NOT NULL GROUP BY idlineattd having sum(cantidad) <> 0");
	debug("sql: "+ q.sql());
	
	if (!q.exec()){
		return;
	} 
	
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var p = 0;
	var cantRecibida;
	AQUtil.createProgressDialog( sys.translate("Procesando datos..." ), q.size());

	while(q.next())
	{	
		AQUtil.setProgress(p++);

		curL.select("idlinea = " + q.value("idlineattd"));
		
		if (curL.first()) {
			curL.setModeAccess(curL.Browse);
			curL.refreshBuffer();
			if (!_iA.borrarEstructuraMTOrigen(curL)) {
				return false;
			}
			if (!_iA.generarEstructuraMTOrigen(curL)) {
				return false;
			}
			if (!_iA.borrarEstructuraMTDestino(curL)) {
				return false;
			}
			if (!_iA.generarEstructuraMTDestino(curL)) {
				return false;
			}
		}
	}


	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;

}

function elgansoCtr_egActualizarViajesRxCerrada()
{

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha para actualizar los viajes");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var fecha = new DateEdit;
	fecha.label = sys.translate("Fecha:");
	fecha.date = fecha;
	dialog.add(fecha);

	if (!dialog.exec()) {
		return false;
	}

	var fecha = fecha.date;
	var _iA = flfactalma.iface;

	var q = new FLSqlQuery();	
	q.setSelect("l.idlinea");
	//select count(*) from tpv_lineasmultitransstock l inner join stocks s on l.barcode = s.barcode and l.codalmaorigen = s.codalmacen inner join movistock ms on l.idlinea = ms.idlineatto and ms.idstock = s.idstock left outer join movistock ms2 on l.idlinea = ms2.idlineatto AND  ms2.idstock <> s.idstock where l.fechaex >= '2016-11-01' and ms2.idmovimiento is null;
	q.setFrom("tpv_lineasmultitransstock l");
	q.setWhere("fecharx >= '" + fecha + "' AND cantrecibida = 0");
	debug("sql: "+q.sql());
	
	if (!q.exec()){
		return;
	} 
	
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var p = 0;
	var cantRecibida;
	AQUtil.createProgressDialog( sys.translate("Procesando datos..." ), q.size());

	while(q.next())
	{	
		AQUtil.setProgress(p++);

		curL.select("idlinea = " + q.value("l.idlinea"));
		
		if (curL.first()) {
			curL.setModeAccess(curL.Browse);
			curL.refreshBuffer();
			if (!_iA.borrarEstructuraMTDestino(curL)) {
				return false;
			}
			if (!_iA.generarEstructuraMTDestino(curL)) {
				return false;
			}
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}


function elgansoCtr_procesarViajesWeb()
{
	if (!flfactalma.iface.procesarViajesWeb()) {
		sys.infoMsgBox(sys.translate("Error al procesar los viajes web"));
		return false;
	}

	return true;
}

function elgansoCtr_egRevisaStocks()
{
	// select s.idstock, s.referencia, s.barcode, s.codalmacen, s.cantidadnopack, SUM(ms.cantidad), a.anno from stocks s inner join movistock ms ON s.idstock = ms.idstock INNER JOIN articulos a ON s.referencia = a.referencia WHERE s.fechaultreg IS NOT NULL AND ms.estado = 'HECHO' AND (ms.fechareal > s.fechaultreg OR (ms.fechareal = s.fechaultreg AND ms.horareal > s.horaultreg)) AND ms.referenciapack IS NULL GROUP BY s.referencia, s.barcode, s.codalmacen, s.cantidadnopack, s.idstock, a.anno, s.cantidadultreg HAVING s.cantidadnopack <> s.cantidadultreg + SUM(ms.cantidad) ORDER BY a.anno

	var p = 0;
	
	var qS = new FLSqlQuery;
	qS.setSelect("s.idstock");
	qS.setFrom("stocks s INNER JOIN movistock ms ON s.idstock = ms.idstock");
	qS.setWhere("s.fechaultreg IS NOT NULL AND ms.estado = 'HECHO' AND (ms.fechareal > s.fechaultreg OR (ms.fechareal = s.fechaultreg AND ms.horareal > s.horaultreg)) AND ms.referenciapack IS NULL GROUP BY s.referencia, s.barcode, s.codalmacen, s.cantidadnopack, s.idstock, s.cantidadultreg HAVING s.cantidadnopack <> s.cantidadultreg + SUM(ms.cantidad)");
	if (!qS.exec()) {
		return false;
	}
	AQUtil.createProgressDialog( sys.translate("Procesando stocks" ), qS.size());
	while (qS.next()) {
		AQUtil.setProgress(p++);
		if (!formregstocks.iface.revisarStock("idstock = " + qS.value("s.idstock"))) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	qS.setWhere("s.fechaultreg IS NULL AND ms.estado = 'HECHO' AND ms.referenciapack IS NULL GROUP BY s.referencia, s.barcode, s.codalmacen, s.cantidadnopack, s.idstock HAVING s.cantidadnopack <> SUM(ms.cantidad)");
	if (!qS.exec()) {
		return false;
	}
	//AQUtil.createProgressDialog( sys.translate("Procesando stocks" ), qS.size());
	while (qS.next()) {
		//AQUtil.setProgress(p++);
		if (!formregstocks.iface.revisarStock("idstock = " + qS.value("s.idstock"))) {
			//sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	//sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elgansoCtr_egPonerStockNegativoA0()
{
	var _i = this.iface;

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha para de regularización");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var fecha = new DateEdit;
	fecha.label = sys.translate("Fecha:");
	fecha.date = fecha;
	dialog.add(fecha);

	if (!dialog.exec()) {
		return false;
	}

	var fecha = fecha.date;
	var fechaAnt = AQUtil.addDays(fecha, -1);
	fecha = fecha.toString().left(10);
	fechaAnt = fechaAnt.toString().left(10);

	var motivo = "Regularizacion de stock negativo a cero de " + fecha.toString();
	var filtro = ""; //" AND s.referencia = '0000ATEMP00001'";

	var c = 0;
	var aSql = [];

	aSql[c++] = "DELETE FROM eg_stocksfecha;";
	
	
	aSql[c++] = "INSERT INTO eg_stocksfecha (idstock, fecha, hora, cantidad) (SELECT s.idstock, '2000-01-01', '00:00:01', 0 FROM stocks s INNER JOIN almacenes a ON s.codalmacen = a.codalmacen INNER JOIN empresa e ON a.idempresa = e.id INNER JOIN articulos ar ON s.referencia = ar.referencia WHERE (a.idempresa = 1 OR e.deposito)" + filtro + " AND ar.nostock = false);";
	
	//aSql[c++] = "INSERT INTO eg_stocksfecha (idstock, fecha, hora, cantidad, referenciapack) (SELECT sp.idstock, '2000-01-01', '00:00:01', 0, sp.referenciapack FROM eg_stockspacks sp INNER JOIN stocks s ON sp.idstock = s.idstock INNER JOIN almacenes a ON s.codalmacen = a.codalmacen INNER JOIN empresa e ON a.idempresa = e.id INNER JOIN articulos ar ON s.referencia = ar.referencia WHERE (a.idempresa = 1 OR e.deposito)" + filtro + " AND NOT ar.nostock);";

	
	aSql[c++] = "UPDATE eg_stocksfecha SET cantidad = (SELECT lineasregstocks.cantidadfin FROM lineasregstocks LEFT OUTER JOIN eg_inventarios ON lineasregstocks.egidsincroinv = eg_inventarios.idsincro WHERE lineasregstocks.idstock = eg_stocksfecha.idstock AND lineasregstocks.fecha < '" + fecha + "' AND referenciapack IS NULL AND (eg_inventarios.idsincro IS NULL OR eg_inventarios.enviado) ORDER BY lineasregstocks.fecha DESC, lineasregstocks.hora DESC, lineasregstocks.id DESC LIMIT 1) WHERE referenciapack IS NULL;";
	
	//aSql[c++] = "UPDATE eg_stocksfecha SET cantidad = (SELECT cantidadfin FROM lineasregstocks WHERE idstock = eg_stocksfecha.idstock AND fecha < '" + fecha + "' AND referenciapack = eg_stocksfecha.referenciapack ORDER BY fecha DESC, hora DESC , lineasregstocks.id DESC LIMIT 1) WHERE referenciapack IS NOT NULL;";
	
	aSql[c++] = "UPDATE eg_stocksfecha SET fecha = (SELECT lineasregstocks.fecha FROM lineasregstocks LEFT OUTER JOIN eg_inventarios ON lineasregstocks.egidsincroinv = eg_inventarios.idsincro WHERE lineasregstocks.idstock = eg_stocksfecha.idstock AND lineasregstocks.fecha < '" + fecha + "' AND referenciapack IS NULL AND (eg_inventarios.idsincro IS NULL OR eg_inventarios.enviado) ORDER BY lineasregstocks.fecha DESC, lineasregstocks.hora DESC, lineasregstocks.id DESC LIMIT 1) WHERE referenciapack IS NULL;";
	
	//aSql[c++] = "UPDATE eg_stocksfecha SET fecha = (SELECT fecha FROM lineasregstocks WHERE idstock = eg_stocksfecha.idstock AND fecha < '" + fecha + "' AND referenciapack = eg_stocksfecha.referenciapack ORDER BY fecha DESC, hora DESC, lineasregstocks.id DESC LIMIT 1) WHERE referenciapack IS NOT NULL;";

	aSql[c++] = "UPDATE eg_stocksfecha SET hora = (SELECT lineasregstocks.hora FROM lineasregstocks LEFT OUTER JOIN eg_inventarios ON lineasregstocks.egidsincroinv = eg_inventarios.idsincro WHERE lineasregstocks.idstock = eg_stocksfecha.idstock AND lineasregstocks.fecha < '" + fecha + "' AND referenciapack IS NULL AND (eg_inventarios.idsincro IS NULL OR eg_inventarios.enviado) ORDER BY lineasregstocks.fecha DESC, lineasregstocks.hora DESC, lineasregstocks.id DESC LIMIT 1) WHERE referenciapack IS NULL;";

	//aSql[c++] = "UPDATE eg_stocksfecha SET hora = (SELECT hora FROM lineasregstocks WHERE idstock = eg_stocksfecha.idstock AND fecha < '" + fecha + "' AND referenciapack = eg_stocksfecha.referenciapack ORDER BY fecha DESC, hora DESC, lineasregstocks.id DESC  LIMIT 1) WHERE referenciapack IS NOT NULL;";

	aSql[c++] = "UPDATE eg_stocksfecha SET fecha = '2000-01-01', hora = '00:00:01' WHERE fecha IS NULL;";

	aSql[c++] = "UPDATE eg_stocksfecha SET cantidad = 0 where cantidad IS NULL;";

	aSql[c++] = "UPDATE eg_stocksfecha SET cantidad = cantidad + (SELECT (CASE WHEN SUM(ms.cantidad) IS NULL THEN 0 ELSE SUM(ms.cantidad) END) FROM movistock ms INNER JOIN stocks s ON ms.idstock = s.idstock WHERE ms.estado = 'HECHO' AND ms.referenciapack IS NULL AND ms.idstock = eg_stocksfecha.idstock AND (ms.fechareal > eg_stocksfecha.fecha OR (ms.fechareal = eg_stocksfecha.fecha AND ms.horareal > eg_stocksfecha.hora )) AND ms.fechareal < '" + fecha + "') WHERE referenciapack IS NULL;";

	//aSql[c++] = "UPDATE eg_stocksfecha SET cantidad = cantidad + (SELECT (CASE WHEN SUM(ms.cantidad) IS NULL THEN 0 ELSE SUM(ms.cantidad) END) FROM movistock ms INNER JOIN stocks s ON ms.idstock = s.idstock WHERE ms.estado = 'HECHO' AND ms.referenciapack = eg_stocksfecha.referenciapack AND ms.idstock = eg_stocksfecha.idstock AND (ms.fechareal > eg_stocksfecha.fecha OR (ms.fechareal = eg_stocksfecha.fecha AND ms.horareal > eg_stocksfecha.hora )) AND ms.fechareal < '" + fecha + "') WHERE referenciapack IS NOT NULL;";


	aSql[c++] = "INSERT INTO lineasregstocks (idstock, cantidadini, cantidadfin, referencia, barcode, fecha, hora, motivo, sincronizado, ptecalculo) (SELECT sf.idstock, sf.cantidad, 0, s.referencia, s.barcode, '" + fechaAnt + "', '23:59:59', '" + motivo + "', true, false FROM eg_stocksfecha sf INNER JOIN stocks s ON sf.idstock = s.idstock WHERE sf.cantidad < 0);"; 


	for (var i = 0; i < aSql.length; i++) {
		debug(sys.translate("Lanzando:") + "\n" + aSql[i]);
		if (!AQUtil.execSql(aSql[i])) {
			return false;
		}
		debug("OK");
	}

	var _iA = flfactalma.iface;

	var q = new FLSqlQuery();	
	q.setSelect("idstock");
	//select count(*) from tpv_lineasmultitransstock l inner join stocks s on l.barcode = s.barcode and l.codalmaorigen = s.codalmacen inner join movistock ms on l.idlinea = ms.idlineatto and ms.idstock = s.idstock left outer join movistock ms2 on l.idlinea = ms2.idlineatto AND  ms2.idstock <> s.idstock where l.fechaex >= '2016-11-01' and ms2.idmovimiento is null;
	q.setFrom("lineasregstocks");
	q.setWhere("motivo = '" + motivo + "'");
	debug("sql: "+q.sql());
	
	if (!q.exec()){
		return;
	} 
	
	var p = 0;
	AQUtil.createProgressDialog( sys.translate("Regularizando stocks..." ), q.size());

	while(q.next())
	{	
		AQUtil.setProgress(p++);

		if (!formregstocks.iface.revisarStock("idstock = " + q.value("idstock"))) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}


function elgansoCtr_corregirTarjetasEmpleados()
{
	var _i = this.iface;

	var aOpciones = [sys.translate("Consultar tarjetas"), sys.translate("Corregir tarjetas")];
	var opcion = flfactppal.iface.pub_elegirOpcion(aOpciones, sys.translate("Selecciona opción"));
	if (opcion < 0) {
		return;
	}

	var curT = new FLSqlCursor("tpv_tarjetaspuntos");
	curT.select("(deempleado OR dtoespecial) AND activa");
	var saldo;
	var p = 0;

	if(opcion == 0){
		var _mT = formtpv_tiendas.iface;
		var _fTpv = flfact_tpv.iface;

		var nombreLog = _mT.dameNombreLog("CONSULTATARJETAS");
		_i.nombreLog_ = flfactalma.iface.pub_ponLogName(nombreLog);
		var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
		
		if(!dirLog || dirLog == "")
			dirLog = Dir.home;

		if(dirLog.endsWith("/"))
			_i.nombreFile_ = dirLog + nombreLog;
		else
			_i.nombreFile_ = dirLog + "/" + nombreLog;

		if(!flfactppal.iface.pub_abreLogFile(_i.nombreLog_, _i.nombreFile_)){
			sys.infoMsgBox("No se ha creado el fichero del log de la consulta.");
		}
	}
	

	while(curT.next()){

		curT.setModeAccess(curT.Edit);
		curT.refreshBuffer();

		saldo = parseFloat(formRecordtpv_tarjetaspuntos.iface.pub_commonCalculateField("saldopuntos", curT));
		

		if(saldo != curT.valueBuffer("saldopuntos")){
			
			if(opcion == 0){
				p++;
				if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Código Tarjeta: " + curT.valueBuffer("codtarjetapuntos") + " Saldo actual: " + curT.valueBuffer("saldopuntos") + " Saldo Real: " + saldo)) {
					return false;
				}
			}else{
				curT.setValueBuffer("saldopuntos", AQUtil.roundFieldValue(saldo, "tpv_movpuntos", "canpuntos"));
				if(!curT.commitBuffer()){
					return false;
				}
			}

			
		}
	}

	if(p > 0){
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Hay un total de : " + p + " tarjetas con saldo erróneo")) {
			return false;
		}
	}
		
	return true;
}

function elgansoCtr_borrarAsientosMovimientos()
{
	var _i = this.iface;

	var codEjercicio = flfactppal.iface.pub_ejercicioActual();

	var res = MessageBox.information(sys.translate("Va a eliminar los asientos de los movimientos n43 del ejercicio %1\n¿Desea continuar?").arg(codEjercicio), MessageBox.No, MessageBox.Yes, MessageBox.NoButton);
	if (res != MessageBox.Yes){
		return false;
	}

	var curMovimiento = new FLSqlCursor("n43_movimientos");
	//curMovimiento.select("fechaop BETWEEN '" + AQUtil.sqlSelect("ejercicios","fechainicio","codejercicio = '" + codEjercicio + "'") + "' AND '" + AQUtil.sqlSelect("ejercicios","fechafin","codejercicio = '" + codEjercicio + "'") + "' AND idasiento is not null");
	curMovimiento.select("(fechaval > '2016-12-31' OR fechaop > '2016-12-31') AND idasiento IS NOT NULL AND idasiento in (SELECT idasiento from co_asientos where codejercicio = '" + codEjercicio + "')");

	while(curMovimiento.next()){
		curMovimiento.setModeAccess(curMovimiento.Edit);
		curMovimiento.refreshBuffer();
		curMovimiento.setActivatedCommitActions(false);

		if(!flcontppal.iface.borrarAsientoMovimiento(curMovimiento, curMovimiento.valueBuffer("idasiento"))){
			return false;
		}
		curMovimiento.setNull("idasiento");
		if(!curMovimiento.commitBuffer()){
			return false;
		}
	}
	return true;
}

function elgansoCtr_crearAsientosMovimientos()
{
	var _i = this.iface;

	var codEjercicio = flfactppal.iface.pub_ejercicioActual();

	var res = MessageBox.information(sys.translate("Va a crear los asientos de los movimientos n43 sin asientos en el ejercicio %1\n¿Desea continuar?").arg(codEjercicio), MessageBox.No, MessageBox.Yes, MessageBox.NoButton);
	if (res != MessageBox.Yes){
		return false;
	}

	var curMovimiento = new FLSqlCursor("n43_movimientos");
	curMovimiento.select("(fechaval > '2016-12-31' OR fechaop > '2016-12-31') AND idasiento IS NULL");

	while(curMovimiento.next()){
		curMovimiento.setModeAccess(curMovimiento.Edit);
		curMovimiento.refreshBuffer();

		if(!flcontppal.iface.generarAsientoMovimiento(curMovimiento)){
			return false;
		}
		if(!curMovimiento.commitBuffer()){
			return false;
		}
	}
	return true;
}

function elgansoCtr_obtenerCodigoComandaEdi(curComanda, codTienda)
{
	var _i = this.iface;
	

	var codigo = flfact_tpv.iface.obtenerCodigoComanda(curComanda);


	return codigo;

	/* Sobrecargada
	var _i = this.iface;

	var prefijo = codTienda;
	if(!prefijo){
		prefijo = "";
	}
	var ultimoTiquet = AQUtil.sqlSelect("tpv_secuenciascomanda", "valor", "prefijo = '" + prefijo + "'");

	if (!ultimoTiquet) {
		var idUltimo = AQUtil.sqlSelect("tpv_comandas", "codigo", "codigo LIKE '" + prefijo + "%' ORDER BY codigo DESC");

		if (idUltimo) {
			ultimoTiquet = parseFloat(idUltimo);
		} else {
			ultimoTiquet = 0;
		}
		ultimoTiquet += 1;
		var curSecuencia = new FLSqlCursor("tpv_secuenciascomanda");
		curSecuencia.setModeAccess(curSecuencia.Insert);
		curSecuencia.refreshBuffer();
		curSecuencia.setValueBuffer("prefijo", prefijo);
		curSecuencia.setValueBuffer("valor", ultimoTiquet);
		if (!curSecuencia.commitBuffer()) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al obtener la secuencia para " + codTienda)) {
	  			flfactppal.iface.ponMsgError(sys.translate("Error al obtener la secuencia para %1").arg(codTienda), "info");
			} 
			debug("Error al obtener la secuencia para " + codTienda);
			return false;
		}
	} else {
		ultimoTiquet += 1;
		AQUtil.sqlUpdate("tpv_secuenciascomanda", "valor", ultimoTiquet, "prefijo = '" + prefijo + "'");
	}

	var codigo = prefijo + flfacturac.iface.pub_cerosIzquierda(ultimoTiquet, 12 - prefijo.length);

	return codigo;*/
}

function elgansoCtr_egGenerarAsientosArqueoWeb(oParam)
{
	var oP = [];

	var curArqueos = new FLSqlCursor("tpv_arqueos");
	curArqueos.select("diahasta >= '2017-01-01' AND diahasta is not null AND diahasta < '2018-01-01' AND codtienda = 'AWEB'");
	
	AQUtil.createProgressDialog(sys.translate("Generando asientos..." ), curArqueos.size());
	var paso = 0;

	while(curArqueos.next()) {
		AQUtil.setProgress(paso++);
		oP.curArqueo = curArqueos;
	debug(curArqueos.valueBuffer("idtpv_arqueo") + " - " + curArqueos.valueBuffer("diahasta"));

		oP.errorMsg = sys.translate("Error en la función sincroArqueoFactura");
		var f = new Function("oParam", "return flfact_tpv.iface.sincroArqueoFactura(oP)");

		if (!sys.runTransaction(f, oP)) {
			/*AQUtil.destroyProgressDialog();
			return false;*/
			continue;
		}
	}

	AQUtil.destroyProgressDialog();


	return true;
}

function elgansoCtr_egForzarSincroVentasTienda()
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setFrom("tpv_pagoscomanda");
	q.setSelect("codtienda");
	q.setWhere("idtpv_comanda = 0 AND fecha > '2016-12-31' GROUP BY codtienda ORDER BY codtienda");
		
	if(!q.exec()){
		return false;
	}
	
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Procesando stocks"), q.size());
	var p = 0;
	var cx;

	while (q.next()) {
		AQUtil.setProgress(p++);
		cx = q.value("codtienda");

		AQUtil.setLabelText("Actualizando ventas tienda: " + cx);
		if (!_i.conectar(cx)) {
    		sys.warnMsgBox(sys.translate("Error en la conexión ").arg(cx), MessageBox.Ok, MessageBox.NoButton);
    		continue;
    	}

		var qPc = new FLSqlQuery();
		qPc.setFrom("tpv_pagoscomanda");
		qPc.setSelect("codcomanda");
		qPc.setWhere("idtpv_comanda = 0 AND fecha > '2016-12-31' AND codtienda = '" + cx + "'");
  		
		if(!qPc.exec()){
			return false;
		}
		var codVentas = "";
		while (qPc.next()) {
			codVentas += "'" + qPc.value(0) + "',";
		}

		codVentas = codVentas.left(codVentas.length-1);

  		AQUtil.execSql("UPDATE tpv_comandas SET sincronizada = false WHERE codigo IN (" + codVentas + ")", cx);
  		if (!formtpv_tiendas.iface.pub_desconectar(cx, false)) {
			continue;
		}
	}
	
	AQUtil.destroyProgressDialog();
	return true;
}

function elgansoCtr_verificacionContable()
{
	var _i = this.iface;
	
	var fecha = '2017-01-01';
	var hoy = new Date();

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha de verificación contable");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = fecha;
	dialog.add(dFechaIni);

	var dFechaFin = new DateEdit;
	dFechaFin.label = sys.translate("Fin");
	dFechaFin.date = hoy;
	dialog.add(dFechaFin);

	if (!dialog.exec()) {
		return false;
	}

	var fechaIni = dFechaIni.date;
	var fechaFin = dFechaFin.date;
	
	var importePagos = 0;
	var importePagosSinIva = 0;

	var qP = new FLSqlQuery();
	qP.setSelect("SUM(p.importe),t.codsubcentro,ca.fecha,t.codtienda");
	qP.setFrom("tpv_pagoscomanda p INNER JOIN tpv_arqueos a on p.idtpv_arqueo = a.idtpv_arqueo INNER JOIN co_asientos ca ON (ca.idasiento = a.idasiento OR (ca.idasiento = a.idasientovale and (a.idasiento is null OR a.idasiento = 0))) INNER JOIN tpv_tiendas t ON t.codtienda = a.codtienda");
	qP.setWhere("t.idempresa IN (1,15) AND a.diadesde BETWEEN '" + fechaIni + "' AND '" + fechaFin + "' AND p.codpago <> 'PTS' AND a.codtienda <> 'AWEB' AND t.codsubcentro is not null GROUP BY t.codsubcentro,ca.fecha,t.codtienda ORDER BY ca.fecha,t.codsubcentro");
		
	if(!qP.exec()){
		return false;
	}
	debug(qP.sql());
	var p = 0;
	var idLinea;
	var resta = 0;

	var oParam = [];
  	oParam.caption = sys.translate("Verificando saldo de cuentas...");
  	oParam.ancho = 950;
	oParam.alto = 550;
  
  	flfactppal.iface.pub_creaDialogoEstado(oParam);

  	var codSubcuentaVenta = AQUtil.sqlSelect("tpv_datosgenerales", "codsubcuentaven", "1 = 1");
	var codSubcuentaVentaDevol = AQUtil.sqlSelect("tpv_datosgenerales", "codsubcuentadevven", "1 = 1");
  	
	while(qP.next()){


		if(qP.value("t.codsubcentro") != "ES141" && qP.value("t.codsubcentro") != "ES145" && qP.value("t.codsubcentro") != "ES526" && qP.value("t.codsubcentro") != "ES525"){
			importePagos = AQUtil.roundFieldValue(qP.value("SUM(p.importe)")/1.21, "lineaspedidoscli", "pvptotaliva");
		
			/// Ponemos el left outer join n43_punteo para no mostrar las partidas de conciliación de diferencias
			importePagosSinIva = AQUtil.sqlSelect("co_asientos INNER JOIN co_partidas ON co_asientos.idasiento = co_partidas.idasiento INNER JOIN co_partidascc ON co_partidas.idpartida = co_partidascc.idpartida LEFT OUTER JOIN n43_punteo ON co_partidas.idasiento = n43_punteo.idasiento", "SUM(co_partidas.debe-co_partidas.haber)", "co_asientos.fecha BETWEEN '" + qP.value("ca.fecha") + "' AND '" + qP.value("ca.fecha") + "' AND co_partidascc.codsubcentro = '" + qP.value("t.codsubcentro") + "' AND co_partidas.codsubcuenta IN('" + codSubcuentaVenta + "', '" + codSubcuentaVentaDevol + "') AND n43_punteo.idasiento is null", "co_asientos,co_partidas,co_partidascc,n43_punteo");

			importePagosSinIva = AQUtil.roundFieldValue(parseFloat(importePagosSinIva), "lineaspedidoscli", "pvptotaliva");
		}else{
			importePagos = AQUtil.roundFieldValue(qP.value("SUM(p.importe)")/1.03, "lineaspedidoscli", "pvptotaliva");
		
			/// Ponemos el left outer join n43_punteo para no mostrar las partidas de conciliación de diferencias
			importePagosSinIva = AQUtil.sqlSelect("co_asientos INNER JOIN co_partidas ON co_asientos.idasiento = co_partidas.idasiento INNER JOIN co_partidascc ON co_partidas.idpartida = co_partidascc.idpartida LEFT OUTER JOIN n43_punteo ON co_partidas.idasiento = n43_punteo.idasiento", "SUM(co_partidas.debe-co_partidas.haber)", "co_asientos.fecha BETWEEN '" + qP.value("ca.fecha") + "' AND '" + qP.value("ca.fecha") + "' AND co_partidascc.codsubcentro = '" + qP.value("t.codsubcentro") + "' AND co_partidas.codsubcuenta IN('" + codSubcuentaVenta + "', '" + codSubcuentaVentaDevol + "') AND n43_punteo.idasiento is null", "co_asientos,co_partidas,co_partidascc,n43_punteo");

			importePagosSinIva = AQUtil.roundFieldValue(parseFloat(importePagosSinIva), "lineaspedidoscli", "pvptotaliva");
		}
		
		
		//Se ponen en signo positivo para hacer correctamente la resta.
		if(importePagos < 0){
			importePagos = importePagos * (-1);
		}

		if(importePagosSinIva < 0){
			importePagosSinIva = importePagosSinIva * (-1);
		}

		importePagosSinIva = AQUtil.roundFieldValue(parseFloat(importePagosSinIva), "lineaspedidoscli", "pvptotaliva");
		importePagosSinIva = AQUtil.roundFieldValue(parseFloat(importePagosSinIva), "lineaspedidoscli", "pvptotaliva");
		resta = AQUtil.roundFieldValue(importePagos - importePagosSinIva, "lineaspedidoscli", "pvptotaliva"); 
		
		if (Math.abs(resta) > 0.02) {

			var fecha = qP.value("ca.fecha").toString();
			fecha = AQUtil.dateAMDtoDMA(fecha);
			fecha = fecha.toString().left(10);

			flfactppal.iface.pub_ponLogDialogo("Hay un importe sin puntos de: " + importePagos + " y un importe de ventas de: " + importePagosSinIva + " y un descuadre de " + resta + " en la tienda " + qP.value("t.codtienda") + " en el día " + fecha);
 		}
		
	}
	flfactppal.iface.pub_ponLogDialogo("Verificación terminada correctamente.");
  return true;
}

function elgansoCtr_actualizarViajesRecepcionadosFecha()
{
	var _i = this.iface;

	var hoy = new Date();
	var fecha = hoy.setDate(1);

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha para actualizar viajes a sincronizar con la central");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var fechaRx = new DateEdit;
	fechaRx.label = sys.translate("Fecha: ");
	fechaRx.date = fecha;
	dialog.add(fechaRx);

	if (!dialog.exec()) {
		return false;
	}

	fechaRx = fechaRx.date;
	var cx;

	var curLineaViajeTienda;
	var idSincro;

	var listaTiendas = Input.getText(sys.translate("Lista de tiendas separada por comas y sin espacios"));
	if (listaTiendas) {
		var aTiendas = listaTiendas.split(",");
		listaTiendas = "codtienda IN ('" + aTiendas.join("','") + "')";
	}
	else{
		listaTiendas = "1 = 1";
	}

	var curTiendas = new FLSqlCursor("tpv_tiendas");
	curTiendas.select("sincroactiva AND servidor is not null AND " + listaTiendas);
	while(curTiendas.next()){
		curTiendas.setModeAccess(curTiendas.Browse);
		curTiendas.refreshBuffer();

		cx = curTiendas.valueBuffer("codtienda");
		if (!_i.conectarMT(cx, true)) {
			continue;
		}

		curLineaViajeTienda = new FLSqlCursor("tpv_lineasmultitransstock", cx);
		curLineaViajeTienda.select("codalmadestino = '" + cx + "' AND rxcentral = 'OK' AND (estado = 'RECIBIDO' OR estado = 'CANCELADO') AND fecharx >= '" + fechaRx + "'");
		
		while (curLineaViajeTienda.next()) {
			curLineaViajeTienda.setModeAccess(curLineaViajeTienda.Edit);
			curLineaViajeTienda.refreshBuffer();

			idSincro = curLineaViajeTienda.valueBuffer("idsincro");
			if(AQUtil.sqlSelect("tpv_lineasmultitransstock", "idsincro", "rxcentral <> 'OK' and idsincro = '" + idSincro + "'")){
				curLineaViajeTienda.setValueBuffer("rxcentral", "PTE");
				debug("////////////////////////// idSincro: " + idSincro);
				if(!curLineaViajeTienda.commitBuffer()){
					sys.warnMsgBox(sys.translate("Error al procesar la linea %1").arg(idSincro));
					continue;
				}
			}
		}

		if(!formtpv_tiendas.iface.desconectar(cx, true)){
			continue;
		}
	
	}

	return true;
}
/*
function elgansoCtr_actualizarViajesRecepcionadosCeroFecha()
{
	var _i = this.iface;

	var fechaDesde = new Date().setDate(1);
	var fechaHasta = new Date().setDate(1);

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha cancelar recepciones");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var fechaD = new DateEdit;
	fechaD.label = sys.translate("Fecha Desde: ");
	fechaD.date = fechaDesde.setMonth(1);
	dialog.add(fechaD);

	var fechaH = new DateEdit;
	fechaH.label = sys.translate("Fecha Hasta: ");
	fechaH.date = fechaHasta;
	dialog.add(fechaH);

	if (!dialog.exec()) {
		return false;
	}

	fechaDesde = fechaD.date;
	fechaHasta = fechaH.date;

	var codTienda;
	var idViaje;

	var curLineaViajesCentral;

	var curTiendas = new FLSqlCursor("tpv_tiendas");
	curTiendas.select("sincroactiva IS FALSE");

	while(curTiendas.next()){
		curTiendas.setModeAccess(curTiendas.Browse);
		curTiendas.refreshBuffer();

		codTienda = curTiendas.valueBuffer("codtienda");

		curLineaViajesCentral = new FLSqlCursor("tpv_lineasmultitransstock");
		curLineaViajesCentral.select("codalmadestino = '" + codTienda + "' AND estado <> 'RECIBIDO' AND estado <> 'CANCELADO' AND ((fecharx >= '" + fechaDesde + "' AND fecharx < '" + fechaHasta + "') OR (fecharx is NULL AND (fechaex >= '" + fechaDesde + "' AND fechaex < '" + fechaHasta + "'))) AND rxcentral <> 'OK' ORDER BY idviajemultitrans") ;
		
		while (curLineaViajesCentral.next()) {
			curLineaViajesCentral.setModeAccess(curLineaViajesCentral.Edit);
			curLineaViajesCentral.refreshBuffer();

			idViaje = curLineaViajesCentral.valueBuffer("idviajemultitrans");
			// Dejamos las cantidades como estén pero debemos marcar el campo cerradorx
			//curLineaViajesCentral.setValueBuffer("cantpterecibir", 0);
			//curLineaViajesCentral.setValueBuffer("cantrecibida", 0);
			curLineaViajesCentral.setValueBuffer("estado", "CANCELADO");
			//curLineaViajesCentral.setValueBuffer("fecharx", curLineaViajesCentral.valueBuffer("fechaex"));
			curLineaViajesCentral.setValueBuffer("rxtienda", "OK");
			curLineaViajesCentral.setValueBuffer("rxcentral", "OK");
			debug("////////////////////////// idSincro: " + curLineaViajesCentral.valueBuffer("idsincro"));
			if(!curLineaViajesCentral.commitBuffer()){
				sys.warnMsgBox(sys.translate("Error al procesar la linea %1").arg(curLineaViajesCentral.valueBuffer("idsincro")));
				continue;
			}
			if (!AQUtil.execSql("UPDATE tpv_viajesmultitransstock SET ptesincroenvio = false, recepcioncompletada = true WHERE idviajemultitrans = '" + idViaje + "'")) {
				continue;
			}
		}
		
	}

	return true;
}*/

function elgansoCtr_actualizarViajesEnviadosFecha()
{
	var _i = this.iface;

	var hoy = new Date();
	var fecha = hoy.setDate(1);

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha para actualizar viajes a sincronizar con la central");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var fechaEx = new DateEdit;
	fechaEx.label = sys.translate("Fecha: ");
	fechaEx.date = fecha;
	dialog.add(fechaEx);

	if (!dialog.exec()) {
		return false;
	}

	fechaEx = fechaEx.date;
	var cx;

	var curTiendas = new FLSqlCursor("tpv_tiendas");
	curTiendas.select("sincroactiva AND servidor is not null");
	while(curTiendas.next()){
		curTiendas.setModeAccess(curTiendas.Browse);
		curTiendas.refreshBuffer();
		
		cx = curTiendas.valueBuffer("codtienda");
		if (!_i.conectarMT(cx, true)) {
			continue;
		}

		if(!_i.egSincronizarViajesIncompletos(cx, fechaEx, true)){
			continue;
		}
		if(!_i.egSincronizarViajesRecepcionIncompletos(cx, fechaEx, true)){
			continue;
		}
		if(!_i.egSincronizarViajesRecepcionTiendaIncompletos(cx, fechaEx, true)){
			continue;
		}

		if(!formtpv_tiendas.iface.desconectar(cx, true)){
			continue;
		}
	
	}

	return true;
}

function elgansoCtr_egComprobarStocksMagento()
{
	var _i = this.iface;
	
	var _fA = flfactalma.iface;
	var _fP = flfactppal.iface;
	var _fTpv = flfact_tpv.iface;

	var silent = !sys.interactiveGUI();

	var nombreLog = "";
	var corregir = false;
	var corregirNegativos = false;

	if (silent) {
		nombreLog = formtpv_tiendas.iface.dameNombreLog("STOCKS_WEB");
		nombreLog = _fA.pub_ponLogName(nombreLog);
		
		var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
		if (!dirLog || dirLog == "") {
			dirLog = Dir.home;
		}
		dirLog += dirLog.endsWith("/") ? "" : "/";
		var nombreFile = dirLog + nombreLog;
		if (!_fP.pub_abreLogFile(nombreLog, nombreFile)) {
			sys.infoMsgBox("No se ha creado el fichero del log de comprobación de stocks web.");
		}
		_fP.pub_appendTextToLogFile(nombreLog, sys.translate("CORRIGIENDO STOCKS"));

		corregir = true;
		corregirNegativos = false;	
		flfactppal.iface.pub_appendTextToLogFile(nombreLog, "\nCorrigiendo stocks incorrectos...");
	}	
	else {
		var res = MessageBox.information(AQUtil.translate("scripts",  "¿Desea corregir los stocks incorrectos?"), MessageBox.No, MessageBox.Yes, MessageBox.NoButton);
		if (res == MessageBox.Yes){
			corregir = true;

			res = MessageBox.information(AQUtil.translate("scripts",  "¿Desea corregir los stocks negativos?"), MessageBox.No, MessageBox.Yes, MessageBox.NoButton);
			if (res == MessageBox.Yes){
				corregirNegativos = true;
			}
		}
	}

	if(!_i.egComprobarStocksMagentoAbanQ(corregir, corregirNegativos, nombreLog)){
		return false;
	}

	return true;
}

function elgansoCtr_egComprobarStocksMagentoAbanQ(corregir, corregirNegativos, nombreLog)
{
	var _i = this.iface;
	
	var _fA = flfactalma.iface;
	var _fP = flfactppal.iface;
	var _fTpv = flfact_tpv.iface;

	var silent = !sys.interactiveGUI();

	if (silent && !nombreLog) {
		nombreLog = formtpv_tiendas.iface.dameNombreLog("STOCKS_WEB");
		nombreLog = _fA.pub_ponLogName(nombreLog);
		
		var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
		if (!dirLog || dirLog == "") {
			dirLog = Dir.home;
		}
		dirLog += dirLog.endsWith("/") ? "" : "/";
		var nombreFile = dirLog + nombreLog;
		if (!_fP.pub_abreLogFile(nombreLog, nombreFile)) {
			sys.infoMsgBox("No se ha creado el fichero del log de comprobación de stocks web.");
		}
		_fP.pub_appendTextToLogFile(nombreLog, sys.translate("CORRIGIENDO STOCKS"));

		corregir = true;	
		flfactppal.iface.pub_appendTextToLogFile(nombreLog, "\nCorrigiendo stocks incorrectos...");
	}

	var conexion = "WEBM";
	formtpv_tiendas.iface.pub_conectar(conexion);
	
	var msg = "";
	var mayores = "";
	var menores = "";
	var corregidos = "";
	var nocorregidos = "";

	var datosArt = [];
	var stockMgt = "";
	var stockAbanq = "";
	var stocksCorregir = "";

	// OBTENIENDO IDS DE ATTRIBUTOS: 84
	var attrIdStatus = AQUtil.sqlSelect("eav_attribute","attribute_id","entity_type_id=4 and attribute_code = 'status'","eav_attribute",conexion); 
	//debug("Estado: " + attrIdStatus);

	// 118
	var attrIdTalla = AQUtil.sqlSelect("eav_attribute","attribute_id","entity_type_id=4 and attribute_code = 'size'","eav_attribute",conexion); 
	//debug("Talla: " + attrIdTalla);

	// 91
	var attrIdVisibility = AQUtil.sqlSelect("eav_attribute","attribute_id","entity_type_id=4 and attribute_code = 'visibility'","eav_attribute",conexion); 
	//debug("Visibilidad: " + attrIdVisibility);


	//CONSTRUYENDO QRY STOCKS POR TALLAS
	var qStockTalls = new FLSqlQuery("",conexion);
	qStockTalls.setSelect("articulo.sku, stock.qty, visibilidad.value");
	qStockTalls.setFrom("catalog_product_entity articulo INNER JOIN catalog_product_entity_int estado ON articulo.entity_id = estado.entity_id and estado.attribute_id = " + attrIdStatus + " INNER JOIN cataloginventory_stock_item stock ON articulo.entity_id = stock.product_id INNER JOIN catalog_product_entity_int visibilidad ON articulo.entity_id = visibilidad.entity_id and visibilidad.attribute_id = " + attrIdVisibility);


	//CONSTRUYENDO QRY ARTICULOS
	var qArticulos = new FLSqlQuery("",conexion);
	qArticulos.setSelect("articulo.sku, visibilidad.value");
	qArticulos.setFrom("catalog_product_entity articulo INNER JOIN catalog_product_entity_int estado ON articulo.entity_id = estado.entity_id and estado.attribute_id = " + attrIdStatus + " INNER JOIN catalog_product_entity_int visibilidad ON articulo.entity_id = visibilidad.entity_id and visibilidad.attribute_id = " + attrIdVisibility);
	qArticulos.setWhere("estado.value = 1 and visibilidad.value = 4 group by articulo.sku, visibilidad.value");
	if(!qArticulos.exec()) {
		if (!silent) {
			sys.warnMsgBox(sys.translate("Falló la consulta."));
		}
		else {
			debug("falló la consulta: " + qArticulos.sql());
			flfactppal.iface.pub_appendTextToLogFile(nombreLog, "\nFalló la consulta: " + qArticulos.sql());
		}
		return false;
	}

	if (!silent) {
		AQUtil.createProgressDialog("Comprobando stocks en la web...", qArticulos.size());
	}
	else {
		debug("Comprobando stocks en la web...");
	}
	var p = 0;
	while(qArticulos.next()) {
		if (!silent) {
			AQUtil.setProgress(p++);
		}
		else {
			debug("comprobando " + p++ + " de " + qArticulos.size());
			flfactppal.iface.pub_appendTextToLogFile(nombreLog, "\ncomprobando " + p++ + " de " + qArticulos.size());
		}

		//debug(qArticulos.value("articulo.sku") + " - visibilidad: " + qArticulos.value("visibilidad.value"));
		qStockTalls.setWhere("visibilidad.value = 1 and articulo.sku LIKE '" + qArticulos.value("articulo.sku") + "%'");
		qStockTalls.sql();

		if(!qStockTalls.exec()) {
			if (!silent) {
				sys.warnMsgBox(sys.translate("Falló la consulta."));
			}
			else {
				debug("falló la consulta: " + qStockTalls.sql());
				flfactppal.iface.pub_appendTextToLogFile(nombreLog, "\nFalló la consulta: " + qStockTalls.sql());
			}
			return false;
		}

	
		while(qStockTalls.next()) {
			datosArt = qStockTalls.value("articulo.sku").split("-");
			if(datosArt.length < 2) {
				//debug("**************** NO HAY TALLA DE " + qStockTalls.value("articulo.sku"));
				continue;
			}

			stockMgt = qStockTalls.value("stock.qty");
			stockAbanq = AQUtil.sqlSelect("stocks","disponible","codalmacen = 'AWEB' AND referencia = '" + datosArt[0] + "' and talla = '" + datosArt[1] + "'");
			

			if(!stockAbanq || stockAbanq < 0) stockAbanq = 0;
	
			//debug(qStockTalls.value("articulo.sku") + " - Abanq = " + stockAbanq + " - Magento = " + stockMgt);

			if(stockMgt != stockAbanq) {
				var idStock = AQUtil.sqlSelect("stocks","idstock","codalmacen = 'AWEB' AND referencia = '" + datosArt[0] + "' and talla = '" + datosArt[1] + "'");
				if(!idStock)
					continue;

				var idMovimiento = AQUtil.sqlSelect("movistock","max(idmovimiento)","idstock = " + idStock + "and estado = 'HECHO'");		var fechaA = "";
				var fechaHoraA = "";
				
				var fechaHoraM = AQUtil.sqlSelect("sales_flat_order_item","max(updated_at)","sku = '" + qStockTalls.value("articulo.sku") + "'","sales_flat_order_item",conexion);

				//var fechaHoraM = AQUtil.sqlSelect("sales_flat_order_item i INNER JOIN sales_flat_order o on i.order_id = o.entity_id","o.created_at","i.sku = '" + qStockTalls.value("articulo.sku") + "'","sales_flat_order_item,sales_flat_order",conexion);
				var fechaM = fechaHoraM.toString().left(10);
				
//select o.created_at, o.updated_at, i.qty_ordered,i.qty_canceled,i.order_id from sales_flat_order_item i INNER JOIN sales_flat_order o on i.order_id = o.entity_id where i.sku = 'sku' order by o.updated_at desc limit 50;
				

				if(idMovimiento) {
					fechaA = AQUtil.sqlSelect("movistock","fechareal","idmovimiento = " + idMovimiento).toString().left(10);
					fechaHoraA = fechaA + " " + AQUtil.sqlSelect("movistock","horareal","idmovimiento = " + idMovimiento).toString().right(8);
				}

				if(stockMgt > stockAbanq) {
					if(corregir) {					
						if(stocksCorregir != "")
							stocksCorregir += ",";
						stocksCorregir += idStock;

						corregidos += "\n" + qStockTalls.value("articulo.sku") + " - Abanq = " + stockAbanq + "  " + fechaHoraA + " - Magento = " + stockMgt + "  " + fechaHoraM;
					}
					else {
						mayores += "\n" + qStockTalls.value("articulo.sku") + " - Abanq = " + stockAbanq + "  " + fechaHoraA + " - Magento = " + stockMgt + "  " + fechaHoraM;
					}
				}
				if(stockMgt < stockAbanq) {
					if(corregir) {
						if(corregirNegativos){
							if(fechaA != fechaM) {
								if(stocksCorregir != ""){
									stocksCorregir += ",";
								}
								stocksCorregir += idStock;
								corregidos += "\n" + qStockTalls.value("articulo.sku") + " - Abanq = " + stockAbanq + "  " + fechaHoraA + " - Magento = " + stockMgt + "  " + fechaHoraM;
							}
							else {
								nocorregidos += "\n" + qStockTalls.value("articulo.sku") + " - Abanq = " + stockAbanq + "  " + fechaHoraA + " - Magento = " + stockMgt + "  " + fechaHoraM;
							}
						}
						else {
							nocorregidos += "\n" + qStockTalls.value("articulo.sku") + " - Abanq = " + stockAbanq + "  " + fechaHoraA + " - Magento = " + stockMgt + "  " + fechaHoraM;
						}
					}
					else {
						menores += "\n" + qStockTalls.value("articulo.sku") + " - Abanq = " + stockAbanq + "  " + fechaHoraA + " - Magento = " + stockMgt + "  " + fechaHoraM;
					}
				}
			
			}
		}
	}

	if(corregir && stocksCorregir != "") {
		var fecha = flfactppal.iface.pub_dameFechaActual();
		var hora = flfactppal.iface.pub_dameHoraActual();

		var arrStocks = stocksCorregir.split(",");
		for(var i = 0; i< arrStocks.length; i++) {
			AQUtil.sqlUpdate("eg_sincrostockweb","fecha,hora",fecha + "," + hora,"idstock = " + arrStocks[i]);
		}
	}

	if (!silent) {
		AQUtil.destroyProgressDialog();
	}
	
	
	if(corregir) {
		if(corregidos != "" || nocorregidos != "") {
			msg = "Los siguientes artículos fueron CORREGIDOS:";
			msg += "\n\nCORREGIDOS\n" + corregidos + "\n\nNO CORREGIDOS\n" + nocorregidos;
		}
		else {
			msg = "No hay ariculos para corregir";
		}
	}
	else {
		if(mayores != "" || mayores != "") {
			msg = "Los siguientes artículos tienen DIFERENCIA DE STOCK:";
			msg += "\n\nMENORES\n" + menores + "\n\nMAYORES (A CORREGIR)\n" + mayores;
		}
		else {
			msg = "No hay ariculos con diferencia de stock";
		}
	}
	

	if (!silent) {
		var dialog = new Dialog;
		dialog.okButtonText = sys.translate("Aceptar");
			
		var texto = new TextEdit;
		texto.text = msg;
		dialog.add( texto );

		dialog.exec();
	}
	else {
		debug(msg);
		flfactppal.iface.pub_appendTextToLogFile(nombreLog, "\n" + msg);
	}


	return true;
}

function elgansoCtr_egSincronizarViajesIncompletos(codTienda, desde, corregir, silent)
{
	var _i = this.iface;

	if (!silent || silent == undefined) {
		return _i.__egSincronizarViajesIncompletos(codTienda, desde, corregir);
	}

	cx = codTienda;
	var codAlmacen = AQUtil.sqlSelect("tpv_tiendas","codalmacen","codtienda = '" + codTienda + "'");
		
	var qT = new FLSqlQuery ("", cx);
	qT.setSelect("v.idviajemultitrans, COUNT(*)");
	qT.setFrom("tpv_viajesmultitransstock v INNER JOIN tpv_lineasmultitransstock lv ON v.idviajemultitrans = lv.idviajemultitrans");
	qT.setWhere("(lv.fechaex >= '" + desde + "' OR (lv.fechaex is null AND lv.estado <> 'CANCELADO')) AND lv.codalmaorigen = '" + codAlmacen + "' AND v.estado NOT IN ('PTE ENVIO', 'ENVIADO PARCIAL') AND v.enviocompletado AND v.fecha > '2016-12-31' GROUP BY v.idviajemultitrans ORDER BY v.idviajemultitrans");

	debug(qT.sql());
	if (!qT.exec()){
		return false;
	}

	var lineasC, lineasT;
	var idViaje;
	while (qT.next()) {
		idViaje = qT.value("v.idviajemultitrans");
		lineasT = qT.value("COUNT(*)");
		lineasC = AQUtil.sqlSelect("tpv_lineasmultitransstock", "COUNT(*)", "idviajemultitrans = '" + idViaje + "' AND (fechaex >= '" + desde + "' OR (fechaex is null AND estado <> 'CANCELADO')) AND codalmaorigen = '" + codAlmacen + "'");

		lineasT = isNaN(lineasT) ? 0 : lineasT;
		lineasC = isNaN(lineasC) ? 0 : lineasC;
		debug("///////////////////lineasT: " +lineasT);
		debug("///////////////////lineasC: " +lineasC);
		if (lineasC == lineasT) {
			continue;
		}		

		flfactppal.iface.pub_appendTextToLogFile(flfactalma.iface.logName_, "\n" + "envío T/C Erróneo. " + codTienda + ";" + idViaje + ";" + lineasC + ";" + lineasT);

		if (corregir) {
			debug("///////////////////////////////////////////////////egSincronizarViajesIncompletos");
			if(!AQUtil.execSql("UPDATE tpv_viajesmultitransstock SET ptesincroenvio = true WHERE idviajemultitrans = '" + idViaje + "'", cx)){
				return false;
			}
			debug("////////////////// viaje actualizado ptesincroenvio: " + idViaje);
		}
	}

	return true;
}

function elgansoCtr_egSincronizarViajesRecepcionIncompletos(codTienda, desde, corregir, silent)
{
	var _i = this.iface;

	if(!silent || silent == undefined){
		return _i.__egSincronizarViajesRecepcionIncompletos(codTienda, desde, corregir);
	}
	
	cx = codTienda;
	var codAlmacen = AQUtil.sqlSelect("tpv_tiendas","codalmacen","codtienda = '" + codTienda + "'");

	var qT = new FLSqlQuery ("", cx);
	qT.setSelect("lv.idviajemultitrans, lv.estado, lv.barcode, lv.numlinea");
	qT.setFrom("tpv_viajesmultitransstock v INNER JOIN tpv_lineasmultitransstock lv ON v.idviajemultitrans = lv.idviajemultitrans");
	qT.setWhere("(lv.fecharx >= '" + desde + "' OR (lv.fecharx IS NULL AND lv.cerradorx = true)) AND lv.codalmadestino = '" + codAlmacen + "' AND v.estado NOT IN ('PTE ENVIO', 'ENVIADO PARCIAL', 'EN TRANSITO', 'RECIBIDO PARCIAL') AND v.recepcioncompletada AND v.fecha > '2016-12-31' GROUP BY lv.idviajemultitrans, lv.estado, lv.barcode, lv.numlinea ORDER BY lv.idviajemultitrans");
	if (!qT.exec()){
		return false;
	}

	var idViaje, estadoC, estadoT, barCode;
	var idViajePrevio = false;
	while (qT.next()) {
		barCode = qT.value("lv.barcode");
		idViaje = qT.value("lv.idviajemultitrans");

		if(!idViajePrevio || idViaje != idViajePrevio){
			estadoT = qT.value("lv.estado");
			estadoC = AQUtil.sqlSelect("tpv_lineasmultitransstock", "estado", "idviajemultitrans = '" + idViaje + "' AND barcode = '" + barCode + "'");
			if(!estadoC){
				estadoC = "NO EXISTE";
			}

			if (estadoC == estadoT || (estadoC != estadoT && estadoC == "CANCELADO")){
				continue;
			}
			
			flfactppal.iface.pub_appendTextToLogFile(flfactalma.iface.logName_, "Corrección Líneas de viaje: " + idViaje);

			if (corregir) {
				if(!AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET rxcentral = 'PTE',rxtienda = 'OK' WHERE idviajemultitrans = '" + idViaje + "'", cx)){
					return false;
				}
				idViajePrevio = idViaje;
				debug("////////////////// lineas recepcion viaje actualizada: " + idViaje);
			}
		}
	}

	return true;
}

function elgansoCtr_egSincronizarViajesRecepcionTiendaIncompletos(codTienda, desde, corregir, silent)
{
	var _i = this.iface;

	if(!silent || silent == undefined){
		return _i.__egSincronizarViajesRecepcionTiendaIncompletos(codTienda, desde, corregir);
	}
	
	cx = codTienda;
	var codAlmacen = AQUtil.sqlSelect("tpv_tiendas","codalmacen","codtienda = '" + codTienda + "'");

	var qC = new FLSqlQuery ("");
	qC.setSelect("v.idviajemultitrans, v.codalmaorigen, v.estado, COUNT(*)");
	qC.setFrom("tpv_viajesmultitransstock v INNER JOIN tpv_lineasmultitransstock lv ON v.idviajemultitrans = lv.idviajemultitrans");
	qC.setWhere("lv.fechaex >= '" + desde + "' AND lv.codalmadestino = '" + codAlmacen + "' AND v.enviocompletado AND NOT v.recepcioncompletada AND v.fecha > '2016-12-31' GROUP BY v.idviajemultitrans, v.codalmaorigen, v.estado ORDER BY v.idviajemultitrans");
	if (!qC.exec()){
		return false;
	}

	var lineasC, lineasT;
	var idViaje, estadoC, estadoT, codAlmaOrigen;
	while (qC.next()) {
		idViaje = qC.value("v.idviajemultitrans");
		codAlmaOrigen = qC.value("v.codalmaorigen");
		estadoC = qC.value("v.estado");
		lineasC = qC.value("COUNT(*)");
		lineasT = AQUtil.sqlSelect("tpv_lineasmultitransstock", "COUNT(*)", "idviajemultitrans = '" + idViaje + "'", "", cx);
		estadoT = AQUtil.sqlSelect("tpv_viajesmultitransstock", "estado", "idviajemultitrans = '" + idViaje + "'", "", cx);
		if(!estadoT){
			estadoT = "NO EXISTE";
		}

		lineasT = isNaN(lineasT) ? 0 : lineasT;
		lineasC = isNaN(lineasC) ? 0 : lineasC;

		if (lineasT == lineasC){
			continue;
		}

		flfactppal.iface.pub_appendTextToLogFile(flfactalma.iface.logName_, "\n" + "Recepción C/T Errónea. " + codTienda + ";" + idViaje + ";" + estadoC + ";" + lineasC + ";" + estadoT + ";" + lineasT + ";" + codAlmaOrigen);
		
		if (corregir) {
			if(!AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET rxtienda = 'PTE' WHERE idviajemultitrans = '" + idViaje + "'")){
				return false;
			}
			if(!AQUtil.execSql("UPDATE tpv_viajesmultitransstock SET ptesincroenvio = true WHERE idviajemultitrans = '" + idViaje + "'")){
				return false;
			}
			debug("////////////////// lineas envio recepcion viaje actualizada: " + idViaje);
		}
	}

	return true;
}

function elgansoCtr_reiniciaSaldoTarjetasEmp(oParam)
{
	var _fA = flfactalma.iface;
	var _fP = flfactppal.iface;
	var _fTpv = flfact_tpv.iface;
	
	var silent = !sys.interactiveGUI();
	var nombreLog;
	if (silent) {
		var nombreLog = formtpv_tiendas.iface.dameNombreLog("SALDO_TJT_EMP");
		nombreLog_ = _fA.pub_ponLogName(nombreLog);
		
		var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
		if (!dirLog || dirLog == "") {
			dirLog = Dir.home;
		}
		dirLog += dirLog.endsWith("/") ? "" : "/";
		var logFile_ = dirLog + nombreLog;
		if (!_fP.pub_abreLogFile(nombreLog_, logFile_)) {
			sys.infoMsgBox("No se ha creado el fichero del log de la sincronización.");
		}
	}
	
	var hoy = new Date;
	var saldoMax; //= _fA.pub_valorDefectoAlmacen("puntosempleadomes");
	var saldo, incremento;
	
	var curMP = new FLSqlCursor("tpv_movpuntos");
	curMP.setActivatedCommitActions(false);
	
	var curT = new FLSqlCursor("tpv_tarjetaspuntos");
	curT.select("(deempleado OR dtoespecial) AND activa");
	
	if (silent) {
		_fP.pub_appendTextToLogFile(nombreLog_, sys.translate("Reiniciando saldos tarjetas empleados"));
		_fA.pub_creaPDSilent(curT.size());
	} else {
		AQUtil.createProgressDialog(sys.translate("Reiniciando saldos tarjetas empleados"), curT.size());
	}
	var p = 0;
	while (curT.next()) {
		curT.setModeAccess(curT.Edit);
		curT.refreshBuffer();
		if (silent) {
			_fP.pub_appendTextToLogFile(nombreLog_, sys.translate("Actualizando saldo de tarjeta %1").arg(curT.valueBuffer("codtarjetapuntos")));
		} else {
			AQUtil.setLabelText(sys.translate("Actualizando saldo de tarjeta %1").arg(curT.valueBuffer("codtarjetapuntos")));
			AQUtil.setProgress(p++);
		}
		
		if(curT.valueBuffer("deempleado")) {
			saldoMax = curT.valueBuffer("topemensual");
			if(!saldoMax || saldoMax == "" || saldoMax == 0)
				saldoMax = _fA.pub_valorDefectoAlmacen("puntosempleadomes");
		}
		else {
			saldoMax = curT.valueBuffer("topemensual");
		}
		//saldo = curT.valueBuffer("saldopuntos");
		saldo = parseFloat(formRecordtpv_tarjetaspuntos.iface.pub_commonCalculateField("saldopuntos", curT));

		/*incremento = saldoMax - saldo;
		curMP.setModeAccess(curMP.Insert);
		curMP.refreshBuffer();
		curMP.setValueBuffer("codtarjetapuntos", curT.valueBuffer("codtarjetapuntos"));
		curMP.setValueBuffer("fecha", hoy);
		curMP.setValueBuffer("canpuntos", incremento);
		curMP.setValueBuffer("codtienda", "ACEN");
		if (!_fTpv.controlIdSincroMovPuntos(curMP)) {
			if (silent) {
				_fP.pub_appendTextToLogFile(nombreLog_, sys.translate("Error al calcular IdSincro para %1").arg(curT.valueBuffer("codtarjetapuntos")));
			} else {
				AQUtil.destroyProgressDialog();
				sys.warnMsgBox(sys.translate("Error al calcular IdSincro para %1").arg(curT.valueBuffer("codtarjetapuntos")));
			}
			return false;
		}
		if (!curMP.commitBuffer()) {
			if (silent) {
				_fP.pub_appendTextToLogFile(nombreLog_, sys.translate("Error al guardar el movimiento de puntos para %1").arg(curT.valueBuffer("codtarjetapuntos")));
			} else {
				AQUtil.destroyProgressDialog();
				sys.warnMsgBox(sys.translate("Error al guardar el movimiento de puntos para %1").arg(curT.valueBuffer("codtarjetapuntos")));
			}
			return false;
		}

		*/
		var hoy = new Date();
		curT.setValueBuffer("fechamod", hoy);
		curT.setValueBuffer("saldopuntos", saldo);
		curT.setValueBuffer("saldopuntossinc", saldo);
		if (!curT.commitBuffer()) {
			if (silent) {
				_fP.pub_appendTextToLogFile(nombreLog_, sys.translate("Error al guardar la tarjeta %1").arg(curT.valueBuffer("codtarjetapuntos")));
			} else {
				AQUtil.destroyProgressDialog();
				sys.warnMsgBox(sys.translate("Error al guardar la tarjeta %1").arg(curT.valueBuffer("codtarjetapuntos")));
			}
			return false;
		}
	}
	if (!silent) {
		AQUtil.destroyProgressDialog();
	}
	return true;
}

function elgansoCtr_egCorregirLineasViajesRxSinMovimiento()
{
	var _i = this.iface;

	var fecha = new Date;

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var diadesde = new DateEdit;
	diadesde.label = sys.translate("Fecha desde: ");
	diadesde.date = fecha;
	dialog.add(diadesde);

	if (!dialog.exec()) {
		return false;
	}
	
	fecha = diadesde.date;

	var p;
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var q = new FLSqlQuery();

	q.setSelect("l.idlinea");
	q.setFrom("tpv_lineasmultitransstock l LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineattd");
	q.setWhere("fecharx >= '" + fecha + "' AND NOT l.cerradorx AND ((cantpterecibir > 0 AND cantrecibida = 0) OR (cantrecibida > 0)) AND ms.idlineattd IS NULL and l.estado <> 'CANCELADO'");
	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	AQUtil.createProgressDialog("Corrigiendo movimientos de stock en líneas de viaje destino...", q.size());
	p = 0;
	while(q.next()) {
		AQUtil.setProgress(p++);
		curL.select("idlinea = " + q.value("l.idlinea"));
		if(!curL.first()) {
			debug("NO FIRST");
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNo First"));
			return false;
		}
		curL.setModeAccess(curL.Browse);
		curL.refreshBuffer();

		if (!flfactalma.iface.borrarEstructuraMTDestino(curL)) {
			AQUtil.destroyProgressDialog();
			debug("NO borrarEstructuraMTDestino");
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNO borrarEstructuraMTDestino"));
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTDestino(curL)) {
			AQUtil.destroyProgressDialog();
			debug("NO generarEstructuraMTDestino");
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNO generarEstructuraMTDestino"));
			return false;
		}
		/*if(!curL.commitBuffer()) {
			debug("NO commit");
			continue;
		}*/
	}
	AQUtil.destroyProgressDialog();

	return true;
}


function elgansoCtr_eliminarAlbaranesCreadosDuplicadosCEN()
{
	var _i = this.iface;

	var fecha = new Date;

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var diadesde = new DateEdit;
	diadesde.label = sys.translate("Fecha: ");
	diadesde.date = fecha;
	dialog.add(diadesde);

	if (!dialog.exec()) {
		return false;
	}
	
	fecha = diadesde.date;
	var q = new FLSqlQuery();

	q.setSelect("a.numproveedor, a.total, a.codproveedor, a.codalmacen");
	q.setFrom("albaranesprov a");
	q.setWhere("fecha >= '" + fecha + "' AND a.numproveedor is not null GROUP BY a.numproveedor, a.total, a.codproveedor, a.codalmacen HAVING count(*) > 1 ORDER BY a.numproveedor, a.total");
	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	AQUtil.createProgressDialog("Eliminando albaranes CEN duplicados...", q.size());
	p = 0;

	debug(q.sql());

	var curAlbaranesProv = new FLSqlCursor("albaranesprov");	

	while(q.next()) {
		AQUtil.setProgress(p++);

		curAlbaranesProv.select("fecha >= '" + fecha + "' AND numproveedor = '" + q.value("a.numproveedor") + "' AND total = " + q.value("a.total") + " AND codproveedor = '" + q.value("a.codproveedor") + "' AND codalmacen = '" + q.value("a.codalmacen") + "' ORDER BY idalbaran");
		
		if(!curAlbaranesProv.first()){
			continue;
		}

		while(curAlbaranesProv.next()){
			curAlbaranesProv.setModeAccess(curAlbaranesProv.Del);
			curAlbaranesProv.refreshBuffer();
			if(!curAlbaranesProv.commitBuffer()){
				debug(sys.translate("Ocurrió un error borrando el albarán: %1").arg(curAlbaranesProv.valueBuffer("codigo")));
				continue;
			}
		}	
	}

	AQUtil.destroyProgressDialog();
	return true;
}


function elgansoCtr_eliminarAlbaranesCreadosDuplicadosCenDesde()
{
	var _i = this.iface;

	var fecha = new Date;

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fechas");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var diaDesdeComprobacion = new DateEdit;
	diaDesdeComprobacion.label = sys.translate("Fecha Desde Comprobación: ");
	diaDesdeComprobacion.date = fecha;
	dialog.add(diaDesdeComprobacion);

	var diaDesdeEliminar = new DateEdit;
	diaDesdeEliminar.label = sys.translate("Fecha Desde Eliminar: ");
	diaDesdeEliminar.date = fecha;
	dialog.add(diaDesdeEliminar);

	if (!dialog.exec()) {
		return false;
	}
	
	var fechaDesdeC = diaDesdeComprobacion.date;
	var fechaDesdeE = diaDesdeEliminar.date;
	var q = new FLSqlQuery();

	q.setSelect("a.numproveedor, a.total, a.codproveedor, a.codalmacen");
	q.setFrom("albaranesprov a");
	q.setWhere("fecha >= '" + fechaDesdeC + "' AND a.numproveedor is not null GROUP BY a.numproveedor, a.total, a.codproveedor, a.codalmacen HAVING count(*) > 1 ORDER BY a.numproveedor, a.total");
	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	AQUtil.createProgressDialog("Eliminando albaranes CEN duplicados...", q.size());
	p = 0;

	debug(q.sql());

	var curAlbaranesProv = new FLSqlCursor("albaranesprov");	

	while(q.next()) {
		AQUtil.setProgress(p++);

		curAlbaranesProv.select("fecha >= '" + fechaDesdeE + "' AND numproveedor = '" + q.value("a.numproveedor") + "' AND total = " + q.value("a.total") + " AND codproveedor = '" + q.value("a.codproveedor") + "' AND codalmacen = '" + q.value("a.codalmacen") + "' ORDER BY idalbaran");

		while(curAlbaranesProv.next()){
			curAlbaranesProv.setModeAccess(curAlbaranesProv.Del);
			curAlbaranesProv.refreshBuffer();
			if(!curAlbaranesProv.commitBuffer()){
				debug(sys.translate("Ocurrió un error borrando el albarán: %1").arg(curAlbaranesProv.valueBuffer("codigo")));
				continue;
			}
		}	
	}

	AQUtil.destroyProgressDialog();
	return true;
}

function elgansoCtr_egCorregirLineasViajesTxSinMovimiento()
{
	var _i = this.iface;

	var fecha = new Date;

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var diadesde = new DateEdit;
	diadesde.label = sys.translate("Fecha desde: ");
	diadesde.date = fecha;
	dialog.add(diadesde);

	if (!dialog.exec()) {
		return false;
	}
	
	fecha = diadesde.date;

	var p;
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var q = new FLSqlQuery();

	q.setSelect("l.idlinea");
	q.setFrom("tpv_lineasmultitransstock l LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineatto");
	q.setWhere("(fechaex >= '" + fecha + "' AND NOT l.cerradorx AND ((cantpteenvio > 0 AND cantenviada = 0) OR (cantenviada > 0)) AND ms.idlineatto IS NULL and l.estado <> 'CANCELADO') OR (fechaex IS NULL AND NOT l.cerradorx AND ((cantpteenvio > 0 AND cantenviada = 0)) AND ms.idlineatto IS NULL and l.estado = 'PTE ENVIO')");
	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	AQUtil.createProgressDialog("Corrigiendo movimientos de stock en líneas de viaje origen...", q.size());
	p = 0;
	while(q.next()) {
		AQUtil.setProgress(p++);
		curL.select("idlinea = " + q.value("l.idlinea"));
		if(!curL.first()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNo first idlinea viaje %1").arg(q.value("l.idlinea")));
			return false;
		}
		curL.setModeAccess(curL.Browse);
		curL.refreshBuffer();

		if (!flfactalma.iface.borrarEstructuraMTOrigen(curL)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNo borrarEstructuraMTOrigen idlinea viaje %1").arg(q.value("l.idlinea")));
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTOrigen(curL)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\n No generarEstructuraMTOrigen idlinea viaje %1").arg(q.value("l.idlinea")));
			return false;
		}
		/*if(!curL.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			debug("////////////////////// idLinea: " + q.value("l.idlinea"));
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\n No commitBuffer idlinea viaje %1").arg(q.value("l.idlinea")));
			return false;
		}*/
	}
	AQUtil.destroyProgressDialog();

	return true;
}

function elgansoCtr_egSincronizarInventariosDiferencias(codTienda, silent)
{
	var _i = this.iface;

	cx = codTienda;

	var codAlmacen = AQUtil.sqlSelect("tpv_tiendas","codalmacen","codtienda = '" + codTienda + "'");
	
	var hoy = flfactppal.iface.dameFechaActual();
	var fechaMinima = AQUtil.addMonths(hoy, -1);
	//var fechaMinima = AQUtil.sqlSelect("eg_valoracionperiodicaexistencias", "MAX(fechafin)", "1 = 1");

	if(!fechaMinima){
		return false;
	}

	var qT = new FLSqlQuery ("", cx);
	qT.setSelect("i.idsincro, COUNT(*)");
	qT.setFrom("eg_inventarios i INNER JOIN lineasregstocks l ON i.idsincro = l.egidsincroinv");
	qT.setWhere("i.total = false AND i.codAlmacen = '" + codAlmacen + "' AND i.enviado AND i.sincronizado AND l.fecha > '" + fechaMinima + "' GROUP BY i.idsincro ORDER BY i.idsincro");


	if (!qT.exec()){
		return false;
	}

	var lineasRegC, lineasRegT;
	var idViaje;
	while (qT.next()) {
		idInv = qT.value("i.idsincro");
		lineasRegT = qT.value("COUNT(*)");
		lineasRegC = AQUtil.sqlSelect("lineasregstocks", "COUNT(*)", "egidsincroinv = '" + idInv + "'");

		lineasRegT = isNaN(lineasRegT) ? 0 : lineasRegT;
		lineasRegC = isNaN(lineasRegC) ? 0 : lineasRegC;
	
		if (lineasRegC == lineasRegT){
			continue;
		}		

		flfactppal.iface.pub_appendTextToLogFile(flfactalma.iface.logName_, "\n" + "Inventario erróneo. " + codTienda + ";" + idInv + "; Num.líneas en tienda: " + lineasRegC + "; Num. líneas en central: " + lineasRegT);

		AQUtil.execSql("UPDATE lineasregstocks SET sincronizado = false WHERE egidsincroinv = '" + idInv + "'", cx);
		AQUtil.execSql("UPDATE eg_inventarios SET sincronizado = false WHERE idsincro = '" + idInv + "'", cx);
		AQUtil.execSql("UPDATE lineasregstocks l SET barcode = (SELECT barcode FROM stocks WHERE idstock = l.idstock) WHERE egidsincroinv = '" + idInv + "' AND barcode IS NULL", cx);
		AQUtil.execSql("UPDATE lineasregstocks l SET talla = (SELECT talla FROM stocks WHERE idstock = l.idstock) WHERE egidsincroinv = '" + idInv + "' AND talla IS NULL", cx);
		
	}

	return true;
}

function elgansoCtr_diagnosticoCtr(oParam)
{
	var _i = this.iface;

	var horaInitDiagnostico = flfactppal.iface.dameTiempoActual();
	
	var oP = {
		silent : true
	};
	
	var _fA = flfactalma.iface;
	var _fP = flfactppal.iface;
	var _fTpv = flfact_tpv.iface;
	
	var silent = !sys.interactiveGUI();
	var nombreLog;
	if (silent) {
		var nombreLog = formtpv_tiendas.iface.dameNombreLog("DIAGNOSTICO");
		nombreLog_ = _fA.pub_ponLogName(nombreLog);
		
		var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
		if (!dirLog || dirLog == "") {
			dirLog = Dir.home;
		}
		dirLog += dirLog.endsWith("/") ? "" : "/";
		var logFile_ = dirLog + nombreLog;
		if (!_fP.pub_abreLogFile(nombreLog_, logFile_)) {
			sys.infoMsgBox("No se ha creado el fichero del log de la sincronización.");
		}
		_fP.pub_appendTextToLogFile(nombreLog_, sys.translate("Comenzando diagnóstico"));
	}	
	
	var status = "ok";
	var msg = "", msgLog;
	var funciones = [];
	funciones.push(["egCheckInventariosDiffs", sys.translate("Control de diferencias entre inventarios en la central y en la tienda.")]);
	funciones.push(["egCheckStocks", sys.translate("Busca todas las diferencias de stocks entre central y una tienda y las vuelca a un log")]);
	
	var oRes;
	var f;
	for (var i = 0; i < funciones.length; i++) {
		f = new Function("oP", "return formmt_procesos.iface." + funciones[i][0] + "(oP);");
		if (silent) {
			_fP.pub_appendTextToLogFile(nombreLog_, funciones[i][1]);
		}
		oRes = f(oP);
		if (!oRes) {
			status = "error"
			msgLog = sys.translate("ERROR en \"%1\"").arg(funciones[i, 1]);
		} else {
			if(status == "ok")
				status = oRes.status;
			else if(oRes.status == "error")
				status = oRes.status;

			if(oRes.msg != "")
				msgLog = oRes.msg;
			else if(oRes.status == "ok")
				msgLog = sys.translate("OK");
			else if(oRes.status == "warn")
				msgLog = sys.translate("Hay errores leves");
			else 
				msgLog = sys.translate("¡Error! Hay procesos que requieren tu atención");
		}
		//msg += msg == "" ? oRes.desc : "\n\n" + oRes.desc;
		msg += "\n--------------------------------------------------------------------------";
		msg += msgLog != "" ? "\n" + msgLog : "";
		if (silent) {
			_fP.pub_appendTextToLogFile(nombreLog_, msgLog);
		}
	}
	if(status == "ok")
		asunto = sys.translate("Diagnóstico ElGanso: comprobaciones correctas");
	else if(status == "warn")
		asunto = sys.translate("Diagnóstico ElGanso: hay errores leves.");
	else 
		asunto = sys.translate("¡ERROR! Diagnóstico ElGanso: hay procesos que requieren tu atención");

	if (!silent) {
		sys.infoMsgBox(asunto + "\n" + msg);
	}
	if((status != "ok") || _i.egCheckRangoHorasEsquema("MAIL_DIAGNOSTICO", horaInitDiagnostico))
		_i.enviaCorreoDia(asunto, msg);
	return true;
}

function elgansoCtr_egCheckInventarios(tiendas, paramCorregir)
{
	var _i = this.iface;

	var oRes = {"status" : "ok", "msg" : ""};
	var initCheck = flfactppal.iface.dameTiempoActual();
	paramCorregir = false;

	var silent = true;
	if (typeof(tiendas) != "string") {
		tiendas = Input.getText(sys.translate("Tienda"));
		silent = false;
		if (!tiendas) {
			oRes.msg += "\n" + sys.translate("Error en checkInventarios. No se han informado tiendas a comprobar.");
			oRes.status = "warn";
			return oRes;
		}
		//corregir = MessageBox.information(sys.translate("¿Corregir?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton) == MessageBox.Yes;
	} else {
		//corregir = paramCorregir == "T";
	}
	tiendas = _i.dameTiendasXEsquema(tiendas, "CHECK_INVENTARIOS");

	var aTiendas = tiendas.split(",");

	var nombreLog = formtpv_tiendas.iface.dameNombreLog("CHECKINVENTARIOS");
	var dirLog = flfact_tpv.iface.pub_valorDefectoTPV("dirlogs");

	if (!dirLog || dirLog == ""){
		dirLog = Dir.home;
	}
	var nombreFile;
	if (dirLog.endsWith("/")){
		nombreFile = dirLog + nombreLog;
	}
	else{
		nombreFile = dirLog + "/" + nombreLog;
	}

	if(!flfactppal.iface.pub_abreLogFile("CHECKINVENTARIOS", nombreFile)){
		sys.infoMsgBox("No se ha creado el fichero del log de comprobación de inventarios.");
	}

	var codTienda, invError;
	for (var i = 0; i < aTiendas.length; i++) {
		codTienda = aTiendas[i];
		invError = 0;
		flfactppal.iface.pub_appendTextToLogFile("CHECKINVENTARIOS", "\n" + "Comprobando " + codTienda);
	
		if (!formtpv_tiendas.iface.pub_conectar(codTienda, silent)) {
			oRes.msg += "\n" + sys.translate("Error en checkInventarios. No se ha podido conectar con la tienda %1").arg(codTienda);
			continue;
		}

		cx = codTienda;
		var codAlmacen = AQUtil.sqlSelect("tpv_tiendas", "codalmacen", "codtienda = '" + codTienda + "'");
			
		var qT = new FLSqlQuery ("", cx);
		qT.setSelect("i.idsincro, COUNT(*)");
		qT.setFrom("eg_inventarios i LEFT OUTER JOIN lineasregstocks l ON i.idsincro = l.egidsincroinv");
		qT.setWhere("i.codAlmacen = '" + codAlmacen + "' AND i.enviado AND i.sincronizado GROUP BY i.idsincro ORDER BY i.idsincro");
		if (!qT.exec()){
			return oRes;
		}

		var idInv, lineasRegT, lineasRegC;
		while(qT.next()) {
			idInv = qT.value("i.idsincro");
			lineasRegT = qT.value("COUNT(*)");
			lineasRegC = AQUtil.sqlSelect("lineasregstocks", "COUNT(*)", "egidsincroinv = '" + idInv + "'");

			lineasRegT = isNaN(lineasRegT) ? 0 : lineasRegT;
			lineasRegC = isNaN(lineasRegC) ? 0 : lineasRegC;

			if (lineasRegC == lineasRegT)
				continue;
			
			invError++;
			flfactppal.iface.pub_appendTextToLogFile("CHECKINVENTARIOS", "\n" + "Inventario erróneo. " + codTienda + ";" + idInv + ";" + lineasRegC + ";" + lineasRegT);

			/*if (corregir) {
				AQUtil.execSql("UPDATE lineasregstocks SET sincronizado = false WHERE egidsincroinv = '" + idInv + "'", cx);
				AQUtil.execSql("UPDATE eg_inventarios SET sincronizado = false WHERE idsincro = '" + idInv + "'", cx);
				AQUtil.execSql("UPDATE lineasregstocks l SET barcode = (SELECT barcode FROM stocks WHERE idstock = l.idstock) WHERE egidsincroinv = '" + idInv + "' AND barcode IS NULL", cx);
				AQUtil.execSql("UPDATE lineasregstocks l SET talla = (SELECT talla FROM stocks WHERE idstock = l.idstock) WHERE egidsincroinv = '" + idInv + "' AND talla IS NULL", cx);
			}*/
		}
		oRes.msg += "\n" + codTienda + ". " + invError + " inventarios erróneos.";

		/*if (corregir) {
			flfactppal.iface.pub_appendTextToLogFile("CHECKINVENTARIOS", "\n" + "Sincronizando.");
			formtpv_tiendas.iface.silentSincro(codTienda, "INVENTARIOS");
		}*/

		var fechaInit = initCheck.toString().left(10);
		var horaInit = initCheck.toString().right(8);

		//flfactppal.iface.pub_appendTextToLogFile("CHECKINVENTARIOS", "\n" + "Actualizando FST.");
		/*if(AQUtil.sqlSelect("tpv_fechasincrotienda", "id", "codtienda = '" + codTienda + "' AND esquema = 'CHECK_INVENTARIOS'")) {
			if(!AQUtil.sqlUpdate("tpv_fechasincrotienda", ["fechasincro", "horasincro"], [fechaInit, horaInit], "codtienda = '" + codTienda + "' AND esquema = 'CHECK_INVENTARIOS'")) {
				oRes.msg += "\n" + sys.translate("Error en checkInventarios. No se ha podido actualizar el registro de tpv_fechasincrotienda para la tienda %1").arg(codTienda);	
				oRes.status = oRes.status == "ok" ? "warn" : oRes.status;
				return oRes;
			}
		}
		else {
			if(!AQUtil.sqlInsert("tpv_fechasincrotienda", ["codtienda", "esquema", "fechasincro", "horasincro"], [codTienda, "CHECK_INVENTARIOS", fechaInit, horaInit])) {
				oRes.msg += "\n" + sys.translate("Error en checkInventarios. No se ha podido crear el registro de tpv_fechasincrotienda para la tienda %1").arg(codTienda);	
				oRes.status = oRes.status == "ok" ? "warn" : oRes.status;
				return oRes;
			}	
		}*/
		flfactppal.iface.pub_appendTextToLogFile("CHECKINVENTARIOS", "\n" + "Fin comprobación " + codTienda);
	}
	flfactppal.iface.pub_appendTextToLogFile("CHECKINVENTARIOS", "\n" + oRes.msg);
	return oRes;
}

function elgansoCtr_egCheckStocks(tiendas, paramCorregir)
{
	var _i = this.iface;
	var _f = formtpv_tiendas.iface;
	paramCorregir = false;
	var oRes = {"status" : "ok", "msg" : ""};
	var initCheck = flfactppal.iface.dameTiempoActual();

	var silent = true;
	if (typeof(tiendas) != "string") {
		tiendas = Input.getText(sys.translate("Tienda"));
		silent = false;
		if (!tiendas) {
			oRes.msg += "\n" + sys.translate("Error en checkStocks. No se han informado tiendas a comprobar.");
			//oRes.status = "warn";
			return oRes;
		}
		//corregir = MessageBox.information(sys.translate("¿Corregir?"), MessageBox.Yes, MessageBox.No, MessageBox.NoButton) == MessageBox.Yes;
	} else {
		//corregir = paramCorregir == "T";
	}
	tiendas = _i.dameTiendasXEsquema(tiendas, "CHECK_STOCK");

	var listaTiendas = tiendas.split(",");
	
	var codTienda;
	_i.inventarios_ = {};
	_i.ventasAbiertas_ = {};
	_i.enviosIncompletos_ = {};
	_i.recepcionesIncompletas_ = {};

	var nombreLog = formtpv_tiendas.iface.dameNombreLog("CHECKSTOCK");
	var dirLog = flfact_tpv.iface.pub_valorDefectoTPV("dirlogs");

	if (!dirLog || dirLog == ""){
		dirLog = Dir.home;
	}
	var nombreFile;
	if (dirLog.endsWith("/")){
		nombreFile = dirLog + nombreLog;
	}
	else{
		nombreFile = dirLog + "/" + nombreLog;
	}

	if(!flfactppal.iface.pub_abreLogFile("CHECKSTOCK", nombreFile)){
		sys.infoMsgBox("No se ha creado el fichero del log de comprobación de stocks");
	}

	for (var i = 0; i < listaTiendas.length; i++) {
		codTienda = listaTiendas[i];
	
		if (!_f.pub_conectar(codTienda, silent)) {
			flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", sys.translate("No se ha podido conectar a la tienda %1").arg(codTienda));
			continue;
		}
		var dbL = AQSql.database("default");
	  	var dbT = AQSql.database(codTienda);
	  
		var mngModT = dbT.managerModules();
	  	var mngModL = dbL.managerModules();
	  
	  	var progreso = 0, total = 0;
	  	var msg = "";
	  	var aStock = [];
	  	
		var qLocal = new FLSqlQuery;
		qLocal.setSelect("idstock, barcode, referencia, talla, cantidad");
		qLocal.setFrom("stocks");
		qLocal.setWhere("codalmacen = '" + codTienda + "' ORDER BY barcode");
		if (!qLocal.exec()) {
			oRes.msg += "\n" + sys.translate("Error en checkStocks. La consulta a la central ha fallado.");
			return oRes;
		}
		var qTienda = new FLSqlQuery("", codTienda);
		qTienda.setSelect("idstock, barcode, referencia, talla, cantidad");
		qTienda.setFrom("stocks");
		qTienda.setWhere("codalmacen = '" + codTienda + "' ORDER BY barcode");

		if (!qTienda.exec()) {
			oRes.msg += "\n" + sys.translate("Error en checkStocks. La consulta a la tienda %1 ha fallado.").arg(codTienda);
			// oRes.status = "warn";
			return oRes;
		}

		var claveL, claveT;
	  	var hayLocal = qLocal.first();
	  	var hayTienda = qTienda.first();
	  	var tabla = "stocks";
	  	
	  	if (!silent) {
			AQUtil.createProgressDialog(sys.translate("Comprobando stocks en %1...").arg(codTienda), qLocal.size());
	  	} else {
			flfactalma.iface.creaPDSilent(qLocal.size());
	  	}
	  	
	  	var cxCortada = false;
	
		while (hayLocal || hayTienda) {
			total++;
			if (!(progreso % 100)) {
			  var fakeSha = mngModT.shaOfFile(tabla); // Para evitar que se cierre dbAux
			  fakeSha = mngModL.shaOfFile(tabla);
			}
			if (!dbL.isOpen() || !dbT.isOpen()) {
				if (!flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", "CONEXIÓN CORTADA!")) {
					sys.infoMsgBox("CONEXIÓN CORTADA!");
				}
				debug("conexión cortada 2");
				cxCortada = true;
				break;
			}
			if (hayLocal && hayTienda) {
				claveL = qLocal.value("barcode");
				claveT = qTienda.value("barcode");
			
				if (claveL == claveT) {
				  	if (qLocal.value("cantidad") != qTienda.value("cantidad")) {
				  		aStock.push({ "barcode" : qLocal.value("barcode"), "idstockcentral" : qLocal.value("idstock"), "idstocktienda" : qTienda.value("idstock")});
				  		msg = "Barcode " + qLocal.value("barcode") + " referencia " + qLocal.value("referencia") + " talla " + qLocal.value("talla") + " Central: " + qLocal.value("cantidad") + " " + codTienda + ": " + qTienda.value("cantidad");
				  		debug("aStock long = " + aStock.length + " Mensaje " + msg);
				  		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
				  	}
			 		hayLocal = qLocal.next();
				    if (!silent) {
				      AQUtil.setProgress(progreso++);
				    } 
				    else {
				      flfactalma.iface.setProgressPDSilent(progreso++);
				    }
			   		hayTienda = qTienda.next();
			  	}
			 	else if (claveL > claveT) {
			  		msg = "Barcode en " + codTienda + " no existe en cental. Barcode " + qTienda.value("barcode") + " referencia " + qTienda.value("referencia") + " talla " + qTienda.value("talla");
			  		debug(msg);
			  		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
			    	hayTienda = qTienda.next();

			 	}
			 	else{
			  		msg = "Barcode en central no existe en " + codTienda + ". Barcode " + qLocal.value("barcode") + " referencia " + qLocal.value("referencia") + " talla " + qLocal.value("talla");
			  		debug(msg);
			  		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
			    	hayLocal = qLocal.next();
					if (!silent) {
					  AQUtil.setProgress(progreso++);
					} else {
					  flfactalma.iface.setProgressPDSilent(progreso++);
					}
			    }
			}
			else if (!hayLocal) {
				msg = "Barcode en " + codTienda + " no existe en cental. Barcode " + qTienda.value("barcode") + " referencia " + qTienda.value("referencia") + " talla " + qTienda.value("talla");
		  		debug(msg);
		  		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
				hayTienda = qTienda.next();
			}
			else{
		  		msg = "Barcode en central no existe en " + codTienda + ". Barcode " + qLocal.value("barcode") + " referencia " + qLocal.value("referencia") + " talla " + qLocal.value("talla");
		  		debug(msg);
		  		flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", msg);
				hayLocal = qLocal.next();
			    if (!silent) {
			      AQUtil.setProgress(progreso++);
			    } else {
			      flfactalma.iface.setProgressPDSilent(progreso++);
			    }
			}
	  }

	if (!silent) {
  		AQUtil.destroyProgressDialog();
  	}

  	if (cxCortada) {
  		continue;
  	}

	_i.canStockMal_ = 0;
	_i.canStockMalUser_ = 0;
	_i.canStockMalAuto_ = 0;

	var funcion = "compruebaStockBarcode";
	var oParam = new Object;
	oParam.errorMsg = sys.translate("Error en la función %1").arg(funcion);
	oParam.codTienda = codTienda;
	oParam.corregir = paramCorregir;
	var f = new Function("oParam", "return formmt_procesos.iface." + funcion + "(oParam)");

	for (var i = 0; i < aStock.length; i++) {
	    _i.canStockMal_++;
		oParam.oStock = aStock[i];
		
		if (!sys.runTransaction(f, oParam)) {
			oRes.msg += "\n" + sys.translate("Error en checkStocks. No se ha completado la transacción (compruebaStockBarcode).");
			return oRes;
		}
	}
	if (total > 0) {
	    oRes.msg += "\n";
		var por = (_i.canStockMal_ * 100) / total;
		por = AQUtil.roundFieldValue(por, "pedidoscli", "total");
		oRes.msg += oRes.msg == "" ? "" : "\n";
		oRes.msg += codTienda + ". Comprobados " + _i.canStockMal_ + " casos sobre " + total + " (" + por + "%)";
		
		var porUser = (_i.canStockMalUser_ * 100) / total;
		porUser = AQUtil.roundFieldValue(porUser, "pedidoscli", "total");
		oRes.msg += "\n" + codTienda + ". Stocks mal por usuario " + _i.canStockMalUser_ + " casos sobre " + total + " (" + porUser + "%)";
		
		_i.canStockMalAuto_ = _i.canStockMal_ - _i.canStockMalUser_;
		var porAuto = (_i.canStockMalAuto_ * 100) / total;
		porAuto = AQUtil.roundFieldValue(porAuto, "pedidoscli", "total");
		oRes.msg += "\n" + codTienda + ". Stocks mal automáticos " + _i.canStockMalAuto_ + " casos sobre " + total + " (" + porAuto + "%)";
		debug(oRes.msg);
			
	}

	var fechaInit = initCheck.toString().left(10);
	var horaInit = initCheck.toString().right(8);

	}
	var sInventarios = "", sVentas = "", sEnvios = "", sRecepciones = "";
	for (i in _i.inventarios_) {
		sInventarios += sys.translate("Inventario en %1 con ID.Sincro %2 no ha sido enviado").arg(_i.inventarios_[i]).arg(i) + "\n";
	}
	oRes.msg += "\n\n" + sInventarios;
	for (i in _i.ventasAbiertas_) {
		sVentas += sys.translate("Venta en %1 con código %2 no está cerrada").arg(_i.ventasAbiertas_[i]).arg(i) + "\n";
	}
	oRes.msg += "\n\n" + sVentas;
	for (i in _i.enviosIncompletos_) {
		sEnvios += sys.translate("Enví­o en %1 con código %2 no está completado").arg(_i.enviosIncompletos_[i]).arg(i) + "\n";
	}
	oRes.msg += "\n\n" + sEnvios;
	for (i in _i.recepcionesIncompletas_) {
		sRecepciones += sys.translate("Recepción en %1 con código %2 no está completada").arg(_i.recepcionesIncompletas_[i]).arg(i) + "\n";
	}
	oRes.msg += "\n\n" + sRecepciones;
	flfactppal.iface.pub_appendTextToLogFile("CHECKSTOCK", oRes.msg);

	return oRes;
}

function elgansoCtr_crearMovStockTtd()
{
	var _i = this.iface;
	var _iA = flfactalma.iface;

	var fechaMinima = AQUtil.sqlSelect("eg_valoracionperiodicaexistencias", "MAX(fechafin)", "1 = 1");
	var fechaRx = AQUtil.addDays(fechaMinima, 1);

	var q = new FLSqlQuery();	
	
	q.setSelect("l.idlinea, l.fecharx");
	q.setFrom("tpv_lineasmultitransstock l inner join movistock ms1 on l.idlinea = ms1.idlineatto inner join stocks s1 on ms1.idstock = s1.idstock left outer join movistock ms2 on l.idlinea = ms2.idlineattd and ms2.idstock = ms1.idstock");
	//q.setWhere("l.estado IN ('RECIBIDO', 'CANCELADO', 'RECIBIDO PARCIAL') and s1.codalmacen like 'TR%' and ms2.idmovimiento is null AND (l.fecharx > '" + fechaMinima + "' OR (l.fecharx is null AND ms1.fechareal > '" + fechaMinima + "')) ORDER BY l.idlinea");
	q.setWhere("l.estado IN ('RECIBIDO', 'CANCELADO', 'RECIBIDO PARCIAL') and s1.codalmacen like 'TR%' and ms2.idmovimiento is null ORDER BY l.idlinea");
	debug("****************************************** sql: "+ q.sql());
	
	if (!q.exec()){
		return false;
	} 
	
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var p = 0;
	var cantRecibida;
	AQUtil.createProgressDialog(sys.translate("Procesando movimientos ttd..." ), q.size());

	while(q.next())	{	
		AQUtil.setProgress(p++);
		if(!q.value("l.fecharx") || q.value("l.idlinea") == ''){
			if (!AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET fecharx = '" + fechaRx + "' WHERE idlinea = " + q.value("l.idlinea"))) {
				return false;
			}
		}

		curL.select("idlinea = " + q.value("l.idlinea"));
		
		if (curL.first()) {
			curL.setModeAccess(curL.Browse);
			curL.refreshBuffer();
			
			if (!_iA.borrarEstructuraMTDestino(curL)) {
				continue;
			}
			if (!_iA.generarEstructuraMTDestino(curL)) {
				continue;
			}
		}
		else{
			if (!_iA.generarEstructuraMTDestino(curL)) {
				continue;
			}			
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	
	return true;
}

function elgansoCtr_revisarPedidosMayor()
{
	var _i = this.iface;
	
	var hoy = new Date();
	var q = new FLSqlQuery();

	q.setSelect("p.codigo,p.codcliente,p.direccion,p.codpostal,p.ciudad,p.provincia, p.codpais");
	q.setFrom("pedidoscli p");
	q.setWhere("p.servido <> 'Sí' AND p.fecha >= '2016-01-01' AND (codserie = 'MY' OR codserie = 'EM') AND (p.ciudad is null OR p.codpais is null OR p.direccion is null OR p.provincia is null OR p.codpostal is null OR p.codcliente is null) GROUP BY p.codigo, p.codigo,p.codcliente,p.direccion,p.codpostal,p.ciudad,p.provincia, p.codpais order by p.codigo");
	
	debug(q.sql());
	if (!q.exec()) {
		return false;
	}

	if(q.size() <= 0){
		sys.infoMsgBox("No hay pedidos pendientes de procesar.");
		return true;
	}
	
	var nombreLog = formtpv_tiendas.iface.dameNombreLog("pedidosMayor");
	var dirLog = flfact_tpv.iface.pub_valorDefectoTPV("dirlogs");

	if (!dirLog || dirLog == ""){
		dirLog = Dir.home;
	}
	var nombreFile;
	if (dirLog.endsWith("/")){
		nombreFile = dirLog + nombreLog;
	}
	else{
		nombreFile = dirLog + "/" + nombreLog;
	}

	if(!flfactppal.iface.pub_abreLogFile(nombreLog, nombreFile)){
		sys.infoMsgBox("No se ha creado el fichero del log de comprobación de pedidos de mayor con datos incompletos.");
	}

	while (q.next()) {

	    var codPedido = q.value("p.codigo");
	
		if(!codPedido){
			if(!flfactppal.iface.pub_appendTextToLogFile(nombreLog, "No existe el código de pedido")){
				debug("No existe el código de pedido.");
			}
		}
		
		var nombreCliente = AQUtil.sqlSelect("clientes","nombre","codcliente = '" + q.value("p.codcliente") + "'");
		
		if(!nombreCliente){
			if(!flfactppal.iface.pub_appendTextToLogFile(nombreLog, "No se localiza el nombre del cliente: " + q.value("p.codcliente"))){
				debug("No se localiza el nombre del cliente: " + q.valueBuffer("p.codcliente"));
			}
		}
		
		var ciudad = q.value("p.ciudad");

		if(!ciudad){
			if(!flfactppal.iface.pub_appendTextToLogFile(nombreLog, "No se existe la ciudad en el pedido: " + q.value("p.codigo"))){
				debug("No se existe la ciudad en el pedido: " + q.value("p.codigo"));
			}
		}

		var codPais = q.value("p.codpais");

		if(!codPais){
			if(!flfactppal.iface.pub_appendTextToLogFile(nombreLog, "No se existe el país en el pedido: " + q.value("p.codigo"))){
				debug("No se existe el país en el pedido: " + q.value("p.codigo"));
			}
		}

		var provincia = q.value("p.provincia");

		if(!provincia){
			if(!flfactppal.iface.pub_appendTextToLogFile(nombreLog, "No se existe la provincia en el pedido: " + q.value("p.codigo"))){
				debug("No se existe la provincia en el pedido: " + q.value("p.codigo"));
			}
		}

		var direccion = q.value("p.direccion");

		if(!direccion){
			if(!flfactppal.iface.pub_appendTextToLogFile(nombreLog, "No se existe la dirección en el pedido: " + q.value("p.codigo"))){
				debug("No se existe la dirección en el pedido: " + q.value("p.codigo"));
			}
		}

		var codPostal = q.value("p.codpostal");

		if(!codPostal){
			if(!flfactppal.iface.pub_appendTextToLogFile(nombreLog, "No se existe el código postal en el pedido: " + q.value("p.codigo"))){
				debug("No se existe el código postal en el pedido: " + q.value("p.codigo"));
			}
		}
	}

	return true;
}

function elgansoCtr_generarReposicionWEB()
{
	var _i = this.iface;

	var nombreLog = "REPOSICIONWEB" + new Date() + ".log";
	_i.nombreLog_ = flfactalma.iface.pub_ponLogName(nombreLog);
	var dirLog = flfact_tpv.iface.pub_valorDefectoTPV("dirlogs");
	if(!dirLog || dirLog == ""){
		dirLog = Dir.home;
	}
	
	if(dirLog.endsWith("/")) {
		_i.nombreFile_ = dirLog + nombreLog;
	}	else{
		_i.nombreFile_ = dirLog + "/" + nombreLog;
	}

	if(!flfactppal.iface.pub_abreLogFile(nombreLog, _i.nombreFile_)){
		sys.infoMsgBox("No se ha creado el fichero del log de comprobación de stocks");
	}

	var oParam = new Object;
	oParam.hoy = new Date();
	oParam.fechaUltReg = AQUtil.sqlSelect("tpv_fechasincrotienda", "fechasincro", "codtienda = 'WEBM' AND esquema = 'SOLICITUD_REPOSICION'");
	
	if(!oParam.fechaUltReg){
		oParam.fechaUltReg = oParam.hoy;
	}

	flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Lanzando consulta dameConsultaHistoricoPedWeb");
	oParam.qHPW = _i.dameConsultaHistoricoPedWeb(oParam);
	flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Lanzando consulta dameConsultaOutStock");
	oParam.qOS = _i.dameConsultaOutStock(oParam);

	if(!_i.noHayDatosReposicion(oParam)){
		flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No hay datos para realizar la solicitud de reposición.");
		sys.errorMsgBox(sys.translate("No hay datos para realizar la solicitud de reposición."));
		return true;
	}

	flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Creando cabecera de la solicitud.");
	oParam.codReposicion = _i.crearCabeceraSolicitud(oParam.hoy);

	if(!oParam.codReposicion){
		return false;
	}

	if(!_i.insertarLineasSolicitud(oParam)){
		return false;
	}
	
	if (!formtpv_tiendas.iface.marcaFechaSincroTienda("WEBM", "SOLICITUD_REPOSICION", oParam.hoy)) {
		return false;
	}

	if(!formtpv_tiendas.iface.desconectar("WEBM", false)){
		return false;
	}

	return true;
}

function elgansoCtr_noHayDatosReposicion(oParam)
{
	var _i = this.iface;

	if(oParam.qHPW.size() == 0 && oParam.qOS.size() == 0) {
		return false;
	}

	return true;
}

function elgansoCtr_crearCabeceraSolicitud(fechaReposicion)
{
	var _i = this.iface;
	
	var curReposicion = new FLSqlCursor("eg_solicitudreposicion");

	curReposicion.setModeAccess(curReposicion.Insert);
	curReposicion.refreshBuffer();
	curReposicion.setValueBuffer("enviado", true);
	curReposicion.setValueBuffer("codtpv_agente", 9999);
	curReposicion.setValueBuffer("codalmacen", "AWEB");
	curReposicion.setValueBuffer("fecha", fechaReposicion);

	if (!curReposicion.commitBuffer()) {
		return false;
	}

	return curReposicion.valueBuffer("codigo");
}

function elgansoCtr_insertarLineasSolicitud(oParam)
{
	var _i = this.iface;
	
	flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Insertar insertarHistoricoPedWeb.");
	if(!_i.insertarHistoricoPedWeb(oParam)){
		return false;
	}

	flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Insertar insertarOutStock.");
	if(!_i.insertarOutStock(oParam)){
		return false;
	}

	return true;
}

function elgansoCtr_insertarHistoricoPedWeb(oParam)
{
	var _i = this.iface;
	
	var q = oParam.qHPW;
	
	var codReposicion = oParam.codReposicion;

	var curLinea = new FLSqlCursor("eg_lineassolicitudreposicion");

	while(q.next()){
		if(q.value("SUM(pw.cantidad)") <= 0){
			continue;
		}
		curLinea.setModeAccess(curLinea.Insert);
		curLinea.refreshBuffer();

		curLinea.setValueBuffer("codsolicitud", codReposicion);
		curLinea.setValueBuffer("referencia", q.value("pw.referencia"));
		curLinea.setValueBuffer("barcode", q.value("pw.barcode"));
		curLinea.setValueBuffer("descripcion", q.value("pw.descripcion"));
		curLinea.setValueBuffer("codtalla", q.value("pw.talla"));
		curLinea.setValueBuffer("cantidad", parseFloat(q.value("SUM(pw.cantidad)")));

		if (!curLinea.commitBuffer()) {
			flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "False commit ." + q.value("pw.referencia") + " - " + q.value("pw.barcode"));
			return false;
		}

		var idLinea = curLinea.valueBuffer("idlinea");
		curLinea.select("idlinea = " + idLinea + " AND codsolicitud = '" + codReposicion + "'");
		
		if(!curLinea.first()){
			flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "False first ." + q.value("pw.referencia") + " - " + q.value("pw.barcode"));
			return false;
		}

		curLinea.setModeAccess(curLinea.Edit);
		curLinea.refreshBuffer();
		curLinea.setValueBuffer("idsincro", "AWEB" + "_" + curLinea.valueBuffer("idlinea"));
	
		if (!curLinea.commitBuffer()) {
			flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "False commit 2." + q.value("pw.referencia") + " - " + q.value("pw.barcode"));
			return false;
		}
	}
	
	return true;
}

function elgansoCtr_dameConsultaHistoricoPedWeb(oParam)
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	
	q.setSelect("pw.referencia, pw.barcode, pw.descripcion, pw.talla, SUM(pw.cantidad)");
	q.setFrom("eg_historicopedweb pw");
	q.setWhere("fecha >= '" + oParam.fechaUltReg + "' AND constock = false GROUP BY pw.referencia, pw.barcode, pw.descripcion, pw.talla ORDER BY pw.referencia, pw.barcode, pw.descripcion, pw.talla");
	
	debug(q.sql());
	
	if (!q.exec()) {
		sys.errorMsgBox(sys.translate("Falló la consulta"));
		return;
	}

	return q;
}

function elgansoCtr_insertarOutStock(oParam)
{
	var _i = this.iface;
	
	var q = oParam.qOS;	
	var codReposicion = oParam.codReposicion;

	var curLinea = new FLSqlCursor("eg_lineassolicitudreposicion");

	while(q.next()){

		var aSku = q.value("cpe.sku").split("-");
		var referencia = aSku[0];
		var talla = "TU";

		var noEsTallaUnica = q.value("cpe.sku").find("-");

		if(noEsTallaUnica >= 0){
			talla = aSku[1]
		}
		
		var barCode = AQUtil.sqlSelect("atributosarticulos", "barcode", "referencia = '" + referencia + "' AND talla = '" + talla + "'");
		
		if(!barCode){
			flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "False barCode." + referencia + " - " + talla + " - " + q.value("cpe.sku"));
			continue;
		}

		var descArticulo = AQUtil.sqlSelect("articulos", "descripcion", "referencia = '" + referencia + "'");

		curLinea.select("barcode = '" + barCode + "' AND codsolicitud = '" + codReposicion + "'");

		if(curLinea.first()){

			curLinea.setModeAccess(curLinea.Edit);
			curLinea.refreshBuffer();
			var cantidadReg = parseFloat(curLinea.valueBuffer("cantidad"));

			curLinea.setValueBuffer("cantidad", cantidadReg + parseFloat(q.value("count(cpe.sku)")));

			if (!curLinea.commitBuffer()) {
				flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "False commit 1." + referencia + " - " + talla + " - " + q.value("cpe.sku"));
				return false;
			}

		}
		else{
			curLinea.setModeAccess(curLinea.Insert);
			curLinea.refreshBuffer();

			curLinea.setValueBuffer("codsolicitud", codReposicion);
			curLinea.setValueBuffer("referencia", referencia);
			curLinea.setValueBuffer("barcode", barCode);
			curLinea.setValueBuffer("descripcion", descArticulo);
			curLinea.setValueBuffer("codtalla", talla);
			curLinea.setValueBuffer("cantidad", parseFloat(q.value("count(cpe.sku)")));

			if (!curLinea.commitBuffer()) {
				flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "False commit 2." + referencia + " - " + talla + " - " + q.value("cpe.sku"));
				return false;
			}

			var idLinea = curLinea.valueBuffer("idlinea");
			curLinea.select("idlinea = " + idLinea);
			
			if(!curLinea.first()){
				flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "False first 1." + referencia + " - " + talla + " - " + q.value("cpe.sku"));
				return false;
			}

			curLinea.setModeAccess(curLinea.Edit);
			curLinea.refreshBuffer();
			curLinea.setValueBuffer("idsincro", "AWEB" + "_" + curLinea.valueBuffer("idlinea"));
		
			if (!curLinea.commitBuffer()) {
				flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "False commit 3." + referencia + " - " + talla + " - " + q.value("cpe.sku"));
				return false;
			}
		}
	}
	
	return true;
}

function elgansoCtr_dameConsultaOutStock(oParam)
{
	var _i = this.iface;
	
	var conexion = "WEBM";

	if(!formtpv_tiendas.iface.pub_conectar(conexion, false)){
		return false;
	}

	var q = new FLSqlQuery("",conexion);
	q.setSelect("cpe.sku, count(cpe.sku)");
	q.setFrom("outofstocksubscription_info oi INNER JOIN catalog_product_entity cpe ON cpe.entity_id = oi.product_id");
	q.setWhere("oi.date >= '" + oParam.fechaUltReg + "' AND oi.estado = '0' GROUP BY cpe.sku");

	if (!q.exec()) {
		sys.errorMsgBox(sys.translate("Falló la consulta"));
		return;
	}

	return q;
}

function elgansoCtr_cambiarAlmacenAlbaranesCli()
{
	var _i = this.iface;

	var codAlmacen = Input.getText(sys.translate("Indique el nuevo almacén"));

	if(!codAlmacen || codAlmacen == ""){
		return false;
	}

	if(!AQUtil.sqlSelect("almacenes","codalmacen","codalmacen = '" + codAlmacen + "'")){
		sys.warnMsgBox(sys.translate("No existe el almacén seleccionado"));
		return false;
	}

	var q = _i.dameConsultaAlbaranesCliAzkaAmay();

	debug(q.sql());

	if(!q){
		return false;
	}

	var oParam = new Object;
	oParam.codAlmacen = codAlmacen;
	oParam.idAlbaran = "";

	while(q.next()){
		oParam.idAlbaran = q.value("a.idalbaran");
		if(!_i.cambiarAlmacenAlbaranCli(oParam)){
			sys.errorMsgBox(sys.translate("Falló la consulta"));
			return false;
		}
	}

	return true;
}

function elgansoCtr_dameConsultaAlbaranesCliAzkaAmay()
{
	var _i = this.iface;
	
	var q = new FLSqlQuery();
	
	q.setSelect("a.idalbaran");
	q.setFrom("albaranescli a inner join eg_pedidosenviados egp on a.codigo = egp.codalbaran");
	q.setWhere("a.codalmacen = 'AMAY'");

	if (!q.exec()) {
		sys.errorMsgBox(sys.translate("Falló la consulta"));
		return false;
	}

	return q;
}

function elgansoCtr_cambiarAlmacenAlbaranCli(oParam)
{
	var _i = this.iface;

	if (!AQUtil.execSql("UPDATE albaranescli SET codalmacen = '" + oParam.codAlmacen + "' WHERE idalbaran = " + oParam.idAlbaran)) {
		return false;
	}

	var curLP = new FLSqlCursor("lineasalbaranescli");
	curLP.select("idalbaran = " + oParam.idAlbaran);
	AQUtil.createProgressDialog(sys.translate("Recalculando stocks"), curLP.size());
	var p = 0;
	while (curLP.next()) {
		AQUtil.setProgress(++p);
		curLP.setModeAccess(curLP.Edit);
		curLP.refreshBuffer();
		if (!flfactalma.iface.borrarEstructura(curLP)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		if (!flfactalma.iface.generarEstructura(curLP)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}

	return true;
}

function elgansoCtr_crearMovistockViajes()
{
	var _i = this.iface;

	if(!_i.controlProcesoEjecutado("MOVISTOCK_PTE", 5)){
		return true;
	}

	if(!_i.controlMovDuplicados()){
		if (!AQUtil.execSql("DELETE FROM eg_fichprocesados WHERE tipo = 'MOVISTOCK_PTE'","aux")) {
			return false;
		}
		return false;
	}

	var curLineaV = new FLSqlCursor("tpv_lineasmultitransstock");

	var curLineaPte = new FLSqlCursor("eg_lineasptesmovistock");
	curLineaPte.select("1=1");

	/*AQUtil.createProgressDialog(sys.translate("Procesando movimientos líneas de viajes..." ), curLineaPte.size());
	var p = 0;*/

	var fechaMinima = AQUtil.sqlSelect("eg_valoracionperiodicaexistencias", "MAX(fechafin)", "1 = 1");

	while(curLineaPte.next()){
		//AQUtil.setProgress(p++);

		curLineaPte.setModeAccess(curLineaPte.Browse);
		curLineaPte.refreshBuffer();
		curLineaV.select("idsincro = '" + curLineaPte.valueBuffer("idsincro") + "' AND estado <> 'CANCELADO'");
		
		if(curLineaV.first()){
			curLineaV.setModeAccess(curLineaV.Browse);
			curLineaV.refreshBuffer();
			
			if(curLineaPte.valueBuffer("tipo") == "Envio"){
				if(curLineaV.valueBuffer("fechaex") && (AQUtil.daysTo(curLineaV.valueBuffer("fechaex"), fechaMinima) < 0)){
					if (!flfactalma.iface.borrarEstructuraMTOrigen(curLineaV)) {
						debug("Fallo iface.borrarEstructuraMTOrigen idsincro: " + curLineaPte.valueBuffer("idsincro"));
						continue;
					}

					if (!flfactalma.iface.generarEstructuraMTOrigen(curLineaV)) {
						debug("Fallo iface.generarEstructuraMTOrigen idsincro: " + curLineaPte.valueBuffer("idsincro"));
						continue;
					}
				}
			}
			else{
				if(curLineaV.valueBuffer("fecharx") && (AQUtil.daysTo(curLineaV.valueBuffer("fecharx"), fechaMinima) < 0)){
					if (!flfactalma.iface.borrarEstructuraMTDestino(curLineaV)) {
						debug("Fallo iface.borrarEstructuraMTDestino idsincro: " + curLineaPte.valueBuffer("idsincro"));
						continue;
					}

					if (!flfactalma.iface.generarEstructuraMTDestino(curLineaV)) {
						debug("Fallo iface.generarEstructuraMTDestino idsincro: " + curLineaPte.valueBuffer("idsincro"));
						continue;
					}
				}
			}

		}
	
		curLineaPte.setModeAccess(curLineaPte.Del);
		
		if (!curLineaPte.commitBuffer()) {
			if (!AQUtil.execSql("DELETE FROM eg_fichprocesados WHERE tipo = 'MOVISTOCK_PTE'","aux")) {
				return false;
			}
			return false;
		}

	}

	if (!AQUtil.execSql("DELETE FROM eg_fichprocesados WHERE tipo = 'MOVISTOCK_PTE'","aux")) {
		return false;
	}
	//sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	
	return true;
}

function elgansoCtr_arreglarEan14()
{
	var _i = this.iface;

	var aArticulos = _i.dameEan14();

	if(!aArticulos){
		return true;
	}

	var cx = "default";

	if(!_i.corregirEanTablas(aArticulos, cx)){
		sys.warnMsgBox("Ha habido un error al corregir los barCodes en la central");
		return false;
	}

	var res = MessageBox.information(AQUtil.translate("scripts", "¿Desea corregir los EAN en las tiendas?"), MessageBox.No, MessageBox.Yes, MessageBox.NoButton);
	if (res != MessageBox.Yes){
		return true;
	}

	var qT = new FLSqlQuery();
	qT.setSelect("codtienda");
	qT.setFrom("tpv_tiendas");
	qT.setWhere("sincroactiva AND servidor IS NOT NULL AND codtienda <> 'ACEN' ORDER BY codtienda");
	if (!qT.exec()) {
		return false;
	}

	var oParam = [];
  	oParam.caption = sys.translate("Corrigiendo EAN en tiendas...");
  	oParam.ancho = 950;
	oParam.alto = 550;
  
  	flfactppal.iface.pub_creaDialogoEstado(oParam);

  	var listaFallo = "";

	while (qT.next()) {
		cx = qT.value("codtienda");
		if (!_i.conectarMT(cx, true)) {
    		flfactppal.iface.pub_ponLogDialogo(sys.translate("Error en la conexión %1").arg(cx));
    		listaFallo += cx + ",";
    		continue;
  		}
  		if(!_i.corregirEanTablas(aArticulos, cx)){
			flfactppal.iface.pub_ponLogDialogo(sys.translate("Ha habido un error al corregir los barCodes en %1").arg(cx));
    		listaFallo += cx + ",";
			continue;
		}
		if (!formtpv_tiendas.iface.pub_desconectar(cx, true)) {
			continue;
		}
	}

	flfactppal.iface.pub_ponLogDialogo(sys.translate("Proceso terminado.\nListado tiendas error: %1").arg(cx));

	return true;

}

function elgansoCtr_corregirEanTablas(aArticulos, cx)
{
	var _i = this.iface;

	for(var i = 0; i < aArticulos.length; i++){
		AQUtil.execSql("UPDATE articuloscomp SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE atributostarifas SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE barcodeprov SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE composiciones SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE eg_articulosetiquetas SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE eg_inventarios SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE eg_lineassolicitudreposicion SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE eg_planproducciontallaje SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE eg_solicitudreposicion SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE eg_stockspacks SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE etiquetas SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE lineascomposicion SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE lineasregstocks SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE lineastransstock SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE movistock SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE stocks SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE eg_lineasrecibosrecogida SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE lineasalbaranescli SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE lineasalbaranesprov SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE lineasbulto SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE lineasfacturascli SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE lineasfacturasprov SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE lineaspedidoscli SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE lineaspedidosprov SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE lineaspresupuestoscli SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE lineastallacol SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE lineastallacolcli SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE eg_historicopedweb SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE tpv_barcodemultitransstock SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE tpv_comandas SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE tpv_consultastocks SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE tpv_lineascomanda SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		AQUtil.execSql("UPDATE tpv_lineasvale SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		
		if(cx == "default"){
			AQUtil.execSql("UPDATE tpv_lineasgruposmultitransstock SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
			AQUtil.execSql("UPDATE eg_lineasreposicioninicial SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
		}

		AQUtil.execSql("UPDATE atributosarticulos SET barcode = '" + aArticulos[i]["barCodeNuevo"] + "' WHERE barcode = '" + aArticulos[i]["barCode"] + "'", cx);
	}

	return true;
}

function elgansoCtr_dameEan14()
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	
	q.setSelect("barcode,referencia,talla,color");
	q.setFrom("atributosarticulos");
	q.setWhere("LENGTH(barcode) > 13");

	if (!q.exec()) {
		sys.errorMsgBox(sys.translate("Falló la consulta"));
		return false;
	}

	if(q.size() <= 0){
		sys.infoMsgBox(sys.translate("Todos los barCode están correctos"));
		return false;
	}

	var aArticulos = [];
	var referencia, codTalla, codColor;

	formRecordarticulos.iface.calculoBarcode_ = flfactalma.iface.pub_valorDefectoAlmacen("calculobarcode");
  	formRecordarticulos.iface.digitosBarcode_ = flfactalma.iface.pub_valorDefectoAlmacen("digitosbarcode");
  	formRecordarticulos.iface.prefijoBarcode_ = flfactalma.iface.pub_valorDefectoAlmacen("prefijobarcode");

	while(q.next()){
		referencia = q.value("referencia");
		codColor = q.value("color");
		codTalla = q.value("talla");

		var oBarcode = new Object;
		oBarcode["barCode"] = q.value("barcode");
		oBarcode["barCodeNuevo"] = formRecordarticulos.iface.pub_obtenerBarcode(referencia, codTalla, codColor);

		aArticulos.push(oBarcode);
	}

	return aArticulos;
}

function elgansoCtr_verificacionContableFacturasVenta()
{
	var _i = this.iface;
	
	var fecha = '2017-01-01';
	var hoy = new Date();

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha de verificación contable");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = fecha;
	dialog.add(dFechaIni);

	var dFechaFin = new DateEdit;
	dFechaFin.label = sys.translate("Fin");
	dFechaFin.date = hoy;
	dialog.add(dFechaFin);

	if (!dialog.exec()) {
		return false;
	}

	var fechaIni = dFechaIni.date;
	var fechaFin = dFechaFin.date;
	
	var importePagos = 0;
	var importePagosFactura = 0;

	var qP = new FLSqlQuery();
	qP.setSelect("SUM(lfi.totaliva),t.codsubcentro,c.fecha,t.codtienda");
	qP.setFrom("lineasivafactcli lfi INNER JOIN facturascli fc ON lfi.idfactura = fc.idfactura INNER JOIN tpv_comandas c on (fc.idfactura = c.idfactura AND fc.codigo = c.egcodfactura) INNER JOIN tpv_tiendas t ON t.codtienda = c.codtienda");
	qP.setWhere("t.idempresa IN (1,15) AND c.fecha BETWEEN '" + fechaIni + "' AND '" + fechaFin + "' AND t.codtienda <> 'AWEB' AND t.codsubcentro is not null GROUP BY t.codsubcentro,c.fecha,t.codtienda ORDER BY c.fecha,t.codsubcentro");
		
	if(!qP.exec()){
		return false;
	}

	debug(qP.sql());

	var p = 0;
	var idLinea;
	var resta = 0;

	var oParam = [];
  	oParam.caption = sys.translate("Verificando saldo de cuentas...");
  	oParam.ancho = 950;
	oParam.alto = 550;
  
  	flfactppal.iface.pub_creaDialogoEstado(oParam);
  	
	while(qP.next()){

		importePagos = AQUtil.roundFieldValue(qP.value("SUM(lfi.totaliva)"), "lineaspedidoscli", "pvptotaliva");

		importePagosFactura = AQUtil.sqlSelect("co_asientos ca INNER JOIN co_partidas p  ON ca.idasiento = p.idasiento INNER JOIN tpv_arqueos ar ON (ca.idasiento = ar.idasiento OR ca.idasiento = ar.idasientovale) INNER JOIN co_subcuentas cs ON cs.idsubcuenta = p.idsubcuenta INNER JOIN co_cuentas c ON c.idcuenta = cs.idcuenta INNER JOIN tpv_tiendas t ON t.codtienda = ar.codtienda LEFT OUTER JOIN n43_punteo n43 ON p.idasiento = n43.idasiento", "SUM(p.haber-p.debe)", "ca.fecha BETWEEN '" + qP.value("c.fecha") + "' AND '" + qP.value("c.fecha") + "' AND t.codsubcentro = '" + qP.value("t.codsubcentro") + "' AND c.codcuenta = '477' AND n43.idasiento is null", "co_asientos,co_partidas,tpv_arqueos,co_cuentas,tpv_tiendas,n43_punteo");

		importePagosFactura = AQUtil.roundFieldValue(parseFloat(importePagosFactura), "lineasfacturascli", "pvptotaliva");
		
		//Se ponen en signo positivo para hacer correctamente la resta.
		if(importePagos < 0){
			importePagos = importePagos * (-1);
		}

		if(importePagosFactura < 0){
			importePagosFactura = importePagosFactura * (-1);
		}

		importePagosFactura = AQUtil.roundFieldValue(parseFloat(importePagosFactura), "lineaspedidoscli", "pvptotaliva");
		resta = AQUtil.roundFieldValue(importePagos - importePagosFactura, "lineaspedidoscli", "pvptotaliva"); 
		
		if (Math.abs(resta) > 0.02) {

			var fecha = qP.value("c.fecha").toString();
			fecha = AQUtil.dateAMDtoDMA(fecha);
			fecha = fecha.toString().left(10);

			flfactppal.iface.pub_ponLogDialogo("Hay un importe de IVA lineas facturas: " + importePagos + " y un importe partidas de asiento de arqueo: " + importePagosFactura + " y un descuadre de " + resta + " en la tienda " + qP.value("t.codtienda") + " en el día " + fecha);
 		}
		
	}

	flfactppal.iface.pub_ponLogDialogo("Verificación terminada correctamente.");
  
  	return true;
}

function elgansoCtr_facturarVentasSii()
{
	flfact_tpv.iface.abreLog("FACTURAS_VENTAS");

	if(!flfact_tpv.iface.sincronizarFacturasVentas(true)){
		return false;
	}

	return true;
}

function elgansoCtr_egGenerarAsientosArqueo(oParam)
{
	var oP = [];

	var listaTiendas = flfact_tpv.iface.tiendasContabilidad();
  	var curArqueo = new FLSqlCursor("tpv_arqueos");
  	curArqueo.select("codtienda IN (" + listaTiendas + ") AND sincronizado AND idasiento IS NULL AND diadesde < CURRENT_DATE AND diadesde >= '2017-01-01' ORDER BY idtpv_arqueo");

	AQUtil.createProgressDialog(sys.translate("Generando asientos..." ), curArqueo.size());
	var paso = 0;

	var noAsiento = "";

	while(curArqueo.next()) {
		AQUtil.setProgress(paso++);
		oP.curArqueo = curArqueo;
		debug(curArqueo.valueBuffer("idtpv_arqueo") + " - " + curArqueo.valueBuffer("diahasta"));

		oP.errorMsg = sys.translate("Error en la función sincroArqueoFactura");
		var f = new Function("oParam", "return flfact_tpv.iface.sincroArqueoFactura(oP)");

		if (!sys.runTransaction(f, oP)) {
			AQUtil.destroyProgressDialog();
			noAsiento += curArqueo.valueBuffer("idtpv_arqueo") + ",";
			continue;
		}
	}

	AQUtil.destroyProgressDialog();

	if(noAsiento != ""){
		debug("No se ha generado la contabilidad de: " + noAsiento);
	}

	return true;
}

function elgansoCtr_egActualizarContrapartidas()
{
	if (!AQUtil.execSql("update co_partidas SET eg_codcontrapartida = codcontrapartida, eg_idcontrapartida = idcontrapartida WHERE idasiento IN (select idasiento from co_asientos where fecha >= '2017-01-01') and eg_codcontrapartida is null")) {
		return false;
	}

	if (!AQUtil.execSql("update co_partidas SET codcontrapartida = NULL, idcontrapartida = NULL WHERE idasiento IN (select idasiento from co_asientos where fecha >= '2017-01-01')")) {
		return false;
	}

	if (!AQUtil.execSql("update co_partidas SET idcontrapartida  = (SELECT idsubcuenta FROM co_partidas p WHERE p.idasiento = co_partidas.idasiento AND (p.codsubcuenta like '40%' OR p.codsubcuenta like '43%' OR p.codsubcuenta like '41%') limit 1) WHERE idasiento IN (select idasiento from co_asientos where fecha >= '2017-01-01') and codgrupoivaneg is not null")) {
		return false;
	}

	if (!AQUtil.execSql("update co_partidas SET codcontrapartida  = (SELECT codsubcuenta FROM co_partidas p WHERE p.idasiento = co_partidas.idasiento AND (p.codsubcuenta like '40%' OR p.codsubcuenta like '43%' OR p.codsubcuenta like '41%') limit 1) WHERE idasiento IN (select idasiento from co_asientos where fecha >= '2017-01-01') and codgrupoivaneg is not null")) {
		return false;
	}

	return true;
}

function elgansoCtr_egRellenarCodigoFacturaVentaWebX()
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setSelect("idtpv_comanda");
	q.setFrom("tpv_comandas");
	q.setWhere("codtienda = 'AWEB' AND idfactura IS NULL AND egcodfactura IS NULL AND fecha >= '2017-06-01' ORDER BY fecha, hora");

	if (!q.exec()) {
		flfactppal.iface.ponMsgError(sys.translate("Falló la consulta"), "warn", this);
		debug(q.sql());
		return false;
	}

	var codFactW;
	while (q.next()) {
		codFactW = flfact_tpv.iface.obtenerCodigoFacturaWeb();
		if (!AQUtil.execSql("UPDATE tpv_comandas SET egcodfactura = '" + codFactW + "' WHERE idtpv_comanda = " + q.value("idtpv_comanda"))) {
			flfactppal.iface.ponMsgError(sys.translate("Error al rellenar el codigo de la venta %1").arg(q.value("idtpv_comanda")), "warn", this);
			return false;
		}
	}

	return true;
}

function elgansoCtr_egRellenarCodigoFacturaVentaWebY()
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setSelect("idtpv_comanda");
	q.setFrom("tpv_comandas");
	q.setWhere("codtienda = 'AWEB' AND idfactura IS NULL AND egcodfactura IS NULL AND fecha >= '2017-01-01' AND fecha <= '2017-05-31' ORDER BY fecha, hora");

	if (!q.exec()) {
		flfactppal.iface.ponMsgError(sys.translate("Falló la consulta"), "warn", this);
		debug(q.sql());
		return false;
	}

	var codFactW;
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Rellenando huecos de facturas ..."), q.size());
	var p = 0;

	while (q.next()) {
		AQUtil.setProgress(p++);
		codFactW = _i.obtenerCodigoFacturaWebY();
		debug("////////////////////codFactW: " + codFactW);
		if (!AQUtil.execSql("UPDATE tpv_comandas SET egcodfactura = '" + codFactW + "' WHERE idtpv_comanda = " + q.value("idtpv_comanda"))) {
			flfactppal.iface.ponMsgError(sys.translate("Error al rellenar el codigo de la venta %1").arg(q.value("idtpv_comanda")), "warn", this);
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elgansoCtr_obtenerCodigoFacturaWebY()
{
	var _i = this.iface;
	var codigo;

	var prefijo = "AWEBY";
	var idUltima = AQUtil.sqlSelect("tpv_comandas", "egcodfactura", "egcodfactura LIKE '" + prefijo + "%' ORDER BY egcodfactura DESC");
	if (idUltima) {
		ultimaFact = parseFloat(idUltima.toString().right((12 - prefijo.length)));
	} else {
		ultimaFact = 0;
	}
	ultimaFact += 1;
	codigo = prefijo + flfacturac.iface.pub_cerosIzquierda(ultimaFact, 12 - prefijo.length);
	return codigo;
}

function elgansoCtr_convierteUTF8(sCadena)
{
	var _i = this.iface;

	var aConv =[
		["Ã","Ñ"],
		["Ã±" , "ñ"],
		["Ã", "Ç"],
		["Ã§", "ç"],
		["Ã", "Á"],
		["Ã¡", "á"],
		["Ã", "É"],
		["Ã©", "é"],
		["Ã", "Í"],
		["Ã­", "í"],
		["Ã", "Ó"],
		["Ã³", "ó"],
		["Ã", "Ú"],
		["Ãº", "ú"],
		["Ã", "À"],
		["Ã", "à"],
		["Ã", "È"],
		["?", "è"],
		["Ã", "Ì"],
		["Ã¬", "ì"],
		["Ã", "Ò"],
		["Ã²", "ò"],
		["Ã", "Ù"],
		["Ã¹", "ù"],
		["Ã", "Â"],
		["Ã¢", "â"],
		["Ã", "Ê"],
		["Ãª", "ê"],
		["Ã", "Î"],
		["Ã®", "î"],
		["Ã", "Ô"],
		//["Ã?", "ô"],
		["Ã", "Û"],
		["Ã»", "û"],
		["Ã", "Ä"],
		//["Ã?", "ä"],
		["Ã", "Ë"],
		["Ã«", "ë"],
		["Ã", "Ï"],
		["Ã¯", "ï"],
		["Ã", "Ö"],
		["Ã¶", "ö"],
		["Ã", "Ü"],
		//["Ã?", "ü"]
	];

	if (sCadena && sCadena != "") {
		for (var i = 0; i < aConv.length; i++) {
			sCadena = flfactppal.iface.replace(sCadena, aConv[i][0], aConv[i][1]);
		}
	}

	return sCadena;
}

function elgansoCtr_egRegenerarAsientoNoContabilizadas()
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setSelect("f.idfactura, f.codigo");
	q.setFrom("tpv_comandas c INNER JOIN facturascli f ON c.egcodfactura = f.codigo INNER JOIN tpv_tiendas t ON c.codtienda = t.codtienda INNER JOIN empresa e ON t.idempresa = e.id");
	q.setWhere("f.fecha >= '2017-06-01' AND f.nogenerarasiento AND e.id = 1");
	q.setTablesList("tpv_comandas,facturascli,tpv_tiendas,empresa");

	if (!q.exec()) {
		flfactppal.iface.ponMsgError(sys.translate("Falló la consulta"), "warn", this);
		return false;
	}

	var curF = new FLSqlCursor("facturascli");
	var nombre;
	var p = 0;
	AQUtil.createProgressDialog(sys.translate("Regenerando asientos..." ), q.size());

	while (q.next()) {
		AQUtil.setProgress(p++);
		curF.select("idfactura = " + q.value("f.idfactura"));
		if (!curF.first()) {
			flfactppal.iface.ponMsgError(sys.translate("No se encuentra la factura"), "warn", this);
			AQUtil.destroyProgressDialog();
			return false;
		}

		curF.setModeAccess(curF.Edit);
		curF.refreshBuffer();

		nombre = curF.valueBuffer("nombrecliente");
		if (nombre && nombre != "") {
			_i.convierteUTF8(nombre);
			curF.setValueBuffer("nombrecliente", nombre);
		}

		curF.setValueBuffer("nogenerarasiento", false);

		if (!curF.commitBuffer()) {
			flfactppal.iface.ponMsgError(sys.translate("Error al actualizar la factura %1").arg(q.value("f.codigo")), "warn", this);
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	return true;
}

function elgansoCtr_egRegenerarAsientoPagoDevolProv()
{
	var _i = this.iface;

	var idEmpresaActual = flfactppal.iface.pub_empresaActual();

	if(!idEmpresaActual){
		return false;
	}
	
	var q = new FLSqlQuery();
	q.setSelect("pg.idpagodevol, r.idrecibo, pg.idasiento, r.idfactura");
	q.setFrom("pagosdevolprov pg INNER JOIN recibosprov r ON pg.idrecibo = r.idrecibo");
	q.setWhere("pg.fecha >= '2017-01-01' AND r.idempresa = " + idEmpresaActual);

	if (!q.exec()) {
		sys.errorMsgBox(sys.translate("Falló la consulta"));
		return false;
	}

	var p = 0;
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Regenerando asientos de pagos..."), q.size());

	while (q.next()) {
		AQUtil.setProgress(p++);
		
		var idPartida = AQUtil.sqlSelect("co_asientos a inner join co_partidas p on a.idasiento = p.idasiento", "p.idpartida", "a.idasiento = " + q.value("pg.idasiento") + " AND p.codsubcuenta like '57%'", "co_asientos,co_partidas");

		var idPunteoN43;

		if(idPartida){
			idPunteoN43 = AQUtil.sqlSelect("co_partidas", "idpunteon43", "idpartida = " + idPartida);

			if (!AQUtil.execSql("UPDATE co_partidas SET idpunteon43 = NULL WHERE idpartida = " + idPartida)) {
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return;
			}	

			if(!_i.actualizarDatosFacturaProv(q.value("r.idfactura"))){
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}

			if(!_i.actualizarDatosRecibo(q.value("r.idrecibo"), q.value("r.idfactura"))){
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}

			if(!_i.actualizarDatosPagosDevolProv(q.value("pg.idpagodevol"))){
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}

			idPartida = AQUtil.sqlSelect("co_asientos a inner join co_partidas p on a.idasiento = p.idasiento", "p.idpartida", "a.idasiento = " + q.value("pg.idasiento") + " AND p.codsubcuenta like '57%'", "co_asientos,co_partidas");

			if (!AQUtil.execSql("UPDATE co_partidas SET idpunteon43 = " + idPunteoN43 + " WHERE idpartida = " + idPartida)) {
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}

		}
		
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	return true;
}


function elgansoCtr_actualizarDatosFacturaProv(idFactura)
{
	var _i = this.iface;

	var curFactura = new FLSqlCursor("facturasprov");
	curFactura.setActivatedCheckIntegrity(false);
	curFactura.setActivatedCommitActions(false);

	curFactura.select("idfactura = " + idFactura);
	if (!curFactura.first()) {
		return false;
	}

	var editable = curFactura.valueBuffer("editable");
	if (!editable) {
		curFactura.setUnLock("editable", true);
		curFactura.select("idfactura = " + idFactura);
		if (!curFactura.first()) {
			return false;
		}
	}

	curFactura.setModeAccess(curFactura.Edit);
	curFactura.refreshBuffer();
	curFactura.setValueBuffer("tasaconv", 1);
	curFactura.setValueBuffer("totaleuros", formfacturasprov.iface.pub_commonCalculateField("totaleuros", curFactura));
	if (!curFactura.commitBuffer()) {
		return false;
	}

	if (!editable) {
		curFactura.select("idfactura = " + idFactura);
		if (!curFactura.first()) {
			return false;
		}
		curFactura.setUnLock("editable", false);
	}

	return true;

}

function elgansoCtr_actualizarDatosRecibo(idRecibo, idFactura)
{
	var _i = this.iface;

	var curRc = new FLSqlCursor("recibosprov");
	curRc.select("idrecibo = " + idRecibo);

	if (!curRc.first()) {
		sys.errorMsgBox(sys.translate("No se encuentra el recibo:  %1").arg(idRecibo));
		return false;
	}

	curRc.setModeAccess(curRc.Edit);
	curRc.refreshBuffer();

	debug("////////////////importeeuros: "  + AQUtil.sqlSelect("facturasprov", "totaleuros", "idfactura = " + idFactura));
	curRc.setValueBuffer("importeeuros", AQUtil.sqlSelect("facturasprov", "totaleuros", "idfactura = " + idFactura));

	if (!curRc.commitBuffer()) {
		sys.errorMsgBox(sys.translate("Error al actualizar el recibo:  %1").arg(idRecibo));
		return false;
	}

	return true;

}

function elgansoCtr_actualizarDatosPagosDevolProv(idPago)
{
	var _i = this.iface;

	var curPg = new FLSqlCursor("pagosdevolprov");
	curPg.select("idpagodevol = " + idPago);


	if (!curPg.first()) {
		sys.errorMsgBox(sys.translate("No se encuentra el pago:  %1").arg(idPago));
		return false;
	}

	curPg.setModeAccess(curPg.Edit);
	curPg.refreshBuffer();

	if (sys.isLoadedModule("flcontppal") && flfactppal.iface.pub_valorDefectoEmpresa("contintegrada")) {
		if (!flfactteso.iface.generarAsientoPagoDevolProv(curPg)){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}

	if (!curPg.commitBuffer()) {
		sys.errorMsgBox(sys.translate("Error al actualizar el pago:  %1").arg(idPago));
		return false;
	}

	return true;

}

function elgansoCtr_egBorrarPagosDuplicados()
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setSelect("codpago, idsincro, idtpv_arqueo");
	q.setFrom("tpv_pagoscomanda");
	q.setWhere("1 = 1 group by idsincro, idtpv_arqueo, codpago having count(*) > 1 order by idsincro");

	if (!q.exec()) {
		sys.errorMsgBox(sys.translate("Falló la consulta"));
		return false;
	}

	var p = 0;
	borrados = 0;
	cambiados = 0;
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Borrando pagos duplicados..."), q.size());

	while (q.next()) {
		debug("");
		debug(q.value("codpago") + " / " + q.value("idsincro") + " / " + q.value("idtpv_arqueo"))

		AQUtil.setProgress(p++);

		var descuadre = AQUtil.sqlSelect("tpv_pagoscomanda p inner join tpv_arqueos a on p.idtpv_arqueo = a.idtpv_arqueo","sum(p.importe)-a.totalpagos-a.devolucionesvale","p.idtpv_arqueo = '" + q.value("idtpv_arqueo") + "' group by p.idtpv_arqueo, a.totalpagos, a.devolucionesvale","tpv_pagoscomanda,tpv_arqueos");

		if(Math.abs(descuadre) > -1 && Math.abs(descuadre) < 0.01) {
			descuadre = 0;
		}
		debug("descuadre " + descuadre);

		if(descuadre != 0) {
			var idPago = AQUtil.sqlSelect("tpv_pagoscomanda","idpago","codpago = '" + q.value("codpago") + "' and  idtpv_arqueo = '" + q.value("idtpv_arqueo") + "' and idsincro = '" + q.value("idsincro") + "'");
			debug("idpago " + idPago);

			if(idPago) {
				if(!AQUtil.execSql("delete from tpv_pagoscomanda where idpago = " + idPago)) {
 			  		return false;
 				}
 				else {
 					borrados++;
 				}
			}
		}
		if(descuadre == 0) {
			var idPago = AQUtil.sqlSelect("tpv_pagoscomanda","idpago","codpago = '" + q.value("codpago") + "' and  idtpv_arqueo = '" + q.value("idtpv_arqueo") + "' and idsincro = '" + q.value("idsincro") + "'");
			debug("idpago " + idPago);

			if(idPago) {
				if(!AQUtil.execSql("update tpv_pagoscomanda set idsincro = idsincro || '*' where idpago = " + idPago)) {
 			  		return false;
 				}
 				else {
 					cambiados++;
 				}
			}	
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	debug("total pagos: " + p);
	debug("total borrados: " + borrados);
	debug("total cambiados: " + cambiados);
	return true;
}

////// Ventas EDI //////////////////////////////////////////////////////
function elgansoCtr_egImportarVentasEdi(tipo, centros)
{
	debug("tipo " + tipo);

	debug("centros " + centros);
	if(!tipo || tipo == ""){
		tipo = "ECI";
	}
	
	if(!centros) {
		centros = "";
	}

	debug("elganso_egImportarVentasEdi " + tipo);
	var _i = this.iface;

	_i.arrVentas_ = [];
	_i.ficherosVentas_ = [];
	_i.tipoVentas_ = tipo;

	var path;
	if(tipo == "ECI") {
		path = AQUtil.sqlSelect("tpv_datosgenerales","dirimportventaseci","1=1");
	}
	else {
		path = AQUtil.sqlSelect("tpv_datosgenerales","dirimportventaslafayette","1=1");
	}

	if(!path || path == "") {
	
		sys.translate("Debe establecer el directorio de importación en los datos generales del tpv");
		
		debug("false dir");
		return false;
	}

	var sufijo = "";
	var oP = [];
	oP.tipo = tipo;
	oP.centros = centros;

	_i.cx_ = "BD2";
debug("antes addDatabse");
	var dbTx = AQSql.addDatabase(_i.cx_);
debug("despues addDatabse");
	debug("path " + path);
	var dir = new Dir(path);
    var codeFiles = dir.entryList('CABVEN_*.txt');
    codeFiles.sort();

    debug("ficheros " + codeFiles.length);
    for (var i = 0; i < codeFiles.length; ++i) {
    	_i.nombreLog_ = ""
		_i.nombreFile_ = "";

    	sufijo = codeFiles[i].substring(7,15);
  
    	_i.ficherosVentas_["cabecera"] = path + "/CABVEN_" + sufijo + ".txt";
		_i.ficherosVentas_["lineas"] = path + "/ARTVEN_" + sufijo + ".txt";
		_i.ficherosVentas_["tiendas"] = path + "/LUGVEN_" + sufijo + ".txt";
		_i.ficherosVentas_["conven"] = path + "/CONVEN_" + sufijo + ".txt";

		var file;
		if(tipo == "ECI"){
		 	file = new File("VENTAS_ECI_" + sufijo);
		}
		else{
		 	file = new File("VENTAS_GL_" + sufijo);			
		}

		var nombreLog = file.baseName + ".log";
		var nombreFichero = file.name;
		_i.nombreLog_ = flfactalma.iface.pub_ponLogName(nombreLog);
		var dirLog = flfact_tpv.iface.pub_valorDefectoTPV("dirlogs");
		if(!dirLog || dirLog == ""){
			dirLog = Dir.home;
		}
		
		if(dirLog.endsWith("/")) {
			_i.nombreFile_ = dirLog + nombreLog;
		}	else{
			_i.nombreFile_ = dirLog + "/" + nombreLog;
		}

		if(!flfactppal.iface.pub_abreLogFile(_i.nombreLog_, _i.nombreFile_)) {
      		flfactppal.iface.ponMsgError(sys.translate("No se ha creado el fichero del log para el fichero %1.").arg(nombreLog), "info");
		}

		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Importando fichero " + _i.ficherosVentas_["lineas"])) {
	  		flfactppal.iface.ponMsgError(sys.translate("Importando fichero %1").arg(_i.ficherosVentas_["lineas"]), "info");
		}

		oP.errorMsg = sys.translate("Error en la importación de ventas edi del " + sufijo);
		oP.tipo = tipo;
		var f = new Function("oParam", "return formmt_procesos.iface.importarFicheroVentas(oP)");
		if (!sys.runTransaction(f, oP)) {
			debug("error al ejecutar la funcion");
			return false;
		}

		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Importación finalizada")) {
	      	flfactppal.iface.ponMsgError(sys.translate("Importacion finalizada"), "info");
		}

		_i.moverFicherosEdiProcesados(path, sufijo);
	}
	
	if (!sys.removeDatabase(_i.cx_)) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error en la desconexión")) {
	  		flfactppal.iface.ponMsgError(sys.translate("Error en la desconexión"), "info");
		}
		debug("Error en la desconexión");
		return false;
	} 

	return true;
}

function elgansoCtr_moverFicherosEdiProcesados(path, sufijo)
{
	var _i = this.iface;

	 // Mover los ficheros a procesados
	var comando = new Array("mv", _i.ficherosVentas_["lineas"], path + "/procesados/ARTVEN_" + sufijo + ".txt");
	var proceso = new Process();
	proceso.arguments = comando;
	proceso.workingDirectory = path;
	try {
	        proceso.start();
	}
	catch (e) {
	        debug(sys.translate("Falló la ejecución del comando:\n\n%1").arg(comando));
	        return false;
	}
	while(proceso.running) {
	        continue;
	}

	var comando = new Array("mv", _i.ficherosVentas_["tiendas"], path + "/procesados/LUGVEN_" + sufijo + ".txt");
	var proceso = new Process();
	proceso.arguments = comando;
	proceso.workingDirectory = path;
	try {
	        proceso.start();
	}
	catch (e) {
	        debug(sys.translate("Falló la ejecución del comando:\n\n%1").arg(comando));
	        return false;
	}
	while(proceso.running) {
	        continue;
	}

	var comando = new Array("mv", _i.ficherosVentas_["cabecera"], path + "/procesados/CABVEN_" + sufijo + ".txt");
	var proceso = new Process();
	proceso.arguments = comando;
	proceso.workingDirectory = path;
	try {
	        proceso.start();
	}
	catch (e) {
	        debug(sys.translate("Falló la ejecución del comando:\n\n%1").arg(comando));
	        return false;
	}
	while(proceso.running) {
	        continue;
	}

	var comando = new Array("mv", _i.ficherosVentas_["conven"], path + "/procesados/CONVEN_" + sufijo + ".txt");
	var proceso = new Process();
	proceso.arguments = comando;
	proceso.workingDirectory = path;
	try {
	        proceso.start();
	}
	catch (e) {
	        debug(sys.translate("Falló la ejecución del comando:\n\n%1").arg(comando));
	        return false;
	}
	while(proceso.running) {
	        continue;
	}
}

function elgansoCtr_importarFicheroVentas(oParam)
{debug("elgansoCtr_importarFicheroVentas");
	var _i = this.iface;

	var silent = false;

	if(!_i.ficherosVentas_["cabecera"] || _i.ficherosVentas_["cabecera"] == "") {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se encontró el fichero de cabecera")) {
	      		flfactppal.iface.ponMsgError(sys.translate("No se encontró el fichero de cabecera"), "info");
			}
			debug("No se encontró el fichero de cabecera");
			return false;
	}
	
	var file = new File(_i.ficherosVentas_["cabecera"]);
	try {
		file.open(File.ReadOnly);
	} catch(e) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Imposible abrir el fichero " + _i.ficherosVentas_["cabecera"])) {
      		flfactppal.iface.ponMsgError(sys.translate("Imposible abrir el fichero %1").arg(_i.ficherosVentas_["cabecera"]), "info");
		}
		debug("Imposible abrir el fichero " + _i.ficherosVentas_["cabecera"]);
		return false;
	}
	
	//Temporal
	var linea = "";
	//var campos = [];

	_i.arrVentas_ = []; 
	_i.arrTalones_ = [];

	var fecha = new Date();

	if(oParam.tipo == "ECI"){
		_i.iva_ = flfacturac.iface.pub_campoImpuesto("iva", "GEN", fecha);
	}
	else{
		_i.iva_ = AQUtil.sqlSelect("eg_ivapais", "iva","codpais = 'FR' AND codimpuesto = 'GEN'");
	}

	if (!_i.iva_) {
		_i.iva_ = 0;
	}

	_i.pagoTarjeta_ = flfact_tpv.iface.pub_valorDefectoTPV("pagotarjeta");
	if(!_i.pagoTarjeta_) {
		return false;
	}

	var lineasCab = [];
	var tam = 0;
	
	if(!("centros" in oParam)) {
		oParam["centros"] = "";
	}

	var eanLug = "";
	while(!file.eof) {
		debug("while");
		linea = file.readLine();
		
		lineasCab[tam] = [];
		if(oParam.tipo == "ECI"){
			lineasCab[tam]["FECINF"] = linea.substring(72, 84);
			lineasCab[tam]["FECFIN"] = linea.substring(72, 84);
		}
		else{
			lineasCab[tam]["FECINF"] = linea.substring(84, 92);
			lineasCab[tam]["FECFIN"] = linea.substring(92, 100);
		}
		
		debug(tam + " - " + lineasCab[tam]["FECINF"]);

		lineasCab[tam]["NUMINF"] = linea.substring(10, 45);
		while(lineasCab[tam]["NUMINF"].endsWith(" ")) {
			lineasCab[tam]["NUMINF"] = lineasCab[tam]["NUMINF"].substring(0,lineasCab[tam]["NUMINF"].length-1);
		}	
		//debug("NUMINF /" + lineasCab[c]["NUMINF"] + "/");

		lineasCab[tam]["CLAVE1"] = linea.substring(0, 10);
		tam++;
		//debug("CLAVE1 /" + lineasCab[c]["CLAVE1"] + "/");

		
	}

	lineasCab.sort(_i.comparaFechas);

	for(var c = 0;c<lineasCab.length;c++) {
		//lineasCab[c] = lineasCab[c];
	
		//lineasCab[c]["FECINF"] = lineasCab[c]["FECINF"];
		lineasCab[c]["FECFIN"] = lineasCab[c]["FECFIN"].substring(0,4) + "-" + lineasCab[c]["FECFIN"].substring(4,6) + "-" + lineasCab[c]["FECFIN"].substring(6,8);

		_i.arrVentas_ = []; 
		_i.arrTalones_ = [];

		var registro = _i.registrarFicheroVentaEdi(lineasCab[c]["NUMINF"], "crear", oParam.tipo);
		if(!registro) {
			return false;
		}			
		if(registro == "continue") {
			continue;
		}

		if(!_i.procesarLugaresVenta(lineasCab[c]["CLAVE1"], silent, oParam.tipo, oParam.centros)) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al procesar las tiendas")) {
		  		flfactppal.iface.ponMsgError(sys.translate("Error al procesar las tiendas"), "info");
			}
			return false;
		}

		if(!_i.procesarLineasVentasEdi(lineasCab[c]["CLAVE1"], lineasCab[c]["FECINF"], silent)) {
			if(!_i.registrarFicheroVentaEdi(lineasCab[c]["NUMINF"], "marcar_error", oParam.tipo)) {
				return false;
			}
			return false; 
		}

		/*_i.arrVentas_[lineasCab[c]["NUMTALON"]] = [];
		_i.arrVentas_[lineasCab[c]["NUMTALON"]]["codigo"] = codigo;
		_i.arrVentas_[lineasCab[c]["NUMTALON"]]["id"] = idComanda;
		_i.arrVentas_[lineasCab[c]["NUMTALON"]]["tienda"] = codTienda;
		_i.arrVentas_[lineasCab[c]["NUMTALON"]]["fecha"] = fecha;*/

		for(var i=0; i<_i.arrTalones_.length; i++) {

			var numTalon = _i.arrTalones_[i];

			var idComanda = _i.arrVentas_[numTalon]["id"];
			_i.arrVentas_[numTalon]["fechafin"] = lineasCab[c]["FECFIN"];

			if(!_i.cerrarVentaEdi(idComanda, numTalon)) {
				if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al cerrar la venta " + numTalon)) {
			  		flfactppal.iface.ponMsgError(sys.translate("Error al cerrar la venta %1").arg(numTalon), "info");
				}
				if(!_i.registrarFicheroVentaEdi(lineasCab[c]["NUMINF"], "marcar_error", oParam.tipo)) {
					return false;
				}	
				return false;
			}
		}

		if(!_i.registrarFicheroVentaEdi(lineasCab[c]["NUMINF"], "marcar_ok", oParam.tipo)) {
			return false;
		}	
	}
	return true;
}

/** \D 
@param	a: Array 1
@param	b: Array 2
@return	1: a > b, -1: a < b, 0: a = b
\end */
function elgansoCtr_comparaFechas(a, b)
{
	var _i = this.iface;
	
	var a = new Date(a["FECINF"].substring(0,4), a["FECINF"].substring(4,6), a["FECINF"].substring(6,8));
	var b = new Date(b["FECINF"].substring(0,4), b["FECINF"].substring(4,6), b["FECINF"].substring(6,8));

	var resultado = 0;
	var daysTo = AQUtil.daysTo(a, b);
	
	if (daysTo < 0) {
		resultado = 1;
	} else if (daysTo > 0) {
		resultado = -1;
	}

	return resultado;
}

function elgansoCtr_registrarFicheroVentaEdi(numInf, accion, tipo)
{
	var _i = this.iface;

	//var dbTx = AQSql.database("DB2");

	switch(accion) {
		case "crear": {
			if(AQUtil.sqlSelect("eg_fichprocesados","nombre","tipo = 'VENTAS_" + tipo + "' AND nombre = '" + numInf + "'","eg_fichprocesados",_i.cx_)) {
					if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "El fichero " + numInf + " ya ha sido procesado")) {
				  		flfactppal.iface.ponMsgError(sys.translate("El fichero %1 ya ha sido procesado").arg(numInf), "info");
					}
					debug("El fichero " + numInf + " ya ha sido procesado");
					return "continue";
			}

			var fecha = new Date;
			var hoy = fecha.toString().left(10);
			var ahora = fecha.toString().right(8);

			if(!AQUtil.sqlInsert("eg_fichprocesados","nombre, fecha, hora, tipo, estado", numInf + "," + hoy + "," + ahora + ",VENTAS_"+ tipo + ",PTE",_i.cx_)) {
				if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No ha podido registrarse el fichero " + numInf)) {
			  		flfactppal.iface.ponMsgError(sys.translate("No ha podido registrarse el fichero %1").arg(numInf), "info");
				}
				debug("No ha podido registrarse el fichero " + numInf);
				return false;
			}
			break;
		}
		case "marcar_ok":{
			var fichero = AQUtil.sqlSelect("eg_fichprocesados","nombre","tipo = 'VENTAS_" + tipo + "' AND nombre = '" + numInf + "'","eg_fichprocesados",_i.cx_);
			if(!fichero) {
					if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "El fichero " + numInf + " no está registrado")) {
				  		flfactppal.iface.ponMsgError(sys.translate("El fichero %1 no está registrado").arg(numInf), "info");
					}
					debug("El fichero " + numInf + " no está registrado");
					return false;
			}

			if(!AQUtil.sqlUpdate("eg_fichprocesados","estado","OK","tipo = 'VENTAS_" + tipo + "' AND nombre = '" + numInf + "'",_i.cx_)) {
				if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al cambair el estado del fichero " + numInf)) {
			  		flfactppal.iface.ponMsgError(sys.translate("Error al cambair el estado del fichero %1").arg(numInf), "info");
				}
				debug("Error al cambair el estado del fichero " + numInf);
				return false;
			}

			break;
		}
		case "marcar_error": {
			var fichero = AQUtil.sqlSelect("eg_fichprocesados","nombre","tipo = 'VENTAS_" + tipo + "' AND nombre = '" + numInf + "'","eg_fichprocesados",_i.cx_);
			if(!fichero) {
					if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "El fichero " + numInf + " no está registrado")) {
				  		flfactppal.iface.ponMsgError(sys.translate("El fichero %1 no está registrado").arg(numInf), "info");
					}
					debug("El fichero " + numInf + " no está registrado");
					return false;
			}

			if(!AQUtil.sqlUpdate("eg_fichprocesados","estado","ERROR","tipo = 'VENTAS_" + tipo + "' AND nombre = '" + numInf + "'",_i.cx_)) {
				if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al cambair el estado del fichero " + numInf)) {
			  		flfactppal.iface.ponMsgError(sys.translate("Error al cambair el estado del fichero %1").arg(numInf), "info");
				}
				debug("Error al cambair el estado del fichero " + numInf);
				return false;
			}
			break;
		}
	}


	/*if (!sys.removeDatabase("DB2")) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error en la desconexión")) {
	  		flfactppal.iface.ponMsgError(sys.translate("Error en la desconexión"), "info");
		}
		debug("Error en la desconexión");
		return false;
	}*/ 

	return true;
}

function elgansoCtr_procesarLineasVentasEdi(clave1, fechaCav, silent)
{
	debug("procesarLineasVentasEdi");
	var _i = this.iface;

	if(!_i.ficherosVentas_["lineas"] || _i.ficherosVentas_["lineas"] == "") {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se encontró el fichero de lineas")) {
	  			flfactppal.iface.ponMsgError(sys.translate("No se encontró el fichero de lineas"), "info");
			}
			debug("No se encontró el fichero de lineas");
			return false;
	}
	
	var file = new File(_i.ficherosVentas_["lineas"]);
	try {
		file.open(File.ReadOnly);
	} catch(e) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Imposible abrir el fichero " + _i.ficherosVentas_["lineas"])) {
  			flfactppal.iface.ponMsgError(sys.translate("Imposible abrir el fichero %1").arg(_i.ficherosVentas_["lineas"]), "info");
		}
		debug("Imposible abrir el fichero " + _i.ficherosVentas_["lineas"]);
		return false;
	}
	
	var linea = "";
	var campos = [];
	
	var numTalonAnt = "";
	var idComanda = "";
	var fecha = "";
	var hora = "";

	_i.curLinVenta_ = new FLSqlCursor("tpv_lineascomanda");
	_i.curVenta_ = new FLSqlCursor("tpv_comandas");
	_i.curVentaEdi_ = new FLSqlCursor("eg_ventaseci");
	_i.curArqueo_ = new FLSqlCursor("tpv_arqueos");


	var steps = 0;
	while (!file.eof) {
		file.readLine();
		++steps;
	}

	file.close();
    var file = new File(_i.ficherosVentas_["lineas"]);
	try {
		file.open(File.ReadOnly);
	} catch(e) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Imposible abrir el fichero " + _i.ficherosVentas_["lineas"])) {
  			flfactppal.iface.ponMsgError(sys.translate("Imposible abrir el fichero %1").arg(_i.ficherosVentas_["lineas"]), "info");
		}
		debug("Imposible abrir el fichero " + _i.ficherosVentas_["lineas"]);
		return false;
	}
	var step = 0;

	flfactalma.iface.pub_creaPDSilent(steps);

	var cont = 1;
	while(!file.eof) {
		flfactalma.iface.pub_setProgressPDSilent(++step);		
		linea = file.readLine();
		
		campos["CLAVE1"] = linea.substring(0, 10);
		if(campos["CLAVE1"] != clave1) {
			continue;
		}

		campos["CLAVE2"] = linea.substring(10, 15);

		debug("tienda " + _i.lugaresVenta_[campos["CLAVE2"]]["codtienda"]);

		if(_i.lugaresVenta_[campos["CLAVE2"]]["codtienda"] == "SALTAR") {
			debug("saltada");
			continue;
		}

		debug("creando líneas");
		if(_i.tipoVentas_ == "ECI") {
			campos["NUMTALON"] = linea.substring(707, 742);
			while(campos["NUMTALON"].endsWith(" ")) {
				campos["NUMTALON"] = campos["NUMTALON"].substring(0,campos["NUMTALON"].length-1);
			}	
		}
		else {
			campos["NUMTALON"] = cont++;
		}

		debug("NUMTALON /" + campos["NUMTALON"] + "/");
		
		campos["EANVEN"] = linea.substring(620, 637);
		while(campos["EANVEN"].endsWith(" ")) {
			campos["EANVEN"] = campos["EANVEN"].substring(0,campos["EANVEN"].length-1);
		}	
		debug("EANVEN /" + campos["EANVEN"] + "/");

		fecha = linea.substring(719, 727);

		if(!fecha || fecha == "" || fecha == "        " || fecha.isEmpty()) {
			fecha = fechaCav.substring(0,8);
		}

		hora = linea.substring(727, 731);
		if(!hora || hora == "" || hora == "    " || hora.isEmpty()) {
			hora = fechaCav.substring(8,12);
		}
		fecha = fecha.substring(0,4) + "-" + fecha.substring(4,6) + "-" + fecha.substring(6,8);
		hora = hora.substring(0,2) + ":" + hora.substring(2,4) + ":00";

		if(!hora || hora == "" || hora == "0" || hora == "00:00:00" || hora == "  :  :00" || hora == "::00") {
			hora = "00:00:01";
		}
		
		if(numTalonAnt == "" || numTalonAnt != campos["NUMTALON"]) {
			idComanda = AQUtil.sqlSelect("tpv_comandas","idtpv_comanda","codventaeci = '" + campos["NUMTALON"] + "'");
			if(!idComanda) {
				idComanda = _i.crearVentaEdi(fecha, hora, campos, silent);
				if(!idComanda) {
					if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al crear la venta " + campos["NUMTALON"])) {
			  			flfactppal.iface.ponMsgError(sys.translate("Error al crear la venta %1").arg(campos["NUMTALON"]), "info");
					}
					debug("Error al crear la venta " + campos["NUMTALON"]);
					return false;
				}
			}
		}		

		if(!_i.crearLineaEdi(idComanda, campos, linea)) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al crear la linea para " + campos["NUMTALON"])) {
	  			flfactppal.iface.ponMsgError(sys.translate("Error al crear la linea para %1").arg(campos["NUMTALON"]), "info");
			}
			debug("Error al crear la linea para " + campos["NUMTALON"]);
			return false;
		}

		numTalonAnt = campos["NUMTALON"];
	} 

	return true;
}

function elgansoCtr_crearVentaEdi(fecha, hora, campos, silent)
{
	var _i = this.iface;

	_i.curVenta_.setActivatedCommitActions(false);
	_i.curVenta_.setActivatedCheckIntegrity(false);
	
	var codTienda = _i.lugaresVenta_[campos["CLAVE2"]]["codtienda"];
	if(!codTienda || codTienda == "") {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se encontró la tienda " + campos["CLAVE2"])) {
  			flfactppal.iface.ponMsgError(sys.translate("No se encontró la tienda %1").arg(campos["CLAVE2"]), "info");
		}
		debug("No se encontró la tienda " + campos["CLAVE2"]);
		return false;
	}

	_i.curVenta_.setModeAccess(_i.curVenta_.Insert);
	_i.curVenta_.refreshBuffer();

	_i.curVenta_.setValueBuffer("codalmacen", _i.lugaresVenta_[campos["CLAVE2"]]["codalmacen"]);
	_i.curVenta_.setValueBuffer("codtienda", codTienda);
	_i.curVenta_.setValueBuffer("codtpv_puntoventa", _i.lugaresVenta_[campos["CLAVE2"]]["puntoventa"]);

	if(_i.tipoVentas_ == "ECI") {
		_i.curVenta_.setValueBuffer("codventaeci", campos["NUMTALON"]);
	}
	
	_i.curVenta_.setValueBuffer("estado", "Abierta");
	_i.curVenta_.setValueBuffer("codpago", "TARJ");
	_i.curVenta_.setValueBuffer("tipopago", "Tarjeta");
	_i.curVenta_.setValueBuffer("codtpv_agente", "9999");
	_i.curVenta_.setValueBuffer("tipodoc", "VENTA");
	_i.curVenta_.setValueBuffer("total", 0);
	_i.curVenta_.setValueBuffer("saldopendiente", 0);
	_i.curVenta_.setValueBuffer("saldoconsumido", 0);
	_i.curVenta_.setValueBuffer("saldonosincro", 0);
	_i.curVenta_.setValueBuffer("pagado", 0);
	_i.curVenta_.setValueBuffer("neto", 0);
	_i.curVenta_.setValueBuffer("pendiente", 0);
	_i.curVenta_.setValueBuffer("totaliva", 0);
	_i.curVenta_.setValueBuffer("ptesaldo", false);
	_i.curVenta_.setValueBuffer("editable", true);
	_i.curVenta_.setValueBuffer("ptesincrofactura", false);
	_i.curVenta_.setValueBuffer("anulada", true);
	_i.curVenta_.setValueBuffer("sincronizada", false);
	_i.curVenta_.setValueBuffer("nombrecliente", "Consumidor Final ECI");
	_i.curVenta_.setValueBuffer("cifnif", "999999990");
	_i.curVenta_.setValueBuffer("direccion", "-");
	_i.curVenta_.setValueBuffer("fecha", fecha);
	_i.curVenta_.setValueBuffer("hora", hora);
debug("fecha " + fecha);
debug("hora " + hora);
	var codigo = _i.obtenerCodigoComandaEdi(_i.curVenta_, codTienda);
	if(codigo.endsWith("NaN")) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Cálculo de código erróneo para la tienda " + codTienda)) {
  			flfactppal.iface.ponMsgError(sys.translate("Cálculo de código erróneo para la tienda %1").arg(odTienda), "info");
		}
		debug("Cálculo de código erróneo para la tienda " + codTienda);
		return false;
	}
	debug("codComanda " + codigo);
	_i.curVenta_.setValueBuffer("codigo", codigo);

	if(!_i.curVenta_.commitBuffer()) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Ocurrió un error creando la venta")) {
  			flfactppal.iface.ponMsgError(sys.translate("Ocurrió un error creando la venta"), "info");
		}
		debug("Ocurrió un error creando la venta");
		return false;
	}

	idComanda = _i.curVenta_.valueBuffer("idtpv_comanda");

	if(_i.tipoVentas_ == "ECI") {
		if(!AQUtil.execSql("INSERT INTO eg_ventaseci (idcomanda,codventaeci,codtiendaeci,codvendedor) VALUES (" + idComanda + ",'" + campos["NUMTALON"] + "','" + _i.lugaresVenta_[campos["CLAVE2"]]["codeci"] + "','" + campos["EANVEN"] + "')")) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al guardar la venta eci")) {
	  			flfactppal.iface.ponMsgError(sys.translate("Error al guardar la venta eci"), "info");
			}
			debug("Error al guardar la venta eci");
			return false;
		}
	} else {
		if(!AQUtil.execSql("INSERT INTO eg_ventaslafayette (idcomanda,codventalf,codtiendalf,codvendedor) VALUES (" + idComanda + ",'" + campos["NUMTALON"] + "','" + _i.lugaresVenta_[campos["CLAVE2"]]["codeci"] + "','" + campos["EANVEN"] + "')")) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al guardar la venta lafayette")) {
	  			flfactppal.iface.ponMsgError(sys.translate("Error al guardar la venta lafayette"), "info");
			}
			debug("Error al guardar la venta lafayette");
			return false;
		}
	}

	_i.arrTalones_[_i.arrTalones_.length] = campos["NUMTALON"];

	_i.arrVentas_[campos["NUMTALON"]] = [];
	_i.arrVentas_[campos["NUMTALON"]]["codigo"] = codigo;
	_i.arrVentas_[campos["NUMTALON"]]["id"] = idComanda;
	_i.arrVentas_[campos["NUMTALON"]]["tienda"] = codTienda;
	_i.arrVentas_[campos["NUMTALON"]]["fecha"] = fecha;
	_i.arrVentas_[campos["NUMTALON"]]["puntoventa"] = _i.lugaresVenta_[campos["CLAVE2"]]["puntoventa"];

	return idComanda;
}

function elgansoCtr_crearLineaEdi(idComanda, campos, linea)
{
	var _i = this.iface;

	_i.curLinVenta_.setModeAccess(_i.curLinVenta_.Insert);
	_i.curLinVenta_.refreshBuffer();

	campos["EANART"] = linea.substring(20, 37);
	debug("EANART /" + campos["EANART"] + "/");
	barcode = campos["EANART"];

	while(barcode.search(" ") != -1) {
		barcode = barcode.replace(" ","");
	}

	barcode = _i.dameBarcodeViejo(barcode);

	var referenciaPack = AQUtil.sqlSelect("articulos a INNER JOIN atributosarticulos aa ON a.referencia = aa.referencia", "a.referencia", "aa.barcode = '" + barcode + "' AND a.stockcomp", "articulos,atributosarticulos");

	if (referenciaPack) {
		barcode = AQUtil.sqlSelect("articuloscomp", "barcode", "refcompuesto = '" + referenciaPack + "'");
	}

	if(barcode == "0000000000000") {
		barcode = "0000000020002";
	}

	if(_i.tipoVentas_ == "ECI") {
		campos["VALVEN"] = linea.substring(326, 341);
		debug("VALVEN /" + campos["VALVEN"] + "/");
		precio = campos["VALVEN"];

		while(precio.startsWith("0") || precio.startsWith(" ")) {
			precio = precio.substring(1,precio.length);
		}
		if(!precio || precio == "") {
			precio = 0;
		}
		else {
			precio = parseFloat(precio) / 1000;
		}
	}
	else {
		campos["PRENETCT"] = linea.substring(341, 356);
		debug("PRENETCT /" + campos["PRENETCT"] + "/");
		precio = campos["PRENETCT"];	

		while(precio.startsWith("0") || precio.startsWith(" ")) {
			precio = precio.substring(1,precio.length);
		}
		if(!precio || precio == "") {
			precio = 0;
		}
		else {
			precio = parseFloat(precio) / 1000;
		}

		precio = precio + ((precio * _i.iva_) / 100);
	}

	campos["CANVEN"] = linea.substring(551, 566);
	debug("CANVEN /" + campos["CANVEN"] + "/");

	campos["CANDEV"] = linea.substring(605, 620);
	debug("CANDEV /" + campos["CANDEV"] + "/");

	campos["CANVENNET"] = linea.substring(742, 757);
	debug("CANVENNET /" + campos["CANVENNET"] + "/");
			
		cantidad = campos["CANVEN"];
	while(cantidad.startsWith("0") || cantidad.startsWith(" ")) {
		cantidad = cantidad.substring(1,cantidad.length);
	}

	if(cantidad == "" || !cantidad) {	
		cantidad = campos["CANDEV"];
		while(cantidad.startsWith("0") || cantidad.startsWith(" ")) {
			cantidad = cantidad.substring(1,cantidad.length);
		}
		if(_i.tipoVentas_ != "ECI") {
			cantidad = cantidad * -1;
		}
	}

	if(cantidad == "" || !cantidad) {	
		cantidad = campos["CANVENNET"];
		while(cantidad.startsWith("0") || cantidad.startsWith(" ")) {
			cantidad = cantidad.substring(1,cantidad.length);
		}	
		if(cantidad != "" && cantidad ) {
			var cantAux = (parseFloat(cantidad) / 1000);
			if(cantAux < 0)
				return true;
		}
	}

	if(cantidad == "" || !cantidad) {
		return true;
	}		
	cantidad = (parseFloat(cantidad) / 1000);

	debug("cantidad " + cantidad);
	debug("precio " + precio);

	_i.curLinVenta_.setValueBuffer("idtpv_comanda", _i.arrVentas_[campos["NUMTALON"]]["id"]);
	_i.curLinVenta_.setValueBuffer("codcomanda", _i.arrVentas_[campos["NUMTALON"]]["codigo"]);
	_i.curLinVenta_.setValueBuffer("codtienda", _i.arrVentas_[campos["NUMTALON"]]["tienda"]);
	
	var qArt = new FLSqlQuery();
	qArt.setFrom("atributosarticulos at INNER JOIN articulos a ON at.referencia = a.referencia");
	qArt.setSelect("a.referencia, a.descripcion, at.talla");
	qArt.setWhere("at.barcode = '" + barcode + "'");
	if (!qArt.exec()) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se pudo ejecutar la consulta sobre atriutosarticulos")) {
  			flfactppal.iface.ponMsgError(sys.translate("No se pudo ejecutar la consulta sobre atriutosarticulos"), "info");
		} 
		debug("No se pudo ejecutar la consulta " + qArt.sql());
		return false;
	}

	var referencia = "";
	var descripcion = "";
	var talla = "";
	if(qArt.first()) {
		referencia = qArt.value("a.referencia");
		descripcion = qArt.value("a.descripcion");
		talla = qArt.value("at.talla");
	}
	else {
		descripcion = "GENERICO (barcode en fichero edi " + barcode + ")";
		barcode = "0000000020002";
		referencia = "20002";
		talla = "GE";
	}

	var fecha = _i.arrVentas_[campos["NUMTALON"]]["fecha"];
	if(!fecha || fecha == "") {
		fecha = new Date();
	}

	if(precio != 0) {
		if(_i.tipoVentas_ == "ECI") {
			pvpUnitario = precio/cantidad;
		}
		else{
			pvpUnitario = precio;
			precio = precio * cantidad;
		}
			
		pvpUniSinIva = pvpUnitario / ((100 + _i.iva_) / 100);
		pvpTotalSinIva = pvpUniSinIva * cantidad;
		
	}
	else {
		pvpUnitario = 0;
		pvpUniSinIva = 0;
		pvpTotalSinIva = 0;
	}

	_i.curLinVenta_.setValueBuffer("barcode", barcode);
	_i.curLinVenta_.setValueBuffer("referencia", referencia);
	_i.curLinVenta_.setValueBuffer("descripcion", descripcion);
	_i.curLinVenta_.setValueBuffer("talla", talla);
	_i.curLinVenta_.setValueBuffer("cantidad", cantidad);
	_i.curLinVenta_.setValueBuffer("pvpunitario", pvpUniSinIva);
	_i.curLinVenta_.setValueBuffer("codimpuesto", "GEN");
	_i.curLinVenta_.setValueBuffer("iva", _i.iva_);
	_i.curLinVenta_.setValueBuffer("ivaincluido", true);

	_i.curLinVenta_.setValueBuffer("pvpsindto", pvpTotalSinIva);
	_i.curLinVenta_.setValueBuffer("pvptotal", pvpTotalSinIva);

	_i.curLinVenta_.setValueBuffer("pvpunitarioiva", pvpUnitario);
	_i.curLinVenta_.setValueBuffer("pvptotaliva", precio);
	_i.curLinVenta_.setValueBuffer("pvpsindtoiva", precio);
	_i.curLinVenta_.setValueBuffer("idsincro", formRecordlineaspedidoscli.iface.pub_commonCalculateField("idsincro", _i.curLinVenta_));


	if(!_i.curLinVenta_.commitBuffer()) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se pudo crear la línea")) {
  			flfactppal.iface.ponMsgError(sys.translate("No se pudo crear la línea"), "info");
		} 
		debug("No se pudo crear la línea");
		return false;
	} 

	return true;
}

function elgansoCtr_cerrarVentaEdi(idComanda, numTalon)
{
	var _i = this.iface;

	var codArqueo = _i.crearArqueoVentaEdi(numTalon);
	debug("codArqueo " + codArqueo);
	if(!codArqueo) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al crear el arqueo")) {
  			flfactppal.iface.ponMsgError(sys.translate("Error al crear el arqueo"), "info");
		} 
		debug("Error al crear el arqueo");
		return false;
	}

	var tipoDoc = "VENTA";

	if(parseFloat(AQUtil.sqlSelect("tpv_comandas","total","idtpv_comanda = " + idComanda)) < 0){
		tipoDoc = "DEVOLUCION";
	}

	if (!AQUtil.execSql("UPDATE tpv_comandas SET estado = 'Cerrada', sincronizada = true, editable = false, pagado = total, tipodoc = '" + tipoDoc + "' WHERE idtpv_comanda = " + idComanda)) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al cerrar la venta")) {
  			flfactppal.iface.ponMsgError(sys.translate("Error al cerrar la venta"), "info");
		} 
		debug("Error al cerrar la venta");
		return false;
	}
	
	if(!_i.crearPagoVentaEdi(numTalon, codArqueo)) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al crear el pago")) {
  			flfactppal.iface.ponMsgError(sys.translate("Error al crear el pago"), "info");
		} 
		debug("Error al crear el pago");
		return false;
	}

	var d = new Date();
	if (!formtpv_tiendas.iface.marcaFechaSincroTienda(_i.arrVentas_[numTalon]["tienda"], "VENTAS_TPV", d)) {
		return false;
	}

	return true;
}

function elgansoCtr_crearArqueoVentaEdi(clave)
{debug("creando arqueo **************************");
	var _i = this.iface;

	var codTienda = _i.arrVentas_[clave]["tienda"];
	var fecha = _i.arrVentas_[clave]["fecha"];
	var fechaFin = fecha;
	if("fechafin" in _i.arrVentas_[clave]) {
		fechaFin = _i.arrVentas_[clave]["fechafin"];
	}
	debug("tienda " + codTienda);
	debug("fecha " + fecha);
	debug("fechafin " + fechaFin);

	var idArqueo = AQUtil.sqlSelect("tpv_arqueos","idtpv_arqueo","codtienda = '" + codTienda + "' and diadesde = '" + fecha + "'");
	if(idArqueo) {
		return idArqueo;
	}

	var codTpvPtoVenta = AQUtil.sqlSelect("tpv_puntosventa","codtpv_puntoventa","codtienda = '" + codTienda + "'");

	_i.curArqueo_.setActivatedCommitActions(false);
	_i.curArqueo_.setActivatedCheckIntegrity(false);

	_i.curArqueo_.setModeAccess(_i.curArqueo_.Insert);
	_i.curArqueo_.refreshBuffer();
	_i.curArqueo_.setValueBuffer("abierta", false);
	_i.curArqueo_.setValueBuffer("sincronizado", true);
	_i.curArqueo_.setValueBuffer("idfactura", 0);
	_i.curArqueo_.setValueBuffer("diadesde", fecha);
	_i.curArqueo_.setValueBuffer("diahasta", fechaFin);
	_i.curArqueo_.setValueBuffer("horadesde", "00:00:01");
	_i.curArqueo_.setValueBuffer("horahasta", "23:59:59");
	_i.curArqueo_.setValueBuffer("ptoventa", codTpvPtoVenta);
	_i.curArqueo_.setValueBuffer("codtpv_agenteapertura", "9999");
	_i.curArqueo_.setValueBuffer("codtienda", codTienda);

	var codArqueo = formRecordtpv_arqueos.iface.codigoArqueo(_i.curArqueo_);

	_i.curArqueo_.setValueBuffer("idtpv_arqueo", codArqueo);

	if (!_i.curArqueo_.commitBuffer()) {
		return false;
	}


	return codArqueo;
}

function elgansoCtr_crearPagoVentaEdi(clave, codArqueo)
{
	var _i = this.iface;

	if(!codArqueo || !clave) {
		return false;
	}

	var fecha = _i.arrVentas_[clave]["fecha"];
	var codTienda = _i.arrVentas_[clave]["tienda"];
	var codComanda = _i.arrVentas_[clave]["codigo"];
	var idComanda = _i.arrVentas_[clave]["id"];
	var codTpvPtoVenta = _i.arrVentas_[clave]["puntoventa"];

	var importe = AQUtil.sqlSelect("tpv_comandas","total","idtpv_comanda = " + idComanda);
	if(!importe) {
		importe = 0;
	}

	var curPago = new FLSqlCursor("tpv_pagoscomanda");
	curPago.setModeAccess(curPago.Insert);
	curPago.refreshBuffer();
	curPago.setValueBuffer("idtpv_comanda", idComanda);
	curPago.setValueBuffer("codcomanda", codComanda);
	curPago.setValueBuffer("idtpv_arqueo", codArqueo);
	curPago.setValueBuffer("fecha", fecha);
	curPago.setValueBuffer("editable", true);
	curPago.setValueBuffer("nogenerarasiento", true);
	curPago.setValueBuffer("anulado", false);
	curPago.setValueBuffer("importe", importe);
	curPago.setValueBuffer("estado", "Pagado");
	curPago.setValueBuffer("codpago", _i.pagoTarjeta_);
	curPago.setValueBuffer("codtpv_puntoventa", codTpvPtoVenta);
	curPago.setValueBuffer("codtpv_agente", "9999");
	curPago.setValueBuffer("codtienda", codTienda);

	curPago.setValueBuffer("idsincro", formRecordtpv_pagoscomanda.iface.commonCalculateField("idsincro", curPago));

	if (!curPago.commitBuffer()) {
		debug("error commit pago");
		return false;
	}
	
	return true;
}

function elgansoCtr_procesarLugaresVenta(clave1, silent, tipo, centros)
{
	var _i = this.iface;

	if(!clave1 || clave1 == "") {
		return false;
	}

	if(!_i.ficherosVentas_["tiendas"] || _i.ficherosVentas_["tiendas"] == "") {
			debug("No se encontró el fichero de tiendas");
			return false;
	}
	
	var file = new File(_i.ficherosVentas_["tiendas"]);
	try {
		file.open(File.ReadOnly);
	} catch(e) {
		if(!silent) {
			sys.errorMsgBox(sys.translate("Imposible abrir el fichero %1").arg(_i.ficherosVentas_["tiendas"]));
		}
		else {
			sys.translate("Imposible abrir el fichero %1").arg(_i.ficherosVentas_["tiendas"]);
		}
		debug("Imposible abrir el fichero " + _i.ficherosVentas_["tiendas"]);
		return false;
	}
		
	var linea = "";
	var campos = [];
	_i.lugaresVenta_ = [];

	while(!file.eof) {
		linea = file.readLine();
		campos["CLAVE1"] = linea.substring(0, 10);
		if(campos["CLAVE1"] != clave1) {
			continue;
		}

		campos["CLAVE2"] = linea.substring(10, 15);
		campos["EANLUG"] = linea.substring(15, 32);

		while(campos["EANLUG"].search(" ") != -1) {
			campos["EANLUG"] = campos["EANLUG"].replace(" ","");
		}

		_i.lugaresVenta_[campos["CLAVE2"]] = [];
		_i.lugaresVenta_[campos["CLAVE2"]]["codeci"] = campos["EANLUG"];

		var codTienda = "";
		//Procesar solamente ciertos centros
		if(centros && centros != "") {
			debug("eanLug " + campos["EANLUG"]);
			if(centros.find(campos["EANLUG"]) == -1) {
				debug("continue");
				codTienda = "SALTAR";
				_i.lugaresVenta_[campos["CLAVE2"]]["codtienda"] = codTienda;
				continue;
			}
		}
		
		codTienda = AQUtil.sqlSelect("tpv_tiendas","codtienda","codeci = '" + campos["EANLUG"] + "'");
		
		if(!codTienda || codTienda == "") {
			if(tipo == "ECI") {
				codTienda = "AECF";
			}
			else {
				codTienda = "ALFF";
			}
		}

		_i.lugaresVenta_[campos["CLAVE2"]]["codtienda"] = codTienda;
		_i.lugaresVenta_[campos["CLAVE2"]]["puntoventa"] = AQUtil.sqlSelect("tpv_puntosventa","codtpv_puntoventa","codtienda = '" + codTienda + "'");
		_i.lugaresVenta_[campos["CLAVE2"]]["codalmacen"] = AQUtil.sqlSelect("tpv_tiendas","codalmacen","codtienda = '" + codTienda + "'");
		
	} 
	
	return true;
}

function elgansoCtr_egCambiarVentasEdi()
{
	var _i = this.iface;

	var dialog = new Dialog;
	dialog.caption = "Introducza codigos operacionales a cambiar";
	dialog.okButtonText = sys.translate("OK");
	dialog.cancelButtonText = sys.translate("Cancelar");
	
	var opOrigen = new LineEdit;
	opOrigen.label = "Origen";
	dialog.add(opOrigen);

	var opDestino = new LineEdit;
	opDestino.label = "Destino";
	dialog.add(opDestino);
	
	var opTipo = new LineEdit;
	opTipo.label = "Tipo (ECI,LAFAYETTE)";
	dialog.add(opTipo);

	if (!dialog.exec()) {
		return false;
	}

	var origen = opOrigen.text;
	var destino = opDestino.text;

	var tablaVentas = "eg_ventaseci";
	var campoTienda = "codtiendaeci";
	if(opTipo.text == "LAFAYETTE") {
		tablaVentas = "eg_ventaslafayette";
		campoTienda = "codtiendalf";
	}
	/*var origen = "8422416209334";
	var destino = "8422416106626";*/

	if(!origen || origen == "" || !destino || destino == "") {
		return false;
	}

	var curTiendaDestino = new FLSqlCursor("tpv_tiendas");
	curTiendaDestino.select("codeci = '" + destino + "'");
	if(!curTiendaDestino.first())
		return;

	curTiendaDestino.setModeAccess(curTiendaDestino.Edit);
	curTiendaDestino.refreshBuffer();

	var codTienda = curTiendaDestino.valueBuffer("codtienda");
	var prefijoArq = curTiendaDestino.valueBuffer("prefijocod");
	var codAlmacen = curTiendaDestino.valueBuffer("codalmacen");

	if(!codTienda || codTienda == "" || !prefijoArq || prefijoArq == "" || !codAlmacen || codAlmacen == "") {
		sys.errorMsgBox("No se encontraron los datos de la tienda nueva");
		debug("No se encontraron los datos de la tienda nueva");
		return false;
	}

	var qL = new FLSqlQuery();
	qL.setFrom("tpv_lineascomanda");
	qL.setSelect("idtpv_linea");

	if(!AQUtil.execSql("update tpv_comandas set estado = 'Abierta', sincronizada = false, editable = true where idtpv_comanda IN (select idcomanda from " + tablaVentas + " where " + campoTienda + " ='" + destino + "')")) {
		return false;
	}

	var qV = new FLSqlQuery();
	qV.setFrom(tablaVentas + " v INNER JOIN tpv_comandas c ON v.idcomanda = c.idtpv_comanda");
	qV.setSelect("idcomanda");
	qV.setWhere(campoTienda + " ='" + destino + "' AND c.codtienda <> '" + codTienda + "'");

	if (!qV.exec()) {
		sys.errorMsgBox("No se pudo ejecuta la consulta");
		debug("No se pudo ejecutar la consulta " + qV.sql());
		return false;
	}
	
	var curVenta = new FLSqlCursor("tpv_comandas");
	curVenta.setActivatedCommitActions(false);
	curVenta.setActivatedCheckIntegrity(false);

	var curLinea = new FLSqlCursor("tpv_lineascomanda");
	var curPago = new FLSqlCursor("tpv_pagoscomanda");
	var curArqueo = new FLSqlCursor("tpv_arqueos");
	curArqueo.setActivatedCommitActions(false);
	curArqueo.setActivatedCheckIntegrity(false);

	var fecha = false;
	
	AQUtil.createProgressDialog("Cambiando ventas de tienda...", qV.size());
	var p = 0;

	while(qV.next()) {
		AQUtil.setProgress(p++);

		curVenta.select("idtpv_comanda = " + qV.value("idcomanda"));
		if(!curVenta.first()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	
		curVenta.setModeAccess(curVenta.Edit);
		curVenta.refreshBuffer();
	
		fecha = curVenta.valueBuffer("fecha");

		if(curVenta.valueBuffer("codtienda") == codTienda) {
			//sys.errorMsgBox("Las tiendas de origen y destino son la misma");
			debug("Las tiendas de origen y destino son la misma");
			continue;
		}

		var codTpvPtoVenta = AQUtil.sqlSelect("tpv_puntosventa","codtpv_puntoventa","codtienda = '" + codTienda + "'");
		
		curVenta.setValueBuffer("codtienda", codTienda);
		curVenta.setValueBuffer("codalmacen", codAlmacen);

		var codigo = _i.obtenerCodigoComandaEdi(curVenta, codTienda);
		if(codigo.endsWith("NaN")) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Cálculo de código erróneo para la tienda " + codTienda)) {
	  			flfactppal.iface.ponMsgError(sys.translate("Cálculo de código erróneo para la tienda %1").arg(odTienda), "info");
			}
			debug("Cálculo de código erróneo para la tienda " + codTienda);
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
		curVenta.setValueBuffer("codigo", codigo);
		curVenta.setValueBuffer("codtpv_puntoventa", codTpvPtoVenta);

		if(!curVenta.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
		
		qL.setWhere("idtpv_comanda = " + qV.value("idcomanda"));
		if (!qL.exec()) {
			sys.errorMsgBox("No se pudo ejecuta la consulta");
			debug("No se pudo ejecutar la consulta " + qV.sql());
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

		while(qL.next()) {
			curLinea.select("idtpv_linea = " + qL.value("idtpv_linea"));
			if(!curLinea.first()) {
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}
			curLinea.setModeAccess(curLinea.Edit);
			curLinea.refreshBuffer();
			curLinea.setValueBuffer("ptestock", true);
			if(!curLinea.commitBuffer()) {
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}
		}

		curPago.select("idtpv_comanda = " + qV.value("idcomanda"));
		if(!curPago.first()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
		curPago.setModeAccess(curPago.Edit);
		curPago.refreshBuffer();

		var arqueoViejo = curPago.valueBuffer("idtpv_arqueo");
		
		var idArqueo = AQUtil.sqlSelect("tpv_arqueos","idtpv_arqueo","codtienda = '" + codTienda + "' and diadesde = '" + fecha + "'");
		if(!idArqueo) {
			

			curArqueo.setModeAccess(curArqueo.Insert);
			curArqueo.refreshBuffer();
			curArqueo.setValueBuffer("abierta", true);
			curArqueo.setValueBuffer("sincronizado", true);
			curArqueo.setValueBuffer("idfactura", 0);
			curArqueo.setValueBuffer("diadesde", fecha);
			curArqueo.setValueBuffer("horadesde", "00:00:01");
			curArqueo.setValueBuffer("ptoventa", codTpvPtoVenta);
			curArqueo.setValueBuffer("codtpv_agenteapertura", "9999");
			curArqueo.setValueBuffer("codtienda", codTienda);

			idArqueo = formRecordtpv_arqueos.iface.codigoArqueo(curArqueo);

			curArqueo.setValueBuffer("idtpv_arqueo", idArqueo);

			if (!curArqueo.commitBuffer()) {
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}
		}

		curPago.setValueBuffer("idtpv_arqueo", idArqueo);

		if(!curPago.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

		if(!formtpv_arqueos.iface.actualizarTotalesArqueo(arqueoViejo)) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	} 

	if(!AQUtil.execSql("update tpv_comandas set estado = 'Cerrada', sincronizada = true, editable = false where idtpv_comanda IN (select idcomanda from " + tablaVentas + " where " + campoTienda + " ='" + destino + "')")) {
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	
	return true;
}

function elgansoCtr_egCorregirPagosEdiDuplicados()
{
	var _i = this.iface;

	var hoy = new Date();
	var ayer = AQUtil.addDays(hoy, -1);
	var fecha = ayer;

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = ayer;
	dialog.add(dFechaIni);

	if (!dialog.exec()) {
		return false;
	}
	
	fecha = dFechaIni.date;

	var qV = new FLSqlQuery();
	qV.setFrom("tpv_pagoscomanda");
	qV.setSelect("idtpv_comanda");
	qV.setWhere("idtpv_comanda in (select idtpv_comanda from tpv_comandas where codtienda in (select codtienda from tpv_tiendas where idempresa = 15) and fecha = '" + fecha + "') group by idtpv_comanda having count(idtpv_comanda) > 1");
	if (!qV.exec()) {
		sys.errorMsgBox("No se pudo ejecuta la consulta");
		debug("No se pudo ejecutar la consulta " + qV.sql());
		return false;
	}
debug("Num duplicados " + qV.size());

	var borrados = 0;
	while(qV.next()) {
		if(!AQUtil.execSql("delete from tpv_pagoscomanda where idpago in (select idpago from tpv_pagoscomanda where idtpv_comanda = " + qV.value("idtpv_comanda") + " limit 1)")) {
			sys.errorMsgBox("Error al borrar el pago");
			debug("Error al borrar el pago");
			return false;
		}
		borrados++;
	}

	debug("borrados " + borrados);
	var qA = new FLSqlQuery();
	qA.setFrom("tpv_arqueos");
	qA.setSelect("idtpv_arqueo");
	qA.setWhere("codtienda in (select codtienda from tpv_tiendas where idempresa = 15) and diadesde = '" + fecha + "'");
	if (!qA.exec()) {
		sys.errorMsgBox("No se pudo ejecuta la consulta");
		debug("No se pudo ejecutar la consulta " + qA.sql());
		return false;
	}

	while(qA.next()) {
		if(!formtpv_arqueos.iface.actualizarTotalesArqueo(qA.value("idtpv_arqueo"))) {
			sys.errorMsgBox("Error al actualizar los totales del arqueo");
			debug("Error al actualizar los totales del arqueo");
			return false;
		}
	}
	debug("finalizado");
	return true;
}

function elgansoCtr_egRellenarPagosVentasEdi()
{
	var _i = this.iface;

	var tienda = Input.getText(sys.translate("Código de tienda"));
	if(!tienda || tienda == "")
		return false;
	if(!AQUtil.sqlSelect("tpv_tiendas", "codtienda", "codtienda = '" + tienda + "'")) {
		sys.warnMsgBox(sys.translate("No existe la tienda " + tienda));
		return false;
	}
	var ventaIni = Input.getText(sys.translate("Nº venta inicio\nEj: Venta AGPZ00000042 -> Nº 42"));
	if(!ventaIni || ventaIni == "")
		return false;
	if(isNaN(ventaIni) || ventaIni < 1) {
		sys.warnMsgBox(sys.translate("Venta no válida"));
		return false;	
	}
	var ventaFin = Input.getText(sys.translate("Nº venta fin\nEj: Venta AGPZ00000049 -> Nº 49"));
	if(!ventaFin || ventaFin == "")
		return false;
	if(isNaN(ventaFin) || ventaFin < 1 || ventaFin < ventaIni) {
		sys.warnMsgBox(sys.translate("Venta no válida"));
		return false;	
	}

	var curComanda = new FLSqlCursor("tpv_comandas");
	var curPagos = new FLSqlCursor("tpv_pagoscomanda");
	curPagos.setActivatedCommitActions(false);
	var p = 0, codComanda, codArqueo, fechaComanda;

	AQUtil.createProgressDialog("Rellenando ventas...", ventaFin - ventaIni);
	for(num = ventaIni; num <= ventaFin; num++) {
		AQUtil.setProgress(p++);
		codComanda = tienda + flfactppal.iface.cerosIzquierda(num, 8);

		curComanda.select("codigo = '" + codComanda + "'");
		if(!curComanda.first())
			continue;
		curComanda.setModeAccess(curComanda.Browse);
		curComanda.refreshBuffer();
		
		curPagos.setModeAccess(curPagos.Insert);
		curPagos.refreshBuffer();

		fechaComanda = curComanda.valueBuffer("fecha");

		curPagos.setValueBuffer("editable", true);
		curPagos.setValueBuffer("codpago", "TARJ");
		curPagos.setValueBuffer("ptepuntos", false);
		curPagos.setValueBuffer("estado", "Pagado");
		curPagos.setValueBuffer("codtienda", tienda);
		curPagos.setValueBuffer("codtpv_agente", "9999");
		curPagos.setValueBuffer("nogenerarasiento", false);
		curPagos.setValueBuffer("codcomanda", codComanda);
		curPagos.setValueBuffer("fecha", fechaComanda);
		curPagos.setValueBuffer("importe", curComanda.valueBuffer("total"));
		curPagos.setValueBuffer("idtpv_comanda", curComanda.valueBuffer("idtpv_comanda"));
		curPagos.setValueBuffer("idsincro", codComanda + "_" + curPagos.valueBuffer("idpago"));
		curPagos.setValueBuffer("codtpv_puntoventa", curComanda.valueBuffer("codtpv_puntoventa"));

		codArqueo = AQUtil.sqlSelect("tpv_arqueos", "idtpv_arqueo", "codtienda = '" + tienda + "' AND diadesde = '" + fechaComanda + "'");
		if(!codArqueo || codArqueo == "") {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("No existe arqueo para el día " + AQUtil.dateAMDtoDMA(fechaComanda.toString().left(10)) + ". Debe crearlo para continuar."));
			return false;
		}
		curPagos.setValueBuffer("idtpv_arqueo", codArqueo);

		if(!curPagos.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Error al crear los pagos."));
			return false;
		}
		if(!flfact_tpv.iface.totalPagosArqueo(curPagos)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Error al recalcular los arqueos."));
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	return true;
}
////////////////////////////////////////////////////////////////////////

function elgansoCtr_egBorrarContabilidadLafayette()
{
	var _i = this.iface;

	if(!_i.borrarAsientosArqueoLafayette()){
		return false;
	}

	if(!_i.borrarFacturasVentaLafayette()){
		return false;
	}
	
	return true;
}


function elgansoCtr_borrarAsientosArqueoLafayette()
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setSelect("idtpv_arqueo,idasiento");
	q.setFrom("tpv_arqueos");
	q.setWhere("codtienda IN (" + flfact_tpv.iface.tiendasEmpresaLafayette() + ") AND idasiento is not null");

	if (!q.exec()) {
		sys.errorMsgBox(sys.translate("Falló la consulta"));
		return false;
	}

	if (!q.size()) {
		sys.infoMsgBox(sys.translate("No hay asientos de arqueos para eliminar."));
		return true;
	}


	var p = 0;
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Borrando asientos de arqueos..."), q.size());

	var curArqueo = new FLSqlCursor("tpv_arqueos");
	while (q.next()) {
		AQUtil.setProgress(p++);

		curArqueo.select("idtpv_arqueo = '" + q.value("idtpv_arqueo") + "'");

		if(!curArqueo.first()){
			sys.errorMsgBox(sys.translate("No se encuentra el arqueo %1 .").arg(q.value("idtpv_arqueo")));
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

		curArqueo.setModeAccess(curArqueo.Edit);
		curArqueo.refreshBuffer();
		
		if (!flfact_tpv.iface.borrarAsientoArqueo(curArqueo, q.value("idasiento"))) {
			sys.errorMsgBox(sys.translate("Error al borrar el asiento %1 del arqueo %2 .").arg(q.value("idasiento")).arg(q.value("idtpv_arqueo")));
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

		curArqueo.setNull("idasiento");

		if(!curArqueo.commitBuffer()){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	
	return true;

}

function elgansoCtr_borrarFacturasVentaLafayette()
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setSelect("f.codigo");
	q.setFrom("tpv_comandas c INNER JOIN facturascli f ON c.codigo = f.codigo");
	q.setWhere("c.codtienda IN (" + flfact_tpv.iface.tiendasEmpresaLafayette() + ")");

	if (!q.exec()) {
		sys.errorMsgBox(sys.translate("Falló la consulta"));
		return false;
	}

	if (!q.size()) {
		sys.infoMsgBox(sys.translate("No hay facturas de venta para eliminar."));
		return true;
	}

	var p = 0;
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Borrando facturas de venta..."), q.size());

	var curFacturaCli = new FLSqlCursor("facturascli");
	
	while (q.next()) {
		AQUtil.setProgress(p++);

		if(!AQUtil.execSql("UPDATE tpv_comandas SET idfactura = NULL, egcodfactura = NULL where codigo = '" + q.value("f.codigo") + "'")) {
	  		return false;
		}

		curFacturaCli.select("codigo = '" + q.value("f.codigo") + "'");
		
		if(!curFacturaCli.first()){
			sys.errorMsgBox(sys.translate("No se encuentra la factura %1.").arg(q.value("f.codigo")));
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

		curFacturaCli.setModeAccess(curFacturaCli.Del);
		curFacturaCli.refreshBuffer();
		
		if(!curFacturaCli.commitBuffer()){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	
	return true;

}

function elgansoCtr_corregirCantidadRecibidaPlanesProduccion()
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setSelect("pl.codplan");
	q.setFrom("eg_planproduccion pl inner join pedidosprov pr on pl.codplan = pr.codplanprod inner join lineaspedidosprov lp on pr.idpedido = lp.idpedido inner join lineasalbaranesprov la on lp.idlinea = la.idlineapedido");
	q.setWhere("pr.codejercicio = '2017' group by pl.cantrecibida, pl.codplan having sum(la.cantidad) <> pl.cantrecibida");

	debug(q.sql());
	if (!q.exec()) {
		sys.errorMsgBox(sys.translate("Falló la consulta"));
		return false;
	}

	if (!q.size()) {
		sys.infoMsgBox(sys.translate("No hay planes que corregir."));
		return true;
	}

	var p = 0;
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Corrigiendo planes de producción ..."), q.size());

	while (q.next()) {
		AQUtil.setProgress(p++);
	
		/// Aactualiza pedidos
		var qP = new FLSqlQuery();
		qP.setSelect("lp.idlinea");
		qP.setFrom("pedidosprov p inner join lineaspedidosprov lp on p.idpedido = lp.idpedido");
		qP.setWhere("p.codplanprod = '" + q.value("pl.codplan") + "'");

		if (!qP.exec()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			sys.errorMsgBox(sys.translate("Falló la consulta"));
			return false;
		}

		while (qP.next()) {
			var cantAlbaran = parseFloat(AQUtil.sqlSelect("lineasalbaranesprov","sum(cantidad)","idlineapedido = " + qP.value("lp.idlinea")));
			if(!cantAlbaran) {
				cantAlbaran = 0;
			}

			if(!AQUtil.execSql("UPDATE lineaspedidosprov SET totalenalbaran = " + cantAlbaran + " where idlinea = " + qP.value("lp.idlinea"))) {
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				sys.infoMsgBox(sys.translate("Falló al corregir el pedido"));
				return false;
			}

		}

		/// Actualiza Artíclos
		var qA = new FLSqlQuery();
		qA.setSelect("referencia");
		qA.setFrom("eg_productosplanprod");
		qA.setWhere("codplan = '" + q.value("pl.codplan") + "'");

		if (!qA.exec()) {
			sys.errorMsgBox(sys.translate("Falló la consulta"));
			return false;
		}

		while (qA.next()) {
			var canRecibida = parseFloat(AQUtil.sqlSelect("pedidosprov p INNER JOIN lineaspedidosprov lp ON p.idpedido = lp.idpedido", "SUM(lp.totalenalbaran)", "p.codplanprod = '" + q.value("pl.codplan") + "' AND lp.referencia = '" + qA.value("referencia") + "'","pedidosprov,lineaspedidosprov"));

			if(!canRecibida) {
				canRecibida = 0;
			}

			if(!AQUtil.execSql("UPDATE eg_productosplanprod SET canrecibida = " + canRecibida + " where codplan = '" + q.value("pl.codplan") + "' and referencia = '" + qA.value("referencia") + "'")) {
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				sys.infoMsgBox(sys.translate("Falló al corregir el articulo"));
				return false;
			}		
		}

		//Actualiza cantidad plan
		var cantPlan = parseFloat(AQUtil.sqlSelect("eg_productosplanprod","sum(canrecibida)","codplan = '" + q.value("pl.codplan") + "'"));
		if(!cantPlan) {
			cantPlan = 0;
		}

		if(!AQUtil.execSql("UPDATE eg_planproduccion SET cantrecibida = " + cantPlan + " where codplan = '" + q.value("pl.codplan") + "'")) {
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				sys.infoMsgBox(sys.translate("Falló al corregir el plan"));
				return false;
			}		
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	debug("total corregidos " + p);
	return true;

}

function elgansoCtr_generarAlbaranPedidosWEB(silent)
{
	var _i = this.iface;

	var procesoIniciado = AQUtil.sqlSelect("eg_fichprocesados", "nombre", "tipo = 'ALBARAN_WEB'");
	
	if(procesoIniciado){
		return true;
	}

	var hoy = new Date();
	sys.addDatabase("aux");

	if (!AQUtil.execSql("INSERT INTO eg_fichprocesados (nombre, fecha, hora, tipo, estado) VALUES ('ALBARAN_WEB', '" + hoy.toString().left(10) + "', '" + hoy.toString().right(8) + "','ALBARAN_WEB', 'En proceso')", "aux")) {
		return false;
	}
	
	var q = new FLSqlQuery();
	q.setSelect("idpedido");
	q.setFrom("pedidoscli");
	q.setWhere("egcodvtaweb is not null AND editable = true AND servido = 'No' AND fecha >= '2017-01-01' AND (anulado = false OR anulado is null)");

	debug(q.sql());

	if (!q.exec()) {
		if(!silent){
			sys.errorMsgBox(sys.translate("Falló la consulta"));
		}
		return false;
	}

	if (!q.size()) {
		if(!silent){
			sys.infoMsgBox(sys.translate("No hay pedidos a los que generar el albarán."));
		}
		return true;
	}

	var curPedido = new FLSqlCursor("pedidoscli");
	var curLineaPedido = new FLSqlCursor("lineaspedidoscli");

	var codTiendaRecogida;
	var codVtaWeb;
	var idAlbaran;
	var p = 0;
	
	if(!silent){
		flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Generando albaranes de pedidos WEB."), q.size());
	}

	while (q.next()) {

		if(!silent){
			AQUtil.setProgress(p++);
		}

		var tieneLineas = AQUtil.sqlSelect("lineaspedidoscli", "idlinea", "idpedido = " + q.value("idpedido"));

		if(!tieneLineas){
			continue;
		}
		
		curPedido.select("idpedido = " + q.value("idpedido"));
		
		if(curPedido.first()){
			curPedido.setModeAccess(curPedido.Browse);
			curPedido.refreshBuffer();

			curLineaPedido.select("idpedido = " + q.value("idpedido"));
			while(curLineaPedido.next()){
				curLineaPedido.setModeAccess(curLineaPedido.Edit);
				curLineaPedido.refreshBuffer();
				curLineaPedido.setValueBuffer("canalbaran", curLineaPedido.valueBuffer("cantidad"));
				curLineaPedido.setValueBuffer("incluiralbaran", true);
				if(!curLineaPedido.commitBuffer()){
					return false;
				}
			}

			var where = "idpedido = " + q.value("idpedido");
			idAlbaran = formpedidoscli.iface.pub_generarAlbaran(where, curPedido);
			
		}
		
		codTiendaRecogida = curPedido.valueBuffer("codtiendarecogida");
		codVtaWeb = curPedido.valueBuffer("egcodvtaweb");

		var curAlbaran = new FLSqlCursor("albaranescli");
		curAlbaran.select("idalbaran = " + idAlbaran);

		if(curAlbaran.first()){
			curAlbaran.setModeAccess(curAlbaran.Edit);
			curAlbaran.refreshBuffer();
			curAlbaran.setValueBuffer("codtiendarecogida", codTiendaRecogida);
			curAlbaran.setValueBuffer("egcodvtaweb", codVtaWeb);

			if(!curAlbaran.commitBuffer()){
				return false;
			}

		}

		if(!curPedido.commitBuffer()){
			return false;
		}

	}

	if(!silent){
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	}
	
	if (!AQUtil.execSql("DELETE FROM eg_fichprocesados WHERE tipo = 'ALBARAN_WEB'","aux")) {
		return false;
	}

	return true;

}

function elgansoCtr_eg_marcaViajesExTienda()
{
  	var _i = this.iface;
  	/// Desactivo esta función Santi.
  	return true;

  	var _mT = formtpv_tiendas.iface;
	var _fTpv = flfact_tpv.iface;

	var nombreLog = _mT.dameNombreLog("MARCAR_VIAJES_TIENDA");
	_i.nombreLog_ = flfactalma.iface.pub_ponLogName(nombreLog);
	var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
	
	if(!dirLog || dirLog == ""){
		dirLog = Dir.home;
	}

	if(dirLog.endsWith("/")){
		_i.nombreFile_ = dirLog + nombreLog;
	}
	else{
		_i.nombreFile_ = dirLog + "/" + nombreLog;
	}

	if(!flfactppal.iface.pub_abreLogFile(_i.nombreLog_, _i.nombreFile_)){
		sys.infoMsgBox("No se ha creado el fichero del log de la consulta.");
	}
  
	var listaTiendas = Input.getText(sys.translate("Lista de tiendas separada por comas y sin espacios"));

	if(!listaTiendas || listaTiendas == ""){
		return false;
	}

	_i.mgr_ = aqApp.db().manager();
	_i.aCx_ = [];
	
	var aT = listaTiendas.split(",");
	aT.sort();
	var codTienda;

	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Conectando...")){
		sys.infoMsgBox("Conectando...");
	}

	for (var i = 0; i < aT.length; i++) {
		codTienda = aT[i];
		if (!_i.conectarMT(codTienda, true)) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No Conectado a " + codTienda)){
				sys.infoMsgBox("No conectado a " + codTienda);
			}
			continue;
		}
		if(!_i.marcaViajesExTienda(codTienda)){
			continue;
		}
	}

  	return true;
}

function elgansoCtr_marcaViajesExTienda(codTienda)
{

	var q = new FLSqlQuery("",codTienda);
	q.setFrom("tpv_lineasmultitransstock");
	q.setSelect("idviajemultitrans");
	q.setWhere("(estado = 'EN TRANSITO' AND (cantenviada = 0 OR fechaex IS NULL) OR (estado = 'CANCELADO' AND fechaex IS NULL)) group by idviajemultitrans");
	
	debug(q.sql());
	if(!q.exec()){
		return false;
	}

	var listaViajes = "";
	while(q.next()){
		listaViajes += "'" + q.value(0) + "',";
	}

	if(listaViajes.length <= 0){
		return true;
	}
	
	listaViajes = listaViajes.left(listaViajes.length-1);

  	var curLV = new FLSqlCursor("tpv_lineasmultitransstock", codTienda);
  	curLV.select("estado = 'CANCELADO' AND idviajemultitrans IN (" + listaViajes + ")");

  	while (curLV.next()) {
    	curLV.setModeAccess(curLV.Edit);
    	curLV.refreshBuffer();
    	curLV.setValueBuffer("extienda", "OK");
    	curLV.setValueBuffer("excentral", "PTE");
    	curLV.setValueBuffer("cerradoex", true);
    	curLV.setValueBuffer("fechaex", AQUtil.sqlSelect("tpv_viajesmultitransstock", "fecha", "idviajemultitrans = '" + curLV.valueBuffer("idviajemultitrans") + "'"));
    	if (!curLV.commitBuffer()) {
      		return false;
    	}
  	}

  	curLV.select("estado = 'EN TRANSITO' AND idviajemultitrans IN (" + listaViajes + ")");

  	while (curLV.next()) {
    	curLV.setModeAccess(curLV.Edit);
    	curLV.refreshBuffer();
    	curLV.setValueBuffer("fechaex", AQUtil.sqlSelect("tpv_viajesmultitransstock", "fecha", "idviajemultitrans = '" + curLV.valueBuffer("idviajemultitrans") + "'"));
    	curLV.setValueBuffer("cerradoex", false);
    	curLV.setValueBuffer("cantenviada", curLV.valueBuffer("cantidad"));
    	curLV.setValueBuffer("cantpterecibir", curLV.valueBuffer("cantidad"));
    	curLV.setValueBuffer("extienda", "OK");
    	curLV.setValueBuffer("excentral", "PTE");
    	if (!curLV.commitBuffer()) {
      		return false;
    	}
  	}

	if(!AQUtil.execSql("UPDATE tpv_viajesmultitransstock SET estado = 'EN TRANSITO', enviocompletado = true, ptesincroenvio = true WHERE idviajemultitrans IN (" + listaViajes + ")", codTienda)) {
		return false;
	}		
  
  	return true;
}

function elgansoCtr_eg_marcaViajesExTiendaCerradoEx()
{
  	var _i = this.iface;
  	/// Desactivo esta función Santi.
  	return true;
  	var _mT = formtpv_tiendas.iface;
	var _fTpv = flfact_tpv.iface;

	var nombreLog = _mT.dameNombreLog("MARCAR_VIAJES_TIENDA_CERRADOEX");
	_i.nombreLog_ = flfactalma.iface.pub_ponLogName(nombreLog);
	var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
	
	if(!dirLog || dirLog == ""){
		dirLog = Dir.home;
	}

	if(dirLog.endsWith("/")){
		_i.nombreFile_ = dirLog + nombreLog;
	}
	else{
		_i.nombreFile_ = dirLog + "/" + nombreLog;
	}

	if(!flfactppal.iface.pub_abreLogFile(_i.nombreLog_, _i.nombreFile_)){
		sys.infoMsgBox("No se ha creado el fichero del log de la consulta.");
	}
  
	var listaTiendas = Input.getText(sys.translate("Lista de tiendas separada por comas y sin espacios"));

	if(!listaTiendas || listaTiendas == ""){
		return false;
	}

	_i.mgr_ = aqApp.db().manager();
	_i.aCx_ = [];
	
	var aT = listaTiendas.split(",");
	aT.sort();
	var codTienda;

	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Conectando...")){
		sys.infoMsgBox("Conectando...");
	}

	for (var i = 0; i < aT.length; i++) {
		codTienda = aT[i];
		if (!_i.conectarMT(codTienda, true)) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No Conectado a " + codTienda)){
				sys.infoMsgBox("No conectado a " + codTienda);
			}
			continue;
		}
		if(!_i.marcaViajesExTiendaCerradoEx(codTienda)){
			continue;
		}
	}

  	return true;
}

function elgansoCtr_marcaViajesExTiendaCerradoEx(codTienda)
{

	var q = new FLSqlQuery("",codTienda);
	q.setFrom("tpv_lineasmultitransstock");
	q.setSelect("idviajemultitrans");
	q.setWhere("estado = 'EN TRANSITO' AND cantenviada = cantidad AND cerradoex group by idviajemultitrans");
	
	debug(q.sql());
	if(!q.exec()){
		return false;
	}

	var listaViajes = "";
	while(q.next()){
		listaViajes += "'" + q.value(0) + "',";
	}

	if(listaViajes.length <= 0){
		return true;
	}
	
	listaViajes = listaViajes.left(listaViajes.length-1);

  	var curLV = new FLSqlCursor("tpv_lineasmultitransstock", codTienda);
  	curLV.select("estado = 'EN TRANSITO' AND idviajemultitrans IN (" + listaViajes + ")");

  	while (curLV.next()) {
    	curLV.setModeAccess(curLV.Edit);
    	curLV.refreshBuffer();
    	curLV.setValueBuffer("fechaex", AQUtil.sqlSelect("tpv_viajesmultitransstock", "fecha", "idviajemultitrans = '" + curLV.valueBuffer("idviajemultitrans") + "'"));
    	curLV.setValueBuffer("cerradoex", false);
    	curLV.setValueBuffer("cantenviada", curLV.valueBuffer("cantidad"));
    	curLV.setValueBuffer("cantpterecibir", curLV.valueBuffer("cantidad"));
    	curLV.setValueBuffer("extienda", "OK");
    	curLV.setValueBuffer("excentral", "PTE");
    	if (!curLV.commitBuffer()) {
      		return false;
    	}
  	}

	if(!AQUtil.execSql("UPDATE tpv_viajesmultitransstock SET estado = 'EN TRANSITO', enviocompletado = true, ptesincroenvio = true WHERE idviajemultitrans IN (" + listaViajes + ")", codTienda)) {
		return false;
	}		
  
  	return true;
}

function elgansoCtr_eg_marcaViajesRxTiendaCerradoRx()
{
  	var _i = this.iface;
  	/// Desactivo esta función Santi.
  	return true;
  	var _mT = formtpv_tiendas.iface;
	var _fTpv = flfact_tpv.iface;

	var nombreLog = _mT.dameNombreLog("MARCAR_VIAJES_TIENDA_CERRADORX");
	_i.nombreLog_ = flfactalma.iface.pub_ponLogName(nombreLog);
	var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
	
	if(!dirLog || dirLog == ""){
		dirLog = Dir.home;
	}

	if(dirLog.endsWith("/")){
		_i.nombreFile_ = dirLog + nombreLog;
	}
	else{
		_i.nombreFile_ = dirLog + "/" + nombreLog;
	}

	if(!flfactppal.iface.pub_abreLogFile(_i.nombreLog_, _i.nombreFile_)){
		sys.infoMsgBox("No se ha creado el fichero del log de la consulta.");
	}
  
	var listaTiendas = Input.getText(sys.translate("Lista de tiendas separada por comas y sin espacios"));

	if(!listaTiendas || listaTiendas == ""){
		return false;
	}

	_i.mgr_ = aqApp.db().manager();
	_i.aCx_ = [];
	
	var aT = listaTiendas.split(",");
	aT.sort();
	var codTienda;

	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Conectando...")){
		sys.infoMsgBox("Conectando...");
	}

	for (var i = 0; i < aT.length; i++) {
		codTienda = aT[i];
		if (!_i.conectarMT(codTienda, true)) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No Conectado a " + codTienda)){
				sys.infoMsgBox("No conectado a " + codTienda);
			}
			continue;
		}
		if(!_i.marcaViajesRxTiendaCerradoRx(codTienda)){
			continue;
		}
	}

  	return true;
}

function elgansoCtr_marcaViajesRxTiendaCerradoRx(codTienda)
{

	var q = new FLSqlQuery("",codTienda);
	q.setFrom("tpv_lineasmultitransstock");
	q.setSelect("idviajemultitrans");
	q.setWhere("estado = 'RECIBIDO' AND (cantrecibida = 0 OR fecharx IS NULL OR cerradorx) group by idviajemultitrans");
	
	debug(q.sql());
	if(!q.exec()){
		return false;
	}

	var listaViajes = "";
	while(q.next()){
		listaViajes += "'" + q.value(0) + "',";
	}

	if(listaViajes.length <= 0){
		return true;
	}
	
	listaViajes = listaViajes.left(listaViajes.length-1);

  	var curLV = new FLSqlCursor("tpv_lineasmultitransstock", codTienda);
  	curLV.select("estado = 'CANCELADO' AND idviajemultitrans IN (" + listaViajes + ")");

  	while (curLV.next()) {
    	curLV.setModeAccess(curLV.Edit);
    	curLV.refreshBuffer();
    	curLV.setValueBuffer("rxtienda", "OK");
    	curLV.setValueBuffer("rxcentral", "PTE");
    	curLV.setValueBuffer("cerradorx", true);
    	curLV.setValueBuffer("fecharx", AQUtil.sqlSelect("tpv_viajesmultitransstock", "fecha", "idviajemultitrans = '" + curLV.valueBuffer("idviajemultitrans") + "'"));
    	if (!curLV.commitBuffer()) {
      		return false;
    	}
  	}

  	curLV.select("estado = 'EN TRANSITO' AND idviajemultitrans IN (" + listaViajes + ")");

  	while (curLV.next()) {
    	curLV.setModeAccess(curLV.Edit);
    	curLV.refreshBuffer();
    	curLV.setValueBuffer("fecharx", AQUtil.sqlSelect("tpv_viajesmultitransstock", "fecha", "idviajemultitrans = '" + curLV.valueBuffer("idviajemultitrans") + "'"));
    	curLV.setValueBuffer("cerradorx", false);
    	curLV.setValueBuffer("cantrecibida", curLV.valueBuffer("cantidad"));
    	curLV.setValueBuffer("cantpterecibir", curLV.valueBuffer("cantidad"));
    	curLV.setValueBuffer("rxtienda", "OK");
    	curLV.setValueBuffer("rxcentral", "PTE");
    	if (!curLV.commitBuffer()) {
      		return false;
    	}
  	}

	if(!AQUtil.execSql("UPDATE tpv_viajesmultitransstock SET estado = 'RECIBIDO', recepcioncompletada = true, ptesincroenvio = true WHERE idviajemultitrans IN (" + listaViajes + ")", codTienda)) {
		return false;
	}		
  
  	return true;
}

function elgansoCtr_eg_eliminarFacturasTiendas()
{
  	var _i = this.iface;
  	/// Función desactivada
  	return true;

	var dialog = new Dialog(sys.translate("INTRODUZCA FILTRO:"));

	var listaTiendas = new LineEdit;
	listaTiendas.label = sys.translate("Lista de tiendas:");;
	dialog.add( listaTiendas );

	var hoy = new Date();
	var fechaDesde = new DateEdit;
	fechaDesde.date = hoy;
	fechaDesde.label = sys.translate("Fecha desde:");
	dialog.add(fechaDesde);

	var fechaHasta = new DateEdit;
	fechaHasta.date = hoy;
	fechaHasta.label = sys.translate("Fecha hasta:");
	dialog.add(fechaHasta);

	var codEjercicio = new LineEdit;
	codEjercicio.label = sys.translate("Cod.Ejercicio:");;
	dialog.add( codEjercicio );

	if (!dialog.exec()) {
		return false;
	}

	var aT = listaTiendas.text.split(",");
	aT.sort();
	var codTienda;

	_i.calcularNumeracion_ = false;

	for (var i = 0; i < aT.length; i++) {
		codTienda = aT[i];
		debug("////////////////// codTienda: " + codTienda);

		var curFactura = new FLSqlCursor("facturascli");
		curFactura.select("codtienda = '" + codTienda + "' AND codejercicio = '" + codEjercicio.text + "' AND fecha BETWEEN '" + fechaDesde.date + "' AND '" + fechaHasta.date + "' AND editable");
		flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Eliminando facturas"), curFactura.size());
		var p = 0;
		while(curFactura.next()) {			
			AQUtil.setProgress(p++);
			curFactura.setModeAccess(curFactura.Del);
			curFactura.refreshBuffer();
			if(AQUtil.sqlSelect("eg_facturastienda","idfactura","idfactura = " + curFactura.valueBuffer("idfactura"))){
				continue;
			}

			if (!AQUtil.execSql("UPDATE tpv_comandas SET idfactura = 1 WHERE idfactura = " + curFactura.valueBuffer("idfactura"))) {
				_i.calcularNumeracion_ = true;
				debug("error al quitar el idfactura");
				AQUtil.destroyProgressDialog();
				return false;
			}
			curFactura.setNull("idfacturarect");
			if (!AQUtil.execSql("UPDATE facturascli SET idfacturarect = NULL WHERE idfacturarect = " + curFactura.valueBuffer("idfactura"))) {
				_i.calcularNumeracion_ = true;
				debug("error al quitar el idfactura");
				AQUtil.destroyProgressDialog();
				return false;
			}
			if(!curFactura.commitBuffer()) {
				_i.calcularNumeracion_ = true;
				debug("error al borrar la factura " + curFactura.valueBuffer("codigo"));
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
		AQUtil.destroyProgressDialog();
		_i.calcularNumeracion_ = false;

	}

	return true;	
}

function elgansoCtr_marcaViajeRx(oParam)
{
  	var idViaje = oParam.idViaje;
  	var curLV = new FLSqlCursor("tpv_lineasmultitransstock");
  	curLV.select("idviajemultitrans = '" + idViaje + "'");
  	var fechaRx = new Date();
	var horaRx = fechaRx.toString().right(8);

  	while (curLV.next()) {
    	curLV.setModeAccess(curLV.Edit);
    	curLV.refreshBuffer();
    	curLV.setValueBuffer("cantrecibida", curLV.valueBuffer("cantpterecibir"));
    	curLV.setValueBuffer("rxcentral", formRecordtpv_recepcionestx.iface.pub_commonCalculateField("rxcentral", curLV));
    	curLV.setValueBuffer("rxtienda", formRecordtpv_recepcionestx.iface.pub_commonCalculateField("rxtienda", curLV));
    	curLV.setValueBuffer("estado", formRecordtpv_recepcionestx.iface.pub_commonCalculateField("estado", curLV));
    	curLV.setValueBuffer("codagenterx", "0045");
    	curLV.setValueBuffer("fecharx", fechaRx);
    	curLV.setValueBuffer("horarx", horaRx);
    	//curLV.setValueBuffer("fecharx", AQUtil.sqlSelect("tpv_viajesmultitransstock", "fecha", "idviajemultitrans = '" + curLV.valueBuffer("idviajemultitrans") + "'"));
    	if (!curLV.commitBuffer()) {
      		return false;
    	}
  	}

  	return true;
}

function elgansoCtr_eg_actualizarViajesEnviados()
{
  	var _i = this.iface;
  	var _mT = formtpv_tiendas.iface;
	var _fTpv = flfact_tpv.iface;

	var nombreLog = _mT.dameNombreLog("ACTUALIZAR_VIAJES_ENVIADOS");
	_i.nombreLog_ = flfactalma.iface.pub_ponLogName(nombreLog);
	var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
	
	if(!dirLog || dirLog == ""){
		dirLog = Dir.home;
	}

	if(dirLog.endsWith("/")){
		_i.nombreFile_ = dirLog + nombreLog;
	}
	else{
		_i.nombreFile_ = dirLog + "/" + nombreLog;
	}

	if(!flfactppal.iface.pub_abreLogFile(_i.nombreLog_, _i.nombreFile_)){
		sys.infoMsgBox("No se ha creado el fichero del log de la consulta.");
	}
  
	var listaTiendas = Input.getText(sys.translate("Lista de tiendas separada por comas y sin espacios"));

	if(!listaTiendas || listaTiendas == ""){
		return false;
	}

	_i.mgr_ = aqApp.db().manager();
	_i.aCx_ = [];
	
	var aT = listaTiendas.split(",");
	aT.sort();
	var codTienda;

	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Conectando...")){
		sys.infoMsgBox("Conectando...");
	}

	for (var i = 0; i < aT.length; i++) {
		codTienda = aT[i];
		if (!_i.conectarMT(codTienda, true)) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No Conectado a " + codTienda)){
				sys.infoMsgBox("No conectado a " + codTienda);
			}
			continue;
		}
		if(!_i.actualizarViajesEnviados(codTienda)){
			continue;
		}
	}

  	return true;
}

function elgansoCtr_actualizarViajesEnviados(codTienda)
{
	var q = new FLSqlQuery("",codTienda);
	q.setFrom("tpv_lineasmultitransstock");
	q.setSelect("idviajemultitrans");
	q.setWhere("(estado = 'EN TRANSITO' OR estado = 'CANCELADO') AND horaex is null AND codalmaorigen = '" + codTienda + "' AND fechaex > '2016-12-31' group by idviajemultitrans");
	
	debug(q.sql());
	if(!q.exec()){
		return false;
	}

	var listaViajes = "";
	while(q.next()){
		listaViajes += "'" + q.value(0) + "',";
	}

	if(listaViajes.length <= 0){
		return true;
	}
	
	listaViajes = listaViajes.left(listaViajes.length-1);

  	var curLV = new FLSqlCursor("tpv_lineasmultitransstock", codTienda);
  	curLV.select("estado = 'CANCELADO' AND idviajemultitrans IN (" + listaViajes + ")");

  	var ahora = new Date;
	var hora = ahora.toString().right(8);

  	while (curLV.next()) {
    	curLV.setModeAccess(curLV.Edit);
    	curLV.refreshBuffer();
    	curLV.setValueBuffer("extienda", "OK");
    	curLV.setValueBuffer("excentral", "PTE");
    	curLV.setValueBuffer("cerradoex", true);
    	curLV.setValueBuffer("fechaex", AQUtil.sqlSelect("tpv_viajesmultitransstock", "fecha", "idviajemultitrans = '" + curLV.valueBuffer("idviajemultitrans") + "'"));
    	curLV.setValueBuffer("horaex", hora);
    	if (!curLV.commitBuffer()) {
      		return false;
    	}
  	}

  	curLV.select("estado = 'EN TRANSITO' AND idviajemultitrans IN (" + listaViajes + ")");

  	while (curLV.next()) {
    	curLV.setModeAccess(curLV.Edit);
    	curLV.refreshBuffer();
    	curLV.setValueBuffer("fechaex", AQUtil.sqlSelect("tpv_viajesmultitransstock", "fecha", "idviajemultitrans = '" + curLV.valueBuffer("idviajemultitrans") + "'"));
    	curLV.setValueBuffer("cerradoex", false);
    	curLV.setValueBuffer("cantenviada", curLV.valueBuffer("cantidad"));
    	curLV.setValueBuffer("cantpterecibir", curLV.valueBuffer("cantidad"));
    	curLV.setValueBuffer("extienda", "OK");
    	curLV.setValueBuffer("excentral", "PTE");
    	curLV.setValueBuffer("horaex", hora);
    	if (!curLV.commitBuffer()) {
      		return false;
    	}
  	}

  	if(!AQUtil.execSql("UPDATE tpv_viajesmultitransstock SET ptesincroenvio = true WHERE idviajemultitrans IN (" + listaViajes + ")", codTienda)) {
		return false;
	}	

  	return true;
}


function elgansoCtr_eg_actualizarViajesRecibidos()
{
  	var _i = this.iface;
  	var _mT = formtpv_tiendas.iface;
	var _fTpv = flfact_tpv.iface;

	var nombreLog = _mT.dameNombreLog("ACTUALIZAR_VIAJES_RECIBIDOS");
	_i.nombreLog_ = flfactalma.iface.pub_ponLogName(nombreLog);
	var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
	
	if(!dirLog || dirLog == ""){
		dirLog = Dir.home;
	}

	if(dirLog.endsWith("/")){
		_i.nombreFile_ = dirLog + nombreLog;
	}
	else{
		_i.nombreFile_ = dirLog + "/" + nombreLog;
	}

	if(!flfactppal.iface.pub_abreLogFile(_i.nombreLog_, _i.nombreFile_)){
		sys.infoMsgBox("No se ha creado el fichero del log de la consulta.");
	}
  
	var listaTiendas = Input.getText(sys.translate("Lista de tiendas separada por comas y sin espacios"));

	if(!listaTiendas || listaTiendas == ""){
		return false;
	}

	_i.mgr_ = aqApp.db().manager();
	_i.aCx_ = [];
	
	var aT = listaTiendas.split(",");
	aT.sort();
	var codTienda;

	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Conectando...")){
		sys.infoMsgBox("Conectando...");
	}

	for (var i = 0; i < aT.length; i++) {
		codTienda = aT[i];
		if (!_i.conectarMT(codTienda, true)) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No Conectado a " + codTienda)){
				sys.infoMsgBox("No conectado a " + codTienda);
			}
			continue;
		}
		if(!_i.actualizarViajesRecibidos(codTienda)){
			continue;
		}
	}

  	return true;
}

function elgansoCtr_actualizarViajesRecibidos(codTienda)
{
	var q = new FLSqlQuery("",codTienda);
	q.setFrom("tpv_lineasmultitransstock");
	q.setSelect("idviajemultitrans");
	q.setWhere("(estado = 'RECIBIDO' OR estado = 'CANCELADO') AND horaex is null AND codalmadestino = '" + codTienda + "' AND fechaex > '2016-12-31' group by idviajemultitrans");
	
	debug(q.sql());
	if(!q.exec()){
		return false;
	}

	var listaViajes = "";
	while(q.next()){
		listaViajes += "'" + q.value(0) + "',";
	}

	if(listaViajes.length <= 0){
		return true;
	}
	
	listaViajes = listaViajes.left(listaViajes.length-1);

  	var curLV = new FLSqlCursor("tpv_lineasmultitransstock", codTienda);
  	curLV.select("estado = 'CANCELADO' AND idviajemultitrans IN (" + listaViajes + ")");

  	var ahora = new Date;
	var hora = ahora.toString().right(8);

  	while (curLV.next()) {
    	curLV.setModeAccess(curLV.Edit);
    	curLV.refreshBuffer();
    	curLV.setValueBuffer("rxtienda", "OK");
    	curLV.setValueBuffer("rxcentral", "PTE");
    	curLV.setValueBuffer("cerradorx", true);
    	curLV.setValueBuffer("fecharx", AQUtil.sqlSelect("tpv_viajesmultitransstock", "fecha", "idviajemultitrans = '" + curLV.valueBuffer("idviajemultitrans") + "'"));
    	curLV.setValueBuffer("horarx", hora);
    	if (!curLV.commitBuffer()) {
      		return false;
    	}
  	}

  	curLV.select("estado = 'RECIBIDO' AND idviajemultitrans IN (" + listaViajes + ")");

  	while (curLV.next()) {
    	curLV.setModeAccess(curLV.Edit);
    	curLV.refreshBuffer();
    	curLV.setValueBuffer("fecharx", AQUtil.sqlSelect("tpv_viajesmultitransstock", "fecha", "idviajemultitrans = '" + curLV.valueBuffer("idviajemultitrans") + "'"));
    	curLV.setValueBuffer("cerradorx", false);
    	curLV.setValueBuffer("cantrecibida", curLV.valueBuffer("cantidad"));
    	curLV.setValueBuffer("cantpterecibir", curLV.valueBuffer("cantidad"));
    	curLV.setValueBuffer("rxtienda", "OK");
    	curLV.setValueBuffer("rxcentral", "PTE");
    	curLV.setValueBuffer("horarx", hora);
    	if (!curLV.commitBuffer()) {
      		return false;
    	}
  	}

  	if(!AQUtil.execSql("UPDATE tpv_viajesmultitransstock SET ptesincroenvio = true WHERE idviajemultitrans IN (" + listaViajes + ")", codTienda)) {
		return false;
	}	

  	return true;
}

function elgansoCtr_eg_recalcularContAlbaranesProv2017()
{		
	var _i = this.iface;
	
	var q = new FLSqlQuery();
	q.setSelect("a.idalbaran");
	q.setFrom("albaranesprov a inner join co_partidas p ON a.idasientocpf = p.idasiento");
	q.setWhere("a.fecha >= '2017-01-01' AND a.idasientocpf IS NOT NULL AND p.codsubcuenta like '47%' GROUP BY a.idalbaran ORDER BY a.idalbaran");

	debug(q.sql());
	if (!q.exec()) {
		sys.errorMsgBox(sys.translate("Falló la consulta"));
		return false;
	}

	if (!q.size()) {
		sys.infoMsgBox(sys.translate("No hay albaranes que recalcular."));
		return true;
	}

	var p = 0;
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Recalculando contabilidad albaranes proveedores ..."), q.size());

	var editable;
	var idAlbaran;
	var curAlbaranesProv = new FLSqlCursor("albaranesprov");	

	while (q.next()) {
		AQUtil.setProgress(p++);
	
		idAlbaran = q.value("a.idalbaran");
		curAlbaranesProv.select("idalbaran = " + idAlbaran);
		curAlbaranesProv.setModeAccess(curAlbaranesProv.Edit);
		curAlbaranesProv.refreshBuffer();

		if(!curAlbaranesProv.first()){
			continue;
		}

		editable = curAlbaranesProv.valueBuffer("ptefactura");
		if(!editable){
			curAlbaranesProv.setUnLock("ptefactura", true);
		}
		curAlbaranesProv.select("idalbaran = " + idAlbaran);
		if(!curAlbaranesProv.first()){
			continue;
		}
		curAlbaranesProv.setModeAccess(curAlbaranesProv.Edit);
		curAlbaranesProv.refreshBuffer();
		if (!curAlbaranesProv.commitBuffer()) {
			sys.warnMsgBox(sys.translate("Error al recalcular el albarán id: ").arg(idAlbaran));
			AQUtil.destroyProgressDialog();
			return false;
		}	
			
		if(!editable){
			curAlbaranesProv.select("idalbaran = " + idAlbaran);
			if(curAlbaranesProv.first()){
				curAlbaranesProv.setUnLock("ptefactura", false);
			}
		}	
	}

	AQUtil.destroyProgressDialog();
		
	return true;
}

function elgansoCtr_eg_recalcularContFacturasProv2017()
{		
	var _i = this.iface;
	
	var q = new FLSqlQuery();
	q.setSelect("idfactura");
	q.setFrom("facturasprov");
	q.setWhere("fecha >= '2017-01-01' AND idasiento IS NOT NULL AND contpte AND nogenerarasiento IS FALSE ORDER BY idfactura");

	debug(q.sql());
	if (!q.exec()) {
		sys.errorMsgBox(sys.translate("Falló la consulta"));
		return false;
	}

	if (!q.size()) {
		sys.infoMsgBox(sys.translate("No hay facturas que recalcular."));
		return true;
	}

	var p = 0;
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Recalculando contabilidad facturasprov proveedores ..."), q.size());

	var editable;
	var idFactura;
	var curFacturaProv = new FLSqlCursor("facturasprov");	

	while (q.next()) {
		AQUtil.setProgress(p++);
	
		idFactura = q.value("idfactura");

		if(AQUtil.sqlSelect("sii_facturasprov", "id", "idfactura = " + idFactura)){
			continue;
		}

		curFacturaProv.select("idfactura = " + idFactura);
		curFacturaProv.setModeAccess(curFacturaProv.Edit);
		curFacturaProv.refreshBuffer();

		if(!curFacturaProv.first()){
			continue;
		}

		editable = curFacturaProv.valueBuffer("editable");
		if(!editable){
			curFacturaProv.setUnLock("editable", true);
		}
		curFacturaProv.select("idfactura = " + idFactura);
		if(!curFacturaProv.first()){
			continue;
		}
		curFacturaProv.setModeAccess(curFacturaProv.Edit);
		curFacturaProv.refreshBuffer();
		if (!curFacturaProv.commitBuffer()) {
			sys.warnMsgBox(sys.translate("Error al recalcular la factura id: ").arg(idFactura));
			AQUtil.destroyProgressDialog();
			return false;
		}	
			
		if(!editable){
			curFacturaProv.select("idfactura = " + idFactura);
			if(curFacturaProv.first()){
				curFacturaProv.setUnLock("editable", false);
			}
		}	
	}

	AQUtil.destroyProgressDialog();
		
	return true;
}

function elgansoCtr_egRellenarCodigoFacturas()
{
	var _i = this.iface;
	
	var dialog = new Dialog(sys.translate("INTRODUZCA FILTRO:"));

	var listaTiendas = new LineEdit;
	listaTiendas.label = sys.translate("Lista de tiendas:");
	dialog.add( listaTiendas );

	var hoy = new Date();
	var fechaDesde = new DateEdit;
	fechaDesde.date = hoy;
	fechaDesde.label = sys.translate("Fecha desde:");
	dialog.add(fechaDesde);

	var fechaHasta = new DateEdit;
	fechaHasta.date = hoy;
	fechaHasta.label = sys.translate("Fecha hasta:");
	dialog.add(fechaHasta);

	if (!dialog.exec()) {
		return false;
	}

	var aT = listaTiendas.text.toString().replace(",", "', '");
	
	var q = new FLSqlQuery();
	q.setSelect("idtpv_comanda, codtienda");
	q.setFrom("tpv_comandas");

	if(!fechaDesde.date || !fechaHasta.date){
		sys.errorMsgBox(sys.translate("Debe informar la fecha desde y hasta."));
		return false;
	}

	if(aT.length == 0){
		aT = flfact_tpv.iface.tiendasEmpresaPpal();
		q.setWhere("codtienda IN (" + aT + ") AND idfactura IS NULL AND egcodfactura IS NULL AND fecha BETWEEN '" + fechaDesde.date + "' AND '" + fechaHasta.date + "' AND codtienda NOT IN ('APAL', 'AWEB') AND codtienda in (SELECT codtienda from tpv_tiendas where idempresa = 1) ORDER BY fecha, hora");

	}else{
		q.setWhere("codtienda IN ('" + aT + "') AND idfactura IS NULL AND egcodfactura IS NULL AND fecha BETWEEN '" + fechaDesde.date + "' AND '" + fechaHasta.date + "' AND codtienda NOT IN ('APAL', 'AWEB') AND codtienda in (SELECT codtienda from tpv_tiendas where idempresa = 1) ORDER BY fecha, hora");
	}
	
	debug(q.sql());

	if (!q.exec()) {
		flfactppal.iface.ponMsgError(sys.translate("Falló la consulta"), "warn", this);
		debug(q.sql());
		return false;
	}

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Rellenando huecos de facturas ..."), q.size());
	var p = 0;
	var codFactW;
	while (q.next()) {
		AQUtil.setProgress(p++);
		codFactW = _i.obtenerCodigoFacturaTienda(q.value("codtienda"));
		if (!AQUtil.execSql("UPDATE tpv_comandas SET egcodfactura = '" + codFactW + "', ptesincrofactura = true WHERE idtpv_comanda = " + q.value("idtpv_comanda"))) {
			flfactppal.iface.ponMsgError(sys.translate("Error al rellenar el codigo de la venta %1").arg(q.value("idtpv_comanda")), "warn", this);
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	return true;
}

function elgansoCtr_obtenerCodigoFacturaTienda(codTienda)
{
	var _i = this.iface;
	var codigo;

	var prefijo = codTienda + "X";
	debug("/////////prefijo: " + prefijo);

	var idUltima = AQUtil.sqlSelect("tpv_comandas", "egcodfactura", "egcodfactura LIKE '" + prefijo + "%' ORDER BY egcodfactura DESC");

	if (idUltima) {
		ultimaFact = parseFloat(idUltima.toString().right((12 - prefijo.length)));
	} else {
		ultimaFact = 0;
	}

	ultimaFact += 1;
	codigo = prefijo + flfacturac.iface.pub_cerosIzquierda(ultimaFact, 12 - prefijo.length);
	debug("////////////codigo: " + codigo);

	return codigo;
}

function elgansoCtr_facturarVentasSiiTiendasMes(listaTiendas,fechaInicio,fechaFin)
{
	var _i = this.iface;

	flfact_tpv.iface.abreLog("FACTURAS_VENTAS");

	var aTiendas = listaTiendas.split(",");
	listaTiendas = "'" + aTiendas.join("','") + "'";

	_i.numeroAsientoAuto_ = true;
	_i.calcularSaldoSubcuenta_ = false;

	if (!flfact_tpv.iface.sincronizarFacturasVentasTiendasMes(listaTiendas,fechaInicio,fechaFin,true)){
		_i.numeroAsientoAuto_ = false;
		_i.calcularSaldoSubcuenta_ = true;
		return false;
	}
	_i.numeroAsientoAuto_ = false;
	_i.calcularSaldoSubcuenta_ = true;

	return true;
}

function elgansoCtr_borrarFacturasVentasTienda()
{
	var _i = this.iface;

	/*var dialog = new Dialog(sys.translate("INTRODUZCA LAS FACTURAS A BORRAR:"));

	var listaFacturas = new LineEdit;
	listaFacturas.label = sys.translate("Lista de facturas:");
	dialog.add( listaFacturas );

	if (!dialog.exec()) {
		return false;
	}

	var aT = listaFacturas.text.toString().split(",");*/

	//select f.codigo from tpv_comandas c left outer join facturascli f on c.egcodfactura = f.codigo inner join tpv_tiendas t on c.codtienda = t.codtienda where c.fecha between '2017-01-01' and '2017-03-31' and t.idempresa = 1 and t.codtienda <> 'APAL' and 'Tique de venta ' || c.codigo || '.' <> f.observaciones and f.codigo not like '2017%' order by f.codigo

	var q = new FLSqlQuery();
	q.setSelect("f.codigo");
	q.setFrom("tpv_comandas c left outer join facturascli f on c.egcodfactura = f.codigo inner join tpv_tiendas t on c.codtienda = t.codtienda");
	q.setWhere("c.fecha between '2017-01-01' and '2017-03-31' and t.idempresa = 1 and t.codtienda <> 'APAL' and 'Tique de venta ' || c.codigo || '.' <> f.observaciones and f.codigo not like '2017%'");

	var curFacturaCli = new FLSqlCursor("facturascli");

	while(q.next()) {
		debug("////////////////////////////// codFactura: " + codFactura);
		var idFactura = AQUtil.sqlSelect("facturascli", "idfactura", "codigo = '" + q.value(0) + "'");
		var idAsiento = AQUtil.sqlSelect("facturascli", "idasiento", "codigo = '" + q.value(0) + "'");

		if(!AQUtil.execSql("UPDATE tpv_comandas SET idfactura = NULL, ptesincrofactura = true where egcodfactura = '" + q.value(0) + "'")) {
  			return false;
		}

		if(idAsiento){
			if(!AQUtil.execSql("DELETE FROM co_partidas WHERE idasiento = " + idAsiento)) {
  				return false;
			}
			if(!AQUtil.execSql("DELETE FROM co_asientos WHERE idasiento = " + idAsiento)) {
	  			return false;
			}
		}
		
		if(idFactura){
			if(!AQUtil.execSql("DELETE FROM lineasivafactcli WHERE idfactura = " + idFactura)) {
  				return false;
			}
			if(!AQUtil.execSql("DELETE FROM lineasfacturascli WHERE idfactura = " + idFactura)) {
	  			return false;
			}
			if(!AQUtil.execSql("DELETE FROM facturascli WHERE idfactura = " + idFactura)) {
	  			return false;
			}
			if(!AQUtil.execSql("DELETE FROM reciboscli WHERE idfactura = " + idFactura)) {
	  			return false;
			}
		}
		
	}
	
	return true;

}

function elgansoCtr_egRenumerarEgCodFacturaComandas()
{
	var _i = this.iface;
	
	var aT = flfact_tpv.iface.tiendasEmpresaPpal();
		
	var q = new FLSqlQuery();
	q.setSelect("idtpv_comanda, codtienda");
	q.setFrom("tpv_comandas");
	q.setWhere("codtienda IN (" + aT + ") AND fecha BETWEEN '2017-01-01' AND '2017-06-30' AND codtienda <> 'APAL' ORDER BY codtienda,fecha,hora");

	if (!q.exec()) {
		flfactppal.iface.ponMsgError(sys.translate("Falló la consulta"), "warn", this);
		debug(q.sql());
		return false;
	}

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Rellenando huecos de facturas ..."), q.size());
	var p = 0;
	var codFactW;
	
	var contFactura = 1;
	var prefijo = false;
	var prefijoAnt = false;

	while (q.next()) {
		AQUtil.setProgress(p++);
		prefijo = q.value("codtienda") + "A";

		if(prefijoAnt && prefijo == prefijoAnt){
			contFactura++;
		}
		else{
			contFactura = 1;
		}

		codFactW = prefijo + flfacturac.iface.pub_cerosIzquierda(contFactura, 12 - prefijo.length);
		if (!AQUtil.execSql("UPDATE tpv_comandas SET egcodfactura = '" + codFactW + "' WHERE idtpv_comanda = " + q.value("idtpv_comanda"))) {
			flfactppal.iface.ponMsgError(sys.translate("Error al rellenar el codigo de la venta %1").arg(q.value("idtpv_comanda")), "warn", this);
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
		prefijoAnt = prefijo;
	}

	if (!AQUtil.execSql("UPDATE facturascli SET codigo = (select egcodfactura from tpv_comandas where tpv_comandas.idfactura = facturascli.idfactura), numero = (select egcodfactura from tpv_comandas where tpv_comandas.idfactura = facturascli.idfactura) WHERE idfactura IN (SELECT idfactura from tpv_comandas WHERE codtienda IN (" + aT + ") AND fecha BETWEEN '2017-01-01' AND '2017-06-30' AND codtienda <> 'APAL')")) {
		flfactppal.iface.ponMsgError(sys.translate("Error al actualizar el código de las facturas de las ventas"), "warn", this);
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}

	if (!AQUtil.execSql("UPDATE co_partidas SET concepto = 'Nuestra factura ' || (select codigo from facturascli where facturascli.idasiento = co_partidas.idasiento), documento = (select codigo from facturascli where facturascli.idasiento = co_partidas.idasiento) WHERE idasiento IN (SELECT idasiento from facturascli inner join tpv_comandas on facturascli.idfactura = tpv_comandas.idfactura WHERE tpv_comandas.codtienda IN (" + aT + ") AND tpv_comandas.fecha BETWEEN '2017-01-01' AND '2017-06-30' AND tpv_comandas.codtienda <> 'APAL')")) {
		flfactppal.iface.ponMsgError(sys.translate("Error al actualizar los conceptos de las partidas de las facturas de las ventas"), "warn", this);
		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
		return false;
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	return true;
}

function elgansoCtr_revisionSeriesFacturas(huecos)
{
	var _i = this.iface;
	var rellenarHuecos;
	if (huecos) {
		rellenarHuecos = "huecos" == "S";
	} else {
		rellenarHuecos = flfactppal.iface.preguntaMsg("¿Rellenar huecos?", "info", this, MessageBox.Yes, MessageBox.No) == MessageBox.Yes;
	}
debug("rellenarHuecos " + rellenarHuecos);
	
	_i.descripcionOperacionSII_ = false;
	
	var qS = new FLSqlQuery;
	qS.setSelect("codserie");
	qS.setFrom("series");
	qS.setWhere("1 = 1 AND codserie = 'A' ORDER BY codserie");
	if (!qS.exec()) {
		return false;
	}
	var codSerie;
	while (qS.next()) {
		codSerie = qS.value("codserie");
		debug("Serie " + codSerie);
		if (!_i.controlSecuenciaEjercicio("2017", codSerie, "facturascli", rellenarHuecos)) {
			return false;
		}
	}
	return true;
}

function elgansoCtr_controlSecuenciaEjercicio(codEjercicio, codSerie, tabla, rellenarHuecos)
{
	var _i = this.iface;
	
	var prefijoFactura;
	if (codSerie.length == 1) {
		prefijoFactura = codEjercicio + "0" + codSerie;
	} else {
		prefijoFactura = codEjercicio.toString() + codSerie.toString();
	}
	var qS = new FLSqlQuery;
	qS.setSelect("codigo, numero, fecha");
	qS.setFrom(tabla);
debug("codejercicio = '" + codEjercicio + "' AND codserie = '" + codSerie + "' AND codigo LIKE '" + prefijoFactura + "%' ORDER BY codigo");
	qS.setWhere("codejercicio = '" + codEjercicio + "' AND codserie = '" + codSerie + "' AND codigo LIKE '" + prefijoFactura + "%' ORDER BY codigo");
	if (!qS.exec()) {
		return false;
	}
	
	var codigo, codigoAnt = "Inicio";
	var numero, numeroAnt = 0, huecos;
	var fecha, fechaAnt = '2017-01-01';
	while (qS.next()) {
		codigo = qS.value("codigo");
		numero = qS.value("numero");
		fecha = qS.value("fecha");
		huecos = numero - numeroAnt - 1
		if (huecos != 0) {
			debug(huecos + " huecos entre factura " + codigoAnt + " y factura " + codigo);
			if (rellenarHuecos) {
				if (!_i.rellenaHuecosFactura(codEjercicio, codSerie, tabla, codigoAnt, codigo, fechaAnt)) {
					return false;
				}
			}
		}
		if (fechaAnt) {
			if (AQUtil.daysTo(fechaAnt, fecha) < 0) {
				debug("factura " + codigoAnt + " de " + fechaAnt + " posterior a factura " + codigo + " de fecha " + fecha);
			}
		}
		codigoAnt = codigo;
		numeroAnt = numero;
		fechaAnt = fecha;
	}
	return true;
}

function elgansoCtr_rellenaHuecosFactura(codEjercicio, codSerie, tabla, codigoAnt, codigo, fecha)
{
	var _i = this.iface;
debug("elgansoCtr_rellenaHuecosFactura 1")
	if (tabla != "facturascli") {
		return true;
	}
debug("elgansoCtr_rellenaHuecosFactura 2")
	var inicio = parseFloat(codigoAnt.right(6));
	if (isNaN(inicio)) {
		inicio = 0;
	}
	inicio++;
	var fin = parseFloat(codigo.right(6));
	fin--;
	debug("Desde " + inicio + " hasta " + fin);
	for (var i = inicio; i <= fin; i++) {
		debug("Rellenando factura " + codEjercicio + " - " + codSerie + " - " + i);
		if (!_i.creaFacturaF2a0(codEjercicio, codSerie, i, fecha)) {
			return false;
		}
	}
	return true;
}

function elgansoCtr_creaFacturaF2a0(codEjercicio, codSerie, i, fecha)
{
	var _i = this.iface;
	var _fSii = flcontsii.iface;

	if (!_i.descripcionOperacionSII_) {
		var curDatosFiscales = new FLSqlCursor("sii_datosfiscales");
        curDatosFiscales.select();
        if (curDatosFiscales.first()) {
        	_i.descripcionOperacionSII_ = curDatosFiscales.valueBuffer("descripcionoperacion");
        }
	}

	var curFactura = new FLSqlCursor("facturascli");
    curFactura.setModeAccess(curFactura.Insert);
    curFactura.refreshBuffer();

    curFactura.setValueBuffer("codejercicio", codEjercicio);
    curFactura.setValueBuffer("codserie", codSerie);
    curFactura.setValueBuffer("numero", i.toString());
    curFactura.setValueBuffer("codigo", formfacturascli.iface.pub_commonCalculateField("codigo", curFactura));
    curFactura.setValueBuffer("irpf", 0);
    curFactura.setValueBuffer("fecha", fecha);
    curFactura.setValueBuffer("hora", "12:00:15");
    //curFactura.setValueBuffer("codagente", curAlbaran.valueBuffer("codagente"));
    //curFactura.setValueBuffer("porcomision", curAlbaran.valueBuffer("porcomision"));
    curFactura.setValueBuffer("codalmacen", "ACEN");
    curFactura.setValueBuffer("codpago", "CONT");
    curFactura.setValueBuffer("coddivisa", "EUR");
    curFactura.setValueBuffer("tasaconv", 1);
    curFactura.setValueBuffer("codcliente", "010140");
    curFactura.setValueBuffer("cifnif", "0");
    curFactura.setValueBuffer("nombrecliente", "Ventas contado");
    //curFactura.setValueBuffer("observaciones", curAlbaran.valueBuffer("observaciones"));
    //curFactura.setValueBuffer("recfinanciero", curAlbaran.valueBuffer("recfinanciero"));
    //curFactura.setValueBuffer("deabono", curAlbaran.valueBuffer("deabono"));

	//if(!flfactppal.iface.pub_extension("iva_nav")){
    //	curFactura.setValueBuffer("regimeniva", curAlbaran.valueBuffer("regimeniva"));
    //}
    //_i.curFactura.setValueBuffer("automatica", true);

    curFactura.setValueBuffer("direccion", "-");
    curFactura.setValueBuffer("ciudad", "-");
    curFactura.setValueBuffer("provincia", "-");

    curFactura.setValueBuffer("codcentro", "ES000");
    curFactura.setValueBuffer("codsubcentro", "ES001");

    curFactura.setValueBuffer("codgrupoivaneg", "CNP");

    curFactura.setValueBuffer("manualsii", true);
    curFactura.setValueBuffer("fechaoperacion", fecha);
    //curFactura.setValueBuffer("coddescoperacion", _fSii.calculateFieldFacturasCli("coddescoperacion",curFactura));
    curFactura.setValueBuffer("descripcionoperacion", _i.descripcionOperacionSII_);
    //curFactura.setValueBuffer("descripcionbien", _fSii.calculateFieldFacturasCli("descripcionbien",curFactura));
    curFactura.setValueBuffer("ejercicio", _fSii.calculateFieldFacturasCli("ejercicio", curFactura));
    curFactura.setValueBuffer("periodo", _fSii.calculateFieldFacturasCli("periodo", curFactura));
    curFactura.setValueBuffer("clavetipo", "F2");
    curFactura.setValueBuffer("tiporectificativa", _fSii.calculateFieldFacturasCli("tiporectificativa", curFactura));
    curFactura.setValueBuffer("claveoperacion", _fSii.calculateFieldFacturasCli("claveoperacion", curFactura));

    if (!curFactura.commitBuffer()) {
        return false;
    }

    var idFactura = curFactura.valueBuffer("idfactura");

    var curLineaFactura = new FLSqlCursor("lineasfacturascli");
    curLineaFactura.setModeAccess(curLineaFactura.Insert);
    curLineaFactura.refreshBuffer();
    curLineaFactura.setValueBuffer("idfactura", idFactura);
    curLineaFactura.setValueBuffer("numlinea", 1);

    //setValueBuffer("referencia", curLineaAlbaran.valueBuffer("referencia"));
    curLineaFactura.setValueBuffer("descripcion", _i.descripcionOperacionSII_);
    curLineaFactura.setValueBuffer("cantidad", 1);
    curLineaFactura.setValueBuffer("pvpunitario", 0);
    curLineaFactura.setValueBuffer("pvpsindto", 0);
    curLineaFactura.setValueBuffer("pvptotal", 0);
    curLineaFactura.setValueBuffer("pvpunitarioiva", 0);
    curLineaFactura.setValueBuffer("pvpsindtoiva", 0);
    curLineaFactura.setValueBuffer("pvptotaliva", 0);
    curLineaFactura.setValueBuffer("codimpuesto", "D1");
    curLineaFactura.setValueBuffer("iva", 21);
    curLineaFactura.setValueBuffer("recargo", 0);

    //curLineaFactura.setValueBuffer("irpf", curLineaAlbaran.valueBuffer("irpf"));
    //curLineaFactura.setValueBuffer("dtolineal", curLineaAlbaran.valueBuffer("dtolineal"));
    //curLineaFactura.setValueBuffer("dtopor", curLineaAlbaran.valueBuffer("dtopor"));
    //curLineaFactura.setValueBuffer("porcomision", curLineaAlbaran.valueBuffer("porcomision"));
    //curLineaFactura.setValueBuffer("idalbaran", curLineaAlbaran.valueBuffer("idalbaran"));

	if (!curLineaFactura.commitBuffer()) {
		return false;
	}

	/*
	var curLineaIva = new FLSqlCursor("lineasivafactcli");
	curLineaIva.setModeAccess(curLineaIva.Insert);
	curLineaIva.refreshBuffer();
	curLineaIva.setValueBuffer("idfactura", idFactura);
	curLineaIva.setValueBuffer("neto", 0);
	curLineaIva.setValueBuffer("neto", "D1");
	*/

	curFactura.select("idfactura = " + idFactura);
    if (!curFactura.first()) {
    	return false;
    }
    curFactura.setModeAccess(curFactura.Edit);
    curFactura.refreshBuffer();

    formalbaranescli.iface.curFactura = curFactura;
    if (!formalbaranescli.iface.totalesFactura()) {
        return false;
    }

    if (curFactura.commitBuffer() == false){
        return false;
    }

    return idFactura;
}

function elgansoCtr_egImportarPedidosECI(tipo)
{
	
	if(!tipo || tipo == ""){
		tipo = "ECI";
	}
	
	var _i = this.iface;

	_i.ficherosPedidos_ = [];

	_i.longitudLocl_ = 0;
	_i.longitudLineas_ = 0;
	_i.lineasYaInformadas_ = false;

	var path;
	if(tipo == "ECI") {
		path = AQUtil.sqlSelect("tpv_datosgenerales","dirimportventaseci","1=1");
	}

	if(!path || path == "") {
		sys.translate("Debe establecer el directorio de importación en los datos generales del tpv");
		debug("false dir");
		return false;
	}

	var sufijo = "";
	var oP = [];
	
	if(!_i.tratarFicherosPedidosECI(path)){
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al tratar los ficheros.")) {
      		flfactppal.iface.ponMsgError(sys.translate("Error al tratar los ficheros"), "info");
		}
		return false;
	}

	_i.cx_ = "BD2";
debug("antes addDatabse");
	var dbTx = AQSql.addDatabase(_i.cx_);
debug("despues addDatabse");
	debug("path " + path);
	var dir = new Dir(path);
    var codeFiles = dir.entryList('cabped_*.txt');
    codeFiles.sort();

    var file = new File(_i.dameNombreFicheroLog("PEDIDOS_ECI_"));
	var nombreLog = file.baseName + ".log";
	var nombreFichero = file.name;
	_i.nombreLog_ = flfactalma.iface.pub_ponLogName(nombreLog);
	var dirLog = flfact_tpv.iface.pub_valorDefectoTPV("dirlogs");
	if(!dirLog || dirLog == ""){
		dirLog = Dir.home;
	}
	
	if(dirLog.endsWith("/")) {
		_i.nombreFile_ = dirLog + nombreLog;
	}	else{
		_i.nombreFile_ = dirLog + "/" + nombreLog;
	}


    debug("ficheros " + codeFiles.length);
    for (var i = 0; i < codeFiles.length; ++i) {

    	sufijo = codeFiles[i].substring(7,codeFiles[i].length-4);

    	_i.ficherosPedidos_["cabecera"] = path + "/cabped_" + sufijo + ".txt";
    	_i.ficherosPedidos_["obscabecera"] = path + "/obsped_" + sufijo + ".txt";
		_i.ficherosPedidos_["lineas"] = path + "/linped_" + sufijo + ".txt";
		_i.ficherosPedidos_["obslineas"] = path + "/obslped_" + sufijo + ".txt";

		var hayFicheroLoc = dir.entryList('loclped_*.txt');
		if(hayFicheroLoc.length == 0){
			_i.ficherosPedidos_["deslineas"] = false;
		}
		else{
			_i.ficherosPedidos_["deslineas"] = path + "/loclped_" + sufijo + ".txt";
		}

		if(!flfactppal.iface.pub_abreLogFile(_i.nombreLog_, _i.nombreFile_)) {
      		flfactppal.iface.ponMsgError(sys.translate("No se ha creado el fichero del log para el fichero %1.").arg(nombreLog), "info");
		}

		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Importando fichero " + _i.ficherosPedidos_["lineas"])) {
	  		flfactppal.iface.ponMsgError(sys.translate("Importando fichero %1").arg(_i.ficherosPedidos_["lineas"]), "info");
		}

		oP.errorMsg = sys.translate("Error en la importación de pedidos ECI del " + sufijo);
		var f = new Function("oParam", "return formmt_procesos.iface.importarFicheroPedido(oP)");
		if (!sys.runTransaction(f, oP)) {
			debug("error al ejecutar la funcion");
			return false;
		}

		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Importación finalizada")) {
	      	flfactppal.iface.ponMsgError(sys.translate("Importacion finalizada"), "info");
		}

		_i.ficherosPedidos_["deslineas"] = path + "/loclped_" + sufijo + ".txt";

		_i.moverFicherosPedidosECIProcesados(path, sufijo);
	}
	
	if (!sys.removeDatabase(_i.cx_)) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error en la desconexión")) {
	  		flfactppal.iface.ponMsgError(sys.translate("Error en la desconexión"), "info");
		}
		debug("Error en la desconexión");
		return false;
	} 


	return true;
}


function elgansoCtr_importarFicheroPedido(oParam)
{
	var _i = this.iface;

	var silent = false;

	if(!_i.ficherosPedidos_["cabecera"] || _i.ficherosPedidos_["cabecera"] == "") {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se encontró el fichero de cabecera")) {
	      		flfactppal.iface.ponMsgError(sys.translate("No se encontró el fichero de cabecera"), "info");
			}
			debug("No se encontró el fichero de cabecera");
			return false;
	}
	
	var file = new File(_i.ficherosPedidos_["cabecera"]);
	try {
		file.open(File.ReadOnly);
	} catch(e) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Imposible abrir el fichero " + _i.ficherosPedidos_["cabecera"])) {
      		flfactppal.iface.ponMsgError(sys.translate("Imposible abrir el fichero %1").arg(_i.ficherosPedidos_["cabecera"]), "info");
		}
		debug("Imposible abrir el fichero " + _i.ficherosPedidos_["cabecera"]);
		return false;
	}
	
	//Temporal
	var linea = "";
	var campos = [];

	var fecha = new Date();
	var idPedido = "";

	while(!file.eof) {

		linea = file.readLine();

		campos["NUMINF"] = linea.substring(14, 28);
		while(campos["NUMINF"].endsWith(" ")) {
			campos["NUMINF"] = campos["NUMINF"].substring(0,campos["NUMINF"].length-1);
		}	

		var registro = _i.registrarFicheroPedidosECI(campos["NUMINF"], "crear");
		if(!registro) {
			return false;
		}

		campos["CLAVE1"] = linea.substring(0, 8);
		debug("CLAVE1************************* /" + campos["CLAVE1"] + "/*******************+");

		flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, (sys.translate("Creando pedido ECI %1").arg(campos["CLAVE1"])));
		idPedido = _i.crearPedidoECI(campos["CLAVE1"], linea, silent);

		if(!idPedido || idPedido == ""){
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al procesar el pedido")) {
		  		flfactppal.iface.ponMsgError(sys.translate("Error al procesar el pedido"), "info");
			}
			if(!_i.registrarFicheroPedidosECI(campos["NUMINF"], "marcar_error")) {
				return false;
			}
			return false;
		}

		if(!_i.registrarFicheroPedidosECI(campos["NUMINF"], "marcar_ok")) {
			return false;
		}
	}

	return true;
}

function elgansoCtr_crearPedidoECI(clave1, linea, silent)
{
	var _i = this.iface;

	var campos = [];
	var fecha = "";
	var hora = "";

	campos["NUMINF"] = linea.substring(14, 28);
	while(campos["NUMINF"].endsWith(" ")) {
		campos["NUMINF"] = campos["NUMINF"].substring(0,campos["NUMINF"].length-1);
	}	

	campos["CLAVE1"] = linea.substring(0, 7);
	debug("CLAVE1 :" + campos["CLAVE1"] + "/");

	campos["CODECI"] = linea.substring(214, 230);
	while(campos["CODECI"].startsWith(" ")) {
		campos["CODECI"] = campos["CODECI"].substring(1,campos["CODECI"].length-1);
	}

	while(campos["CODECI"].endsWith(" ")) {
		campos["CODECI"] = campos["CODECI"].substring(0,campos["CODECI"].length-1);
	}
	
	fecha = linea.substring(29, 40);
	fecha = fecha.substring(0,4) + "-" + fecha.substring(4,6) + "-" + fecha.substring(6,8);
	hora = hora.substring(0,2) + ":" + hora.substring(2,4) + ":00";
	if(!hora || hora == "" || hora == "0" || hora == "00:00:00" || hora == "  :  :00" || hora ==  "::00") {
		hora = "00:00:01";
	}

	campos["DEPARTAMENTO"] = linea.substring(950, 966);
	while(campos["DEPARTAMENTO"].startsWith(" ")) {
		campos["DEPARTAMENTO"] = campos["DEPARTAMENTO"].substring(1,campos["DEPARTAMENTO"].length-1);
	}

	while(campos["DEPARTAMENTO"].endsWith(" ")) {
		campos["DEPARTAMENTO"] = campos["DEPARTAMENTO"].substring(0,campos["DEPARTAMENTO"].length-1);
	}

	campos["UNECO"] = linea.substring(933, 949);
	while(campos["UNECO"].startsWith(" ")) {
		campos["UNECO"] = campos["UNECO"].substring(1,campos["UNECO"].length-1);
	}

	while(campos["UNECO"].endsWith(" ")) {
		campos["UNECO"] = campos["UNECO"].substring(0,campos["UNECO"].length-1);
	}

	campos["CODPROVEEDOR"] = linea.substring(1011, 1027);
	while(campos["CODPROVEEDOR"].startsWith(" ")) {
		campos["CODPROVEEDOR"] = campos["CODPROVEEDOR"].substring(1,campos["CODPROVEEDOR"].length-1);
	}

	while(campos["CODPROVEEDOR"].endsWith(" ")) {
		campos["CODPROVEEDOR"] = campos["CODPROVEEDOR"].substring(0,campos["CODPROVEEDOR"].length-1);
	}


	var oParam = {};
	oParam["codCliente"] = "001039";
	oParam["codEci"] = campos["CODECI"];
	oParam["fecha"] = fecha;
	oParam["departamento"] = campos["DEPARTAMENTO"];
	oParam["numPedido"] = campos["NUMINF"];
	oParam["uneco"] = campos["UNECO"];

	if(!campos["CODPROVEEDOR"]){
		oParam["codProveedor"] = "0527762";
	}else{
		oParam["codProveedor"] = campos["CODPROVEEDOR"];
	}
	flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, (sys.translate("Creando cabecera pedido ECI %1").arg(campos["NUMINF"])));
	var idPedido = _i.crearCaberaPedidoEci(oParam);

	if(!idPedido){
		if(!_i.registrarFicheroPedidosECI(campos["NUMINF"], "marcar_error")) {
			return false;
		}
		return false;
	}
		
	oParam["claveUno"] = campos["CLAVE1"];
	oParam["dtoEci"] = campos["DEPARTAMENTO"];
	oParam["idPedido"] = idPedido;
	oParam["codEciOrigen"] = campos["CODECI"];

	flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, (sys.translate("Creando líneas pedido ECI %1").arg(campos["NUMINF"])));
	if(!_i.crearLineasPedidoECI(oParam)){
		if(!_i.registrarFicheroPedidosECI(campos["NUMINF"], "marcar_error")) {
			return false;
		}
		return false;
	}

	flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, (sys.translate("Totalizando Pedido ECI %1").arg(campos["NUMINF"])));
	if(!_i.totalizarPedidoECI(idPedido)){
		if(!_i.registrarFicheroPedidosECI(campos["NUMINF"], "marcar_error")) {
			return false;
		}
		return false;
	}

	return idPedido;
}


function elgansoCtr_crearCaberaPedidoEci(oParam)
{
	var _i = this.iface;

	var codCliente = oParam.codCliente;
	var codEci = oParam.codEci;

	var codSerie = "MY";

	if(oParam.uneco == "0949"){
		codSerie = AQUtil.sqlSelect("clientes", "codserie", "codcliente = '" + codCliente + "'");
	}
	
	var nombreCliente = AQUtil.sqlSelect("clientes", "nombre", "codcliente = '" + codCliente + "'");
	var cifNif = AQUtil.sqlSelect("clientes", "cifnif", "codcliente = '" + codCliente + "'");
	var dirCliente = AQUtil.sqlSelect("dirclientes", "direccion", "codeci = '" + codEci + "'");
	var ciudad = AQUtil.sqlSelect("dirclientes", "ciudad", "codeci = '" + codEci + "'");
	var provincia = AQUtil.sqlSelect("dirclientes", "provincia", "codeci = '" + codEci + "'");
	var codPostal = AQUtil.sqlSelect("dirclientes", "codpostal", "codeci = '" + codEci + "'");
	var codPais = AQUtil.sqlSelect("dirclientes", "codpais", "codeci = '" + codEci + "'");

	if(!dirCliente){
		return false;
	}

	var codEjercicio = AQUtil.sqlSelect("ejercicios", "codejercicio", "idempresa = 1 AND fechainicio <= CURRENT_DATE AND fechafin >= CURRENT_DATE");
	var codGrupoIvaNeg = AQUtil.sqlSelect("clientes", "codgrupoivaneg", "codcliente = '" + codCliente + "'");
	var codPago = AQUtil.sqlSelect("clientes", "codpago", "codcliente = '" + codCliente + "'");
	var codAlmacenPedido = AQUtil.sqlSelect("factalma_general", "egcodalmadefecto", "1=1");

	if(!codAlmacenPedido){
		return false;
	}

	_i.curPedidoCli_ = new FLSqlCursor("pedidoscli");

	_i.curPedidoCli_.setModeAccess(_i.curPedidoCli_.Insert);
	_i.curPedidoCli_.refreshBuffer();
    _i.curPedidoCli_.setValueBuffer("codserie", codSerie);
    _i.curPedidoCli_.setValueBuffer("codejercicio", codEjercicio);
    _i.curPedidoCli_.setValueBuffer("fecha", oParam.fecha);
    _i.curPedidoCli_.setValueBuffer("codalmacen", codAlmacenPedido);
    _i.curPedidoCli_.setValueBuffer("codpago", codPago);
    _i.curPedidoCli_.setValueBuffer("codgrupoivaneg", codGrupoIvaNeg);
    _i.curPedidoCli_.setValueBuffer("coddivisa", "EUR");
    _i.curPedidoCli_.setValueBuffer("tasaconv", "1");
    _i.curPedidoCli_.setValueBuffer("codcliente", codCliente);
    _i.curPedidoCli_.setValueBuffer("cifnif", cifNif);
    _i.curPedidoCli_.setValueBuffer("nombrecliente", nombreCliente);
    _i.curPedidoCli_.setValueBuffer("codejercicio", codEjercicio);
    _i.curPedidoCli_.setValueBuffer("direccion", dirCliente);
    _i.curPedidoCli_.setValueBuffer("ciudad", ciudad);
    _i.curPedidoCli_.setValueBuffer("provincia", provincia);
    _i.curPedidoCli_.setValueBuffer("codpostal", codPostal);
    _i.curPedidoCli_.setValueBuffer("codpais", codPais);
    _i.curPedidoCli_.setValueBuffer("fechasalida", oParam.fecha);
    _i.curPedidoCli_.setValueBuffer("servido", "No");
    _i.curPedidoCli_.setValueBuffer("editable", true);
    _i.curPedidoCli_.setValueBuffer("observaciones", "Nº PROVEEDOR: " + oParam.codProveedor + " CENTRO: " + oParam.departamento + " UNECO: " + oParam.uneco + " Nº PEDIDO:" + oParam.numPedido);


	if(!_i.curPedidoCli_.commitBuffer()){
		return false;
	}

	return _i.curPedidoCli_.valueBuffer("idpedido");
}


function elgansoCtr_crearLineasPedidoECI(oParam)
{

	var _i = this.iface;

	if(!_i.ficherosPedidos_["lineas"] || _i.ficherosPedidos_["lineas"] == "") {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No se encontró el fichero de lineas")) {
  			flfactppal.iface.ponMsgError(sys.translate("No se encontró el fichero de lineas"), "info");
		}
		debug("No se encontró el fichero de lineas");
		return false;
	}
	
	var file = new File(_i.ficherosPedidos_["lineas"]);
	try {
		file.open(File.ReadOnly);
	} catch(e) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Imposible abrir el fichero " + _i.ficherosPedidos_["lineas"])) {
  			flfactppal.iface.ponMsgError(sys.translate("Imposible abrir el fichero %1").arg(_i.ficherosPedidos_["lineas"]), "info");
		}
		debug("Imposible abrir el fichero " + _i.ficherosPedidos_["lineas"]);
		return false;
	}
	
	var linea = "";
	var campos = [];
	var fecha = "";
	var hora = "";

	_i.curLinPedido_ = new FLSqlCursor("lineaspedidoscli");

	var steps = 0;
	while (!file.eof) {
		file.readLine();
		++steps;
		_i.longitudLineas_++;
	}

	file.close();
    var file = new File(_i.ficherosPedidos_["lineas"]);
	try {
		file.open(File.ReadOnly);
	} catch(e) {
		if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Imposible abrir el fichero " + _i.ficherosPedidos_["lineas"])) {
  			flfactppal.iface.ponMsgError(sys.translate("Imposible abrir el fichero %1").arg(_i.ficherosPedidos_["lineas"]), "info");
		}
		debug("Imposible abrir el fichero " + _i.ficherosPedidos_["lineas"]);
		return false;
	}

	var step = 0;
	flfactalma.iface.pub_creaPDSilent(steps);
	var cont = 1;

	while(!file.eof) {
		flfactalma.iface.pub_setProgressPDSilent(++step);		
		linea = file.readLine();
		
		campos["CLAVE1"] = linea.substring(0, 7);
		if(campos["CLAVE1"] != oParam.claveUno) {
			continue;
		}

		campos["CLAVE2"] = linea.substring(8, 12);
		
		campos["PRECION"] = linea.substring(331, 345);
		var pvpUnitario = campos["PRECION"];

		while(pvpUnitario.startsWith("0") || pvpUnitario.startsWith(" ")) {
			pvpUnitario = pvpUnitario.substring(1,pvpUnitario.length);
		}

		pvpUnitario = parseFloat(pvpUnitario) / 100;

		campos["PVPTOTALLINEA"] = linea.substring(376, 390);
		var pvpTotalLinea = campos["PVPTOTALLINEA"];

		while(pvpTotalLinea.startsWith("0") || pvpTotalLinea.startsWith(" ")) {
			pvpTotalLinea = pvpTotalLinea.substring(1,pvpTotalLinea.length);
		}

		pvpTotalLinea = parseFloat(pvpTotalLinea) / 100;

		campos["BARCODE"] = linea.substring(13, 29);
		var barCode = campos["BARCODE"];

		while(barCode.search(" ") != -1) {
			barCode = barCode.replace(" ","");
		}
		
		if(barCode == "0000000000000") {
			barCode = "0000000020002";
		}

		campos["CANTIDAD"] = linea.substring(256, 270);

		var cantidad = campos["CANTIDAD"];

		while(cantidad.startsWith("0") || cantidad.startsWith(" ")) {
			cantidad = cantidad.substring(1,cantidad.length);
		}	

		if(cantidad == "" || !cantidad) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No hay cantidad para el barcode " + barCode)) {
  				flfactppal.iface.ponMsgError(sys.translate("No hay cantidad para el barcode %1").arg(barCode), "info");
			}
			return true;
		}

		cantidad = (parseFloat(cantidad) / 100);

		var talla = AQUtil.sqlSelect("atributosarticulos", "talla", "barcode = '" + barCode + "'");
		var referencia = AQUtil.sqlSelect("atributosarticulos", "referencia", "barcode = '" + barCode + "'");

		if(!referencia){
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No existe la referencia para el barcode " + barCode)) {
  				flfactppal.iface.ponMsgError(sys.translate("No existe la referencia para el barcode %1").arg(barCode), "info");
			}
			return false;
		}

		var descripcion =  AQUtil.sqlSelect("articulos", "descripcion", "referencia = '" + referencia + "'");

		_i.curLinPedido_.setModeAccess(_i.curLinPedido_.Insert);
		_i.curLinPedido_.refreshBuffer();
		_i.curLinPedido_.setValueBuffer("idpedido", oParam.idPedido);
		_i.curLinPedido_.setValueBuffer("numlinea", cont);
		_i.curLinPedido_.setValueBuffer("referencia", referencia);
		_i.curLinPedido_.setValueBuffer("barcode", barCode);
		_i.curLinPedido_.setValueBuffer("descripcion", descripcion);
		_i.curLinPedido_.setValueBuffer("talla", talla);
		_i.curLinPedido_.setValueBuffer("cantidad", cantidad);
		_i.curLinPedido_.setValueBuffer("totalenalbaran", 0);


		var cF = formRecordlineaspedidoscli.iface.pub_commonCalculateField;

		_i.curLinPedido_.setValueBuffer("codimpuesto", cF("codimpuesto", _i.curLinPedido_));
		_i.curLinPedido_.setValueBuffer("iva", cF("iva", _i.curLinPedido_));
		_i.curLinPedido_.setValueBuffer("recargo", cF("recargo", _i.curLinPedido_));
		
		if (flfactppal.iface.pub_extension("iva_incluido")) {
			_i.curLinPedido_.setValueBuffer("ivaincluido", cF("ivaincluido", _i.curLinPedido_));
			if (_i.curLinPedido_.valueBuffer("ivaincluido")) {
				
				_i.curLinPedido_.setValueBuffer("pvpunitario", AQUtil.roundFieldValue(pvpUnitario, "lineaspedidoscli","pvpunitario"));
				_i.curLinPedido_.setValueBuffer("pvpunitarioiva", cF("pvpunitarioiva2", _i.curLinPedido_));
			    _i.curLinPedido_.setValueBuffer("pvpsindtoiva", cF("pvpsindtoiva2", _i.curLinPedido_));
			    _i.curLinPedido_.setValueBuffer("pvpsindto", cF("pvpsindto2", _i.curLinPedido_));
			    _i.curLinPedido_.setValueBuffer("pvptotal", AQUtil.roundFieldValue(pvpTotalLinea, "lineaspedidoscli","pvptotal"));
			    _i.curLinPedido_.setValueBuffer("pvptotaliva", cF("pvptotaliva", _i.curLinPedido_));
			}
		}

		if(!_i.curLinPedido_.commitBuffer()){
			return false;
		}

		campos["PVPTOTAL"] = linea.substring(361, 375);
		var pvpTotal = campos["PVPTOTAL"];

		while(pvpTotal.startsWith("0") || pvpTotal.startsWith(" ")) {
			pvpTotal = pvpTotal.substring(1,pvpTotal.length);
		}

		pvpTotal = parseFloat(pvpTotal) / 1000;

		var idLinea = _i.curLinPedido_.valueBuffer("idlinea");

		var oParamLineasEci = {};
		oParamLineasEci["claveUno"] = oParam.claveUno;
		oParamLineasEci["claveDos"] = campos["CLAVE2"];
		oParamLineasEci["idLineaPedido"] = idLinea;
		oParamLineasEci["idPedido"] = oParam.idPedido;
		oParamLineasEci["barcodeEci"] = barCode;
		oParamLineasEci["precioEci"] = AQUtil.roundFieldValue(_i.curLinPedido_.valueBuffer("pvptotaliva"), "lineaspedidoscli", "pvptotal");

		campos["REFCLI"] = linea.substring(46, 80);
		var refEci = campos["REFCLI"];

		while(refEci.search(" ") != -1) {
			refEci = refEci.replace(" ","");
		}

		
		var tallaEci = refEci.right(2) + "0";
		//var tallaEci = "";
		var familiaEci = refEci.left(3);

		oParamLineasEci["referenciaEci"] = refEci.substring(3, refEci.length);
		oParamLineasEci["tallaEci"] = tallaEci;
		oParamLineasEci["familiaEci"] = familiaEci;
		oParamLineasEci["dtoEci"] = oParam.dtoEci;
		oParamLineasEci["cantidad"] = cantidad;
		oParamLineasEci["codEci"] = oParam.codEci;
		oParamLineasEci["codAlmaOrigen"] = oParam.codEciOrigen;

		if(!_i.informarLineasPedidosCliEci(oParamLineasEci)){
			return false;
		}

		cont++;
		
	} 

	return true;
}


function elgansoCtr_totalizarPedidoECI(idPedido)
{
	var _i = this.iface;

	var cCF = formpedidoscli.iface.pub_commonCalculateField;
	
	var curP = new FLSqlCursor("pedidoscli");
	curP.setActivatedCommitActions(false);
  	curP.setActivatedCheckIntegrity(false);

	curP.select("idpedido = " + idPedido);

	if (!curP.first()) {
		return false;
	}

	curP.setModeAccess(AQSql.Edit);
	curP.refreshBuffer();
	curP.setValueBuffer("neto", cCF("neto", curP));
	curP.setValueBuffer("totaliva", cCF("totaliva", curP));
	curP.setValueBuffer("totalirpf", cCF("totalirpf", curP));
	curP.setValueBuffer("totalrecargo", cCF("totalrecargo", curP));
	curP.setValueBuffer("total", cCF("total", curP));
	curP.setValueBuffer("totaleuros", cCF("totaleuros", curP));

	if (!curP.commitBuffer()) {
		return false;
	}
	
	return true;
}


function elgansoCtr_registrarFicheroPedidosECI(numInf, accion)
{
	var _i = this.iface;

	switch(accion) {
		case "crear": {
			
			if(AQUtil.sqlSelect("eg_fichprocesados","nombre","tipo = 'PEDIDOS_ECI' AND nombre = '" + numInf + "'","eg_fichprocesados",_i.cx_)) {
					if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "El fichero " + numInf + " ya ha sido procesado")) {
				  		flfactppal.iface.ponMsgError(sys.translate("El fichero %1 ya ha sido procesado").arg(numInf), "info");
					}
					debug("El fichero " + numInf + " ya ha sido procesado");
					return "continue";
			}

			var fecha = new Date;
			var hoy = fecha.toString().left(10);
			var ahora = fecha.toString().right(8);

			var curFP = new FLSqlCursor("eg_fichprocesados",_i.cx_);
			curFP.setModeAccess(curFP.Insert);
			curFP.refreshBuffer();
			curFP.setValueBuffer("nombre", numInf);
			curFP.setValueBuffer("tipo", "PEDIDOS_ECI");
			curFP.setValueBuffer("estado", "PTE");
			curFP.setValueBuffer("fecha", hoy.toString().left(10));
			curFP.setValueBuffer("hora", hoy.toString().right(8));

			if (!curFP.commitBuffer()) {
				return false;
			}

			break;
		}
		case "marcar_ok":{

			var fichero = AQUtil.sqlSelect("eg_fichprocesados","nombre","tipo = 'PEDIDOS_ECI' AND nombre = '" + numInf + "'","eg_fichprocesados",_i.cx_);

			if(!fichero) {
					if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "El fichero " + numInf + " no está registrado")) {
				  		flfactppal.iface.ponMsgError(sys.translate("El fichero %1 no está registrado").arg(numInf), "info");
					}
					debug("El fichero " + numInf + " no está registrado");
					return false;
			}

			if(!AQUtil.sqlUpdate("eg_fichprocesados","estado","OK","tipo = 'PEDIDOS_ECI' AND nombre = '" + numInf + "'",_i.cx_)) {
				if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al cambair el estado del fichero " + numInf)) {
			  		flfactppal.iface.ponMsgError(sys.translate("Error al cambair el estado del fichero %1").arg(numInf), "info");
				}
				debug("Error al cambair el estado del fichero " + numInf);
				return false;
			}

			break;
		}
		case "marcar_error": {
			var fichero = AQUtil.sqlSelect("eg_fichprocesados","nombre","tipo = 'PEDIDOS_ECI' AND nombre = '" + numInf + "'","eg_fichprocesados",_i.cx_);
			if(!fichero) {
					if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "El fichero " + numInf + " no está registrado")) {
				  		flfactppal.iface.ponMsgError(sys.translate("El fichero %1 no está registrado").arg(numInf), "info");
					}
					debug("El fichero " + numInf + " no está registrado");
					return false;
			}

			if(!AQUtil.sqlUpdate("eg_fichprocesados","estado","ERROR","tipo = 'PEDIDOS_ECI' AND nombre = '" + numInf + "'",_i.cx_)) {
				if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Error al cambair el estado del fichero " + numInf)) {
			  		flfactppal.iface.ponMsgError(sys.translate("Error al cambair el estado del fichero %1").arg(numInf), "info");
				}
				debug("Error al cambair el estado del fichero " + numInf);
				return false;
			}
			break;
		}
	}

	return true;
}

function elgansoCtr_egCorregirLineasViajesEstadoMovistockPTE()
{
	var _i = this.iface;

	var p;
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var q = new FLSqlQuery();

	q.setSelect("lv.idlinea");
	q.setFrom("tpv_lineasmultitransstock lv LEFT OUTER JOIN movistock mv ON lv.idlinea = mv.idlineatto");
	q.setWhere("mv.estado = 'PTE' AND lv.estado <> 'PTE ENVIO' AND excentral = 'OK' AND cantenviada <> 0 AND fechaex > '2017-07-01'");

	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	AQUtil.createProgressDialog("Corrigiendo movimientos de stock en líneas de viaje origen...", q.size());
	p = 0;
	while(q.next()) {
		AQUtil.setProgress(p++);
		curL.select("idlinea = " + q.value("lv.idlinea"));
		if(!curL.first()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
		curL.setModeAccess(curL.Edit);
		curL.refreshBuffer();

		if (!flfactalma.iface.borrarEstructuraMTOrigen(curL)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTOrigen(curL)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
		if(!curL.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
	}
	AQUtil.destroyProgressDialog();

	return true;
}


function elgansoCtr_moverFicherosPedidosECIProcesados(path, sufijo)
{
	var _i = this.iface;

	debug("////////////////////path: " + path);

	 // Mover los ficheros a procesados
	var comando = new Array("mv", _i.ficherosPedidos_["cabecera"], path + "/procesados/cabped_" + sufijo + ".txt");
	var proceso = new Process();
	proceso.arguments = comando;
	proceso.workingDirectory = path;
	try {
	        proceso.start();
	}
	catch (e) {
	        debug(sys.translate("Falló la ejecución del comando:\n\n%1").arg(comando));
	        return false;
	}
	while(proceso.running) {
	        continue;
	}

	var comando = new Array("mv", _i.ficherosPedidos_["obscabecera"], path + "/procesados/obsped_" + sufijo + ".txt");
	var proceso = new Process();
	proceso.arguments = comando;
	proceso.workingDirectory = path;
	try {
	        proceso.start();
	}
	catch (e) {
	        debug(sys.translate("Falló la ejecución del comando:\n\n%1").arg(comando));
	        return false;
	}
	while(proceso.running) {
	        continue;
	}

	var comando = new Array("mv", _i.ficherosPedidos_["lineas"], path + "/procesados/linped_" + sufijo + ".txt");
	var proceso = new Process();
	proceso.arguments = comando;
	proceso.workingDirectory = path;
	try {
	        proceso.start();
	}
	catch (e) {
	        debug(sys.translate("Falló la ejecución del comando:\n\n%1").arg(comando));
	        return false;
	}
	while(proceso.running) {
	        continue;
	}

	var comando = new Array("mv", _i.ficherosPedidos_["obslineas"], path + "/procesados/obslped_" + sufijo + ".txt");
	var proceso = new Process();
	proceso.arguments = comando;
	proceso.workingDirectory = path;
	try {
	        proceso.start();
	}
	catch (e) {
	        debug(sys.translate("Falló la ejecución del comando:\n\n%1").arg(comando));
	        return false;
	}
	while(proceso.running) {
	        continue;
	}

	var comando = new Array("mv", _i.ficherosPedidos_["deslineas"], path + "/procesados/loclped_" + sufijo + ".txt");
	var proceso = new Process();
	proceso.arguments = comando;
	proceso.workingDirectory = path;
	try {
	        proceso.start();
	}
	catch (e) {
	        debug(sys.translate("Falló la ejecución del comando:\n\n%1").arg(comando));
	        return false;
	}
	while(proceso.running) {
	        continue;
	}
}

function elgansoCtr_egCorregirLineasOrigenSinMovimiento()
{
	var _i = this.iface;

	var dialog = new Dialog(sys.translate("Introduzca la fecha a partir de la cual quiere corregir los movimientos de stock."));
	dialog.OKButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var hoy = new Date();
	var fecha = new DateEdit;
	fecha.date = hoy;
	fecha.label = sys.translate("Fecha:");
	dialog.add(fecha);
	if (!dialog.exec()) {
		return false;
	}
	
	debug("/////////////FECHA: " + fecha.date);

	var p;
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var q = new FLSqlQuery();

	q.setSelect("l.idlinea");
	q.setFrom("tpv_lineasmultitransstock l LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineatto");
	q.setWhere("NOT l.cerradoex AND ((cantpteenvio > 0 AND cantenviada = 0) OR (cantenviada > 0)) AND ms.idlineatto IS NULL and l.estado <> 'CANCELADO' AND l.fechaex >= '" + fecha.date + "' AND l.idviajemultitrans IN (SELECT idviajemultitrans FROM tpv_viajesmultitransstock)");

	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	AQUtil.createProgressDialog("Corrigiendo movimientos de stock en líneas de viaje origen...", q.size());
	p = 0;
	while(q.next()) {
		debug(p);
		AQUtil.setProgress(p++);
		curL.select("idlinea = " + q.value("l.idlinea"));
		debug("//////////////////idLinea: " + q.value("l.idlinea"));
		if(!curL.first()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
		curL.setModeAccess(curL.Edit);
		curL.refreshBuffer();

		if (!flfactalma.iface.borrarEstructuraMTOrigen(curL)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTOrigen(curL)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
		if(!curL.commitBuffer()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos."));
			return false;
		}
	}

	AQUtil.destroyProgressDialog();

	return true;

}

function elgansoCtr_tratarFicherosPedidosECI(path)
{
	var _i = this.iface;
	return true;
	var dir = new Dir(path);
	var codeFilesCabecera = dir.entryList('cabped_*.txt');
    codeFilesCabecera.sort();

    for (var i = 0; i < codeFilesCabecera.length; ++i) {

    	var ficheroOrigen = path + "/" + codeFilesCabecera[i];

		var nombreFicheroCabecera = "cabped_" + codeFilesCabecera[i].substring(7,codeFilesCabecera[i].length-4);
		var nombreFicheroLinea = "linped_" + codeFilesCabecera[i].substring(7,codeFilesCabecera[i].length-4);
		var nombreFicheroDatoPedido = "obsped_" + codeFilesCabecera[i].substring(7,codeFilesCabecera[i].length-4);
		var nombreFicheroDetallesLinea = "loclped_" + codeFilesCabecera[i].substring(7,codeFilesCabecera[i].length-4);
	
		var finalFichero = _i.dameNombreNuevoFicheroPedidosECI(path, nombreFicheroCabecera);
		
		var ficheroNuevoCabecera =  path + "/" + nombreFicheroCabecera + finalFichero;
		var ficheroNuevoLinea =  path + "/" + nombreFicheroLinea + finalFichero;
		var ficheroNuevoDatosPedido =  path + "/" + nombreFicheroDatoPedido + finalFichero;
		var ficheroNuevoDetallesLinea =  path + "/" + nombreFicheroDetallesLinea + finalFichero;
		
		var file = new File(ficheroOrigen);
		content = File.read(ficheroOrigen);

		if(!content || content == "") {
			//debug("No hay contenido en el fichero.")
			return false;
		}

		file.remove();
		
		var file2 = new File(ficheroNuevoCabecera);
		file2.open( File.WriteOnly);
		file2.write(content);
		file2.close();
   

		var ficheroOrigenLinea = path + "/" + nombreFicheroLinea + ".txt";

		var file = new File(ficheroOrigenLinea);
		content = File.read(ficheroOrigenLinea);

		if(!content || content == "") {
			//debug("No hay contenido en el fichero.")
			return false;
		}

		file.remove();
		
		var file2 = new File(ficheroNuevoLinea);
		file2.open( File.WriteOnly);
		file2.write(content);
		file2.close();
    
		var ficheroOrigenDatosPedido = path + "/" + nombreFicheroDatoPedido + ".txt";

		var file = new File(ficheroOrigenDatosPedido);
		content = File.read(ficheroOrigenDatosPedido);

		if(!content || content == "") {
			//debug("No hay contenido en el fichero.")
			return false;
		}

		file.remove();
		
		var file2 = new File(ficheroNuevoDatosPedido);
		file2.open( File.WriteOnly);
		file2.write(content);
		file2.close();

		var hayFicherosLoc = dir.entryList('loclped_*.txt');

		if(hayFicherosLoc.length == 0){
			return true;
		}

		var ficheroOrigenDetallesLinea = path + "/" + nombreFicheroDetallesLinea + ".txt";

		var file = new File(ficheroOrigenDetallesLinea);
		content = File.read(ficheroOrigenDetallesLinea);
		if(!content || content == "") {
			//debug("No hay contenido en el fichero.")
			return false;
		}

		file.remove();
		
		var file2 = new File(ficheroNuevoDetallesLinea);
		file2.open( File.WriteOnly);
		file2.write(content);
		file2.close();
    
	}
	return true;

}

function elgansoCtr_dameNombreNuevoFicheroPedidosECI(path, nombreFichero)
{
	var _i = this.iface;
	var cursor = this.cursor();
	
	var hoy = new Date();
	dia = hoy.getDate().toString();
	if(dia.length < 2){
		dia = "0" + dia;
	}
	
	mes = hoy.getMonth().toString();
	if(mes.length < 2){
		mes = "0" + mes;
	}
	
	anyo = hoy.getYear().toString();
	
	var hora = hoy.getHours().toString();
	if(hora.length < 2){
		hora = "0" + hora;
	}

	var minuto = hoy.getMinutes().toString();
	if(minuto.length < 2){
		minuto = "0" + minuto;
	}

	var segundo = hoy.getSeconds().toString();
	if(segundo.length < 2){
		segundo = "0" + segundo;
	}
  
  	var miliSegundos = hoy.getMilliseconds().toString();
  	if(miliSegundos.length < 2){
		miliSegundos = "0" + miliSegundos;
	}
	var miFecha = hora + minuto + segundo + miliSegundos;
  
	var nombreFichero = miFecha + ".txt";
	
	return nombreFichero;
}

function elgansoCtr_controlFacturasWEBSerieX()
{

	var q = new FLSqlQuery();
	q.setSelect("f.codigo");
	q.setFrom("tpv_comandas c left outer join facturascli f on c.egcodfactura = f.codigo inner join tpv_tiendas t on c.codtienda = t.codtienda");
	q.setWhere("c.fecha between '2017-07-01' and '2017-07-31' and t.idempresa = 1 and t.codtienda = 'AWEB' AND f.codigo like '20170X%' ORDER BY f.codigo");

	if(!q.exec()){
		return false;
	}

	var curFacturaCli = new FLSqlCursor("facturascli");

	while(q.next()) {
		
		var idFactura = AQUtil.sqlSelect("facturascli", "idfactura", "codigo = '" + q.value(0) + "'");
		var idAsiento = AQUtil.sqlSelect("facturascli", "idasiento", "codigo = '" + q.value(0) + "'");

		if(!AQUtil.execSql("UPDATE tpv_comandas SET idfactura = NULL, ptesincrofactura = true where egcodfactura = '" + q.value(0) + "'")) {
  			return false;
		}

		if(idAsiento){
			if(!AQUtil.execSql("DELETE FROM co_partidas WHERE idasiento = " + idAsiento)) {
  				return false;
			}
			if(!AQUtil.execSql("DELETE FROM co_asientos WHERE idasiento = " + idAsiento)) {
	  			return false;
			}
		}
		
		if(idFactura){
			if(!AQUtil.execSql("DELETE FROM lineasivafactcli WHERE idfactura = " + idFactura)) {
  				return false;
			}
			if(!AQUtil.execSql("DELETE FROM lineasfacturascli WHERE idfactura = " + idFactura)) {
	  			return false;
			}
			if(!AQUtil.execSql("DELETE FROM facturascli WHERE idfactura = " + idFactura)) {
	  			return false;
			}
			if(!AQUtil.execSql("DELETE FROM reciboscli WHERE idfactura = " + idFactura)) {
	  			return false;
			}
		}
		
	}

	var q = new FLSqlQuery();
	q.setSelect("idtpv_comanda, codtienda");
	q.setFrom("tpv_comandas");
	q.setWhere("codtienda = 'AWEB' AND fecha BETWEEN '2017-07-01' AND '2017-07-31' AND idfactura is null AND egcodfactura like '20170X%' ORDER BY codtienda,fecha,hora");

	if (!q.exec()) {
		flfactppal.iface.ponMsgError(sys.translate("Falló la consulta"), "warn", this);
		debug(q.sql());
		return false;
	}

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Rellenando huecos de facturas ..."), q.size());
	var p = 0;
	var codFactW;
	
	var prefijo = "AWEBA";

	var ultTicket = AQUtil.sqlSelect("facturascli", "codigo", "codigo like 'AWEBA%' ORDER BY codigo DESC LIMIT 1");
	if(ultTicket) {
		ultTicket = ultTicket.right(ultTicket.length - prefijo.length);
		if(ultTicket){
			ultTicket = parseFloat(ultTicket);
		}
	}

	if(!ultTicket){
		ultTicket = 0;
	}
			
	var contFactura = ultTicket + 1;

	while (q.next()) {
		AQUtil.setProgress(p++);
		
		codFactW = prefijo + flfacturac.iface.pub_cerosIzquierda(contFactura, 12 - prefijo.length);

		if (!AQUtil.execSql("UPDATE tpv_comandas SET egcodfactura = '" + codFactW + "' WHERE idtpv_comanda = " + q.value("idtpv_comanda"))) {
			flfactppal.iface.ponMsgError(sys.translate("Error al rellenar el codigo de la venta %1").arg(q.value("idtpv_comanda")), "warn", this);
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

		contFactura++;
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	return true;
}


function elgansoCtr_exportarPedidoEciEdi(oPedidos, dirDestino, nombreFicheroPedido)
{
	var _i = this.iface;

	var q = new FLSqlQuery();

	q.setSelect("p.codserie, p.codigo, lp.referencia, lp.barcode,lp.descripcion, lp.talla, lp.color, elp.cantidad, lp.pvpunitarioiva, p.codalmacen, p.observaciones ,p.codcliente, p.direccion, p.nombrecliente, p.ciudad, p.codpostal, p.provincia, p.codpais, td.codeci,td.descripcion,td.direccion, td.ciudad, td.codpostal, td.provincia, td.codpais, elp.dtoeci, elp.codeciorigen");
	q.setFrom("pedidoscli p INNER JOIN lineaspedidoscli lp ON p.idpedido = lp.idpedido INNER JOIN eg_lineaspedidosclieci elp ON lp.idlinea = elp.idlineapedido INNER JOIN dirclientes td ON elp.codeci = td.codeci");

	q.setWhere("elp.idpedido IN (" + oPedidos + ")");
	
	debug(q.sql());
	if (!q.exec()) {
		return false;
	}

	if(q.size() <= 0){
		return true;
	}

	var prefijoFichero = "PICKECI_";

	var fichero = dirDestino + "/" + nombreFicheroPedido;
	var fichExport = new File(fichero);
	fichExport.open(File.WriteOnly);

	var cabecera = "ORDER SERIES;ORDER NUMBER;MOVEMENT TYPE;REF. N;BARCODE NUMERO;ITEM DESCRIPTION;SIZE;COLOR CODE;COLOR;UNITS;SUPPLIER;PRICE;WAREHOUSE CODE;DESTINATION CODE;ORDER ECI;CUSTOMER CODE EDI;SHIP-TO CODE EDI;EDI COD DPTO ECI ;EDI COD sucursal ECI ;LOCATION PREFIX SSCC;PROVEEDOR ECI;CENTRO UNECO;DIRECCIÓN ENTREGA:;CODIGO dirección Entrega ;NOMBRE;DIRECCION;POBLACION;CP;PROVINCIA;PAIS;COD DESTINO;NOMBRE DESTINO;DIRECCION DESTINO;POBLACION;CP;PROVINCIA;PAIS";

	fichExport.writeLine(cabecera);

	var linea;
	var codPedidoAnterior = false;
	var numEnvio;
	while (q.next()) {

		var precioTotal = AQUtil.roundFieldValue(parseFloat(q.value("lp.pvpunitarioiva")), "lineaspedidoscli", "pvptotal");
		var observacionPedido = q.value("p.observaciones");
		var orderPedido = observacionPedido.substring(11,observacionPedido.length);
		debug("//////************codEci: " + q.value("td.codeci"));
		var descripcionOrigen = AQUtil.sqlSelect("dirclientes", "descripcion", "codeci = '" + q.value("elp.codeciorigen") + "' AND codcliente = '001039'");

		var codOrigen = descripcionOrigen.toString().left(4);

		if(codOrigen.length < 4){
			codOrigen = "0" + codOrigen;
		}

		var codDestino = q.value("td.descripcion").toString().left(4);
		if(codDestino.length < 4){
			codDestino = "0" + codDestino;
		}

		
		var centroUneco = q.value("td.descripcion").toString().left(4) + "-" + q.value("elp.dtoeci");

		linea = q.value("p.codserie") + ";" + q.value("p.codigo") + ";;" + q.value("lp.referencia") + ";" + q.value("lp.barcode") + ";" + q.value("lp.descripcion") + ";" + q.value("lp.talla") + ";;" + q.value("lp.color") + ";" + q.value("elp.cantidad") + ";;" + precioTotal + ";;" + codDestino + ";" + orderPedido + ";;;"  + q.value("elp.dtoeci") + ";" + codDestino + ";;" + q.value("p.codcliente") + ";" + centroUneco + ";" + q.value("p.direccion") + ";"  + codOrigen + ";" + descripcionOrigen + ";" + q.value("p.direccion") + ";" + q.value("p.ciudad") + ";" + q.value("p.codpostal") + ";" + q.value("p.provincia") + ";" + q.value("p.codpais") + ";" + codDestino + ";" + q.value("td.descripcion") + ";" + q.value("td.direccion") + ";" + q.value("td.ciudad") + ";" + q.value("td.codpostal") + ";" + q.value("td.provincia") + ";" + q.value("td.codpais");

		fichExport.writeLine(linea);

	}

	fichExport.close();

	return true;
}

function elgansoCtr_dameNombreFicheroExportPedidoEci()
{
	var _i = this.iface;
	var cursor = this.cursor()
							 
	var fecha = new Date();
	var dia = fecha.getDate().toString();
	if(dia.length < 2){
		dia = "0" + dia;
	}
	var mes = fecha.getMonth().toString();
	if(mes.length < 2){
		mes = "0" + mes;
	}
	var anyo = fecha.getYear().toString();
	var hora = fecha.getHours().toString();
	if(hora.length < 2){
		hora = "0" + hora;
	}
	var minuto = fecha.getMinutes().toString();
	if(minuto.length < 2){
		minuto = "0" + minuto;
	}

	var nombreFichero = "PICKECI_" + dia + mes + anyo + hora + minuto + ".csv";

	return nombreFichero;
}

function elgansoCtr_informarLineasPedidosCliEci(oParamLineasEci)
{
	var _i = this.iface;

	_i.longitudLocl_ = 0;

	if(_i.ficherosPedidos_["deslineas"]){
		var file = new File(_i.ficherosPedidos_["deslineas"]);
		content = File.read(_i.ficherosPedidos_["deslineas"]);
		if(!content || content == "") {
			_i.ficherosPedidos_["deslineas"] = false;
		}
		file.close();
	}
	
	if(_i.ficherosPedidos_["deslineas"] && _i.ficherosPedidos_["deslineas"] != "") {
		var file = new File(_i.ficherosPedidos_["deslineas"]);
		try {
			file.open(File.ReadOnly);
		} catch(e) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Imposible abrir el fichero " + _i.ficherosPedidos_["deslineas"])) {
	  			flfactppal.iface.ponMsgError(sys.translate("Imposible abrir el fichero %1").arg(_i.ficherosPedidos_["deslineas"]), "info");
			}
			debug("Imposible abrir el fichero " + _i.ficherosPedidos_["deslineas"]);
			return false;
		}
		
		var linea = "";
		var campos = [];

		var steps = 0;
		while (!file.eof) {
			file.readLine();
			++steps;
			_i.longitudLocl_++;
		}

		file.close();
	    var file = new File(_i.ficherosPedidos_["deslineas"]);
		try {
			file.open(File.ReadOnly);
		} catch(e) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Imposible abrir el fichero " + _i.ficherosPedidos_["lineas"])) {
	  			flfactppal.iface.ponMsgError(sys.translate("Imposible abrir el fichero %1").arg(_i.ficherosPedidos_["lineas"]), "info");
			}
			debug("Imposible abrir el fichero " + _i.ficherosPedidos_["lineas"]);
			return false;
		}

		flfactalma.iface.pub_creaPDSilent(steps);
		var cont = 1;
		while(!file.eof) {

			flfactalma.iface.pub_setProgressPDSilent(++step);		
			linea = file.readLine();
			
			campos["CLAVE1"] = linea.substring(0, 7);
			campos["CLAVE2"] = linea.substring(8, 12);
			
			var codEci;
			var cantLinea;

			if(_i.lineasYaInformadas_){
				
				if(_i.longitudLineas_ == _i.longitudLocl_){
					return true;
				}

				if(oParamLineasEci.claveUno != campos["CLAVE1"] || oParamLineasEci.claveDos != campos["CLAVE2"]){
					var curLineaPedidoEci = new FLSqlCursor("eg_lineaspedidosclieci");
					curLineaPedidoEci.setModeAccess(curLineaPedidoEci.Insert);
					curLineaPedidoEci.refreshBuffer();
					curLineaPedidoEci.setValueBuffer("idlineapedido", oParamLineasEci.idLineaPedido);
					curLineaPedidoEci.setValueBuffer("codeciorigen", oParamLineasEci.codAlmaOrigen);
					curLineaPedidoEci.setValueBuffer("cantidad", oParamLineasEci.cantidad);
					curLineaPedidoEci.setValueBuffer("familiaeci", oParamLineasEci.familiaEci);
					curLineaPedidoEci.setValueBuffer("dtoeci", oParamLineasEci.dtoEci);
					curLineaPedidoEci.setValueBuffer("referenciaeci", oParamLineasEci.referenciaEci);
					curLineaPedidoEci.setValueBuffer("tallaeci", oParamLineasEci.tallaEci);
					curLineaPedidoEci.setValueBuffer("barcodeeci", oParamLineasEci.barcodeEci);
					curLineaPedidoEci.setValueBuffer("precioeci", oParamLineasEci.precioEci);
					curLineaPedidoEci.setValueBuffer("idpedido", oParamLineasEci.idPedido);
					curLineaPedidoEci.setValueBuffer("codeci", oParamLineasEci.codEci);
					if(!curLineaPedidoEci.commitBuffer()){
						return false;
					}
				}
				else{
					continue;
				}
			}else{
				campos["CODECIDESTINO"] = linea.substring(18, 34);
				var codEciDestino = campos["CODECIDESTINO"];

				while(codEciDestino.startsWith("0")) {
					codEciDestino = codEciDestino.substring(1,codEciDestino.length);
				}

				while(codEciDestino.endsWith(" ")) {
					codEciDestino = codEciDestino.substring(0,codEciDestino.length-1);
				}

				codEci = codEciDestino;

				campos["CANTIDAD"] = linea.substring(35, 49);
				var cantidadLinea = campos["CANTIDAD"];

				while(cantidadLinea.startsWith("0") || cantidadLinea.startsWith(" ")) {
					cantidadLinea = cantidadLinea.substring(1,cantidadLinea.length);
				}

				cantidadLinea = parseFloat(cantidadLinea) / 10;
				cantLinea = cantidadLinea;
				var curLineaPedidoEci = new FLSqlCursor("eg_lineaspedidosclieci");
			
				curLineaPedidoEci.select("idlineapedido = " + oParamLineasEci.idLineaPedido);

				curLineaPedidoEci.setModeAccess(curLineaPedidoEci.Insert);
				curLineaPedidoEci.refreshBuffer();
				curLineaPedidoEci.setValueBuffer("idlineapedido", oParamLineasEci.idLineaPedido);
				curLineaPedidoEci.setValueBuffer("codeciorigen", oParamLineasEci.codAlmaOrigen);
				curLineaPedidoEci.setValueBuffer("cantidad", cantLinea);
				curLineaPedidoEci.setValueBuffer("familiaeci", oParamLineasEci.familiaEci);
				curLineaPedidoEci.setValueBuffer("dtoeci", oParamLineasEci.dtoEci);
				curLineaPedidoEci.setValueBuffer("referenciaeci", oParamLineasEci.referenciaEci);
				curLineaPedidoEci.setValueBuffer("tallaeci", oParamLineasEci.tallaEci);
				curLineaPedidoEci.setValueBuffer("barcodeeci", oParamLineasEci.barcodeEci);
				curLineaPedidoEci.setValueBuffer("precioeci", oParamLineasEci.precioEci);
				curLineaPedidoEci.setValueBuffer("idpedido", oParamLineasEci.idPedido);
				curLineaPedidoEci.setValueBuffer("codeci", codEci);
				if(!curLineaPedidoEci.commitBuffer()){
					return false;
				}
				
			}
			cont++;
		} 

		_i.lineasYaInformadas_ = true;

		file.close();
	}
	else{
		debug("///////////////////////////////ELSE");
		var curLineaPedidoEci = new FLSqlCursor("eg_lineaspedidosclieci");
		curLineaPedidoEci.setModeAccess(curLineaPedidoEci.Insert);
		curLineaPedidoEci.refreshBuffer();
		curLineaPedidoEci.setValueBuffer("idlineapedido", oParamLineasEci.idLineaPedido);
		curLineaPedidoEci.setValueBuffer("codeciorigen", oParamLineasEci.codAlmaOrigen);
		curLineaPedidoEci.setValueBuffer("cantidad", oParamLineasEci.cantidad);
		curLineaPedidoEci.setValueBuffer("familiaeci", oParamLineasEci.familiaEci);
		curLineaPedidoEci.setValueBuffer("dtoeci", oParamLineasEci.dtoEci);
		curLineaPedidoEci.setValueBuffer("referenciaeci", oParamLineasEci.referenciaEci);
		curLineaPedidoEci.setValueBuffer("tallaeci", oParamLineasEci.tallaEci);
		curLineaPedidoEci.setValueBuffer("barcodeeci", oParamLineasEci.barcodeEci);
		curLineaPedidoEci.setValueBuffer("precioeci", oParamLineasEci.precioEci);
		curLineaPedidoEci.setValueBuffer("idpedido", oParamLineasEci.idPedido);
		curLineaPedidoEci.setValueBuffer("codeci", oParamLineasEci.codEci);
		if(!curLineaPedidoEci.commitBuffer()){
			return false;
		}
	}
	
	return true;

}

function elgansoCtr_crearRegistrosInicioContAnaliticaYear()
{
	var _i = this.iface;

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione Año");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = "2018-01-01";
	dialog.add(dFechaIni);

	if (!dialog.exec()) {
		return false;
	}
	
	var year = dFechaIni.date.getYear().toString();

	var qSubcentros = new FLSqlQuery();
	qSubcentros.setSelect("codsubcentro");
	qSubcentros.setFrom("subcentroscoste");
	qSubcentros.setWhere("1=1 ORDER BY codsubcentro");

	if(!qSubcentros.exec()){
		return false;
	}

	var mes;
	while(qSubcentros.next()) {
		var qSubcuentas  = new FLSqlQuery();
		qSubcuentas.setSelect("s.codsubcuenta");
		qSubcuentas.setFrom("co_subcuentas s INNER JOIN co_partidas p ON s.codsubcuenta = p.codsubcuenta");
		qSubcuentas.setWhere("p.codsubcentro IS NOT NULL AND (s.codsubcuenta LIKE '6%' OR s.codsubcuenta LIKE '7%') AND s.codsubcuenta NOT IN (SELECT c.codsubcuenta from eg_contanalitica c WHERE c.codsubcentro = '" + qSubcentros.value("codsubcentro") + "' AND c.anno = '" + year + "') GROUP BY s.codsubcuenta ORDER BY s.codsubcuenta");

		if(!qSubcuentas.exec()){
			return false;
		}

		flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Insertando registros %1").arg(qSubcentros.value("codsubcentro")), parseFloat(qSubcuentas.size()) * 12);
		var p = 0;

		while(qSubcuentas.next()) {
			for(var i = 1; i <= 12; i++){
				AQUtil.setProgress(p++);
				if(i < 10){
					mes = "0" + i.toString();
				}
				else{
					mes = i.toString();
				}
				debug("////////////////////////// mesano: " + year + mes + "  /// codsubcuenta: " + qSubcuentas.value("s.codsubcuenta") + "   /// codsubcentro: " + qSubcentros.value("codsubcentro"));
				var curContAnalitica = new FLSqlCursor("eg_contanalitica");
				curContAnalitica.setModeAccess(curContAnalitica.Insert);
				curContAnalitica.refreshBuffer();
				curContAnalitica.setValueBuffer("anno", year);
				curContAnalitica.setValueBuffer("mesano", year + mes);
				curContAnalitica.setValueBuffer("codsubcentro", qSubcentros.value("codsubcentro"));
				curContAnalitica.setValueBuffer("codsubcuenta", qSubcuentas.value("s.codsubcuenta"));
				curContAnalitica.setValueBuffer("prevision1", 0);
				curContAnalitica.setValueBuffer("prevision2", 0);
				curContAnalitica.setValueBuffer("valor", 0);
				if(!curContAnalitica.commitBuffer()){
					AQUtil.destroyProgressDialog();
					return false;
				}

			}
		}
		AQUtil.destroyProgressDialog();
	}

	return true;
}


function elgansoCtr_revisionSeriesFacturasTienda(fecha, codEjercicio, rellenarHuecos)
{
	var _i = this.iface;

	_i.descripcionOperacionSII_ = false;

	var qS = new FLSqlQuery;
	qS.setSelect("left(codigo,5) as codSerie");
	qS.setFrom("facturascli");
	qS.setWhere("left(codigo,5) like 'A%' AND left(codigo,5) not like 'AWEB%' AND fecha >= '" + fecha + "' AND codejercicio = '" + codEjercicio + "' GROUP BY left(codigo,5) order by codSerie");
	debug(qS.sql());
	if (!qS.exec()) {
		return false;
	}
	var codSerie;
	var listaHuecosFactura = "";
	var hayHuecos = false;
	while (qS.next()) {
		codSerie = qS.value(0);
		hayHuecos = _i.controlSecuenciaEjercicioTienda(codEjercicio, codSerie, "facturascli", rellenarHuecos, fecha);
		if(hayHuecos != ""){
			listaHuecosFactura += hayHuecos;
		}
	}

	if(listaHuecosFactura == ""){
		listaHuecosFactura = "No hay huecos de facturas de ventas.";
	}

	_i.envioEmailHuecosFactura(listaHuecosFactura);

	return true;
}

function elgansoCtr_controlSecuenciaEjercicioTienda(codEjercicio, codSerie, tabla, rellenarHuecos, fechaInicio)
{
	var _i = this.iface;
	
	var prefijoFactura = codSerie;
	
	var qS = new FLSqlQuery;
	qS.setSelect("codigo, numero, fecha");
	qS.setFrom(tabla);
	qS.setWhere("codejercicio = '" + codEjercicio + "' AND codigo LIKE '" + prefijoFactura + "%' AND fecha >= '" + fechaInicio + "' ORDER BY codigo");
	if (!qS.exec()) {
		return false;
	}
	
	var codigoAnt = AQUtil.sqlSelect("facturascli", "min(codigo)", "codigo LIKE '" + prefijoFactura + "%' AND codejercicio = '" + codEjercicio + "' AND fecha >= '" + fechaInicio + "'");

	var numeroAnt = codigoAnt.toString().right(5,codigoAnt.length);

	var codigo;
	var numero = 0;
	var huecos;
	var fecha, fechaAnt = fechaInicio;
	var listaHuecos = "";
	while (qS.next()) {
		codigo = qS.value("codigo");
		numero = qS.value("codigo").toString().right(5,qS.value("codigo").length);
		fecha = qS.value("fecha");
		huecos = numero - numeroAnt - 1
		if (huecos > 0) {
			debug(huecos + " huecos entre factura " + codigoAnt + " y factura " + codigo);
			listaHuecos += huecos + " huecos entre factura " + codigoAnt + " y factura " + codigo + "\n";
			if (rellenarHuecos) {
				if (!_i.rellenaHuecosFacturaTienda(codEjercicio, codSerie, tabla, codigoAnt, codigo, fechaAnt)) {
					return false;
				}
			}
		}
		if (fechaAnt) {
			if (AQUtil.daysTo(fechaAnt, fecha) < 0) {
				debug("factura " + codigoAnt + " de " + fechaAnt + " posterior a factura " + codigo + " de fecha " + fecha);
			}
		}
		codigoAnt = codigo;
		numeroAnt = numero;
		fechaAnt = fecha;
	}

	return listaHuecos;
}

function elgansoCtr_rellenaHuecosFacturaTienda(codEjercicio, codSerie, tabla, codigoAnt, codigo, fecha)
{
	var _i = this.iface;

	if (tabla != "facturascli") {
		return true;
	}

	var inicio = parseFloat(codigoAnt.toString().right(6));
	if (isNaN(inicio)) {
		inicio = 0;
	}
	inicio++;
	var fin = parseFloat(codigo.toString().right(6));
	fin--;
	debug("Desde " + inicio + " hasta " + fin);
	for (var i = inicio; i <= fin; i++) {
		debug("Rellenando factura " + codEjercicio + " - " + codSerie + " - " + i);
		if (!_i.creaFacturaF2a0Tienda(codEjercicio, codSerie, i, fecha)) {
			return false;
		}
	}
	return true;
}

function elgansoCtr_creaFacturaF2a0Tienda(codEjercicio, codSerie, i, fecha)
{
	var _i = this.iface;
	var _fSii = flcontsii.iface;

	var valor = _i.construirCodigoFacVenta(0, codSerie, i.toString());

	if (!_i.descripcionOperacionSII_) {
		var curDatosFiscales = new FLSqlCursor("sii_datosfiscales");
        curDatosFiscales.select();
        if (curDatosFiscales.first()) {
        	_i.descripcionOperacionSII_ = curDatosFiscales.valueBuffer("descripcionoperacion");
        }
	}

	var codAlmacen = codSerie.left(4);
	var codSerieFactura = AQUtil.sqlSelect("tpv_tiendas", "codserie", "codalmacen = '" + codAlmacen + "'");
	var codCliente = AQUtil.sqlSelect("tpv_tiendas", "codcliente", "codalmacen = '" + codAlmacen + "'");
	var codCentro = AQUtil.sqlSelect("tpv_tiendas", "codcentro", "codalmacen = '" + codAlmacen + "'");
	var codSubcentro = AQUtil.sqlSelect("tpv_tiendas", "codsubcentro", "codalmacen = '" + codAlmacen + "'");

	var curFactura = new FLSqlCursor("facturascli");
    curFactura.setModeAccess(curFactura.Insert);
    curFactura.refreshBuffer();

    curFactura.setValueBuffer("codejercicio", codEjercicio);
    curFactura.setValueBuffer("codserie", codSerieFactura);
    curFactura.setValueBuffer("numero", i.toString());
    curFactura.setValueBuffer("codigo", valor);
    curFactura.setValueBuffer("irpf", 0);
    curFactura.setValueBuffer("fecha", fecha);
    curFactura.setValueBuffer("hora", "12:00:15");
    curFactura.setValueBuffer("codalmacen", codAlmacen);
    curFactura.setValueBuffer("codpago", "CONT");
    curFactura.setValueBuffer("coddivisa", "EUR");
    curFactura.setValueBuffer("tasaconv", 1);
    curFactura.setValueBuffer("codcliente", codCliente);
    curFactura.setValueBuffer("cifnif", "0");
    curFactura.setValueBuffer("nombrecliente", "Ventas contado");
    curFactura.setValueBuffer("direccion", "-");
    curFactura.setValueBuffer("ciudad", "-");
    curFactura.setValueBuffer("provincia", "-");
    curFactura.setValueBuffer("tpv", true);
    curFactura.setValueBuffer("codcentro", codCentro);
    curFactura.setValueBuffer("codsubcentro", codSubcentro);

    curFactura.setValueBuffer("codgrupoivaneg", "CNP");

    curFactura.setValueBuffer("manualsii", true);
    curFactura.setValueBuffer("fechaoperacion", fecha);
    curFactura.setValueBuffer("descripcionoperacion", _i.descripcionOperacionSII_);
    curFactura.setValueBuffer("ejercicio", _fSii.calculateFieldFacturasCli("ejercicio", curFactura));
    curFactura.setValueBuffer("periodo", _fSii.calculateFieldFacturasCli("periodo", curFactura));
    curFactura.setValueBuffer("clavetipo", "F2");
    curFactura.setValueBuffer("tiporectificativa", _fSii.calculateFieldFacturasCli("tiporectificativa", curFactura));
    curFactura.setValueBuffer("claveoperacion", _fSii.calculateFieldFacturasCli("claveoperacion", curFactura));

    if (!curFactura.commitBuffer()) {
        return false;
    }

    var idFactura = curFactura.valueBuffer("idfactura");

    var curLineaFactura = new FLSqlCursor("lineasfacturascli");
    curLineaFactura.setModeAccess(curLineaFactura.Insert);
    curLineaFactura.refreshBuffer();
    curLineaFactura.setValueBuffer("idfactura", idFactura);
    curLineaFactura.setValueBuffer("numlinea", 1);

    curLineaFactura.setValueBuffer("descripcion", _i.descripcionOperacionSII_);
    curLineaFactura.setValueBuffer("cantidad", 1);
    curLineaFactura.setValueBuffer("pvpunitario", 0);
    curLineaFactura.setValueBuffer("pvpsindto", 0);
    curLineaFactura.setValueBuffer("pvptotal", 0);
    curLineaFactura.setValueBuffer("pvpunitarioiva", 0);
    curLineaFactura.setValueBuffer("pvpsindtoiva", 0);
    curLineaFactura.setValueBuffer("pvptotaliva", 0);
    curLineaFactura.setValueBuffer("codimpuesto", "D1");
    curLineaFactura.setValueBuffer("iva", 21);
    curLineaFactura.setValueBuffer("recargo", 0);


	if (!curLineaFactura.commitBuffer()) {
		return false;
	}

	curFactura.select("idfactura = " + idFactura);
    if (!curFactura.first()) {
    	return false;
    }
    curFactura.setModeAccess(curFactura.Edit);
    curFactura.refreshBuffer();

    formalbaranescli.iface.curFactura = curFactura;
    if (!formalbaranescli.iface.totalesFactura()) {
        return false;
    }

    if (curFactura.commitBuffer() == false){
        return false;
    }

    return idFactura;
}

function elgansoCtr_construirCodigoFacVenta(codSerie, codEjercicio, numero)
{
	var _i = this.iface;

	return flfacturac.iface.pub_cerosIzquierda(codEjercicio, 4) +
		flfacturac.iface.pub_cerosIzquierda(codSerie, 1) +
		flfacturac.iface.pub_cerosIzquierda(numero, 6);
		
}

function elgansoCtr_cargaInventarioCierre2016(oParam)
{
	var sep = "|"
	var f = FileDialog.getOpenFileName("*.*");
	if (!f) {
		return false;
	}
	
	var file = new File(f);
	file.open(File.ReadOnly);
  
  	var steps = 300000;
  
	AQUtil.createProgressDialog(sys.translate("Cargando líneas..."), steps);
	var l;
	var c;
	var p = 0, nuevos = 0, modificados = 0, esNuevo;
	var codAlmacen, referenci, talla, cantidad;
	while(!file.eof) {
		AQUtil.setProgress(p++);
		l = file.readLine();
		c = l.split(sep);
		codAlmacen = c[0];
		referencia = c[1];
		talla = c[2];
		cantidad = c[3];

		var sql = "INSERT INTO lineasregstocks (idstock, fecha, cantidadini, cantidadfin, motivo, referencia, talla, barcode, hora, sincronizado, ptecalculo, egidsincroinv) (SELECT s.idstock, '2016-12-31', 0, " + cantidad + ", 'XXXX', '" + referencia + "', '" + talla + "', s.barcode, '23:00:00', true, false, '" + codAlmacen + "_XXXX' FROM stocks s WHERE referencia = '" + referencia + "' AND codalmacen = '" + codAlmacen + "' AND talla = '" + talla + "');"
//debug(p + " : " + sql);
		AQUtil.execSql(sql);
//		if (p > 1000) break;
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elgansoCtr_exportarEtiquetasEciEdi(oPedidos, dirDestino, nombrePrecio)
{
	var _i = this.iface;

	var q = new FLSqlQuery();

	q.setSelect("elp.familiaeci, elp.dtoeci, elp.referenciaeci, elp.tallaeci, elp.barcodeeci, elp.precioeci");
	q.setFrom("eg_lineaspedidosclieci elp");
	q.setWhere("elp.idpedido IN (" + oPedidos + ")");
	
	debug(q.sql());
	if (!q.exec()) {
		return false;
	}

	if(q.size() <= 0){
		return true;
	}

	var prefijoFichero = "REFECI_";

	
	var fichero = dirDestino + "/" + nombrePrecio;
	var fichExport = new File(fichero);
	fichExport.open(File.WriteOnly);

	var cabecera = "FAMILIA ECI;DPTO ECI;REFERENCIA;TALLA ECI;EAN;PRECIO ECI";

	fichExport.writeLine(cabecera);

	var linea;
	var codPedidoAnterior = false;
	var numEnvio;
	while (q.next()) {

		linea = q.value("elp.familiaeci") + ";" + q.value("elp.dtoeci") + ";" + q.value("elp.referenciaeci") + ";" + q.value("elp.tallaeci") + ";" + q.value("elp.barcodeeci") + ";" + q.value("elp.precioeci");

		fichExport.writeLine(linea);

	}

	fichExport.close();

	return true;
}

function elgansoCtr_egCorregirLineasViajesRxMovPendiente()
{
	var _i = this.iface;

	var fecha = new Date;

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var diadesde = new DateEdit;
	diadesde.label = sys.translate("Fecha desde: ");
	diadesde.date = fecha;
	dialog.add(diadesde);

	if (!dialog.exec()) {
		return false;
	}
	
	fecha = diadesde.date;
	
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var q = new FLSqlQuery();

	q.setSelect("l.idlinea");
	q.setFrom("tpv_lineasmultitransstock l LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineattd");
	q.setWhere("fecharx >= '" + fecha + "' AND NOT l.cerradorx AND cantrecibida > 0 AND ms.estado = 'PTE' and l.estado IN ('RECIBIDO','RECIBIDO PARCIAL')");

	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	AQUtil.createProgressDialog("Corrigiendo movimientos de stock en líneas de viaje destino...", q.size());
	var p = 0;
	
	while(q.next()) {
		AQUtil.setProgress(p++);
		curL.select("idlinea = " + q.value("l.idlinea"));
		if(!curL.first()) {
			debug("NO FIRST");
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNo First"));
			return false;
		}
		curL.setModeAccess(curL.Browse);
		curL.refreshBuffer();

		if (!flfactalma.iface.borrarEstructuraMTDestino(curL)) {
			AQUtil.destroyProgressDialog();
			debug("NO borrarEstructuraMTDestino");
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNO borrarEstructuraMTDestino"));
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTDestino(curL)) {
			AQUtil.destroyProgressDialog();
			debug("NO generarEstructuraMTDestino");
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNO generarEstructuraMTDestino"));
			return false;
		}
		/*if(!curL.commitBuffer()) {
			debug("NO commit");
			continue;
		}*/
	}
	AQUtil.destroyProgressDialog();

	return true;
}

function elgansoCtr_egCorregirLineasViajesTxMovPendiente()
{
	var _i = this.iface;
	
	var fecha = new Date;

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var diadesde = new DateEdit;
	diadesde.label = sys.translate("Fecha desde: ");
	diadesde.date = fecha;
	dialog.add(diadesde);

	if (!dialog.exec()) {
		return false;
	}
	
	fecha = diadesde.date;

	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var q = new FLSqlQuery();

	q.setSelect("l.idlinea");
	q.setFrom("tpv_lineasmultitransstock l LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineatto");
	//q.setWhere("fechaex >= '" + fecha + "' AND NOT l.cerradoex AND cantenviada > 0 AND ms.estado = 'PTE' and l.estado <> 'PTE ENVIO'");
	// Antonio
	q.setWhere("fechaex >= '" + fecha + "' AND cantenviada > 0 AND ms.estado = 'PTE' and l.estado NOT IN ('PTE ENVIO', 'ENVIADO PARCIAL')");

	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	AQUtil.createProgressDialog("Corrigiendo movimientos de stock en líneas de viaje origen...", q.size());
	var p = 0;
	
	while(q.next()) {
		AQUtil.setProgress(p++);
		curL.select("idlinea = " + q.value("l.idlinea"));
		if(!curL.first()) {
			debug("NO FIRST");
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNo First"));
			return false;
		}
		curL.setModeAccess(curL.Browse);
		curL.refreshBuffer();

		if (!flfactalma.iface.borrarEstructuraMTOrigen(curL)) {
			AQUtil.destroyProgressDialog();
			debug("NO borrarEstructuraMTDestino");
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNO borrarEstructuraMTOrigen"));
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTOrigen(curL)) {
			AQUtil.destroyProgressDialog();
			debug("NO generarEstructuraMTDestino");
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNO generarEstructuraMTOrigen"));
			return false;
		}
		/*if(!curL.commitBuffer()) {
			debug("NO commit");
			continue;
		}*/
	}

	AQUtil.destroyProgressDialog();

	return true;
}

function elgansoCtr_egTotalizarInventariosTiendas(codTienda)
{
	var _i = this.iface;

	debug("************************************************* codTienda: " + codTienda);
	
	var listaAlmacenes = _i.listaAlmacenesTransportista();
	var q = new FLSqlQuery();

	q.setSelect("idsincro");
	q.setFrom("eg_inventarios");
	var filtro = "enviado = false AND total AND (codalmacen <> 'AWEB' AND codalmacen NOT IN (" + listaAlmacenes + "))";

	if(codTienda){
		filtro += " AND codalmacen = '" + codTienda + "'";
	}

	q.setWhere(filtro + " order by idsincro");
	debug(q.sql());

	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	var curInventario = new FLSqlCursor("eg_inventarios");
	while(q.next()) {

		curInventario.select("idsincro = '" + q.value("idsincro") + "'");
		if(curInventario.first()){
			curInventario.setModeAccess(curInventario.Edit);
			curInventario.refreshBuffer();
			
			var oParam = {};
			oParam.cursor = curInventario;
			oParam.codInventario = q.value("idsincro");
			oParam.errorMsg = sys.translate("Error al regularizar a cero");
			oParam.todoCero = true;
			
			f = new Function("oParam", "return formRecordeg_inventarios.iface.cargaRestoInventario(oParam)");
			if (!sys.runTransaction(f, oParam)) {
				debug("//////////////////////////// no cargaRestoInventario: " + oParam.codInventario);
			    continue;
			}

			var oParam = {};
			oParam.cursor = curInventario;
			oParam.codInventario = q.value("idsincro");
			oParam.errorMsg = sys.translate("Error al enviar el inventario.");
			f = new Function("oParam", "return formeg_inventarios.iface.enviaInventario(oParam)");
			if (!sys.runTransaction(f, oParam)){
				debug("//////////////////////////// no enviaInventario: " + oParam.codInventario);
			    continue;
			}

			if(!curInventario.commitBuffer()){
				debug("//////////////////////////// no commit inventario: " + oParam.codInventario);
				continue;
			}

		}
	}

	return true;
}

function elgansoCtr_listaAlmacenesTransportista()
{
	var _i = this.iface;
	
	var q = new FLSqlQuery();

	q.setSelect("codalmacen");
	q.setFrom("almacenes");
	q.setWhere("egcodtransportista is not null");

	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	var almacenes = "";

	while (q.next()) {
		if(almacenes && almacenes != "") {
			almacenes += ",";
		}
		almacenes += "'" + q.value("codalmacen") + "'";
	}

	return almacenes;
}


function elgansoCtr_egCorregirLineasViajesTxCanceladasMovPendiente()
{
	var _i = this.iface;
	
	var fecha = new Date;

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var diadesde = new DateEdit;
	diadesde.label = sys.translate("Fecha desde: ");
	diadesde.date = fecha;
	dialog.add(diadesde);

	if (!dialog.exec()) {
		return false;
	}
	
	fecha = diadesde.date;

	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var q = new FLSqlQuery();

	q.setSelect("l.idlinea");
	q.setFrom("tpv_lineasmultitransstock l LEFT OUTER JOIN movistock ms ON l.idlinea = ms.idlineatto INNER JOIN tpv_viajesmultitransstock v ON l.idviajemultitrans = v.idviajemultitrans");
	q.setWhere("ms.estado = 'PTE' and l.estado = 'CANCELADO' AND v.fecha >= '" + fecha + "'");

	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	AQUtil.createProgressDialog("Corrigiendo movimientos de stock en líneas de viaje origen...", q.size());
	var p = 0;
	
	while(q.next()) {
		AQUtil.setProgress(p++);
		curL.select("idlinea = " + q.value("l.idlinea"));
		if(!curL.first()) {
			debug("NO FIRST");
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNo First"));
			return false;
		}
		curL.setModeAccess(curL.Browse);
		curL.refreshBuffer();

		if (!flfactalma.iface.borrarEstructuraMTOrigen(curL)) {
			AQUtil.destroyProgressDialog();
			debug("NO borrarEstructuraMTDestino");
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNO borrarEstructuraMTOrigen"));
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTOrigen(curL)) {
			AQUtil.destroyProgressDialog();
			debug("NO generarEstructuraMTDestino");
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNO generarEstructuraMTOrigen"));
			return false;
		}
		/*if(!curL.commitBuffer()) {
			debug("NO commit");
			continue;
		}*/
	}

	AQUtil.destroyProgressDialog();

	return true;
}

function elgansoCtr_egModificarLineasTransitoRXOK()
{
	var _i = this.iface;
	
	var hoy = new Date;
	
	// select count(*) from tpv_lineasmultitransstock where estado = 'EN TRANSITO' AND rxcentral = 'OK' AND rxtienda = 'OK' AND cantrecibida < cantenviada AND fecharx is null;
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	curL.select("estado = 'EN TRANSITO' AND rxcentral = 'OK' AND rxtienda = 'OK' AND cantrecibida < cantenviada AND fecharx is null")
	AQUtil.createProgressDialog("Procesando líneas", curL.size());
	var p = 0;
	while(curL.next()) {
		curL.setModeAccess(curL.Edit);
		curL.refreshBuffer();
		debug("Linea " + curL.valueBuffer("idlinea"));
		curL.setValueBuffer("cerradorx", true);
		curL.setValueBuffer("estado", "RECIBIDO");
		curL.setValueBuffer("fecharx", hoy.toString().left(10));
		curL.setValueBuffer("horarx", hoy.toString().right(8));
		if (!curL.commitBuffer()) {
			return false;
		}
		AQUtil.setProgress(p++);
	}

	AQUtil.destroyProgressDialog();

	return true;
}



function elgansoCtr_egRevisaStocksNeg()
{
	var p = 0;
	
	var qS = new FLSqlQuery;
	qS.setSelect("s.idstock");
	qS.setFrom("stocks s");
	qS.setWhere("codalmacen not in ('AZPR', 'AZKA', 'AWEB', 'LOGI') and (cantidad < 0 or disponible < 0)");
	if (!qS.exec()) {
		return false;
	}
	AQUtil.createProgressDialog( sys.translate("Procesando stocks" ), qS.size());
	while (qS.next()) {
		AQUtil.setProgress(p++);
		if (!formregstocks.iface.revisarStock("idstock = " + qS.value("s.idstock"))) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	return true;
}

function elgansoCtr_egMarcaViajesCancelados()
{
	var _i = this.iface;
	var _fA = flfactalma.iface;
	var _fT = flfact_tpv.iface;

	var dialog = new Dialog;
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var gB = new GroupBox;
	gB.title = sys.translate("Pegue la lista de viajes");
	dialog.add( gB );
	var teTabla = new TextEdit;
	gB.add( teTabla );

	if(!dialog.exec() ) {
		return;
	}
	var texto = teTabla.text;
	var aLineas = texto.split("\n");
	var nL = aLineas.length;

debug(nL + " líneas");

	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	/*curL.setActivatedCheckIntegrity(false);
	curL.setActivatedCommitActions(false);*/

	var idViaje, codMulti, descripcion;
	AQUtil.createProgressDialog(sys.translate("Procesando viajes"), nL);
	for (var i = 0; i < nL; i++) {
		idViaje = aLineas[i];
		AQUtil.setProgress(i);
		AQUtil.setLabelText(sys.translate("Procesando viaje %1").arg(idViaje));
		curL.select("idviajemultitrans = '" + idViaje + "'");
		while (curL.next()) {
			curL.setModeAccess(curL.Edit);
			curL.refreshBuffer();
			codMulti = curL.valueBuffer("codmultitransstock");

			debug("--------------------------> línea " + curL.valueBuffer("numlinea") + " de viaje " + idViaje);

			if (curL.valueBuffer("estado") == 'RECIBIDO' || curL.valueBuffer("estado") == 'CANCELADO') {
				continue;
			}
			
			descripcion = curL.valueBuffer("descripcion");
			descripcion = "Cierre manual " + descripcion;
			descripcion = descripcion.left(100);
			curL.setValueBuffer("descripcion", descripcion);
			curL.setValueBuffer("estado", "RECIBIDO");
			curL.setValueBuffer("cerradorx", true);
			curL.setValueBuffer("extienda", "OK");
			curL.setValueBuffer("excentral", "OK");

			/*if (!flfactalma.iface.borrarEstructuraMTDestino(curL)) {
				AQUtil.destroyProgressDialog();
				debug("NO borrarEstructuraMTDestino");
				sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNO borrarEstructuraMTDestino"));
				return false;
			}
			if (!flfactalma.iface.generarEstructuraMTDestino(curL)) {
				AQUtil.destroyProgressDialog();
				debug("NO generarEstructuraMTDestino");
				sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNO generarEstructuraMTDestino"));
				return false;
			}*/

			if (!curL.commitBuffer()) {
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
		if (!_fT.totalizarViaje(codMulti, idViaje)) {
			debug("Totaliza viaje " + idViaje + " multi " + codMulti);
			AQUtil.destroyProgressDialog();
			return false;
		}
		debug("--------------------------> Viaje OK " + idViaje);
	}
	AQUtil.destroyProgressDialog();

	return true;
}

function elgansoCtr_creaBonosEmpleados()
{
	var _i = this.iface;

	var dialog = new Dialog;
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");
	
	var texto = new LineEdit;
	texto.text = "BONONAVIDAD17_";
	dialog.add(texto);

	var fecha = new Date;
	var diaDesde = new DateEdit;
	diaDesde.label = sys.translate("Fecha: ");
	diaDesde.date = fecha;
	dialog.add(diaDesde);

	var fechaExpiracion = new DateEdit;
	fechaExpiracion.label = sys.translate("Fecha Expiración: ");
	fechaExpiracion.date = fecha;
	dialog.add(fechaExpiracion);

	if(!dialog.exec()){
		return false;
	}

	var venta = texto.text;

	var q = new FLSqlQuery();

	q.setSelect("a.codtpv_agente, e.coddivisa,a.email");
	q.setFrom("tpv_agentes a INNER JOIN tpv_tiendas t ON a.codtienda = t.codtienda INNER JOIN empresa e ON t.idempresa = e.id");
	q.setWhere("a.debaja = false AND a.email IS NOT NULL AND a.email <> '0' AND a.codtienda IS NOT NULL");

	if(!q.exec()){
		return false;
	}

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Insertando %1").arg(venta), q.size());
	var p = 0;
	var codBono;

	while(q.next()) {
		AQUtil.setProgress(p++);

		if(AQUtil.sqlSelect("eg_bonos", "codbono", "email = '" + q.value("a.email") + "' AND venta = '" + venta + q.value("a.codtpv_agente") + "'")){
			continue;
		}

		var codBono = flfact_tpv.iface.calculaCodBono();
		var i = 0;

		while(AQUtil.sqlSelect("eg_bonos", "codbono", "codbono = '" + codBono + "'") && i < 1000){
			codBono = flfact_tpv.iface.calculaCodBono();
			i++;
		}

		if(!codBono){
			return false;
		}

		var curBono = new FLSqlCursor("eg_bonos");
		curBono.setModeAccess(curBono.Insert);
		curBono.refreshBuffer();

		curBono.setValueBuffer("codbono", codBono);
		curBono.setValueBuffer("fecha", diaDesde.date);
		curBono.setValueBuffer("venta", venta + q.value("a.codtpv_agente"));
		curBono.setValueBuffer("saldoinicial", 40);
		curBono.setValueBuffer("saldoconsumido", 0);
		curBono.setValueBuffer("saldopendiente", 40);
		curBono.setValueBuffer("activo", true);
		curBono.setValueBuffer("fechaexpiracion", fechaExpiracion.date);
		curBono.setValueBuffer("coddivisa", q.value("e.coddivisa"));
		curBono.setValueBuffer("email", q.value("a.email"));

		if (!curBono.commitBuffer()){
			AQUtil.destroyProgressDialog();
			return false;	
		}
	}

	AQUtil.destroyProgressDialog();

	return true;
}

function elgansoCtr_actualizarInventariosSincroTiendas()
{
	var _i = this.iface;

	var _mT = formtpv_tiendas.iface;
	var _fTpv = flfact_tpv.iface;

	var nombreLog = _mT.dameNombreLog("ACTUALIZAR_INVENTARIOS");
	_i.nombreLog_ = flfactalma.iface.pub_ponLogName(nombreLog);
	var dirLog = _fTpv.pub_valorDefectoTPV("dirlogs");
	
	if(!dirLog || dirLog == ""){
		dirLog = Dir.home;
	}

	if(dirLog.endsWith("/")){
		_i.nombreFile_ = dirLog + nombreLog;
	}
	else{
		_i.nombreFile_ = dirLog + "/" + nombreLog;
	}

	if(!flfactppal.iface.pub_abreLogFile(_i.nombreLog_, _i.nombreFile_)){
		sys.infoMsgBox("No se ha creado el fichero del log de la consulta.");
	}
  
	var listaTiendas = Input.getText(sys.translate("Lista de tiendas separada por comas y sin espacios"));

	if(!listaTiendas || listaTiendas == ""){
		return false;
	}

	_i.mgr_ = aqApp.db().manager();
	_i.aCx_ = [];
	
	var aT = listaTiendas.split(",");
	aT.sort();
	var codTienda;

	if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "Conectando...")){
		sys.infoMsgBox("Conectando...");
	}

	for (var i = 0; i < aT.length; i++) {
		codTienda = aT[i];
		if (!_i.conectarMT(codTienda, true)) {
			if(!flfactppal.iface.pub_appendTextToLogFile(_i.nombreLog_, "No Conectado a " + codTienda)){
				sys.infoMsgBox("No conectado a " + codTienda);
			}
			continue;
		}
		if(!_i.actualizaInventarioTienda(codTienda)){
			continue;
		}
	}

	return true;
}

function elgansoCtr_actualizaInventarioTienda(codTienda)
{

	var q = new FLSqlQuery("",codTienda);
	q.setFrom("eg_inventarios");
	q.setSelect("idsincro");
	q.setWhere("fecha >= '2017-12-01' AND enviado AND sincronizado AND codalmacen = '" + codTienda + "'");
	
	debug(q.sql());
	if(!q.exec()){
		return false;
	}

	while(q.next()){
		if(!AQUtil.sqlSelect("eg_inventarios", "idsincro", "idsincro = '" + q.value("idsincro") + "'")){
			if(!AQUtil.execSql("UPDATE eg_inventarios SET sincronizado = false WHERE idsincro = '" + q.value("idsincro") + "'", codTienda)) {
				return false;
			}		
		}
	
	}
  
  	return true;
}

function elgansoCtr_cargaInventarioSTO()
{
	var _i = this.iface;

	var fichero = FileDialog.getOpenFileName("sto*.csv");
	if (!fichero) {
		return false;
	}	

	var dialog = new Dialog;
	dialog.caption = "Seleccione fecha y hora del inventario";
	dialog.okButtonText = "Aceptar";
	dialog.cancelButtonText = "Cancelar";    
	
	var fechaInv = new DateEdit;
	fechaInv.date = new Date();	
	fechaInv.label = sys.translate("Fecha:");
	dialog.add(fechaInv);
	
	var horaInv = new TimeEdit;
	horaInv.time = new Date();	
	horaInv.label = sys.translate("Hora:");
	dialog.add(horaInv);
	
	if(!dialog.exec() ) {
		return;
	}

	if (!flfactalma.iface.generarInventarioDiarioLogistica(fichero, false, fechaInv.date, horaInv.time)) {
		return false;
	}

}	

function elgansoCtr_egCorregirLineasViajesAlmacenTransito()
{
	var _i = this.iface;

	var p;
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var q = new FLSqlQuery();

	q.setSelect("d.linea, d.can, o.can");
	q.setFrom("(select idlinea as linea, sum(ms.cantidad * -1) as can from tpv_lineasmultitransstock l inner join movistock ms on l.idlinea = ms.idlineattd inner join stocks s on ms.idstock = s.idstock and s.codalmacen = 'TR01' GROUP BY linea) as d left outer join (select idlinea as linea, sum(ms.cantidad) as can from tpv_lineasmultitransstock l inner join movistock ms on l.idlinea = ms.idlineatto inner join stocks s on ms.idstock = s.idstock and s.codalmacen = 'TR01' GROUP BY linea) as o on d.linea = o.linea");
	q.setWhere("d.can > o.can or o.can is null");
	
	debug(q.sql());

	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	
	AQUtil.createProgressDialog("Corrigiendo movimientos de stock en líneas de viaje origen...", q.size());
	p = 0;

	while(q.next()) {
		AQUtil.setProgress(p++);
		debug("///////////////////////LINEA: " + q.value("d.linea"));
		curL.select("idlinea = " + q.value("d.linea"));

		if(!curL.first()) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNo first idlinea viaje %1").arg(q.value("d.linea")));
			return false;
		}

		curL.setModeAccess(curL.Browse);
		curL.refreshBuffer();

		if (!flfactalma.iface.borrarEstructuraMTOrigen(curL)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNo borrarEstructuraMTOrigen idlinea viaje %1").arg(q.value("d.linea")));
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTOrigen(curL)) {
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\n No generarEstructuraMTOrigen idlinea viaje %1").arg(q.value("d.linea")));
			return false;
		}
		if (!flfactalma.iface.borrarEstructuraMTDestino(curL)) {
			AQUtil.destroyProgressDialog();
			debug("NO borrarEstructuraMTDestino");
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNO borrarEstructuraMTDestino"));
			return false;
		}
		if (!flfactalma.iface.generarEstructuraMTDestino(curL)) {
			AQUtil.destroyProgressDialog();
			debug("NO generarEstructuraMTDestino");
			sys.warnMsgBox(sys.translate("Ocurrió un error durante la corrección de movimientos.\nNO generarEstructuraMTDestino"));
			return false;
		}
	}

	AQUtil.destroyProgressDialog();

	return true;
}

function elgansoCtr_modificarAlmacenMovimientosPedidosPte()
{
	var _i = this.iface;

	var q = new FLSqlQuery();

	q.setSelect("lpc.idlinea");
	q.setFrom("pedidoscli pc INNER JOIN lineaspedidoscli lpc ON pc.idpedido = lpc.idpedido INNER JOIN movistock ms ON lpc.idlinea = ms.idlineapc INNER JOIN stocks s ON ms.idstock = s.idstock");
	q.setWhere("pc.editable AND pc.servido NOT LIKE 'S%' AND pc.codalmacen <> s.codalmacen AND ms.estado = 'PTE'");
	
	debug(q.sql());

	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}
	
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Corrigiendo movimientos de stock en líneas de pedidoscli con codalmacen diferente al del movimiento PTE..."), q.size());
	var p = 0;

	while(q.next()) {
		AQUtil.setProgress(p++);
		var curL = new FLSqlCursor("lineaspedidoscli");
		curL.select("idlinea = " + q.value("lpc.idlinea"));
		if (curL.first()) {
			if (!flfactalma.iface.borrarEstructura(curL)) {
				AQUtil.destroyProgressDialog();
				return false;
			}
			if (!flfactalma.iface.generarEstructura(curL)) {
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
	}

	AQUtil.destroyProgressDialog();

	return true;
}



function elgansoCtr_generarInventarioTiendaCopia()
{
	var _i = this.iface;

	var dialog = new Dialog;
	dialog.caption = "Seleccione fecha y hora del inventario";
	dialog.okButtonText = "Aceptar";
	dialog.cancelButtonText = "Cancelar";    
	
	var fechaInv = new DateEdit;
	fechaInv.date = new Date();	
	fechaInv.label = sys.translate("Fecha:");
	dialog.add(fechaInv);
	
	var horaInv = new TimeEdit;
	horaInv.time = new Date();	
	horaInv.label = sys.translate("Hora:");
	dialog.add(horaInv);

	var idSincroInv = new LineEdit;
	idSincroInv.label = "Escriba el idsincro inventario a copiar:";
	idSincroInv.text = "";
	dialog.add(idSincroInv);
	
	if(!dialog.exec() ) {
		return;
	}

	var q = new FLSqlQuery();
	q.setSelect("codalmacen,enviado,encatalogo,stocknegativo,filtrotablas,total,fecha,hora");
	q.setFrom("eg_inventarios");
	q.setWhere("idsincro = '" + idSincroInv.text + "'");
	
	//debug("consulta inventario: " + q.sql());

	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	if(!q.first()) {
		sys.warnMsgBox(sys.translate("No se ha localizado el inventario %1").arg(oParam.idSincroInv));
		return false;
	}
	if (fechaInv.date.getTime() > q.value("fecha").getTime()) {
		sys.warnMsgBox(sys.translate("La fecha del inventario seleccionado no puede ser mayor que el de la fecha del inventario copia"));
		return false;
	}

	var oParam = new Object;
	oParam.fecha = fechaInv.date;
	oParam.hora = horaInv.time.toString().right(8);
	oParam.idSincroInv = idSincroInv.text;
	oParam.codAlmacen = q.value("codalmacen");
	oParam.enviado = q.value("enviado");
	oParam.enCatalogo = q.value("encatalogo");
	oParam.stockNegativo = q.value("stocknegativo");
	oParam.filtroTablas = q.value("filtrotablas");
	oParam.invTotal = q.value("total");
	oParam.fechaOriginal = q.value("fecha");
	oParam.horaOriginal = q.value("hora");
	
	/*debug("///////////////oParam.fecha: " + oParam.fecha);
	debug("///////////////oParam.hora: " + oParam.hora);
	debug("///////////////oParam.idSincroInv: " + oParam.idSincroInv);
	debug("///////////////oParam.enviado: " + oParam.enviado);
	debug("///////////////oParam.enCatalogo: " + oParam.enCatalogo);
	debug("///////////////oParam.stockNegativo: " + oParam.stockNegativo);
	debug("///////////////oParam.filtroTablas: " + oParam.filtroTablas);*/

	var idSincroNuevo = _i.crearCabeceraInventarioTiendaCopia(oParam);

	if(!idSincroNuevo){
		return false;
	}

	oParam.idSincroInvNuevo = idSincroNuevo;
	if(!_i.crearLineaRegStockTiendaCopia(oParam)){
		return false;
	}

	return true;

}

function elgansoCtr_crearCabeceraInventarioTiendaCopia(oParam)
{
	var curInventario = new FLSqlCursor("eg_inventarios");

	curInventario.setModeAccess(curInventario.Insert);

	curInventario.refreshBuffer();
	curInventario.setValueBuffer("fecha", oParam.fecha);
	curInventario.setValueBuffer("hora", oParam.hora);
	curInventario.setValueBuffer("enviado", oParam.enviado);
	curInventario.setValueBuffer("descripcion", "Inventario automático copia de tienda: " + oParam.fecha.toString().left(10) + " - " + oParam.hora);
	curInventario.setValueBuffer("stocknegativo", oParam.stockNegativo);
	curInventario.setValueBuffer("codalmacen", oParam.codAlmacen);
	curInventario.setValueBuffer("total", oParam.invTotal);
	curInventario.setValueBuffer("filtroTablas", oParam.filtroTablas);
	curInventario.setValueBuffer("enCatalogo", oParam.enCatalogo);

	if(!curInventario.commitBuffer()){
		return false;
	}

	return curInventario.valueBuffer("idsincro");
}

function elgansoCtr_crearLineaRegStockTiendaCopia(oParam)
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setSelect("idstock, cantidadini, cantidadfin, barcode, talla, referencia, desarticulo, fecha, hora");
	q.setFrom("lineasregstocks");
	q.setWhere("egidsincroinv = '" + oParam.idSincroInv + "'");
	
	//debug("******* consulta lineasregstocks inventario a copiar: " + q.sql());

	if(!q.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}
	
	var p = 0;
	var cantMovPeriodo;
	var cantFin;
	var cantIni;

	while(q.next()) {
		var cantMovPeriodo = parseFloat(AQUtil.sqlSelect("movistock", "SUM(cantidad)", "idstock = " + q.value("idstock") + " AND ((fechareal > '" + oParam.fecha + "' AND fechareal < '" + q.value("fecha") + "') OR ((fechareal = '" + oParam.fecha + "' AND horareal > '" + oParam.hora + "') AND (fechareal = '" + q.value("fecha") + "' AND horareal < '" + q.value("hora").toString().right(8) + "')))"));

		if(isNaN(cantMovPeriodo)){
			cantMovPeriodo = 0;
		}

		cantFin = parseFloat(q.value("cantidadfin")) - cantMovPeriodo;

		if(cantFin < 0){
			cantFin = 0;
		}

		cantIni = parseFloat(q.value("cantidadini")) - cantMovPeriodo;
		if(cantIni < 0){
			cantIni = 0;
		}

		if (!AQUtil.execSql("INSERT INTO lineasregstocks (egidsincroinv, idstock, fecha, hora, cantidadini, cantidadfin, barcode, talla, referencia, desarticulo, sincronizado, ptecalculo) VALUES ('" + oParam.idSincroInvNuevo + "'," + q.value("idstock") + ",'" + oParam.fecha + "','" + oParam.hora + "', " + parseFloat(cantIni) + ", " + parseFloat(cantFin) + ", '" + q.value("barcode") + "', '" + q.value("talla") + "', '" + q.value("referencia") + "', '" + q.value("desarticulo") + "', true, false)")) {
			return false;
		}
	}
	
/*
	if(oParam.invTotal){
		var q = new FLSqlQuery();
		q.setSelect("s.idstock,s.barcode,s.descarticulo,s.talla,s.referencia");
		q.setFrom("stocks s INNER JOIN movistock ms ON s.idstock = ms.idstock");
		q.setWhere("s.codalmacen = '" + oParam.codAlmacen + "' AND s.cantidad = 0 AND s.idstock not in (SELECT idstock from lineasregstocks where egidsincroinv = '" + oParam.idSincroInv + "')  AND ((ms.fechareal > '" + oParam.fecha + "' AND ms.fechareal < '" + oParam.fechaOriginal + "') OR ((ms.fechareal = '" + oParam.fecha + "' AND ms.horareal > '" + oParam.hora + "') AND (ms.fechareal = '" + oParam.fechaOriginal + "' AND ms.horareal < '" + oParam.horaOriginal.toString().right(8) + "'))) GROUP BY s.idstock,s.barcode,s.descarticulo,s.talla,s.referencia");
	
		//debug("///// consulta invTotal: " + q.sql());

		if(!q.exec()) {
			sys.warnMsgBox(sys.translate("Falló la consulta."));
			return false;
		}

		var p = 0;
		var cantMovPeriodo;
		var cantFin;
		var cantIni;

		while(q.next()) {
			var cantMovPeriodo = parseFloat(AQUtil.sqlSelect("movistock", "SUM(cantidad)", "idstock = " + q.value("s.idstock") + " AND ((fechareal > '" + oParam.fecha + "' AND fechareal < '" + oParam.fechaOriginal + "') OR ((fechareal = '" + oParam.fecha + "' AND horareal > '" + oParam.hora + "') AND (fechareal = '" + oParam.fechaOriginal + "' AND horareal < '" + oParam.horaOriginal.toString().right(8) + "')))"));

			if(isNaN(cantMovPeriodo)){
				cantMovPeriodo = 0;
			}

			cantFin = 0 - cantMovPeriodo;

			if(cantFin < 0){
				cantFin = 0;
			}

			cantIni = 0 - cantMovPeriodo;
			if(cantIni < 0){
				cantIni = 0;
			}

			if (!AQUtil.execSql("INSERT INTO lineasregstocks (egidsincroinv, idstock, fecha, hora, cantidadini, cantidadfin, barcode, talla, referencia, desarticulo, sincronizado, ptecalculo) VALUES ('" + oParam.idSincroInvNuevo + "'," + q.value("s.idstock") + ",'" + oParam.fecha + "','" + oParam.hora + "', " + parseFloat(cantIni) + ", " + parseFloat(cantFin) + ", '" + q.value("s.barcode") + "', '" + q.value("s.talla") + "', '" + q.value("s.referencia") + "', '" + q.value("s.descarticulo") + "_c" + "', true, false)")) {
				return false;
			}
		}
	}*/
/*
	var where = "codalmacen = '" + oParam.codAlmacen + "'";
	if(!formregstocks.iface.revisarStock(where, false)){
		return false;
	}
*/	
	return true;

}

function elgansoCtr_regenerarPagosGL()
{
	var _i = this.iface;

	var fecha = new Date;

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var diadesde = new DateEdit;
	diadesde.label = sys.translate("Fecha desde: ");
	diadesde.date = fecha;
	dialog.add(diadesde);

	var diahasta = new DateEdit;
	diahasta.label = sys.translate("Fecha hasta: ");
	diahasta.date = fecha;
	dialog.add(diahasta);

	if (!dialog.exec()) {
		return false;
	}
	
	var fechaDesde = diadesde.date;
	var fechaHasta = diahasta.date;

	if(!AQUtil.execSql("DELETE FROM tpv_pagoscomanda WHERE idtpv_arqueo IN (SELECT idtpv_arqueo FROM tpv_arqueos where codtienda IN (" + flfact_tpv.iface.tiendasEmpresaLafayette() + ") AND diadesde >= '" + fechaDesde + "' AND diadesde <= '" + fechaHasta + "')")) {
		return false;
	}

	var qA = new FLSqlQuery();
	qA.setSelect("idtpv_arqueo,codtienda,diadesde,ptoventa");
	qA.setFrom("tpv_arqueos");
	qA.setWhere("codtienda IN (" + flfact_tpv.iface.tiendasEmpresaLafayette() + ") AND diadesde >= '" + fechaDesde + "' AND diadesde <= '" + fechaHasta + "' ORDER BY diadesde,codtienda");

	debug("/////////////////////////// consulta arqueos: " + qA.sql());

	AQUtil.createProgressDialog(sys.translate("Regenerando pagos de ventas GL..."), qA.size());
	var p = 0;

	if(!qA.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	_i.pagoTarjeta_ = flfact_tpv.iface.pub_valorDefectoTPV("pagotarjeta");

	while(qA.next()) {
		AQUtil.setProgress(p++);
		if(!_i.crearPagosArqueoGL(qA)){
			AQUtil.destroyProgressDialog();
			return false;
		}
	}

	AQUtil.destroyProgressDialog();

	var qAV = new FLSqlQuery();
	qAV.setSelect("c.fecha,c.codtienda,c.codtpv_puntoventa");
	qAV.setFrom("tpv_comandas c left outer join tpv_pagoscomanda p on c.idtpv_comanda = p.idtpv_comanda");
	qAV.setWhere("c.total <> 0 and p.idpago is null AND c.codtienda IN (" + flfact_tpv.iface.tiendasEmpresaLafayette() + ") AND c.fecha >= '" + fechaDesde + "' AND c.fecha <= '" + fechaHasta + "' GROUP BY c.fecha,c.codtienda,c.codtpv_puntoventa ORDER BY c.fecha,c.codtienda,c.codtpv_puntoventa");

	debug("/////////////////////////// consulta ventas sin pagos ni arqueos: " + qAV.sql());

	if(!qAV.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	AQUtil.createProgressDialog(sys.translate("Creando arqueos y generando pagos de ventas GL..."), qAV.size());
	p = 0;

	while(qAV.next()) {
		AQUtil.setProgress(p++);
		if(!_i.crearArqueoGL(qAV)){
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();

	return true;
}

function elgansoCtr_crearPagosArqueoGL(qArqueo)
{
	var _i = this.iface;

	if(!qArqueo) {
		return false;
	}

	var fecha = qArqueo.value("diadesde");
	var codTienda = qArqueo.value("codtienda");
	var codTpvPtoVenta = qArqueo.value("ptoventa");
	var codArqueo = qArqueo.value("idtpv_arqueo");

	var qC = new FLSqlQuery();
	qC.setSelect("idtpv_comanda,codigo,total");
	qC.setFrom("tpv_comandas");
	qC.setWhere("codtienda = '" + codTienda + "' AND fecha = '" + fecha + "' AND total <> 0");

	if(!qC.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta de comandas."));
		return false;
	}

	while(qC.next()) {
		var curPago = new FLSqlCursor("tpv_pagoscomanda");
		curPago.setModeAccess(curPago.Insert);

		curPago.refreshBuffer();
		curPago.setValueBuffer("idtpv_comanda", qC.value("idtpv_comanda"));
		curPago.setValueBuffer("codcomanda", qC.value("codigo"));
		curPago.setValueBuffer("idtpv_arqueo", codArqueo);
		curPago.setValueBuffer("fecha", fecha);
		curPago.setValueBuffer("editable", true);
		curPago.setValueBuffer("nogenerarasiento", true);
		curPago.setValueBuffer("anulado", false);
		curPago.setValueBuffer("importe", qC.value("total"));
		curPago.setValueBuffer("estado", "Pagado");
		curPago.setValueBuffer("codpago", _i.pagoTarjeta_);
		curPago.setValueBuffer("codtpv_puntoventa", codTpvPtoVenta);
		curPago.setValueBuffer("codtpv_agente", "9999");
		curPago.setValueBuffer("codtienda", codTienda);

		curPago.setValueBuffer("idsincro", formRecordtpv_pagoscomanda.iface.commonCalculateField("idsincro", curPago));

		if (!curPago.commitBuffer()) {
			debug("error commit pago");
			return false;
		}
	}
	
	return true;
}

function elgansoCtr_crearArqueoGL(qArqueoVenta)
{
	var _i = this.iface;

	var codTienda = qArqueoVenta.value("c.codtienda");
	var fecha = qArqueoVenta.value("c.fecha");
	var tpv = qArqueoVenta.value("c.codtpv_puntoventa");
	
	var idArqueo = AQUtil.sqlSelect("tpv_arqueos","idtpv_arqueo","codtienda = '" + codTienda + "' and diadesde = '" + fecha + "' AND ptoventa = '" + tpv + "'");

	if(!idArqueo) {
		var curArqueo = new FLSqlCursor("tpv_arqueos");

		curArqueo.setModeAccess(curArqueo.Insert);
		curArqueo.refreshBuffer();
		curArqueo.setValueBuffer("abierta", false);
		curArqueo.setValueBuffer("sincronizado", true);
		curArqueo.setValueBuffer("idfactura", 0);
		curArqueo.setValueBuffer("diadesde", fecha);
		curArqueo.setValueBuffer("diahasta", fecha);
		curArqueo.setValueBuffer("horadesde", "00:00:01");
		curArqueo.setValueBuffer("horahasta", "00:00:01");
		curArqueo.setValueBuffer("ptoventa", tpv);
		curArqueo.setValueBuffer("codtpv_agenteapertura", "9999");
		curArqueo.setValueBuffer("codtienda", codTienda);

		var codArqueo = formRecordtpv_arqueos.iface.codigoArqueo(curArqueo);

		curArqueo.setValueBuffer("idtpv_arqueo", codArqueo);

		if (!curArqueo.commitBuffer()) {
			return false;
		}
	}

	var qA = new FLSqlQuery();
	qA.setSelect("idtpv_arqueo,codtienda,diadesde,ptoventa");
	qA.setFrom("tpv_arqueos");
	qA.setWhere("codtienda = '" + codTienda + "' AND diadesde = '" + fecha + "' AND diahasta = '" + fecha + "' AND ptoventa = '" + tpv + "'");

	if(!qA.exec()) {
		sys.warnMsgBox(sys.translate("Falló la consulta."));
		return false;
	}

	if(qA.first()) {
		if(!_i.crearPagosArqueoGL(qA)){
			return false;
		}
	}

	return true;
}

function elgansoCtr_arreglarViajesRecibidosLineasTransito()
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setSelect("v.idviajemultitrans, v.codalmadestino");
	q.setFrom("tpv_viajesmultitransstock v INNER JOIN tpv_lineasmultitransstock l ON v.idviajemultitrans = l.idviajemultitrans INNER JOIN almacenes a ON v.codalmadestino = a.codalmacen");
	q.setWhere("l.estado = 'EN TRANSITO' AND v.estado = 'RECIBIDO' AND (a.lote is null OR a.lote = 0) AND v.codalmadestino = 'AALM' AND v.idviajemultitrans = 'GR00000135' GROUP BY v.idviajemultitrans, v.codalmadestino ORDER BY v.codalmadestino");
	
	if (!q.exec()) {
		sys.warnMsgBox(sys.translate("Error en la consulta."));
		return false;	
	}

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Marcando viajes en tiendas destino"), q.size());
	var p = 0;
	var codAlmaDestino = false;
	var cxTienda;
	var conectaTienda = false;
	
	while (q.next()) {
		AQUtil.setProgress(p++);
		if(codAlmaDestino != q.value("v.codalmadestino")){
			cxTienda = q.value("v.codalmadestino");
			if (!_i.conectarMT(cxTienda, true)) {
				conectaTienda = false;
				continue;
			}
			conectaTienda = true;

		}
		else{
			if(!conectaTienda){
				continue;
			}
		}

		if(!AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET rxcentral = 'PTE' WHERE idviajemultitrans = '" + q.value("v.idviajemultitrans") + "'", cxTienda)){
			continue;
		}
		if(!AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET fecharx = fechaex WHERE fecharx is null and estado = 'RECIBIDO' AND idviajemultitrans = '" + q.value("v.idviajemultitrans") + "'", cxTienda)){
			continue;
		}

		codAlmaDestino = q.value("v.codalmadestino");
	}
	
	AQUtil.destroyProgressDialog();
	return true;
}

function elgansoCtr_informarClaseTiendas()
{
	var _i = this.iface;

	var curTienda = new FLSqlCursor("tpv_tiendas");

	var listaLafayette = flfact_tpv.iface.tiendasEmpresaLafayette();

	var q = new FLSqlQuery();
	q.setSelect("codtienda");
	q.setFrom("tpv_tiendas");
	q.setWhere("codtienda IN (" + listaLafayette + ")");
	
	if(!q.exec()){
		return false;
	}

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Informando campo en tiendas de Lafayette..."), q.size());

	var p = 0;
	
	while(q.next()){
		curTienda.select("codtienda = '" + q.value("codtienda") + "'");
		
		if(!curTienda.first()){
			continue;
		}

		curTienda.setModeAccess(curTienda.Edit);
		curTienda.refreshBuffer();

		curTienda.setValueBuffer("clasetienda","GL");

		if(!curTienda.commitBuffer()){
			continue;
		}
	}
	
	
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	
	var listaEci = flfact_tpv.iface.tiendasEmpresaECI();
	
	var q = new FLSqlQuery();
	q.setSelect("codtienda");
	q.setFrom("tpv_tiendas");
	q.setWhere("codtienda IN (" + listaEci + ")");
	
	if(!q.exec()){
		return false;
	}

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Informando campo en tiendas ECI..."), q.size());

	var p = 0;

	while(q.next()){
		curTienda.select("codtienda = '" + q.value("codtienda") + "'");
		
		if(!curTienda.first()){
			continue;
		}

		curTienda.setModeAccess(curTienda.Edit);
		curTienda.refreshBuffer();

		curTienda.setValueBuffer("clasetienda","ECI");

		if(!curTienda.commitBuffer()){
			continue;
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	var q = new FLSqlQuery();
	q.setSelect("codtienda");
	q.setFrom("tpv_tiendas");
	q.setWhere("outlet");
	
	if(!q.exec()){
		return false;
	}

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Informando campo en tiendas Outlet..."), q.size());

	var p = 0;

	while(q.next()){
		curTienda.select("codtienda = '" + q.value("codtienda") + "'");

		if(!curTienda.first()){
			continue;
		}

		curTienda.setModeAccess(curTienda.Edit);
		curTienda.refreshBuffer();

		curTienda.setValueBuffer("clasetienda","Outlet");

		if(!curTienda.commitBuffer()){
			continue;
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	var q = new FLSqlQuery();
	q.setSelect("codtienda");
	q.setFrom("tpv_tiendas");
	q.setWhere("outlet = false AND codtienda NOT IN (" + listaLafayette + ") AND codtienda NOT IN (" + listaEci + ")");
	
	if(!q.exec()){
		return false;
	}

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Informando campo en tiendas normales..."), q.size());

	var p = 0;
	
	while(q.next()){
		curTienda.select("codtienda = '" + q.value("codtienda") + "'");

		if(!curTienda.first()){
			continue;
		}

		curTienda.setModeAccess(curTienda.Edit);
		curTienda.refreshBuffer();

		curTienda.setValueBuffer("clasetienda","Tienda");

		if(!curTienda.commitBuffer()){
			continue;
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);


	return true;
}

function elgansoCtr_arreglarViajesViejosCerradosLogisAhoraEnTransito()
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setSelect("v1.idviajemultitrans");
	q.setFrom("tpv_viajesmultitransstock v1 inner join tpv_viajesmultitransstock_24 v2 on v1.idviajemultitrans = v2.idviajemultitrans");
	q.setWhere("v1.codalmaorigen in (select codalmacen from almacenes where lote > 1) and (v1.estado = 'EN TRANSITO' OR v1.estado = 'RECIBIDO PARCIAL') AND v2.estado <> 'EN TRANSITO' AND v2.estado <> 'PTE ENVIO' GROUP BY v1.idviajemultitrans ORDER BY v1.idviajemultitrans");
	
	if (!q.exec()) {
		sys.warnMsgBox(sys.translate("Error en la consulta."));
		return false;	
	}

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Arreglando viajes LOGIS"), q.size());
	var p = 0;

	var curLV = new FLSqlCursor("tpv_lineasmultitransstock");
	
	while (q.next()) {
		AQUtil.setProgress(p++);
		curLV.select("idviajemultitrans = '" + q.value("v1.idviajemultitrans") + "'");

		while(curLV.next()) {
			curLV.setModeAccess(curLV.Edit);
			curLV.refreshBuffer();

			if(!_i.copiarLineaViaje(curLV)){
				sys.warnMsgBox(sys.translate("Error al copiar las líneas"))
				return false;
			}

			if(!curLV.commitBuffer()){
				AQUtil.destroyProgressDialog();
				sys.warnMsgBox(sys.translate("Error en commitBuffer"));
				return false;
			}
		}

		if(!AQUtil.execSql("UPDATE tpv_viajesmultitransstock SET ptesincroenvio = true WHERE idviajemultitrans = '" + q.value("v1.idviajemultitrans") + "'")){
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Error en update viajesmultitransstock"));			
			return false;
		}
	}
	
	AQUtil.destroyProgressDialog();
	return true;
}


function elgansoCtr_copiarLineaViaje(curLV)
{
	var _i = this.iface;
		
	var curLV24 = new FLSqlCursor("tpv_lineasmultitransstock_24");
	curLV24.select("idlinea = " + curLV.valueBuffer("idlinea"));

	if(!curLV24.first()){
		return true;
	}

	var camposLinea = AQUtil.nombreCampos("tpv_lineasmultitransstock_24");
	var totalCampos = camposLinea[0];

	curLV24.setModeAccess(curLV24.Browse);
	curLV24.refresh();
	
	for (var i = 1; i <= totalCampos; i++) {
		curLV.setValueBuffer(camposLinea[i], curLV24.valueBuffer(camposLinea[i]));
	}

	return true;
}

function elgansoCtr_egLineasCantEnviadaDuplicada()
{
	var _i = this.iface;
	var _fA = flfactalma.iface;
	var _fT = flfact_tpv.iface;

	var dialog = new Dialog;
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var gB = new GroupBox;
	gB.title = sys.translate("Pegue la lista de viajes");
	dialog.add( gB );
	var teTabla = new TextEdit;
	gB.add( teTabla );

	if(!dialog.exec() ) {
		return;
	}
	var texto = teTabla.text;
	var aLineas = texto.split("\n");
	var nL = aLineas.length;

	var curL = new FLSqlCursor("tpv_lineasmultitransstock");


	var idViaje, codMulti, descripcion;
	AQUtil.createProgressDialog(sys.translate("Procesando viajes"), nL);

	for (var i = 0; i < nL; i++) {
		idViaje = aLineas[i];
		AQUtil.setProgress(i);
		AQUtil.setLabelText(sys.translate("Procesando viaje %1").arg(idViaje));
		curL.select("idviajemultitrans = '" + idViaje + "'");

		while (curL.next()) {
			curL.setModeAccess(curL.Edit);
			curL.refreshBuffer();
			codMulti = curL.valueBuffer("codmultitransstock");

			if (curL.valueBuffer("estado") == 'RECIBIDO' || curL.valueBuffer("estado") == 'CANCELADO') {
				continue;
			}

			curL.setValueBuffer("cantenviada", curL.valueBuffer("cantidad"));
			curL.setValueBuffer("cantpterecibir", curL.valueBuffer("cantidad"));
			curL.setValueBuffer("estado", formRecordtpv_recepcionestx.iface.pub_commonCalculateField("estado", curL));

			if (!curL.commitBuffer()) {
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
		if (!_fT.totalizarViaje(codMulti, idViaje)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
		if(!AQUtil.execSql("UPDATE tpv_viajesmultitransstock SET ptesincroenvio = true WHERE idviajemultitrans = '" + idViaje + "'")){
			AQUtil.destroyProgressDialog();
			sys.warnMsgBox(sys.translate("Error en update viajesmultitransstock"));			
			return false;
		}
	}

	AQUtil.destroyProgressDialog();

	return true;
}

function elgansoCtr_egRegenerarMovimientosStockTransito()
{

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione tipo búsqueda:");

	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");
	
	var bgroup = new GroupBox;
	bgroup.title = sys.translate("Seleccione el tipo de búsqueda");
	dialog.add(bgroup);
			
	var copiarViajes = new RadioButton;
	copiarViajes.text = sys.translate("Copiar Viajes");
	copiarViajes.checked = false;
	bgroup.add(copiarViajes);
	
	var buscarFecha = new RadioButton;
	buscarFecha.text = sys.translate("Buscar viajes desde-hasta");
	buscarFecha.checked = true;
	bgroup.add(buscarFecha);
	
	var gB = new GroupBox;
	gB.title = sys.translate("Seleccione si origen o destino:");
	dialog.add(gB);
			
	var origen = new RadioButton;
	origen.text = sys.translate("Movimientos tto");
	origen.checked = false;
	gB.add(origen);
			
	var destino = new RadioButton;
	destino.text = sys.translate("Movimientos ttd");
	destino.checked = true;
	gB.add(destino);
			
	var ambos = new RadioButton;
	ambos.text = sys.translate("Movimientos tto y ttd");
	ambos.checked = false;
	gB.add(ambos);


	var gbduplicada = new GroupBox;
	gbduplicada.title = sys.translate("Seleccione si sólo mov. duplicados:");
	dialog.add( gbduplicada );

	duplicada = new CheckBox;
	duplicada.text = sys.translate("Sólo movimientos duplicados");
	duplicada.checked = true;
	gbduplicada.add(duplicada);

	var gbTodosMov = new GroupBox;
	gbTodosMov.title = sys.translate("Consulta solo con tpv_lineasmultitransstock(Solo al copiar viajes):");
	dialog.add(gbTodosMov);

	todmov = new CheckBox;
	todmov.text = sys.translate("Solo desde tpv_lineasmultitransstock.");
	todmov.checked = true;
	gbTodosMov.add(todmov);
		
	if (!dialog.exec()){
		return true;
	}

	var copiar = true;
	var generarTodosMov = true;

	if (buscarFecha.checked == true) {
		copiar = false;
		generarTodosMov = false;
	}

	var buscarOrigen = false;
	var buscarDestino = false;

	if (origen.checked == true || ambos.checked == true) {
		buscarOrigen = true;
	}
	if (destino.checked == true || ambos.checked == true) {
		buscarDestino = true;
	}

	var where = "";
	var aLineas;

	if(copiar){
		var dialog = new Dialog;
		dialog.okButtonText = sys.translate("Aceptar");
		dialog.cancelButtonText = sys.translate("Cancelar");

		var gB = new GroupBox;
		gB.title = sys.translate("Pegue la lista de viajes");
		dialog.add( gB );
		var teTabla = new TextEdit;
		gB.add( teTabla );

		if(!dialog.exec() ) {
			return;
		}
		var texto = teTabla.text;
		aLineas = texto.split("\n");
		var nL = aLineas.length;

		where = "idviajemultitrans IN ('" + aLineas.join("', '") + "')";
	}
	else{
		var fecha = new Date;

		var dialog = new Dialog;
		dialog.caption = sys.translate("Seleccione fecha");
		dialog.okButtonText = sys.translate("Aceptar");
		dialog.cancelButtonText = sys.translate("Cancelar");

		var diadesde = new DateEdit;
		diadesde.label = sys.translate("Fecha desde: ");
		diadesde.date = fecha;
		dialog.add(diadesde);

		var diahasta = new DateEdit;
		diahasta.label = sys.translate("Fecha hasta: ");
		diahasta.date = fecha;
		dialog.add(diahasta);

		if (!dialog.exec()) {
			return false;
		}

		where = "fecharx BETWEEN '" + diadesde.date + "' AND '" + diahasta.date + "'";
	}

	if(duplicada.checked == true){
		where += " GROUP BY l.idlinea, ms.estado, ms.cantidad, ms.fechareal, ms.horareal, ms.idstock HAVING COUNT(*) > 1 ORDER BY l.idlinea";
	}
	else{
		where += " GROUP BY l.idlinea ORDER BY l.idlinea";
	}

	var q = new FLSqlQuery();	
	
	q.setSelect("l.idlinea");

	if(generarTodosMov){
		q.setFrom("tpv_lineasmultitransstock l");
		where = "idviajemultitrans IN ('" + aLineas.join("', '") + "') GROUP BY l.idlinea ORDER BY l.idlinea";
	}
	else{
		q.setFrom("tpv_lineasmultitransstock l inner join movistock ms on l.idlinea = ms.idlineattd");
	}
	
	q.setWhere(where);
	debug("sql: "+q.sql());
	
	if (!q.exec()){
		return;
	} 
	
	var curL = new FLSqlCursor("tpv_lineasmultitransstock");
	var p = 0;
	AQUtil.createProgressDialog( sys.translate("Procesando datos..." ), q.size());

	var idLinea = 0;

	while(q.next())
	{	
		AQUtil.setProgress(p++);

		if(idLinea != q.value("l.idlinea")){
			curL.select("idlinea = " + q.value("l.idlinea"));
			
			if (curL.first()) {
				curL.setModeAccess(curL.Browse);
				curL.refreshBuffer();

				if(buscarOrigen){
					if (!flfactalma.iface.borrarEstructuraMTOrigen(curL)) {
						return false;
					}
					if (!flfactalma.iface.generarEstructuraMTOrigen(curL)) {
						return false;
					}
				}
				if(buscarDestino){
					if (!flfactalma.iface.borrarEstructuraMTDestino(curL)) {
						return false;
					}
					if (!flfactalma.iface.generarEstructuraMTDestino(curL)) {
						return false;
					}
				}
			}
		}

		idLinea = q.value("l.idlinea");
	}


	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;

}
/* En cuarentena (Antonio)
function elgansoCtr_egRevisaMovsTienda()
{
	// select l.idlinea from tpv_lineasmultitransstock l inner join articulos a on l.referencia = a.referencia inner join movistock ms on l.idlinea = ms.idlineatto inner join stocks s on ms.idstock = s.idstock and s.codalmacen like 'TR%' left outer join movistock ms2 on ms.idlineatto = ms2.idlineattd and ms.idstock = ms2.idstock where l.estado IN ('RECIBIDO', 'CANCELADO') and ms2.idmovimiento is null and l.codalmadestino = 'LOGI'

	var codAlmacen = "AFUE";

	var _i = this.iface;

	var q = new FLSqlQuery;
	q.setSelect("l.idlinea, l.idsincro, l.barcode, l.codalmaorigen, l.cantenviada, l.fechaex, l.horaex");
	q.setFrom("tpv_lineasmultitransstock l INNER JOIN articulos a ON l.referencia = a.referencia INNER JOIN movistock ms ON l.idlinea = ms.idlineatto INNER JOIN stocks s ON ms.idstock = s.idstock AND s.codalmacen LIKE 'TR%' LEFT OUTER JOIN movistock ms2 ON ms.idlineatto = ms2.idlineattd AND ms.idstock = ms2.idstock");

	q.setWhere("l.estado = 'CANCELADO' AND ms2.idmovimiento IS NULL AND l.codalmadestino = 'LOGI' AND l.codalmaorigen = '" + codAlmacen + "' ORDER BY l.idlinea");
	debug("Lanzando consulta " + q.sql());
	if (!q.exec()) {
		return false;
	}
	// var contador = 0;
	var p = 0;
	AQUtil.createProgressDialog( sys.translate("Procesando datos..." ), q.size());

	while (q.next()) {
		AQUtil.setProgress(p++);
		debug("linea = " + q.value("l.idlinea"));
		if (!_i.revisaLineaMovsTienda(q, "")) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
		// if (contador++ == 5) {
		// 	break;
		// }
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elgansoCtr_revisaLineaMovsTienda(q, cX)
{
	var idLinea = q.value("l.idlinea");
	var idSincro = q.value("l.idsincro");
	var barcode = q.value("l.barcode");
	var codAlmacen = q.value("l.codalmaorigen");
	var cantEnviada = q.value("l.cantenviada");
	var fechaEx = q.value("l.fechaex").toString().left(10);
	var horaEx = q.value("l.horaex").toString().right(8);
	
	if (cX != "") {
		debug("Calculo idLinea remoto");
		idLinea = AQUtil.sqlSelect("tpv_lineasmultitransstock", "idlinea", "idsincro = '" + idSincro + "'", "", cX);
	}
	var idStock = AQUtil.sqlSelect("stocks", "idstock", "barcode = '" + barcode + "' AND codalmacen = '" + codAlmacen + "'", "", cX);
	debug("idStock = " + idStock);

	if (!AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET cantenviada = 0, cantpterecibir = 0, cantrecibida = 0, cantpteenvio = 0, fechaex = NULL, horaex = NULL, fecharx = NULL, horarx = NULL, excentral = 'OK', extienda = 'OK', rxcentral = 'OK', rxtienda = 'OK', cerradorx = true, cerradoex = true, codagentetx = NULL, codagenterx = NULL, comentariostx = '   ', comentariosrx = NULL WHERE idlinea = " + idLinea, cX)) {
		return false;
	}
	debug("Línea actualizada");
	if (!AQUtil.execSql("DELETE FROM movistock WHERE idlineatto = " + idLinea, cX)) {
		return false;
	}
	debug("Movimientos eliminados");

	debug("Buscando último reg select id from lineasregstocks WHERE idstock = " + idStock + " AND (fecha > '" + fechaEx + "' OR (fecha = '" + fechaEx + "' AND hora > '" + horaEx + "')) ORDER BY fecha DESC, hora DESC, id DESC");
	var idReg = AQUtil.sqlSelect("lineasregstocks", "id", "idstock = " + idStock + " AND (fecha > '" + fechaEx + "' OR (fecha = '" + fechaEx + "' AND hora > '" + horaEx + "')) ORDER BY fecha DESC, hora DESC, id DESC", "", cX);
	debug("Última reg = " + idReg);
	if (idReg) {
		if (!AQUtil.execSql("UPDATE lineasregstocks SET cantidadfin = cantidadfin + " + cantEnviada + " WHERE id = " + idReg, cX)) {
			return false;
		}
		debug("Regularización actualizada")
	}
	if (!AQUtil.execSql("UPDATE stocks SET cantidad = cantidad + " + cantEnviada + ", disponible = disponible + " + cantEnviada + " WHERE idstock = " + idStock, cX)) {
		return false;
	}
	debug("Stock actualizado")

	return true;
}
*/

function elgansoCtr_controlMovDuplicados()
{
	var _i = this.iface;

	if(!_i.controlMovDuplicadosDestino()){
		return false;
	}
	if(!_i.controlMovDuplicadosOrigen()){
		return false;
	}

	return true;
}

function elgansoCtr_controlMovDuplicadosDestino()
{
	var _i = this.iface;

	var fechaMinima = AQUtil.sqlSelect("eg_valoracionperiodicaexistencias", "MAX(fechafin)", "1 = 1");

	var q = new FLSqlQuery();		
	q.setSelect("l.idsincro,l.codalmadestino");
	q.setFrom("tpv_lineasmultitransstock l inner join movistock ms on l.idlinea = ms.idlineattd");
	q.setWhere("fecharx > '" + fechaMinima + "' GROUP BY l.idlinea, ms.estado, ms.cantidad, ms.fechareal, ms.horareal, ms.idstock HAVING COUNT(*) > 1");
	debug("sql: " + q.sql());
	
	if (!q.exec()){
		return false;
	} 

	var oParam = new Object;
	oParam.tipo = "Recepcion";

	if(q.size() > 0){
		while(q.next()){	
			oParam.codTienda = q.value("l.codalmadestino");
			oParam.idSincro = q.value("l.idsincro");
			if(!_i.insertarMovimientosPendientes(oParam)){
				return false;
			}

		}
		
		var fecha = new Date();
		var hora = fecha.toString().right(8);

		var fst = AQUtil.sqlSelect("tpv_fechasincrotienda", "id", "codtienda = 'ACEN' AND esquema = 'STOCKS_DUPLICADOS_DESTINO'");
		if(fst && fst != ""){
			AQUtil.sqlUpdate("tpv_fechasincrotienda", ["fechasincro", "horasincro"], [fecha, hora], "id = " + fst);
		}
		else{
			AQUtil.sqlInsert("tpv_fechasincrotienda", ["codtienda", "esquema", "fechasincro", "horasincro"], ["ACEN", "STOCKS_DUPLICADOS_DESTINO", fecha, hora]);
		}
	}

	return true;
}

function elgansoCtr_controlMovDuplicadosOrigen()
{
	var _i = this.iface;

	var fechaMinima = AQUtil.sqlSelect("eg_valoracionperiodicaexistencias", "MAX(fechafin)", "1 = 1");

	var q = new FLSqlQuery();		
	q.setSelect("l.idsincro,l.codalmaorigen");
	q.setFrom("tpv_lineasmultitransstock l inner join movistock ms on l.idlinea = ms.idlineatto");
	q.setWhere("fechaex > '" + fechaMinima + "' GROUP BY l.idlinea, ms.estado, ms.cantidad, ms.fechareal, ms.horareal, ms.idstock HAVING COUNT(*) > 1");
	debug("sql: " + q.sql());
	
	if (!q.exec()){
		return false;
	} 

	var oParam = new Object;
	oParam.tipo = "Envio";
	if(q.size() > 0){
		while(q.next()){	
			oParam.codTienda = q.value("l.codalmaorigen");
			oParam.idSincro = q.value("l.idsincro");
			if(!_i.insertarMovimientosPendientes(oParam)){
				return false;
			}

		}
		
		var fecha = new Date();
		var hora = fecha.toString().right(8);

		var fst = AQUtil.sqlSelect("tpv_fechasincrotienda", "id", "codtienda = 'ACEN' AND esquema = 'STOCKS_DUPLICADOS_ORIGEN'");
		if(fst && fst != ""){
			AQUtil.sqlUpdate("tpv_fechasincrotienda", ["fechasincro", "horasincro"], [fecha, hora], "id = " + fst);
		}
		else{
			AQUtil.sqlInsert("tpv_fechasincrotienda", ["codtienda", "esquema", "fechasincro", "horasincro"], ["ACEN", "STOCKS_DUPLICADOS_ORIGEN", fecha, hora]);
		}
	}

	return true;
}


function elgansoCtr_insertarMovimientosPendientes(oParam)
{
	var _i = this.iface;

	var curLineaPte = new FLSqlCursor("eg_lineasptesmovistock");

	curLineaPte.setModeAccess(curLineaPte.Insert);
  	curLineaPte.refreshBuffer();
	
	curLineaPte.setValueBuffer("codtienda", oParam.codTienda);
	curLineaPte.setValueBuffer("idsincro", oParam.idSincro);
	curLineaPte.setValueBuffer("tipo", oParam.tipo);
	
  	if (!curLineaPte.commitBuffer()) {
    	return false;
  	}

	return true;
}

function elgansoCtr_lanzarTlogTiendas(dirTlog, lTiendas, fecha)
{
	var _i = this.iface;

	if(!_i.crearFicheroXMLTlog(dirTlog)){
		_i.fileTlog_.remove();
		return false;
	}

	if(!_i.escribirXMLTlog(lTiendas, fecha)){
		_i.fileTlog_.remove();
		return false;
	}

	_i.fileTlog_.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
	_i.fileTlog_.write(_i.xmlTlog_.toString());
	_i.fileTlog_.close();

	return true;

}

function elgansoCtr_crearFicheroXMLTlog(dirTlog)
{
	var _i = this.iface;

	var nombreFichero = _i.dameNombreFicheroTlog();

	_i.fileTlog_ = new File(dirTlog + "/" + nombreFichero);
	_i.fileTlog_.open(File.WriteOnly);


    _i.xmlTlog_ = new FLDomDocument;
    _i.xmlTlog_.setContent("<POSLog xmlns='http://www.nrf-arts.org/IXRetail/namespace/'>");

	return true;

}


function elgansoCtr_dameNombreFicheroTlog(codTienda, extension)
{
	var _i = this.iface;
	var cursor = this.cursor();
	
	var hoy = new Date();
	dia = hoy.getDate().toString();
	if(dia.length < 2){
		dia = "0" + dia;
	}
	
	mes = hoy.getMonth().toString();
	if(mes.length < 2){
		mes = "0" + mes;
	}
	
	anyo = hoy.getYear().toString();
	
	var hora = hoy.getHours().toString();
	if(hora.length < 2){
		hora = "0" + hora;
	}

	var minuto = hoy.getMinutes().toString();
	if(minuto.length < 2){
		minuto = "0" + minuto;
	}

	var segundo = hoy.getSeconds().toString();
	if(segundo.length < 2){
		segundo = "0" + segundo;
	}
  
	var miFecha = anyo + mes + dia + hora + minuto + segundo;
  
	var nombreFichero = "tLog" + codTienda + miFecha + extension;
	
	return nombreFichero;
}

function elgansoCtr_escribirXMLTlog(lTiendas, fecha)
{
	var _i = this.iface;

	var selectConsulta = _i.dameSelectCabecera();
	var fromConsulta = _i.dameFromCabecera();
	var whereConsulta = _i.dameWhereCabecera(lTiendas, fecha);

	var q = new FLSqlQuery();
	q.setSelect(selectConsulta);
	q.setFrom(fromConsulta);
	q.setWhere(whereConsulta);

	debug(q.sql());

	if(!q.exec()){
		return false;
	}

	if(q.size() == 0){
		return false;
	}
	

	while(q.next()){

		var tLogTransaction = _i.colgarNodo("Transaction", "raiz");

		//Falta campo
		var tLogOrganizationId = _i.colgarNodo("OrganizationId",tLogTransaction);
		if (!_i.colgarNodoTexto(tLogOrganizationId,"")) {
			return false;
		}

		var tLogRetailStoreId = _i.colgarNodo("RetailStoreId", tLogTransaction);
		if (!_i.colgarNodoTexto(tLogRetailStoreId,q.value("c.codtienda").toString())) {
			return false;
		}

		var tLogWorkStationId = _i.colgarNodo("WorkstationID", tLogTransaction);
		if (!_i.colgarNodoTexto(tLogWorkStationId,q.value("c.codtpv_puntoventa").toString())) {
			return false;
		}

		var tLogTillId = _i.colgarNodo("TillID", tLogTransaction);
		if (!_i.colgarNodoTexto(tLogTillId,q.value("pc.idtpv_arqueo").toString())) {
			return false;
		}

		var tLogSequenceNumber = _i.colgarNodo("SequenceNumber", tLogTransaction);
		if (!_i.colgarNodoTexto(tLogSequenceNumber,q.value("c.idtpv_comanda").toString())) {
			return false;
		}

		//Falta campo
		var tLogBusinessDayDate = _i.colgarNodo("BusinessDayDate", tLogTransaction);
		if (!_i.colgarNodoTexto(tLogBusinessDayDate,"")) {
			return false;
		}

		var tLogBeginDateTime = _i.colgarNodo("BusinessDayDate", tLogTransaction);
		if (!_i.colgarNodoTexto(tLogBeginDateTime,q.value("c.fecha").toString())) {
			return false;
		}

		var tLogEndDateTime = _i.colgarNodo("EndDateTime", tLogTransaction);
		if (!_i.colgarNodoTexto(tLogEndDateTime,q.value("c.fecha").toString())) {
			return false;
		}

		var tLogOperatorID = _i.colgarNodo("OperatorID", tLogTransaction);
		if (!_i.colgarNodoTexto(tLogOperatorID,q.value("c.codigo").toString())) {
			return false;
		}

		var tLogCurrencyCode = _i.colgarNodo("CurrencyCode", tLogTransaction);
		if (!_i.colgarNodoTexto(tLogCurrencyCode,q.value("e.coddivisa").toString())) {
			return false;
		}

		var tLogPosTransactionProperties = _i.colgarNodo("PosTransactionProperties", tLogTransaction);

		//Falta Campo
		var tLogPosTransactionPropertyCode = _i.colgarNodo("PosTransactionPropertyCode", tLogPosTransactionProperties);
		if (!_i.colgarNodoTexto(tLogPosTransactionPropertyCode,"")) {
			return false;
		}

		//Falta Campo
		var tLogPosTransactionPropertyValue = _i.colgarNodo("PosTransactionPropertyValue", tLogPosTransactionProperties);
		if (!_i.colgarNodoTexto(tLogPosTransactionPropertyValue,"")) {
			return false;
		}

		if(!_i.escribirLineasTlog(tLogTransaction, q.value("c.idtpv_comanda"))){
			return false;
		}

	}

	return true;
}

function elgansoCtr_escribirLineasTlog(tLogTransaction, idComanda)
{
	var _i = this.iface;

	var selectConsulta = _i.dameSelectLineas();
	var fromConsulta = _i.dameFromLineas();
	var whereConsulta = _i.dameWhereLineas(idComanda);

	var q = new FLSqlQuery();
	q.setSelect(selectConsulta);
	q.setFrom(fromConsulta);
	q.setWhere(whereConsulta);

	debug(q.sql());

	if(!q.exec()){
		return false;
	}

	if(q.size() == 0){
		return false;
	}
	

	var tLogRetailTransaction = _i.colgarNodo("RetailTransaction", tLogTransaction);

	while(q.next()){

		var tLogLineItem = _i.colgarNodo("LineItem", tLogRetailTransaction);

		//Falta campo
		var tLogSequenceNumber = _i.colgarNodo("SequenceNumber",tLogLineItem);
		if (!_i.colgarNodoTexto(tLogSequenceNumber,q.value("idtpv_linea").toString())) {
			return false;
		}

		//Falta porque las líneas no tienen fecha
		var tLogBeginDateTime = _i.colgarNodo("BeginDateTime", tLogLineItem);
		if (!_i.colgarNodoTexto(tLogBeginDateTime,"")) {
			return false;
		}

		//Falta porque las líneas no tienen fecha
		var tLogEndDateTime = _i.colgarNodo("EndDateTime", tLogLineItem);
		if (!_i.colgarNodoTexto(tLogEndDateTime,"")) {
			return false;
		}

		var tLogLayaway = _i.colgarNodo("Layaway", tLogLineItem);

		//Falta campo
		var tLogAccountNumber = _i.colgarNodo("AccountNumber", tLogLayaway);
		if (!_i.colgarNodoTexto(tLogAccountNumber,"")) {
			return false;
		}

		var tLogItemID = _i.colgarNodo("ItemID", tLogLayaway);
		if (!_i.colgarNodoTexto(tLogItemID,q.value("barcode").toString())) {
			return false;
		}

		var tLogDescription = _i.colgarNodo("Description", tLogLayaway);
		if (!_i.colgarNodoTexto(tLogDescription,q.value("descripcion").toString())) {
			return false;
		}

		var tLogUnitListPrice = _i.colgarNodo("UnitListPrice", tLogLayaway);
		if (!_i.colgarNodoTexto(tLogUnitListPrice,AQUtil.roundFieldValue(q.value("pvpunitario"), "pedidoscli", "total"))) {
			return false;
		}

		//Falta campo
		var tLogRegularSalesUnitPrice = _i.colgarNodo("RegularSalesUnitPrice", tLogLayaway);
		if (!_i.colgarNodoTexto(tLogRegularSalesUnitPrice,"")) {
			return false;
		}

		//Falta campo
		var tLogActualSalesUnitPrice = _i.colgarNodo("ActualSalesUnitPrice", tLogLayaway);
		if (!_i.colgarNodoTexto(tLogActualSalesUnitPrice,"")) {
			return false;
		}
		
		//Falta campo
		var tLogExtendedAmount = _i.colgarNodo("ExtendedAmount", tLogLayaway);
		if (!_i.colgarNodoTexto(tLogExtendedAmount,"")) {
			return false;
		}

		var tLogQuantity = _i.colgarNodo("Quantity", tLogLayaway);
		if (!_i.colgarNodoTexto(tLogQuantity,q.value("cantidad"))) {
			return false;
		}

		var tLogAssociate = _i.colgarNodo("Associate", tLogLayaway);

		//Falta campo
		var tLogAssociateID = _i.colgarNodo("AssociateID", tLogAssociate);
		if (!_i.colgarNodoTexto(tLogAssociateID,"")) {
			return false;
		}

		var tLogPercentageOfItem = _i.colgarNodo("PercentageOfItem", tLogLayaway);

		//Falta campo
		var tLogAssociateIDPercentage = _i.colgarNodo("AssociateIDPercentage", tLogPercentageOfItem);
		if (!_i.colgarNodoTexto(tLogAssociateIDPercentage,"")) {
			return false;
		}

		//Falta campo
		var tLogPercentage = _i.colgarNodo("Percentage", tLogPercentageOfItem);
		if (!_i.colgarNodoTexto(tLogPercentage,"")) {
			return false;
		}

		var tLogTax = _i.colgarNodo("Tax", tLogLayaway);

		//Falta campo
		var tLogTaxAuthority = _i.colgarNodo("TaxAuthority", tLogTax);
		if (!_i.colgarNodoTexto(tLogTaxAuthority,"")) {
			return false;
		}

		//Falta campo
		var tLogTaxableAmount = _i.colgarNodo("TaxableAmount", tLogTax);
		if (!_i.colgarNodoTexto(tLogTaxableAmount,"")) {
			return false;
		}

		//Falta campo
		var tLogAmount = _i.colgarNodo("Amount", tLogTax);
		if (!_i.colgarNodoTexto(tLogAmount,"")) {
			return false;
		}

		//Falta campo
		var tLogPercent = _i.colgarNodo("Percent", tLogTax);
		if (!_i.colgarNodoTexto(tLogPercent,"")) {
			return false;
		}

		//Falta campo
		var tLogTaxLocationId = _i.colgarNodo("TaxLocationId", tLogTax);
		if (!_i.colgarNodoTexto(tLogTaxLocationId,"")) {
			return false;
		}

		//Falta campo
		var tLogTaxGroupId = _i.colgarNodo("TaxGroupId", tLogTax);
		if (!_i.colgarNodoTexto(tLogTaxGroupId,"")) {
			return false;
		}

		var tLogGiftReceiptFlag = _i.colgarNodo("GiftReceiptFlag", tLogLayaway);


	}

	//Faltan campos
	var tLogTotal = _i.colgarNodo("Total", tLogRetailTransaction);
	var tLogRoundedTotal = _i.colgarNodo("RoundedTotal", tLogRetailTransaction);

	if(!_i.escribirDatosCliente(tLogRetailTransaction, idComanda)){
		return false;
	}

	return true;

}

function elgansoCtr_colgarNodo(nombreHijo, nodoPadre)
{
	var _i = this.iface;
	
	var eHijo = _i.xmlTlog_.createElement(nombreHijo);
	
	if(nodoPadre == "raiz") {
		nodoPadre = _i.xmlTlog_.firstChild.toElement();
	}

	nodoPadre.appendChild(eHijo);

	return eHijo;
}

function elgansoCtr_colgarNodoTexto(nodoPadre, valor)
{
	var _i = this.iface;

	var eHijo = _i.xmlTlog_.createTextNode("nodoTexto");
	nodoPadre.appendChild(eHijo);
	eHijo.setNodeValue(valor);
	
	return true;
}


function elgansoCtr_dameSelectCabecera()
{
	
	var select = "c.codtienda,c.codtpv_puntoventa,pc.idtpv_arqueo,c.idtpv_comanda,c.fecha,c.codigo,e.coddivisa";

	return select;

}

function elgansoCtr_dameFromCabecera()
{
	
	var from = "tpv_comandas c INNER JOIN tpv_pagoscomanda pc ON c.codigo = pc.codcomanda INNER JOIN tpv_tiendas t ON c.codtienda = t.codtienda INNER JOIN empresa e ON t.idempresa = e.id";

	return from;

}

function elgansoCtr_dameWhereCabecera(lTiendas, fecha)
{
	
	var where = "c.codtienda IN (" + lTiendas + ") AND c.fecha = '" + fecha + "' GROUP BY c.codtienda,c.codtpv_puntoventa,pc.idtpv_arqueo,c.idtpv_comanda,c.fecha,c.codigo,e.coddivisa ORDER BY c.codtienda,c.codigo";
	
	return where;

}

function elgansoCtr_dameSelectLineas()
{
	
	var select = "idtpv_linea,barcode,descripcion,pvpunitario,cantidad";

	return select;

}

function elgansoCtr_dameFromLineas()
{
	
	var from = "tpv_lineascomanda";

	return from;

}

function elgansoCtr_dameWhereLineas(idComanda)
{
	
	var where = "idtpv_comanda = " + idComanda;
	
	return where;

}

function elgansoCtr_escribirDatosCliente(tLogTransaction, idComanda)
{
	var _i = this.iface;

	var selectConsulta = _i.dameSelectCliente();
	var fromConsulta = _i.dameFromCliente();
	var whereConsulta = _i.dameWhereCliente(idComanda);

	var q = new FLSqlQuery();
	q.setSelect(selectConsulta);
	q.setFrom(fromConsulta);
	q.setWhere(whereConsulta);

	debug(q.sql());

	if(!q.exec()){
		return false;
	}

	if(q.size() == 0){
		return false;
	}
	

	var tLogCustomer = _i.colgarNodo("Customer", tLogTransaction);

	while(q.next()){

		var tLogName = _i.colgarNodo("Name", tLogCustomer);
		if (!_i.colgarNodoTexto(tLogName,q.value("nombrecliente").toString())) {
			return false;
		}

		//Falta campo
		var tLogActiveFlag = _i.colgarNodo("ActiveFlag", tLogCustomer);
		if (!_i.colgarNodoTexto(tLogActiveFlag,"")) {
			return false;
		}

		var tLogAddress = _i.colgarNodo("Address", tLogCustomer);

		var tLogAddressLine1 = _i.colgarNodo("AddressLine1", tLogAddress);
		if (!_i.colgarNodoTexto(tLogAddressLine1,q.value("direccion").toString())) {
			return false;
		}

		var tLogCity = _i.colgarNodo("City", tLogAddress);
		if (!_i.colgarNodoTexto(tLogCity,q.value("ciudad").toString())) {
			return false;
		}

		var tLogTerritory = _i.colgarNodo("Territory", tLogAddress);
		if (!_i.colgarNodoTexto(tLogTerritory,q.value("provincia").toString())) {
			return false;
		}

		var tLogPostalCode = _i.colgarNodo("PostalCode", tLogAddress);
		if (!_i.colgarNodoTexto(tLogPostalCode,q.value("codpostal").toString())) {
			return false;
		}

		var tLogCountry = _i.colgarNodo("Country", tLogAddress);
		if (!_i.colgarNodoTexto(tLogCountry,q.value("codpais").toString())) {
			return false;
		}
		//Falta campo
		var tLogContact = _i.colgarNodo("Contact", tLogAddress);
		if (!_i.colgarNodoTexto(tLogContact,"")) {
			return false;
		}

		var tLogTelephone = _i.colgarNodo("Telephone", tLogCustomer);

		var tLogFullTelephoneNumber = _i.colgarNodo("FullTelephoneNumber", tLogTelephone);
		if (!_i.colgarNodoTexto(tLogFullTelephoneNumber,q.value("telefono"))) {
			return false;
		}

		//Falta campo
		var tLogContactFlag = _i.colgarNodo("ContactFlag", tLogTelephone);
		if (!_i.colgarNodoTexto(tLogContactFlag,"")) {
			return false;
		}

		var tLogeMail = _i.colgarNodo("eMail", tLogCustomer);
		if (!_i.colgarNodoTexto(tLogeMail,q.value("email"))) {
			return false;
		}

		var tLogCustomerID = _i.colgarNodo("CustomerID", tLogCustomer);
		if (!_i.colgarNodoTexto(tLogCustomerID,q.value("codcliente"))) {
			return false;
		}

		//Falta campo
		var tLogAlternateID = _i.colgarNodo("AlternateID", tLogCustomer);
		if (!_i.colgarNodoTexto(tLogAlternateID,"")) {
			return false;
		}

		var tLogEmployeeSaleId = _i.colgarNodo("EmployeeSaleId", tLogTransaction);
		if (!_i.colgarNodoTexto(tLogEmployeeSaleId,q.value("codtpv_agente").toString())) {
			return false;
		}

		//Falta campo
		var tLogLayawaySetupTotal = _i.colgarNodo("LayawaySetupTotal", tLogTransaction);
		if (!_i.colgarNodoTexto(tLogLayawaySetupTotal,"")) {
			return false;
		}
	}

	return true;

}

function elgansoCtr_dameSelectCliente()
{
	
	var select = "nombrecliente,direccion,ciudad,provincia,codpostal,codpais,telefono1,email,codcliente,codtpv_agente";

	return select;

}

function elgansoCtr_dameFromCliente()
{
	
	var from = "tpv_comandas";

	return from;

}

function elgansoCtr_dameWhereCliente(idComanda)
{
	
	var where = "idtpv_comanda = " + idComanda;
	
	return where;

}

function elgansoCtr_egCambiarFechaMovViajesTienda()
{
	var _i = this.iface;

	var listaTiendas = Input.getText(sys.translate("Lista de tiendas separada por comas y sin espacios"));
	if (!listaTiendas) {
		return;
	}
	
	var _f = formtpv_tiendas.iface;
	var aT = listaTiendas.split(",");
	var msg = "";
	AQUtil.createProgressDialog(sys.translate("Conectando a tiendas" ), aT.length);
	var codTienda;
	
	for (var i = 0; i < aT.length; i++) {
		AQUtil.setProgress(i);
		codTienda = aT[i];
		AQUtil.setLabelText(sys.translate("Conectando a %1").arg(codTienda));
		if (!_f.pub_conectar(codTienda, false)) {
			continue;
		}
		var msgTienda = _i.cambiarFechaMovViajesTienda(codTienda);
		debug("msgTienda " + codTienda + " = " + msgTienda);
		if (!msgTienda) {
			msg += sys.translate("Error al procesar tienda %1").arg(codTienda);
			continue;
		}
		msg += msgTienda;
		AQUtil.setLabelText(sys.translate("Desconectando de %1").arg(codTienda));
		if (!_f.pub_desconectar(codTienda, false)) {
			continue;
		}
	}
	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	sys.infoMsgBox(msg)

	return true;
}


function elgansoCtr_cambiarFechaMovViajesTienda(codTienda)
{
	var _i = this.iface;

	var oStocksCentral = new Object;
	var oStocksTienda = new Object;

	var q = new FLSqlQuery();
	q.setSelect("barcode,cantidad");
	q.setFrom("stocks");
	q.setWhere("codalmacen = '" + codTienda + "'");

	if(!q.exec()){
		return false;
	}

	if(q.size() == 0){
		return false;
	}

	while(q.next()){
		oStocksCentral[q.value("barcode")] = q.value("cantidad");
	}


	var qT = new FLSqlQuery("",codTienda);
	qT.setSelect("barcode,cantidad");
	qT.setFrom("stocks");
	qT.setWhere("codalmacen = '" + codTienda + "'");

	if(!qT.exec()){
		return false;
	}

	if(qT.size() == 0){
		return false;
	}

	while(qT.next()){
		oStocksTienda[qT.value("barcode")] = qT.value("cantidad");
	}

	var barCode;
	var aBarcode = [];

	for (barCode in oStocksCentral){
		if (barCode in oStocksTienda){
			if(oStocksCentral[barCode] != oStocksTienda[barCode]){
				debug("////////////////////////////////////// barCode: " + barCode);
				debug("////////////////////// Central: " + oStocksCentral[barCode]);
				debug("/////////////////////// " + codTienda + ": " + oStocksTienda[barCode]);
				debug("  ");
				if(!_i.cambiarFechaMovViajesTiendaBarcode(codTienda, barCode)){
					return false;
				}
				aBarcode.push(barCode);
			}
		}
	}
	
	if(!_i.actualizarStocksTienda(codTienda, aBarcode)){
		return false;
	}

	if(!_i.actualizarFechaSincroTiendaCambiarFecha(codTienda)){
		return false;
	}
	
	delete oStocksCentral;
	delete oStocksTienda;

	return true;
}

function elgansoCtr_cambiarFechaMovViajesTiendaBarcode(codTienda, barCode)
{
	var _i = this.iface;

	if(!_i.cambiarFechaMovViajesTiendaBarcodeOrigen(codTienda, barCode)){
		return false;
	}

	if(!_i.cambiarFechaMovViajesTiendaBarcodeDestino(codTienda, barCode)){
		return false;
	}

	return true;
}

function elgansoCtr_cambiarFechaMovViajesTiendaBarcodeOrigen(codTienda, barCode)
{
	var _i = this.iface;

	var qT = new FLSqlQuery("",codTienda);
	qT.setSelect("m.idmovimiento,lv.idsincro,m.idlineatto");
	qT.setFrom("movistock m inner join stocks s on m.idstock = s.idstock INNER JOIN tpv_lineasmultitransstock lv ON m.idlineatto = lv.idlinea");
	qT.setWhere("s.codalmacen = '" + codTienda + "' AND s.barcode = '" + barCode + "' AND m.estado = 'HECHO' AND m.idlineatto IS NOT NULL GROUP BY m.idmovimiento,lv.idsincro,m.idlineatto");

	if(!qT.exec()){
		return false;
	}

	if(qT.size() == 0){
		return true;
	}

	var fechaReal;
	var horaReal;

	while(qT.next()){
		fechaReal = AQUtil.sqlSelect("movistock m inner join stocks s on m.idstock = s.idstock INNER JOIN tpv_lineasmultitransstock lv ON m.idlineatto = lv.idlinea", "fechareal", "m.estado = 'HECHO' AND lv.idsincro = '" + qT.value("lv.idsincro") + "'", "movistock,stocks,tpv_lineasmultitransstock");
		if(fechaReal){
			horaReal = AQUtil.sqlSelect("movistock m inner join stocks s on m.idstock = s.idstock INNER JOIN tpv_lineasmultitransstock lv ON m.idlineatto = lv.idlinea", "horareal", "m.estado = 'HECHO' AND lv.idsincro = '" + qT.value("lv.idsincro") + "'", "movistock,stocks,tpv_lineasmultitransstock");

			if(horaReal){
				horaReal = horaReal.toString().right(8);
				if(!AQUtil.execSql("UPDATE movistock SET fechareal = '" + fechaReal + "', horareal = '" + horaReal + "' WHERE idmovimiento = " + qT.value("m.idmovimiento"), codTienda)){
					return false;
				}
				if(!AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET fechaex = '" + fechaReal + "', horaex = '" + horaReal + "' WHERE idlinea = " + qT.value("m.idlineatto"), codTienda)){
					return false;
				}
			}
		}
	}

	return true;
}

function elgansoCtr_cambiarFechaMovViajesTiendaBarcodeDestino(codTienda, barCode)
{
	var _i = this.iface;

	var qT = new FLSqlQuery("",codTienda);
	qT.setSelect("m.idmovimiento,lv.idsincro,m.idlineattd");
	qT.setFrom("movistock m inner join stocks s on m.idstock = s.idstock INNER JOIN tpv_lineasmultitransstock lv ON m.idlineattd = lv.idlinea");
	qT.setWhere("s.codalmacen = '" + codTienda + "' AND s.barcode = '" + barCode + "' AND m.estado = 'HECHO' AND m.idlineattd IS NOT NULL GROUP BY m.idmovimiento,lv.idsincro,m.idlineattd");

	if(!qT.exec()){
		return false;
	}

	if(qT.size() == 0){
		return true;
	}

	var fechaReal;
	var horaReal;

	while(qT.next()){
		fechaReal = AQUtil.sqlSelect("movistock m inner join stocks s on m.idstock = s.idstock INNER JOIN tpv_lineasmultitransstock lv ON m.idlineattd = lv.idlinea", "fechareal", "m.estado = 'HECHO' AND lv.idsincro = '" + qT.value("lv.idsincro") + "'", "movistock,stocks,tpv_lineasmultitransstock");
		if(fechaReal){
			horaReal = AQUtil.sqlSelect("movistock m inner join stocks s on m.idstock = s.idstock INNER JOIN tpv_lineasmultitransstock lv ON m.idlineattd = lv.idlinea", "horareal", "m.estado = 'HECHO' AND lv.idsincro = '" + qT.value("lv.idsincro") + "'", "movistock,stocks,tpv_lineasmultitransstock");
			
			if(horaReal){
				horaReal = horaReal.toString().right(8);
				if(!AQUtil.execSql("UPDATE movistock SET fechareal = '" + fechaReal + "', horareal = '" + horaReal + "' WHERE idmovimiento = " + qT.value("m.idmovimiento"), codTienda)){
					return false;
				}
				if(!AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET fecharx = '" + fechaReal + "', horarx = '" + horaReal + "' WHERE idlinea = " + qT.value("m.idlineattd"), codTienda)){
					return false;
				}
			}
		}
	}

	return true;
}

function elgansoCtr_actualizarStocksTienda(codTienda, aBarcode)
{
	var _i = this.iface;

	var where = " AND codalmacen = '" + codTienda + "' AND barcode IN ('" + aBarcode.join("', '") + "')";

	debug("*********************************************** where: " + where);

	var oParamProceso = [];
  	oParamProceso.caption = sys.translate("Actualizando Stocks Tienda %1").arg(codTienda);
  	oParamProceso.ancho = 300;
	oParamProceso.alto = 300;
  
  	flfactppal.iface.pub_creaDialogoEstado(oParamProceso);

  	flfactppal.iface.pub_ponLogDialogo("Calculando las cantidades para los stock sin fecha de última regularización.");

  	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad de la última regularización.");

	if (!AQUtil.execSql("update stocks s set cantidadultreg = (CASE WHEN (SELECT idstock from lineasregstocks ls where ls.idstock = s.idstock AND ls.egidsincroinv IN (SELECT idsincro FROM eg_inventarios WHERE enviado) limit 1) IS NULL THEN 0 ELSE (SELECT cantidadfin from lineasregstocks ls where ls.idstock = s.idstock ORDER BY fecha DESC limit 1) END), fechaultreg = (SELECT fecha from lineasregstocks ls where ls.idstock = s.idstock AND ls.egidsincroinv IN (SELECT idsincro FROM eg_inventarios WHERE enviado) ORDER BY fecha DESC limit 1), horaultreg = (SELECT hora from lineasregstocks ls where ls.idstock = s.idstock AND ls.egidsincroinv IN (SELECT idsincro FROM eg_inventarios WHERE enviado) ORDER BY fecha DESC limit 1) WHERE 1=1" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}


	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad reservada pack.");
	if (!AQUtil.execSql("update stocks set reservadapack = (SELECT (CASE WHEN SUM(ms.cantidad*-1) IS NULL THEN 0 ELSE SUM(ms.cantidad*-1) END) FROM movistock ms WHERE ms.idstock = stocks.idstock AND estado = 'PTE' AND cantidad < 0 AND referenciapack IS NOT NULL) WHERE fechaultreg IS NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad reservada no pack.");
	if (!AQUtil.execSql("update stocks set reservadanopack = (SELECT (CASE WHEN SUM(ms.cantidad*-1) IS NULL THEN 0 ELSE SUM(ms.cantidad*-1) END) FROM movistock ms WHERE ms.idstock = stocks.idstock AND estado = 'PTE' AND cantidad < 0 AND referenciapack IS NULL) WHERE fechaultreg IS NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad reservada.");
	if (!AQUtil.execSql("UPDATE stocks SET reservada = reservadapack + reservadanopack WHERE fechaultreg IS NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad pendiente de recibir.");
	if (!AQUtil.execSql("UPDATE stocks SET pterecibir = (SELECT (CASE WHEN SUM(ms.cantidad) IS NULL THEN 0 ELSE SUM(ms.cantidad) END) FROM movistock ms WHERE ms.idstock = stocks.idstock AND estado = 'PTE' AND cantidad > 0) WHERE fechaultreg IS NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;

	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad pack.");

	if (!AQUtil.execSql("UPDATE stocks SET cantidadpack = (SELECT (CASE WHEN SUM(sp.cantidad) IS NULL THEN 0 ELSE SUM(sp.cantidad) END) FROM eg_stockspacks sp WHERE sp.idstock = stocks.idstock) WHERE fechaultreg IS NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad no pack.");
	if (!AQUtil.execSql("UPDATE stocks SET cantidadnopack = (SELECT (CASE WHEN SUM(ms.cantidad) IS NULL THEN 0 ELSE SUM(ms.cantidad) END) FROM stocks s1 INNER JOIN movistock ms ON s1.idstock = ms.idstock where stocks.idstock = s1.idstock  AND ms.estado = 'HECHO' and ms.referenciapack is null) WHERE fechaultreg IS NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	if (!AQUtil.execSql("UPDATE stocks SET cantidadnopack = cantidadnopack + cantidadultreg WHERE fechaultreg IS NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad.");

	if (!AQUtil.execSql("UPDATE stocks SET cantidad = cantidadnopack + cantidadpack WHERE fechaultreg IS NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad reservada.");

	if (!AQUtil.execSql("UPDATE stocks SET reservada = reservadapack + reservadanopack WHERE fechaultreg IS NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad disponible pack.");

	if (!AQUtil.execSql("UPDATE stocks SET disponiblepack = cantidadpack - reservadapack, disponiblenopack = cantidadnopack - reservadanopack WHERE fechaultreg IS NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}
	
	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad disponible.");
	
	if (!AQUtil.execSql("UPDATE stocks SET disponible = disponiblepack + disponiblenopack WHERE fechaultreg IS NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando las cantidades para los stock con fecha de última regularización.");
	
	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad reservada pack.");

	if (!AQUtil.execSql("update stocks set reservadapack = (SELECT (CASE WHEN SUM(ms.cantidad*-1) IS NULL THEN 0 ELSE SUM(ms.cantidad*-1) END) FROM movistock ms WHERE ms.idstock = stocks.idstock AND estado = 'PTE' AND cantidad < 0 AND referenciapack IS NOT NULL) WHERE fechaultreg IS NOT NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad reservada no pack.");

	if (!AQUtil.execSql("update stocks set reservadanopack = (SELECT (CASE WHEN SUM(ms.cantidad*-1) IS NULL THEN 0 ELSE SUM(ms.cantidad*-1) END) FROM movistock ms WHERE ms.idstock = stocks.idstock AND estado = 'PTE' AND cantidad < 0 AND referenciapack IS NULL) WHERE fechaultreg IS NOT  NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad reservada.");

	if (!AQUtil.execSql("UPDATE stocks SET reservada = reservadapack + reservadanopack WHERE fechaultreg IS NOT  NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad pendiente de recibir.");

	if (!AQUtil.execSql("UPDATE stocks SET pterecibir = (SELECT (CASE WHEN SUM(ms.cantidad) IS NULL THEN 0 ELSE SUM(ms.cantidad) END) FROM movistock ms WHERE ms.idstock = stocks.idstock AND estado = 'PTE' AND cantidad > 0) WHERE fechaultreg IS NOT  NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad pack.");

	if (!AQUtil.execSql("UPDATE stocks SET cantidadpack = (SELECT (CASE WHEN SUM(sp.cantidad) IS NULL THEN 0 ELSE SUM(sp.cantidad) END) FROM eg_stockspacks sp WHERE sp.idstock = stocks.idstock) WHERE fechaultreg IS NOT  NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad no pack.");

	if (!AQUtil.execSql("UPDATE stocks SET cantidadnopack = (SELECT (CASE WHEN SUM(ms.cantidad) IS NULL THEN 0 ELSE SUM(ms.cantidad) END) FROM stocks s1 INNER JOIN movistock ms ON s1.idstock = ms.idstock where stocks.idstock = s1.idstock  AND ms.estado = 'HECHO' and ms.referenciapack is null AND ms.fechareal >= s1.fechaultreg) WHERE fechaultreg IS NOT  NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	if (!AQUtil.execSql("UPDATE stocks SET cantidadnopack = cantidadnopack + cantidadultreg WHERE fechaultreg IS NOT  NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad.");

	if (!AQUtil.execSql("UPDATE stocks SET cantidad = cantidadnopack + cantidadpack WHERE fechaultreg IS NOT  NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad reservada.");
	if (!AQUtil.execSql("UPDATE stocks SET reservada = reservadapack + reservadanopack WHERE fechaultreg IS NOT  NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad disponible pack.");
	if (!AQUtil.execSql("UPDATE stocks SET disponiblepack = cantidadpack + reservadapack, disponiblenopack = cantidadnopack - reservadanopack WHERE fechaultreg IS NOT NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}
	
	flfactppal.iface.pub_ponLogDialogo("Calculando la cantidad disponible.");

	if (!AQUtil.execSql("UPDATE stocks SET disponible = disponiblepack + disponiblenopack WHERE fechaultreg IS NOT  NULL" + where, codTienda)) {
		flfactppal.iface.pub_destruyeDialogoEstado();
		return false;
	}

	flfactppal.iface.pub_destruyeDialogoEstado();
	
	return true;
}

function elgansoCtr_actualizarFechaSincroTiendaCambiarFecha(codTienda)
{
	var _i = this.iface;

	var ahora = new Date;
	var fecha = ahora.toString().left(10);
	var hora = ahora.toString().right(8);

	if(AQUtil.sqlSelect("tpv_fechasincrotienda", "id", "codtienda = '" + codTienda + "' AND esquema = 'egCambiarFechaMovViajesTienda'")) {
		if(!AQUtil.sqlUpdate("tpv_fechasincrotienda", ["fechasincro", "horasincro"], [fecha, hora], "codtienda = '" + codTienda + "' AND esquema = 'egCambiarFechaMovViajesTienda'")) {
			return false;
		}
	}
	else {
		if(!AQUtil.sqlInsert("tpv_fechasincrotienda", ["codtienda", "esquema", "fechasincro", "horasincro"], [codTienda, "egCambiarFechaMovViajesTienda", fecha, hora])) {
			return false;
		}	
	}
	return true;
}

function elgansoCtr_recibeViajesUNIF()
{
	var _i = this.iface;

	var dialog = new Dialog(sys.translate("Introduzca la fecha de recepción de los viajes."));
	dialog.OKButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var hoy = new Date();
	var fecha = new DateEdit;
	fecha.date = hoy;
	fecha.label = sys.translate("Fecha:");
	dialog.add(fecha);
	if (!dialog.exec()) {
		return false;
	}

	var fechaCierre = fecha.date;
	var horaCierre = '00:00:01';
	var codAgente = "9999";

	var curV = new FLSqlCursor("tpv_viajesmultitransstock");
	curV.select("codalmadestino = 'UNIF' AND estado = 'EN TRANSITO' AND fecha < '" + fechaCierre + "'");
	AQUtil.createProgressDialog(sys.translate("Recibiendo viajes...." ), curV.size());
	var paso = 0;
	while (curV.next()) {
		AQUtil.setProgress(paso++);
		curV.setModeAccess(curV.Browse);
		curV.refreshBuffer();
		if (!formtpv_recepcionestx.iface.recibeViaje(curV.valueBuffer("idviajemultitrans"), codAgente, fechaCierre, horaCierre)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	return true;
}

function elgansoCtr_controlProcesoEjecutado(proceso, tiempo)
{
	var _i = this.iface;

	var procesoIniciado = AQUtil.sqlSelect("eg_fichprocesados", "nombre", "tipo = '" + proceso + "'");
	
	var hoy = new Date();

	var horaProceso = false;
	var fechaProceso = false;
	var fechaActual =  hoy.toString().left(10);
	var horaActual = hoy.toString().right(8);

	sys.addDatabase("aux");

	if(procesoIniciado){

		fechaProceso = AQUtil.sqlSelect("eg_fichprocesados", "fecha", "tipo = '" + proceso + "'").toString().left(10);

		if (AQUtil.daysTo(fechaActual, fechaProceso) != 0) {
			if (!AQUtil.execSql("DELETE FROM eg_fichprocesados WHERE tipo = '" + proceso + "'","aux")) {
				return false;
			}
		}
		else{
			horaProceso = AQUtil.sqlSelect("eg_fichprocesados", "hora", "tipo = '" + proceso + "'").toString().right(8);

			var auxHora = (parseFloat(horaActual.left(2)) - tiempo).toString();
			if(auxHora < 10){
				auxHora = "0" + auxHora.toString();
			}
			auxHora = auxHora + horaActual.toString().right(6);

			if(horaProceso < auxHora){
				if (!AQUtil.execSql("DELETE FROM eg_fichprocesados WHERE tipo = '" + proceso + "'","aux")) {
					return false;
				}
			}
			else{
				return false;
			}
		}
	}
	

	if (!AQUtil.execSql("INSERT INTO eg_fichprocesados (nombre, fecha, hora, tipo, estado) VALUES ('" + proceso + "', '" + hoy.toString().left(10) + "', '" + hoy.toString().right(8) + "','" + proceso + "', 'En proceso')", "aux")) {
		return false;
	}

	return true;
}

function elgansoCtr_controlHuecosTickets(dirFichero, codTienda, fecha, rellenarHuecos)
{
	var _i = this.iface;
	
	var qS = new FLSqlQuery;
	qS.setSelect("codigo,codtpv_puntoventa,fecha,hora,codtienda");
	qS.setFrom("tpv_comandas");
	if(codTienda == "TODAS"){
		qS.setWhere("codtienda <> 'AWEB' AND codtienda NOT IN (select codtienda from tpv_tiendas where idempresa IN (15,45,42)) AND fecha >= '" + fecha + "' ORDER BY codtienda,codigo");
	}
	else{
		qS.setWhere("codtienda = '" + codTienda + "' AND codigo LIKE '" + codTienda + "%' AND fecha >= '" + fecha + "' ORDER BY codigo");
	}
	
	debug(qS.sql());
	if (!qS.exec()) {
		return false;
	}
	
	if(qS.size() == 0){
		return true;
	}

	var nombreFichero = _i.dameNombreFicheroHuecosTickets();

	var ficheroHuecosTickets = new File(dirFichero + "/" + nombreFichero);

	var file = new File(dirFichero + "/" + nombreFichero);
	try {
		file.open(File.WriteOnly);
	} catch(e) {
		sys.errorMsgBox(sys.translate("Imposible abrir el fichero %1").arg(nombreFichero));
		return false;
	}


	var codigo, codigoAnt = "Inicio";
	var numero, numeroAnt = 0, huecos;
	var codPtoVenta;
	var nuevoCodigo;
	
	while (qS.next()) {
		codigo = qS.value("codigo");
		var longPtoVenta = parseFloat(qS.value("codtpv_puntoventa").toString().length);
		var longCodVenta = parseFloat(qS.value("codigo").toString().length);
		numero = qS.value("codigo").substring(longPtoVenta,longCodVenta);
		huecos = numero - numeroAnt - 1;

		if(codPtoVenta != qS.value("codtpv_puntoventa")){
			file.write("///////////*******PUNTO DE VENTA: " + qS.value("codtpv_puntoventa") + "\n");
		}

		if (huecos != 0 && codPtoVenta == qS.value("codtpv_puntoventa")) {
			
			while(huecos > 0){
			
				if(rellenarHuecos){

					var oParam = {};
					oParam["fecha"] = qS.value("fecha");
					oParam["hora"] = qS.value("hora");
					oParam["codPtoVenta"] = codPtoVenta;
					oParam["codTienda"] = qS.value("codtienda");
					oParam["codigoAnt"] = codigoAnt;
					oParam["idTpvArqueo"] = AQUtil.sqlSelect("tpv_arqueos", "idtpv_arqueo", "ptoventa = '" + qS.value("codtpv_puntoventa") + "' AND diadesde = '" + qS.value("fecha") + "'");

					nuevoCodigo = _i.obtenerNuevoCodigoVenta(oParam);
					if(!nuevoCodigo){
						huecos = huecos - 1;
						codigoAnt = nuevoCodigo;
						continue;
					}

					if(!oParam.idTpvArqueo){
						huecos = huecos - 1;
						codigoAnt = nuevoCodigo;
						continue;
					}
					
					oParam["codComanda"] = nuevoCodigo;
					if(!_i.rellenarHuecosVentasA0(oParam)){
						huecos = huecos - 1;
						codigoAnt = nuevoCodigo;
						continue;
					}
				}

				debug(huecos + " huecos entre factura " + codigoAnt + " y factura " + codigo + " Nuevo código " + nuevoCodigo);
				huecos = huecos - 1;
				codigoAnt = nuevoCodigo;
			}
			
			file.write(huecos + " huecos entre factura " + codigoAnt + " y factura " + codigo + "\n");
		}
		
		codigoAnt = codigo;
		numeroAnt = numero;
		codPtoVenta = qS.value("codtpv_puntoventa");
		
	}

	file.close();

	return true;
}

function elgansoCtr_dameNombreFicheroHuecosTickets()
{
	var _i = this.iface;
	var cursor = this.cursor();
	
	var hoy = new Date();
	dia = hoy.getDate().toString();
	if(dia.length < 2){
		dia = "0" + dia;
	}
	
	mes = hoy.getMonth().toString();
	if(mes.length < 2){
		mes = "0" + mes;
	}
	
	anyo = hoy.getYear().toString();
	
	var hora = hoy.getHours().toString();
	if(hora.length < 2){
		hora = "0" + hora;
	}

	var minuto = hoy.getMinutes().toString();
	if(minuto.length < 2){
		minuto = "0" + minuto;
	}

	var segundo = hoy.getSeconds().toString();
	if(segundo.length < 2){
		segundo = "0" + segundo;
	}
  
	var miFecha = anyo + mes + dia + hora + minuto + segundo;
  
	var nombreFichero = "huecosFichero" + miFecha + ".txt";
	
	return nombreFichero;
}

function elgansoCtr_obtenerNuevoCodigoVenta(oParam)
{
	var _i = this.iface;

	var ultimoTiquet = parseFloat(oParam.codigoAnt.toString().right((12 - oParam.codPtoVenta.length)));
	ultimoTiquet += 1;

	return oParam.codPtoVenta + flfacturac.iface.pub_cerosIzquierda(ultimoTiquet, 12 - oParam.codPtoVenta.length);

}

function elgansoCtr_rellenarHuecosVentasA0(oParam)
{
	var _i = this.iface;

	if(!_i.crearVentaA0(oParam)){
		return false;
	}

	return true;

}

function elgansoCtr_crearVentaA0(oParam)
{
	var _i = this.iface;

	oParam = _i.creaCabeceraA0(oParam);
	if(!oParam){
		if(!AQUtil.execSql("DELETE FROM tpv_comandas WHERE codigo = '" + oParam.codComanda + "'")){
			return false;
		}
		return false;
	}

	if(!_i.crearLineaVentaA0(oParam)){
		if(!AQUtil.execSql("DELETE FROM tpv_comandas WHERE codigo = '" + oParam.codComanda + "'")){
			return false;
		}
		return false;
	}

	if(!_i.crearPagoVentaA0(oParam)){
		if(!AQUtil.execSql("DELETE FROM tpv_comandas WHERE codigo = '" + oParam.codComanda + "'")){
			return false;
		}
		if(!AQUtil.execSql("DELETE FROM tpv_lineascomanda WHERE codcomanda = '" + oParam.codComanda + "'")){
			return false;
		}
		return false;
	}

	return true;

}

function elgansoCtr_creaCabeceraA0(oParam)
{
	var _i = this.iface;

	var curVenta = new FLSqlCursor("tpv_comandas");
	curVenta.setActivatedCommitActions(false);
	curVenta.setActivatedCheckIntegrity(false);
	curVenta.setModeAccess(curVenta.Insert);
	curVenta.refreshBuffer();

	curVenta.setValueBuffer("codigo", oParam.codComanda);
	curVenta.setValueBuffer("codalmacen", oParam.codTienda);
	curVenta.setValueBuffer("codtienda", oParam.codTienda);
	curVenta.setValueBuffer("codtpv_puntoventa", oParam.codPtoVenta);
	curVenta.setValueBuffer("fecha", oParam.fecha);
	curVenta.setValueBuffer("hora", oParam.hora);
	curVenta.setValueBuffer("estado", "Cerrada");
	curVenta.setValueBuffer("codpago", "CONT");
	curVenta.setValueBuffer("tipopago", "Efectivo");
	curVenta.setValueBuffer("codtpv_agente", "9999");
	curVenta.setValueBuffer("tipodoc", "VENTA");
	curVenta.setValueBuffer("total", 0);
	curVenta.setValueBuffer("saldopendiente", 0);
	curVenta.setValueBuffer("saldoconsumido", 0);
	curVenta.setValueBuffer("saldonosincro", 0);
	curVenta.setValueBuffer("pagado", 0);
	curVenta.setValueBuffer("neto", 0);
	curVenta.setValueBuffer("pendiente", 0);
	curVenta.setValueBuffer("totaliva", 0);
	curVenta.setValueBuffer("ptesaldo", false);
	curVenta.setValueBuffer("editable", true);
	curVenta.setValueBuffer("anulada", false);
	curVenta.setValueBuffer("sincronizada", false);

	var idFactura = AQUtil.sqlSelect("facturascli", "idfactura", "codigo = '" + oParam.codComanda + "'");

	if(idFactura){
		curVenta.setValueBuffer("ptesincrofactura", false);
		curVenta.setValueBuffer("egcodfactura", oParam.codComanda);
		curVenta.setValueBuffer("idfactura", idFactura);
		
	}
	else{
		curVenta.setValueBuffer("ptesincrofactura", true);
		curVenta.setValueBuffer("egcodfactura", oParam.codComanda);
	}
	
	if(!curVenta.commitBuffer()) {
		sys.warnMsgBox("Ocurrió un error creando la venta");
		return false;
	}

	oParam["idComanda"] = curVenta.valueBuffer("idtpv_comanda");

	return oParam;
}

function elgansoCtr_crearLineaVentaA0(oParam)
{
	var _i = this.iface;

	var curTPVcomLin = new FLSqlCursor("tpv_lineascomanda");
	curTPVcomLin.setActivatedCommitActions(false);
	curTPVcomLin.setModeAccess(curTPVcomLin.Insert);
	curTPVcomLin.refreshBuffer();

	curTPVcomLin.setValueBuffer("idtpv_comanda", oParam.idComanda);
	curTPVcomLin.setValueBuffer("referencia", "20001");
	curTPVcomLin.setValueBuffer("descripcion", "ARREGLOS");
	curTPVcomLin.setValueBuffer("cantidad", 1);
	curTPVcomLin.setValueBuffer("codimpuesto", "GEN");
	curTPVcomLin.setValueBuffer("iva", formRecordtpv_lineascomanda.iface.pub_commonCalculateField("iva", curTPVcomLin));
	curTPVcomLin.setValueBuffer("dtolineal", 0);
	curTPVcomLin.setValueBuffer("dtopor", 0);
	curTPVcomLin.setValueBuffer("barcode", "0000000020001");
	curTPVcomLin.setValueBuffer("ivaincluido", true);
	curTPVcomLin.setValueBuffer("pvpunitarioiva", 0);
	curTPVcomLin.setValueBuffer("pvpunitario", 0);
	curTPVcomLin.setValueBuffer("pvpsindtoiva", 0);
	curTPVcomLin.setValueBuffer("pvpsindto", 0);
	curTPVcomLin.setValueBuffer("pvptotaliva", 0);
	curTPVcomLin.setValueBuffer("pvptotal", 0);
	curTPVcomLin.setValueBuffer("codcomanda", oParam.codComanda);
	curTPVcomLin.setValueBuffer("codtienda", oParam.codTienda);
	curTPVcomLin.setValueBuffer("ptestock", false);
	curTPVcomLin.setValueBuffer("idsincro", formRecordtpv_lineascomanda.iface.pub_commonCalculateField("idsincro", curTPVcomLin));

	if (!curTPVcomLin.commitBuffer()){
		return false;
	}

	return true;

}

function elgansoCtr_crearPagoVentaA0(oParam)
{
	var _i = this.iface;

	var curPago = new FLSqlCursor("tpv_pagoscomanda");
	curPago.setActivatedCommitActions(false);
	curPago.setModeAccess(curPago.Insert);
	curPago.refreshBuffer();
	curPago.setValueBuffer("idtpv_comanda", oParam.idComanda);
	curPago.setValueBuffer("codcomanda", oParam.codComanda);
	curPago.setValueBuffer("idtpv_arqueo", oParam.idTpvArqueo);
	curPago.setValueBuffer("fecha", oParam.fecha);
	curPago.setValueBuffer("editable", false);
	curPago.setValueBuffer("nogenerarasiento", true);
	curPago.setValueBuffer("anulado", false);
	curPago.setValueBuffer("importe", 0);
	curPago.setValueBuffer("estado", "Pagado");
	curPago.setValueBuffer("codpago", "CONT");
	curPago.setValueBuffer("codtpv_puntoventa", oParam.codPtoVenta);
	curPago.setValueBuffer("codtpv_agente", "9999");
	curPago.setValueBuffer("codtienda", oParam.codTienda);
	curPago.setValueBuffer("idsincro", formRecordtpv_pagoscomanda.iface.commonCalculateField("idsincro", curPago));

	if(!curPago.commitBuffer()){
		return false;
	}

	return true;

}

function elgansoCtr_controlVentasLineasPagos()
{
	var _i = this.iface;
	
	var dialog = new Dialog(sys.translate("Introduzca la fecha de revisión de las ventas."));
	dialog.OKButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var hoy = new Date();
	var fecha = new DateEdit;
	fecha.date = hoy;
	fecha.label = sys.translate("Fecha:");
	dialog.add(fecha);
	if (!dialog.exec()) {
		return false;
	}

	var fechaRevision = fecha.date;

	if(!_i.controlVentasSinLineas(fechaRevision)){
		return false;
	}

	if(!_i.controlVentasSinPagos(fechaRevision)){
		return false;
	}

	return true;
}

function elgansoCtr_controlVentasSinLineas(fechaRevision)
{
	var _i = this.iface;
	
	var qS = new FLSqlQuery;
	qS.setSelect("c.idtpv_comanda,c.codigo,c.codtienda");
	qS.setFrom("tpv_comandas c LEFT OUTER JOIN tpv_lineascomanda lc ON c.idtpv_comanda = lc.idtpv_comanda");
	qS.setWhere("c.total = 0 AND c.fecha >= '" + fechaRevision + "' AND lc.idtpv_comanda IS NULL AND c.codtienda NOT IN (select codtienda from tpv_tiendas where idempresa IN (15,45,42)) AND c.codtienda <> 'AWEB' ORDER BY c.codigo,c.codtienda");
	
	
	debug(qS.sql());
	if (!qS.exec()) {
		return false;
	}
	
	if(qS.size() == 0){
		return true;
	}
	
	var oParam = {};

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Creando líneas de venta..."), qS.size());
	var p = 0;
	
	while (qS.next()) {
		AQUtil.setProgress(p++);
		oParam["idComanda"] = qS.value("c.idtpv_comanda");
		oParam["codComanda"] = qS.value("c.codigo");
		oParam["codTienda"] = qS.value("c.codtienda");

		if(!_i.crearLineaVentaA0(oParam)){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	return true;
}

function elgansoCtr_controlVentasSinPagos(fechaRevision)
{
	var _i = this.iface;
	
	var qS = new FLSqlQuery;
	qS.setSelect("c.idtpv_comanda,c.codigo,c.codtienda,c.fecha,c.codtpv_puntoventa,c.idfactura");
	qS.setFrom("tpv_comandas c LEFT OUTER JOIN tpv_pagoscomanda pc ON c.codigo = pc.codcomanda");
	qS.setWhere("c.total = 0 AND c.fecha >= '" + fechaRevision + "' AND pc.codcomanda IS NULL AND c.codtienda NOT IN (select codtienda from tpv_tiendas where idempresa IN (15,45,42)) AND c.codtienda <> 'AWEB' ORDER BY c.codigo,c.codtienda");
	
	
	debug(qS.sql());
	if (!qS.exec()) {
		return false;
	}
	
	if(qS.size() == 0){
		return true;
	}
	
	var oParam = {};

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Creando pagos de venta..."), qS.size());
	var p = 0;

	while (qS.next()) {
		AQUtil.setProgress(p++);

		oParam["idComanda"] = qS.value("c.idtpv_comanda");
		oParam["codComanda"] = qS.value("c.codigo");
		oParam["codTienda"] = qS.value("c.codtienda");
		oParam["idTpvArqueo"] = AQUtil.sqlSelect("tpv_arqueos", "idtpv_arqueo", "ptoventa = '" + qS.value("c.codtpv_puntoventa") + "' AND diadesde = '" + qS.value("c.fecha") + "'");
		oParam["fecha"] = qS.value("c.fecha");
		oParam["codPtoVenta"] = qS.value("c.codtpv_puntoventa");

		if(!oParam.idTpvArqueo){
			continue;
		}

		if(!_i.crearPagoVentaA0(oParam)){
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

		if(!qS.value("c.idfactura")){
			if(!AQUtil.execSql("UPDATE tpv_comandas SET ptesincrofactura = true WHERE codigo = '" + qS.value("c.codigo") + "'")){
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
				return false;
			}
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	return true;
}

function elgansoCtr_controlSecuenciaFacturasWeb()
{
	var _i = this.iface;
	
	var prefijoFactura = "AWEBX";
	var fechaInicio = "2017-01-01";

	var dialog = new Dialog;
	dialog.caption = sys.translate("Seleccione fecha de Inicio");
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var dFechaIni = new DateEdit;
	dFechaIni.label = sys.translate("Inicio");
	dFechaIni.date = fechaInicio;
	dialog.add(dFechaIni);

	if (!dialog.exec()) {
		return false;
	}

	fechaInicio = dFechaIni.date;
	
	var qS = new FLSqlQuery;
	qS.setSelect("codigo, numero, fecha");
	qS.setFrom("facturascli");
	qS.setWhere("codigo LIKE '" + prefijoFactura + "%' and fecha >= '" + fechaInicio + "' ORDER BY codigo");
	if (!qS.exec()) {
		return false;
	}
	
	var codigo, codigoAnt = "Inicio";
	var numero, numeroAnt = 0, huecos;
	var fecha, fechaAnt = fechaInicio;

	while (qS.next()) {
		codigo = qS.value("codigo");
		numero = parseFloat(qS.value("numero").right(7));
		fecha = qS.value("fecha");
		huecos = numero - numeroAnt - 1;

		if (huecos != 0) {
			debug(huecos + " huecos entre factura " + codigoAnt + " y factura " + codigo);
			/*if (rellenarHuecos) {
				if (!_i.rellenaHuecosFactura(codEjercicio, codSerie, tabla, codigoAnt, codigo, fechaAnt)) {
					return false;
				}
			}*/
		}
		if (fechaAnt) {
			if (AQUtil.daysTo(fechaAnt, fecha) < 0) {
				debug("factura " + codigoAnt + " de " + fechaAnt + " posterior a factura " + codigo + " de fecha " + fecha);
			}
		}

		codigoAnt = codigo;
		numeroAnt = numero;
		fechaAnt = fecha;
	}

	return true;
}

function elgansoCtr_corregirAsientosArqueosWebFormaPago(codPago, codSubcuenta)
{
	var _i = this.iface;

	var qry = new FLSqlQuery;
	qry.setSelect("a.idtpv_arqueo, a.idasiento, a.diadesde, SUM(p.importe), pa.debe, SUM(p.importe) - pa.debe, pa.codsubcuenta, pa.idpunteon43");
	qry.setFrom("tpv_arqueos a INNER JOIN co_partidas pa ON a.idasiento = pa.idasiento AND pa.codsubcuenta = '" + codSubcuenta + "' INNER JOIN tpv_pagoscomanda p ON a.idtpv_arqueo = p.idtpv_arqueo AND p.codpago = '" + codPago + "'");
	qry.setWhere("a.idtpv_arqueo LIKE 'WE%' AND diadesde >= '2018-01-01' GROUP BY a.idtpv_arqueo, a.diadesde, pa.debe, pa.codsubcuenta, pa.idpunteon43 HAVING SUM(p.importe) > 0 and (SUM(p.importe) - pa.debe) > 0.01");
	if (!qry.exec()) {
		return false;
	}
	debug(qry.sql());

	var debeE = 0;
	var debeC = 0;
	var diff = 0;
	var idAsiento = 0;
	var subcuenta = "";
	var idPunteo = 0;
	var idPunteoN43 = [];

	AQUtil.createProgressDialog(sys.translate("Corrigiendo asientos de arqueos"), qry.size());
	var p = 0;

	while (qry.next()) {
		AQUtil.setProgress(p++);
		
		debeC = qry.value("SUM(p.importe)");
		debeE = qry.value("pa.debe");
		diff = qry.value("SUM(p.importe) - pa.debe");
		subcuenta =  qry.value("pa.codsubcuenta");
		idAsiento = qry.value("a.idasiento");
		idPunteo = qry.value("pa.idpunteon43");

		idPunteoN43 = _i.guardarIdPunteoN43(idAsiento);
		if(!idPunteoN43) {
			debug("false guardarIdPunteoN43");
			AQUtil.destroyProgressDialog();
			return false;
		}

		if(!_i.regenerarAsientoArqueoWeb(qry.value("a.idtpv_arqueo"),idAsiento)) {
			debug("false regenerarAsientoArqueoWeb");
			AQUtil.destroyProgressDialog();
			return false;
		}

		if(!_i.informarIdPunteoN43(idAsiento,idPunteoN43)) {
			debug("false informarIdPunteoN43");
			AQUtil.destroyProgressDialog();
			return false;
		}

		if(!_i.corregirImportesEnAsientoPunteo(subcuenta, idPunteo, debeC, debeE)) {
			debug("false corregirImportesEnAsientoPunteo");
			AQUtil.destroyProgressDialog();
			return false;
		}
	}

	AQUtil.destroyProgressDialog();
	return true;
}

function elgansoCtr_comprobarAsientosArqueosWebFormaPago(codPago, codSubcuenta)
{
	var _i = this.iface;

	var qry = new FLSqlQuery;
	qry.setSelect("a.idtpv_arqueo, a.idasiento, a.diadesde, SUM(p.importe), pa.debe, SUM(p.importe) - pa.debe, pa.codsubcuenta, pa.idpunteon43");
	qry.setFrom("tpv_arqueos a INNER JOIN co_partidas pa ON a.idasiento = pa.idasiento AND pa.codsubcuenta = '" + codSubcuenta + "' INNER JOIN tpv_pagoscomanda p ON a.idtpv_arqueo = p.idtpv_arqueo AND p.codpago = '" + codPago + "'");
	qry.setWhere("a.idtpv_arqueo LIKE 'WE%' AND diadesde >= '2018-01-01' GROUP BY a.idtpv_arqueo, a.diadesde, pa.debe, pa.codsubcuenta, pa.idpunteon43 HAVING SUM(p.importe) > 0 AND (SUM(p.importe) - pa.debe) > 0.01");
	if (!qry.exec()) {
		return false;
	}
	debug(qry.sql());

	var msg = "";

	while (qry.next()) {

		msg += "Arqueo: " + qry.value("a.idtpv_arqueo") + "  Suma pagos: " + qry.value("SUM(p.importe)") + "  Debe: " + qry.value("pa.debe") + "  Dif: " + qry.value("SUM(p.importe) - pa.debe") + "\n";

	}

	debug(msg);
	return msg;
}

function elgansoCtr_comprobarAsientosArqueosWebDevoluciones(codPago, codSubcuenta)
{
	var _i = this.iface;

	var qry = new FLSqlQuery;
	qry.setSelect("a.idtpv_arqueo, a.idasiento, a.diadesde, abs(SUM(p.importe)), pa.haber, SUM(p.importe) - pa.haber, pa.codsubcuenta, pa.idpunteon43");
	qry.setFrom("tpv_arqueos a INNER JOIN co_partidas pa ON a.idasiento = pa.idasiento AND pa.codsubcuenta = '" + codSubcuenta + "' INNER JOIN tpv_pagoscomanda p ON a.idtpv_arqueo = p.idtpv_arqueo AND p.codpago = '" + codPago + "'");
	qry.setWhere("a.idtpv_arqueo LIKE 'WE%' AND diadesde >= '2018-01-01' GROUP BY a.idtpv_arqueo, a.diadesde, pa.haber, pa.codsubcuenta, pa.idpunteon43 HAVING SUM(p.importe) < 0 AND (SUM(p.importe) - pa.haber) > 0.01");
	if (!qry.exec()) {
		return false;
	}
	debug(qry.sql());

	var msg = "";

	while (qry.next()) {

		msg += "Arqueo: " + qry.value("a.idtpv_arqueo") + "  Suma pagos: " + qry.value("abs(SUM(p.importe))") + "  Haber: " + qry.value("pa.haber") + "  Dif: " + qry.value("SUM(p.importe) - pa.haber") + "\n";

	}

	debug(msg);
	return msg;
}

function elgansoCtr_corregirImportesEnAsientoPunteo(subcuenta, idPunteo, debeC, debeE)
{
	var _i = this.iface;

	if(!idPunteo || idPunteo == 0) {
		return true;
	}
	
	var idAsientoPunteo = AQUtil.sqlSelect("n43_punteo","idasiento","idpunteon43 = " + idPunteo);
	if(!idAsientoPunteo) {
		debug("Asiento de punteo no encontrado");
		return false;
	}

	var idPartidaPago = AQUtil.sqlSelect("co_partidas","idpartida","idpunteon43 is null and codsubcuenta = '" + subcuenta + "' and concepto like '%oncilia%' and haber = " + debeE + " and idasiento = " + idAsientoPunteo);
	debug("select idpartida from co_partidas where idpunteon43 is null and codsubcuenta = '" + subcuenta + "' and concepto like '%oncilia%' and haber = " + debeE + " and idasiento = " + idAsientoPunteo);
	if(!idPartidaPago) {
		debug("Partida de pago no encontrada");
		return false;
	}

	var idPartidaDif = AQUtil.sqlSelect("co_partidas","idpartida","idpunteon43 = " + idPunteo + " and concepto like '%diferencia%' and idasiento = " + idAsientoPunteo);
	debug("select idpartida from co_partidas where idpunteon43 = " + idPunteo + " and concepto like '%diferencia%' and idasiento = " + idAsientoPunteo);
	if(!idPartidaDif) {
		debug("Partida de diferencia no encontrada");
		return false;
	}

	if(!AQUtil.sqlUpdate("co_partidas","haber",debeC,"idpartida = " + idPartidaPago)) {
		debug("No se pudo actualizar la partida de punteo");
		return false;
	}

	var importeDif = AQUtil.sqlSelect("co_partidas","sum(debe-haber)","idpunteon43 is null and concepto like '%oncilia%' and idasiento = " + idAsientoPunteo);
	if(!importeDif) {
		debug("Importe de diferencia no encontrado");
		return false;
	}

debug("importeDif " + importeDif);
	if(importeDif < 0) {
		debug("negativo");
		importeDif = importeDif * -1;
		debug("importeDif " + importeDif);
		if(!AQUtil.sqlUpdate("co_partidas","debe",importeDif,"idpartida = " + idPartidaDif)) {
			debug("No se pudo actualizar el importe de diferencia");
			return false;
		}
	} else {
		debug("positivo");
		if(!AQUtil.sqlUpdate("co_partidas","haber",importeDif,"idpartida = " + idPartidaDif)) {
			debug("No se pudo actualizar el importe de diferencia");
			return false;
		}
	}


	

	return true;
}

function elgansoCtr_informarIdPunteoN43(idAsiento,idPunteoN43)
{
	var _i = this.iface;

	if(!idPunteoN43["subcuentas"] || idPunteoN43["subcuentas"] == "") {
		return true;
	}

	var qryPartidas = new FLSqlQuery;
	qryPartidas.setSelect("idpartida,codsubcuenta");
	qryPartidas.setFrom("co_partidas");
	qryPartidas.setWhere("idasiento = " + idAsiento + " and codsubcuenta in (" + idPunteoN43["subcuentas"] + ")");
	if (!qryPartidas.exec()) {
		return false;
	}

	var curPartidas = new FLSqlCursor("co_partidas");
	while(qryPartidas.next()) {
		curPartidas.select("idpartida = " + qryPartidas.value("idpartida"));
		if(!curPartidas.first()) {
			return false;
		}

		curPartidas.setModeAccess(curPartidas.Edit);
		curPartidas.refreshBuffer();
		curPartidas.setValueBuffer("idpunteon43",idPunteoN43[curPartidas.valueBuffer("codsubcuenta")]);
		if(!curPartidas.commitBuffer()) {
			return false;
		}
	}

	return true;
}

function elgansoCtr_guardarIdPunteoN43(idAsiento)
{
	var _i = this.iface;

	var idPunteoN43 = [];

	var qryPartidas = new FLSqlQuery;
	qryPartidas.setSelect("idpartida,codsubcuenta,idpunteon43");
	qryPartidas.setFrom("co_partidas");
	qryPartidas.setWhere("idasiento = " + idAsiento + " and idpunteon43 is not null");
	if (!qryPartidas.exec()) {
		debug("fasel 11");
		return false;
	}

	idPunteoN43["subcuentas"] = "";

	while(qryPartidas.next()) {
		if(idPunteoN43["subcuentas"] && idPunteoN43["subcuentas"] != "") {
			idPunteoN43["subcuentas"] += ",";
		}
		idPunteoN43["subcuentas"] += "'" + qryPartidas.value("codsubcuenta") + "'";

		idPunteoN43[qryPartidas.value("codsubcuenta")] = qryPartidas.value("idpunteon43");
		
		if(!AQUtil.sqlUpdate("co_partidas","idpunteon43","NULL","idPartida = " + qryPartidas.value("idpartida"))) {
			debug("false update null partidas");
			return false;
		}
	}

	return idPunteoN43;
}

function elgansoCtr_regenerarAsientoArqueoWeb(idArqueo, idAsiento)
{
	var _i = this.iface;

	var curArqueo = new FLSqlCursor("tpv_arqueos");
	curArqueo.select("idtpv_arqueo = '" + idArqueo + "'");
	
	if(!curArqueo.first()) {
		return false;
	}
	curArqueo.setModeAccess(curArqueo.Edit);
	curArqueo.refreshBuffer();

debug("fecha arqueo " + curArqueo.valueBuffer("diahasta"));

	var valoresDefecto = [];
	valoresDefecto["codejercicio"] = AQUtil.sqlSelect("co_asientos","codEjercicio","idasiento = " + idAsiento);

	if(!flfact_tpv.iface.generarAsientoArqueo(curArqueo,true)) {
		return false;
	}

	return true;
}

function elgansoCtr_corregirAsientosArqueosWeb()
{
	var _i = this.iface;
	
	var dialog = new Dialog;
	dialog.caption = "Indique el tipo de ventas que va a sincronizar";
	dialog.okButtonText = sys.translate("OK");
	dialog.cancelButtonText = sys.translate("Cancelar");
	
	var bgroup = new GroupBox;
	dialog.add(bgroup);
	
	var ccpagos = new RadioButton;
	ccpagos.text = sys.translate("Buscar y corregir incoherencias en pagos");
	ccpagos.checked = false;
	bgroup.add(ccpagos);

	var cpagos = new RadioButton;
	cpagos.text = sys.translate("Buscar incoherencias en pagos");
	cpagos.checked = false;
	bgroup.add(cpagos);

	var cdevol = new RadioButton;
	cdevol.text = sys.translate("Buscar incoherencias en devoluciones");
	cdevol.checked = false;
	bgroup.add(cdevol);
		
	if(!dialog.exec())
		return true;

	var pagos = [];

	pagos[0] = [];
	pagos[0]["codpago"] = "TARJ";
	pagos[0]["nombre"] = "TARJETA";

	pagos[1] = [];
	pagos[1]["codpago"] = "PAYP";
	pagos[1]["nombre"] = "PAYPAL";

	pagos[2] = [];
	pagos[2]["codpago"] = "APLA";
	pagos[2]["nombre"] = "APLAZAME";
	
	pagos[3] = [];
	pagos[3]["codpago"] = "CREE";
	pagos[3]["nombre"] = "CONTRAREEMBOLSO";

	pagos[4] = [];
	pagos[4]["codpago"] = "CONT";
	pagos[4]["nombre"] = "CAJA";

	var msg = "";

	for(var i = 0; i < pagos.length; i++) {
		var ctaCaja = flfact_tpv.iface.subcuentaDefecto(pagos[i]["nombre"], "2018", "AWEB");
		if (ctaCaja.error != 0)
			return false;

		codSubcuenta = ctaCaja.codsubcuenta;

		if(ccpagos.checked == true) {
			if(!_i.corregirAsientosArqueosWebFormaPago(pagos[i]["codpago"], codSubcuenta)) {
				return false;
			}
		}

		if(cpagos.checked == true) {
			msg += _i.comprobarAsientosArqueosWebFormaPago(pagos[i]["codpago"], codSubcuenta);
		}

		if(cdevol.checked == true) {
			msg += _i.comprobarAsientosArqueosWebDevoluciones(pagos[i]["codpago"], codSubcuenta);
		}
	}

	if(ccpagos.checked == true) {
		msg = "Asientos corregidos correctamente";
	}

	if(cpagos.checked == true) {
		if(msg == "") {
			msg = "No hay asientos erróneos";	
		}
		else {
			msg = "Asientos erróneos: \n" + msg;	
		}
	}

	if(cdevol.checked == true) {
		if(msg == "") {
			msg = "No hay asientos erróneos";	
		}
		else {
			msg = "Asientos erróneos: \n" + msg;	
		}
	}

	sys.infoMsgBox(sys.translate(msg));

	return true;
}

function elgansoCtr_exportarTlogTiendas(dirTlog, listaTiendas)
{
	var _i = this.iface;
	
	if(!dirTlog){
		dirTlog = flfact_tpv.iface.pub_valorDefectoTPV("dirlogs");
	}

	var q = new FLSqlQuery();
	q.setSelect("codtienda,idtiendalog");
	q.setFrom("tpv_tiendas");

	if(!listaTiendas || listaTiendas == "TODAS"){
		q.setWhere("sincroactiva = true AND idtiendalog IS NOT NULL GROUP BY codtienda,idtiendalog ORDER BY idtiendalog");
	}
	else{
		q.setWhere("codtienda IN (" + listaTiendas + ") AND sincroactiva = true AND idtiendalog IS NOT NULL GROUP BY codtienda,idtiendalog ORDER BY idtiendalog");
	}
	
	debug("/////CONSULTA TLOG: " + q.sql());

	if(!q.exec()){
		return false;
	}

	var qTlog = new FLSqlQuery();
	var fechaSincro;
	var horaSincro;
	var cuerpoTlog;
	var ficheroTlog;

	while(q.next()){
		cuerpoTlog = "";


		/*fechaSincro = AQUtil.sqlSelect("tpv_fechasincrotienda", "fechasincro", "codtienda = '" + q.value("codtienda") + "' AND esquema = 'EG_TLOG'");
		if(!fechaSincro){
			fechaSincro = new Date();
		}

		horaSincro = AQUtil.sqlSelect("tpv_fechasincrotienda", "horasincro", "codtienda = '" + q.value("codtienda") + "' AND esquema = 'EG_TLOG'");
		if(!horaSincro){
			horaSincro = new Date();
		}*/

		qTlog.setSelect("idtlog,tlog");
		qTlog.setFrom("eg_tlog");
		qTlog.setWhere("idtiendalog = " + q.value("idtiendalog") + " AND (exportado = false OR exportado IS NULL) ORDER BY idtlog,fecha,hora");

		if(!qTlog.exec()){
			return false;
		}

		if(qTlog.size() == 0){
			continue;
		}

		var nombreFicheroXsd = _i.dameNombreFicheroTlog(q.value("codtienda"), ".xsd");

		if(!_i.crearXSDTlog(dirTlog, nombreFicheroXsd)){
			return false;
		}

		var nombreFicheroTrg = _i.dameNombreFicheroTlog(q.value("codtienda"), ".xml.trg");

		if(!_i.crearTrgTlog(dirTlog, nombreFicheroTrg)){
			return false;
		}

		var nombreFichero = _i.dameNombreFicheroTlog(q.value("codtienda"), ".xml");

		ficheroTlog = new File(dirTlog + "/" + nombreFichero);
		ficheroTlog.open(File.WriteOnly);

		ficheroTlog.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
		ficheroTlog.write("<POSLog xmlns=\"http://www.nrf-arts.org/IXRetail/namespace/\">\n");

		while(qTlog.next()){
			cuerpoTlog += flfactppal.iface.quitarAcentos(qTlog.value("tlog").toString());

			if(!AQUtil.execSql("UPDATE eg_tlog SET exportado = true WHERE idtlog = '" + qTlog.value("idtlog") + "'")){
				return false;
			}
		}

		ficheroTlog.write(cuerpoTlog.toString());
		ficheroTlog.write("</POSLog>");
		ficheroTlog.close();

	}

	return true;
}

function elgansoCtr_crearRegistrosInicioContAnaliticaAuto(anoParamDesde, anoParamHasta)
{
	var _i = this.iface;

	// var anoParamDesde = false;
	// var anoParamHasta = false;
	// debug("params = " + params);
	// if (params) {
	// 	aParams = params.split(":");
	// 	anoParamDesde = aParams[0];
	// 	debug("anoParamDesde = " + anoParamDesde);
	// 	debug("aParams.length = " + aParams.length);
	// 	if (aParams.length > 1) {
	// 		anoParamHasta = aParams[1];
	// 		debug("anoParamHasta = " + anoParamHasta);
	// 	}
	// }

	if (!anoParamHasta || anoParamHasta == "") {
		anoParamHasta = anoParamDesde;
	}
	debug("anoParamDesde = " + anoParamDesde);
	debug("anoParamHasta = " + anoParamHasta);

	if (!_i.borraContAnalitica(anoParamDesde, anoParamHasta)) {
		return false;
	}

	if (!_i.cargaContAnalitica(anoParamDesde, anoParamHasta)) {
		return false;
	}
	if (!_i.rellenaMesesContAnalitica(anoParamDesde, anoParamHasta)) {
		return false;
	}
	if (!_i.checkContAnalitica(anoParamDesde, anoParamHasta)) {
		return false;
	}
	if (!_i.marcaEsquemaCompletado("ACEN", "CONTANALITICA")) {
		return false;
	}

	return true;
}

function elgansoCtr_borraContAnalitica(anoParamDesde, anoParamHasta)
{
	var _i = this.iface;

	var whereBorrado = "1 = 1";
	if (anoParamDesde) {
		whereBorrado += " AND anno BETWEEN '" + anoParamDesde + "' AND '" + anoParamHasta + "'";
	}
	debug("Borrando DELETE FROM eg_contanalitica WHERE " + whereBorrado);
	if (!AQUtil.execSql("DELETE FROM eg_contanalitica WHERE " + whereBorrado)) {
		return false;
	}
	return true;
}

function elgansoCtr_cargaContAnalitica(anoParamDesde, anoParamHasta)
{
	var _i = this.iface;

	var year;
	var mes;
	var oCS = {"1" : "ESXX1", "2" : "ESXX2", "3" : "ESXX3", "4" : "CLXX4", "5" : "FRXX5", "6" : "GBXX6", "7" : "PTXX7", "15" : "ESX15", "21" : "MXX21", "25" : "HLX25", "27" : "ITX27", "29" : "DEX29", "31" : "BCX31", "38" : "MXX38", "42" : "PTX42", "44" : "FRX44", "49" : "ESX49"};

	var whereQ = "s.codsubcuenta NOT LIKE '9%' AND s.codsubcuenta NOT LIKE '8%'"
	if (anoParamDesde) {
		whereQ += " AND a.fecha BETWEEN '" + anoParamDesde + "-01-01' AND '" + anoParamHasta + "-12-31'";
	} else {
		whereQ += " AND a.fecha >= '2016-01-01'";
	}

	debug("whereQ = " + whereQ);

	var q = new FLSqlQuery;
	q.setSelect("s.codsubcuenta, s.idsubcuenta, p.codsubcentro, a.codejercicio, e.idempresa, EXTRACT('year' FROM a.fecha), EXTRACT('month' FROM a.fecha), SUM(p.debe - p.haber)");
	q.setFrom("co_subcuentas s INNER JOIN co_partidas p ON s.idsubcuenta = p.idsubcuenta INNER JOIN co_asientos a ON a.idasiento = p.idasiento INNER JOIN ejercicios e ON a.codejercicio = e.codejercicio")
	q.setWhere(whereQ + " GROUP BY s.codsubcuenta, s.idsubcuenta, p.codsubcentro, a.codejercicio, e.idempresa, EXTRACT('year' FROM a.fecha), EXTRACT('month' FROM a.fecha)");
	debug(q.sql());
	if (!q.exec()) {
		return false;
	}
	var valor;
	var codSubcentro;
	var contador = 0;
	var empresa;
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Insertando registros"), parseFloat(q.size()));
	var p = 0;
	while (q.next()) {
		AQUtil.setProgress(p++);
		year = q.value("EXTRACT('year' FROM a.fecha)");
		mes = q.value("EXTRACT('month' FROM a.fecha)");
		empresa = q.value("e.idempresa");
		valor = q.value("SUM(p.debe - p.haber)");
		codSubcentro = q.value("p.codsubcentro");
		if (!codSubcentro || codSubcentro == "") {
			if (empresa in oCS) {
				codSubcentro = oCS[empresa];
			} else {
				debug("Empresa " + empresa + " no encontrada");
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
		if (parseFloat(mes) < 10) {
			mes = "0" + mes.toString();
		}
		if (!AQUtil.execSql("INSERT INTO eg_contanalitica (anno, mesano, codsubcentro, codsubcuenta, idsubcuenta, codejercicio, idempresa, prevision1, prevision2, valor) VALUES ('" + year + "', '" + year + mes + "', '" + codSubcentro + "', '" + q.value("s.codsubcuenta") + "', " + q.value("s.idsubcuenta") + ", '" + q.value("a.codejercicio") + "', " + q.value("e.idempresa") + ", 0, 0, " + valor + ")")) {
			debug("Falló el insert");
			AQUtil.destroyProgressDialog();
			return false;
		}
		// if (contador++ > 5) {
		// 	break;
		// }
	}
	debug("Fin inserciones");
	AQUtil.destroyProgressDialog();
	return true;
}

function elgansoCtr_rellenaMesesContAnalitica(anoParamDesde, anoParamHasta)
{
	var _i = this.iface;


	var mes = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"];

	var whereRellenoBase = "1 = 1";
	if (anoParamDesde) {
		whereRellenoBase += " AND anno BETWEEN '" + anoParamDesde + "' AND '" + anoParamHasta + "'";
	}
	debug("whereRellenoBase = " + whereRellenoBase);

	var qRellenoBase = new FLSqlQuery;
	qRellenoBase.setSelect("idempresa, codejercicio, idsubcuenta, codsubcentro, anno, codsubcuenta");
	qRellenoBase.setFrom("eg_contanalitica");
	qRellenoBase.setWhere(whereRellenoBase + " GROUP BY idempresa, codejercicio, idsubcuenta, codsubcentro, anno, codsubcuenta HAVING COUNT(*) <> 12");
	if (!qRellenoBase.exec()) {
		return false;
	}

	var v = qRellenoBase.value;

	qRelleno = new FLSqlQuery;
	qRelleno.setSelect("mesano");
	qRelleno.setFrom("eg_contanalitica");

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Rellenando meses sin datos"), parseFloat(qRellenoBase.size()));
	var p = 0;
	while (qRellenoBase.next()) {
		AQUtil.setProgress(p++);

		qRelleno.setWhere("codejercicio = '" + v("codejercicio") + "' AND idsubcuenta = " + v("idsubcuenta") + " AND codsubcentro = '" + v("codsubcentro") + "' AND anno = '" + v("anno") + "' AND idempresa = " + v("idempresa") + " ORDER BY mesano");

		if (!qRelleno.exec()) {
			AQUtil.destroyProgressDialog();
			return false;
		}

		var mesRelleno = 0;
		var mesQry = 0;
		var mesano;
		var hayDatos = true;
		while (mesRelleno < 12) {
			mesRelleno++;
			if (mesRelleno > mesQry) {
				if (hayDatos) {
					if (qRelleno.next()) {
						mesano = qRelleno.value("mesano");	
					}
					else {
						hayDatos = false;
					}
				}
			}
			mesQry = parseFloat(mesano.toString().right(2));
			if (mesQry == mesRelleno) {
				continue;
			}
			if (parseFloat(mesRelleno) < 10) {
				sMesRelleno = "0" + mesRelleno.toString();
			}
			else {
				sMesRelleno = mesRelleno.toString();	
			}
			if (!AQUtil.execSql("INSERT INTO eg_contanalitica (anno, mesano, codsubcentro, codsubcuenta, idsubcuenta, codejercicio, idempresa, prevision1, prevision2, valor) VALUES ('" + v("anno") + "', '" + v("anno") + sMesRelleno + "', '" + v("codsubcentro") + "', '" + v("codsubcuenta") + "', " + v("idsubcuenta") + ", '" + v("codejercicio") + "', " + v("idempresa") + ", 0, 0, 0)")) {
				AQUtil.destroyProgressDialog();
				return false;
			}
		}
	}
	AQUtil.destroyProgressDialog();
	return true;
}

function elgansoCtr_marcaEsquemaCompletado(codTienda, esquema)
{
	var _i = this.iface;

	var fecha = new Date();
	var hora = fecha.toString().right(8);

	var fst = AQUtil.sqlSelect("tpv_fechasincrotienda", "id", "codtienda = '" + codTienda + "' AND esquema = '" + esquema + "'");

	if(fst && fst != ""){
		AQUtil.sqlUpdate("tpv_fechasincrotienda", ["fechasincro", "horasincro"], [fecha, hora], "id = " + fst);
	}
	else{
		AQUtil.sqlInsert("tpv_fechasincrotienda", ["codtienda", "esquema", "fechasincro", "horasincro"], [codTienda, esquema, fecha, hora]);
	}
	return true;
}

function elgansoCtr_checkContAnalitica(anoParamDesde, anoParamHasta)
{
	var _i = this.iface;

	var whereCheck = "1 = 1";
	if (anoParamDesde) {
		whereCheck += " AND anno BETWEEN '" + anoParamDesde + "' AND '" + anoParamHasta + "'";
	}

	//Check todo relleno (12 meses por año)
	if (AQUtil.sqlSelect("eg_contanalitica", "idempresa", whereCheck + " GROUP BY idempresa, codejercicio, idsubcuenta, codsubcentro, anno, codsubcuenta HAVING COUNT(*) <> 12")) {
		debug ("Check de meses informados FALLÓ");
		return false;
	}
	debug ("Check de meses informados OK");

	// Check de no repeticiones
	if (AQUtil.sqlSelect("eg_contanalitica", "idempresa", whereCheck + " GROUP BY idempresa, codejercicio, idsubcuenta, codsubcentro, anno, codsubcuenta, mesano HAVING COUNT(*) > 1")) {
		debug ("Check de no repeticiones FALLÓ");
		return false;
	}
	debug ("Check de no repeticiones OK");

	// Check de suma cero (no descuadres)
	debug(whereCheck + "GROUP BY codejercicio HAVING ABS(SUM(valor)) > 0.01");
	if (AQUtil.sqlSelect("eg_contanalitica", "codejercicio", whereCheck + " GROUP BY codejercicio HAVING ABS(SUM(valor)) > 0.01")) {
		debug ("Check de suma cero (no descuadres) FALLÓ");
		return false;
	}
	debug ("Check de suma cero (no descuadres) OK");

	return true;
}

function elgansoCtr_creaBonosMasivo()
{
	var _i = this.iface;

	var dialog = new Dialog;
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");
	
	var texto = new LineEdit;
	texto.text = "BONO_";
	dialog.add(texto);

	var fecha = new Date;
	var diaDesde = new DateEdit;
	diaDesde.label = sys.translate("Fecha: ");
	diaDesde.date = fecha;
	dialog.add(diaDesde);

	var fechaExpiracion = new DateEdit;
	fechaExpiracion.label = sys.translate("Fecha Expiración: ");
	fechaExpiracion.date = fecha;
	dialog.add(fechaExpiracion);

  	var cantidad = new NumberEdit;
  	cantidad.value = 1;
	cantidad.label = sys.translate("Cantidad Bonos:");
	cantidad.maximum = 5;
	cantidad.decimals = 0;
	dialog.add(cantidad);

  	var importeMinimo = new NumberEdit;
  	importeMinimo.value = 90;
	importeMinimo.label = sys.translate("Importe mínimo:");
	importeMinimo.maximum = 4;
	importeMinimo.decimals = 2;
	dialog.add(importeMinimo);

  	var saldoIni = new NumberEdit;
  	saldoIni.value = 20;
	saldoIni.label = sys.translate("Saldo inicial:");
	saldoIni.maximum = 4;
	saldoIni.decimals = 2;
	dialog.add(saldoIni);

	var divisa = new LineEdit;
	divisa.label = sys.translate("Divisa: ");
	divisa.text = "EUR"; 
	dialog.add(divisa);


	if(!dialog.exec()){
		return false;
	}

	var venta;
	var importeMin = parseFloat(importeMinimo.value);
	var cantBonos = parseFloat(cantidad.value);
	var saldoInicial = parseFloat(saldoIni.value); 
	var codBono;
	var divisaIntroducida = divisa.text.toUpperCase(); 

	if(!cantBonos || cantBonos <= 0){
		sys.warnMsgBox(sys.translate("No ha seleccionado una cantidad válida de bonos a crear"));
		return false;
	}

	if(importeMin < 0){
		sys.warnMsgBox(sys.translate("No ha seleccionado un importe válida de bonos a crear"));
		return false;
	}
	if(!importeMin || isNaN(importeMin)){
		importeMin = 0;
	}

	if(divisaIntroducida == ""){
		sys.warnMsgBox(sys.translate("No se ha introducido un valor para la divisa"));
		return false;
	} else {		
		if(!AQUtil.sqlSelect("divisas", "coddivisa", "UPPER(coddivisa) = '" + divisaIntroducida + "'")){
			sys.warnMsgBox(sys.translate("No hay una divisa con código " + divisaIntroducida));
			return false;
		} 
	}
	
	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Insertando %1 bonos").arg(cantBonos), cantBonos);
	var p = 0;

	for (var i = 0; i < parseFloat(cantBonos); i++){
		AQUtil.setProgress(p++);

		venta = texto.text + "_" + flfactppal.iface.pub_cerosIzquierda(i+1, 5);

		codBono = flfact_tpv.iface.calculaCodBono();
		var i = 0;

		while(AQUtil.sqlSelect("eg_bonos", "codbono", "codbono = '" + codBono + "'") && i < 1000){
			codBono = flfact_tpv.iface.calculaCodBono();
			i++;
		}

		if(!codBono){
			return false;
		}

		var curBono = new FLSqlCursor("eg_bonos");
		curBono.setModeAccess(curBono.Insert);
		curBono.refreshBuffer();

		curBono.setValueBuffer("codbono", codBono);
		curBono.setValueBuffer("fecha", diaDesde.date);
		curBono.setValueBuffer("venta", venta);
		curBono.setValueBuffer("saldoinicial", saldoInicial);
		curBono.setValueBuffer("saldoconsumido", 0);
		curBono.setValueBuffer("saldopendiente", saldoInicial);
		curBono.setValueBuffer("importeminimo", importeMin);
		curBono.setValueBuffer("activo", true);
		curBono.setValueBuffer("fechaexpiracion", fechaExpiracion.date);
		curBono.setValueBuffer("coddivisa", divisaIntroducida);
		curBono.setValueBuffer("email", "");

		if (!curBono.commitBuffer()){
			AQUtil.destroyProgressDialog();
			return false;	
		}
	}

	AQUtil.destroyProgressDialog();

	return true;
}

function elgansoCtr_crearFacturaRectWebBonos()
{
	var _i = this.iface;

	var qLineasBonos = new FLSqlQuery();
	qLineasBonos.setSelect("f.codigo, f.idfactura, l.idlinea");
	qLineasBonos.setFrom("lineasfacturascli l inner join facturascli f on l.idfactura = f.idfactura");
	qLineasBonos.setWhere("l.pvptotaliva > 0 and l.referencia = '0000ATEMP00034' and l.cantidad = 1 and f.total > 0 and f.codtienda = 'AWEB' AND f.idfactura NOT IN (SELECT idfacturarect from facturascli where f.idfactura = facturascli.idfacturarect) GROUP BY f.codigo, f.idfactura, l.idlinea ORDER BY f.codigo");

	debug("////////////////// consulta qLineasBonos: " + qLineasBonos.sql());

	if(!qLineasBonos.exec()) {
		return false;
	}

	if(qLineasBonos.size() <= 0){
		sys.infoMsgBox(sys.translate("No hay registros que cumplan los filtros."));
		return true;
	}

	var idFactura;
	var _f = formfacturascli.iface;

  	if (!_f.curFactura) {
    	_f.curFactura = new FLSqlCursor("facturascli");
  	}

  	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Generando facturas rectificativas bonos"), qLineasBonos.size());
	var p = 0;
	var hoy = new Date();

	while (qLineasBonos.next()) {
		AQUtil.setProgress(p++);
  		_f.curFactura.setModeAccess(_f.curFactura.Insert);
  		_f.curFactura.refreshBuffer();

  		var curFacturaOriginal = new FLSqlCursor("facturascli");
		curFacturaOriginal.select("idfactura = " + qLineasBonos.value("f.idfactura"));
		if(!curFacturaOriginal.first()) {
			continue;
		}
		curFacturaOriginal.setModeAccess(curFacturaOriginal.Browse);
		curFacturaOriginal.refreshBuffer();

  		if (!_f.copiadatosFactura(curFacturaOriginal)) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
    		return false;
  		}
  		_f.curFactura.setValueBuffer("codserie", "RW");
  		_f.curFactura.setValueBuffer("fecha", hoy);
  		_f.curFactura.setValueBuffer("fechacon", hoy);

  		if (!_f.curFactura.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
    		return false;
  		}
  
  		idFactura = _f.curFactura.valueBuffer("idfactura");
  
  		if (!_i.copiarLineaRecBono(qLineasBonos, idFactura)) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
    		return false;
  		}

  		_f.curFactura.select("idfactura = " + idFactura);
  
  		if (!_f.curFactura.first()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
    		return false;
  		}
  	
  		if (!formRecordfacturascli.iface.pub_actualizarLineasIva(_f.curFactura)) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
    		return false;
  		}
  	
  		_f.curFactura.setModeAccess(_f.curFactura.Edit);
  		_f.curFactura.refreshBuffer();

  		_f.curFactura.setValueBuffer("idfacturarect", qLineasBonos.value("f.idfactura"));
		_f.curFactura.setValueBuffer("deabono", true);
		_f.curFactura.setValueBuffer("codigorect", qLineasBonos.value("f.codigo"));
  		_f.curFactura.setValueBuffer("observaciones", sys.translate("Factura rectificativa %1 gasto bonos venta web").arg(qLineasBonos.value("f.codigo")));

		formalbaranescli.iface.curFactura = _f.curFactura;
    	if (!formalbaranescli.iface.totalesFactura()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
        	return false;
    	}

		debug("////////////////// codigo factura creada: " + _f.curFactura.valueBuffer("codigo"));

  		if (!_f.curFactura.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
    		return false;
  		}
  	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	return true;
}

function elgansoCtr_copiarLineaRecBono(qLineasBonos, idFactura)
{
	var _i = this.iface;

	var curLineaOriginal = new FLSqlCursor("lineasfacturascli");
	var curLineaRect = new FLSqlCursor("lineasfacturascli");
	var aCamposLinea = AQUtil.nombreCampos("lineasfacturascli");
  	var totalCampos = aCamposLinea[0];


	curLineaOriginal.select("idlinea = " + qLineasBonos.value("l.idlinea"));
	if(curLineaOriginal.first()) {
		curLineaOriginal.setModeAccess(curLineaOriginal.Browse);
		curLineaOriginal.refreshBuffer();
		curLineaRect.setModeAccess(curLineaRect.Insert);
		curLineaRect.refreshBuffer();
	
	  	for (var i = 1; i <= totalCampos; i++) {
	  		if(aCamposLinea[i] == "pvpunitario" || aCamposLinea[i] == "pvpunitarioiva" || aCamposLinea[i] == "pvptotal" || aCamposLinea[i] == "pvptotaliva" || aCamposLinea[i] == "pvpsindto" || aCamposLinea[i] == "pvpsindtoiva"){
				curLineaRect.setValueBuffer(aCamposLinea[i], curLineaOriginal.valueBuffer(aCamposLinea[i]) * (-2));
	  		}
	  		else if(aCamposLinea[i] == "idlinea" || aCamposLinea[i] == "idsubcuenta" || aCamposLinea[i] == "codsubcuenta"){
	  			continue;
	  		}
	  		else{
				curLineaRect.setValueBuffer(aCamposLinea[i], curLineaOriginal.valueBuffer(aCamposLinea[i]));
			}
		}

		curLineaRect.setValueBuffer("idfactura", idFactura);
		curLineaRect.setValueBuffer("numlinea", 1);

		if (!curLineaRect.commitBuffer()) {
			return false;
		}
	}

	return true;
}

function elgansoCtr_recibeViajesATAR()
{
	var _i = this.iface;

	var dialog = new Dialog(sys.translate("Introduzca la fecha de recepción de los viajes."));
	dialog.OKButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var hoy = new Date();
	var fecha = new DateEdit;
	fecha.date = hoy;
	fecha.label = sys.translate("Fecha:");
	dialog.add(fecha);
	if (!dialog.exec()) {
		return false;
	}

	var fechaCierre = fecha.date;
	var horaCierre = '00:00:01';
	var codAgente = "9999";

	var curV = new FLSqlCursor("tpv_viajesmultitransstock");
	curV.select("codalmadestino = 'ATAR' AND estado = 'EN TRANSITO' AND fecha < '" + fechaCierre + "'");
	AQUtil.createProgressDialog(sys.translate("Recibiendo viajes...." ), curV.size());
	var paso = 0;
	while (curV.next()) {
		AQUtil.setProgress(paso++);
		curV.setModeAccess(curV.Browse);
		curV.refreshBuffer();
		if (!formtpv_recepcionestx.iface.recibeViaje(curV.valueBuffer("idviajemultitrans"), codAgente, fechaCierre, horaCierre)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	return true;
}

function elgansoCtr_recibeViajesATAC()
{
	var _i = this.iface;

	var dialog = new Dialog(sys.translate("Introduzca la fecha de recepción de los viajes."));
	dialog.OKButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var hoy = new Date();
	var fecha = new DateEdit;
	fecha.date = hoy;
	fecha.label = sys.translate("Fecha:");
	dialog.add(fecha);
	if (!dialog.exec()) {
		return false;
	}

	var fechaCierre = fecha.date;
	var horaCierre = '00:00:01';
	var codAgente = "9999";

	var curV = new FLSqlCursor("tpv_viajesmultitransstock");
	curV.select("codalmadestino = 'ATAC' AND estado = 'EN TRANSITO' AND fecha < '" + fechaCierre + "'");
	AQUtil.createProgressDialog(sys.translate("Recibiendo viajes...." ), curV.size());
	var paso = 0;
	while (curV.next()) {
		AQUtil.setProgress(paso++);
		curV.setModeAccess(curV.Browse);
		curV.refreshBuffer();
		if (!formtpv_recepcionestx.iface.recibeViaje(curV.valueBuffer("idviajemultitrans"), codAgente, fechaCierre, horaCierre)) {
			AQUtil.destroyProgressDialog();
			return false;
		}
	}
	AQUtil.destroyProgressDialog();
	return true;
}

//xvfb-run -a /opt/abanq-build/bin/abanq -silentconn "elganso_central:lorena:PostgreSQL:localhost:5432:555zapato:nogui:noexceptions" -c "formmt_procesos.generaBonosFidelizacion" -a "" -q

function elgansoCtr_generaBonosFidelizacion()
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setFrom("tpv_tarjetaspuntos t left outer join eg_bonos b on t.email = b.email");
	q.setSelect("t.codtarjetapuntos");
	q.setWhere("(t.fechaalta is null or t.fechaalta >= '2018-06-26') and t.fechamod >= '2018-06-26' and b.email is null and not deempleado and not dtoespecial")
	
	if (!q.exec()) {
		return false;
	}

	var curTP = new FLSqlCursor("tpv_tarjetaspuntos");
	while(q.next()) {
		curTP.select("codtarjetapuntos = '" + q.value("t.codtarjetapuntos") + "'")
		if (!curTP.first()) {
			debug("false 1");
			return false;
		}

		curTP.setModeAccess(curTP.Edit);
		curTP.refreshBuffer();

		if(!flfact_tpv.iface.crearBonoTarjetaFidelizacion(curTP, true, false)) {
			debug("false 2");
			return false;
		}

		if(curTP.isNull("fechaalta")) {
			curTP.setValueBuffer("fechaalta", flfactppal.iface.dameFechaActual());
			curTP.setValueBuffer("horaalta", flfactppal.iface.dameHoraActual());
		}

		if(!curTP.commitBuffer()) {
			debug("false 3");
			return false;
		}
	}

	return true;
}

function elgansoCtr_arreglarAtributosArticulosDuplicados()
{
	var _i = this.iface;

	var cx = "default";
	var aAA = _i.dameAtributosArticulosDuplicados(cx);

	if(aAA){
		if(aAA.length > 0){
			if(!_i.corregirAATablas(aAA, cx)){
				debug("////////////////////// error al corregir AA tablas");	
			}
		}
	}

	var curTiendas = new FLSqlCursor("tpv_tiendas");
	curTiendas.select("sincroactiva AND servidor is not null");
	while(curTiendas.next()){
		curTiendas.setModeAccess(curTiendas.Browse);
		curTiendas.refreshBuffer();
		
		cx = curTiendas.valueBuffer("codtienda");
		if (!_i.conectarMT(cx, true)) {
			continue;
		}

		aAA = _i.dameAtributosArticulosDuplicados(cx);
		
		if(aAA){
			if(aAA.length > 0){
				if(!_i.corregirAATablas(aAA, cx)){
					continue;	
				}
			}
		}

		if(!formtpv_tiendas.iface.desconectar(cx, true)){
			continue;
		}	
	}

	return true;
}

function elgansoCtr_dameAtributosArticulosDuplicados(cx)
{
	var _i = this.iface;

	var aAA = [];

	var q = new FLSqlQuery("", cx);
	
	q.setSelect("referencia,talla,color");
	q.setFrom("atributosarticulos");
	q.setWhere("1 = 1 GROUP BY referencia,talla,color HAVING COUNT(*) > 1 AND COUNT(*) < 100");

	if (!q.exec()) {
		sys.errorMsgBox(sys.translate("Falló la consulta"));
		return false;
	}

	if(q.size() <= 0){
		return aAA;
	}

	var referencia, codTalla, codColor;

	while(q.next()){
		referencia = q.value("referencia");
		codColor = q.value("color");
		codTalla = q.value("talla");

		var qAT = new FLSqlQuery("", cx);
		qAT.setSelect("barcode");
		qAT.setFrom("atributosarticulos");
		qAT.setWhere("referencia = '" + referencia + "' AND talla = '" + codTalla + "' AND color = '" + codColor + "' ORDER BY fechamod DESC");

		if (!qAT.exec()) {
			sys.errorMsgBox(sys.translate("Falló la consulta de duplicados para la referencia %1").arg(referencia));
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

		if(qAT.size() <= 1){
			continue;
		}

		var oBarcode = new Object;
		if(qAT.first()){
			oBarcode["barCodeBueno"] = qAT.value("barcode");
		}

		if(qAT.next()){
			oBarcode["barCodeMalo"] = qAT.value("barcode");
		}

		aAA.push(oBarcode);
	}

	return aAA;
}

function elgansoCtr_corregirAATablas(aAA, cx)
{
	var _i = this.iface;

	var idStockBueno;
	var idStockMalo;

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Procesando stocks %1").arg(cx), aAA.length);
	var p = 0;

	for(var i = 0; i < aAA.length; i++){
		AQUtil.setProgress(p++);
		AQUtil.execSql("UPDATE articuloscomp SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE atributostarifas SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE barcodeprov SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE composiciones SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE eg_articulosetiquetas SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE eg_inventarios SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE eg_lineassolicitudreposicion SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE eg_planproducciontallaje SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE eg_solicitudreposicion SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE etiquetas SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE lineascomposicion SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE lineasregstocks SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE lineastransstock SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE eg_lineasrecibosrecogida SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE lineasalbaranescli SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE lineasalbaranesprov SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE lineasbulto SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE lineasfacturascli SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE lineasfacturasprov SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE lineaspedidoscli SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE lineaspedidosprov SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE lineaspresupuestoscli SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE lineastallacol SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE lineastallacolcli SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE eg_historicopedweb SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE tpv_barcodemultitransstock SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE tpv_comandas SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE tpv_consultastocks SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE tpv_lineascomanda SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE tpv_lineasmultitransstock SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE tpv_lineasvale SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		
		if(cx == "default"){
			AQUtil.execSql("UPDATE tpv_lineasgruposmultitransstock SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
			AQUtil.execSql("UPDATE eg_lineasreposicioninicial SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		}

		AQUtil.execSql("UPDATE eg_stockspacks SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("UPDATE movistock SET barcode = '" + aAA[i]["barCodeBueno"] + "' WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);

		var qS = new FLSqlQuery("", cx);
		qS.setSelect("codalmacen, idstock");
		qS.setFrom("stocks");
		qS.setWhere("barcode = '" + aAA[i]["barCodeMalo"] + "'");

		if (!qS.exec()) {
			sys.errorMsgBox(sys.translate("Falló la consulta de duplicados para el barcode %1").arg(aAA[i]["barCodeMalo"]));
			continue;
		}

		while(qS.next()){
			idStockBueno = AQUtil.sqlSelect("stocks", "idstock", "barcode = '" + aAA[i]["barCodeBueno"] + "' AND codalmacen = '" + qS.value("codalmacen") + "'");
			idStockMalo = qS.value("idstock");
			if(!idStockBueno){
				var oArticulo = new Object;
        		oArticulo["barcode"] = aAA[i]["barCodeBueno"];
        		oArticulo["referencia"] = AQUtil.sqlSelect("atributosarticulos", "referencia", "barcode = '" + aAA[i]["barCodeBueno"] + "'", "atributosarticulos", cx);
				idStockBueno = flfactalma.iface.pub_crearStock(qS.value("codalmacen"), oArticulo);
			}

			AQUtil.execSql("UPDATE movistock SET idstock = " + idStockBueno + " WHERE idstock = " + idStockMalo, cx);
			AQUtil.execSql("UPDATE lineasregstocks SET idstock = " + idStockBueno + " WHERE idstock = " + idStockMalo, cx);
			AQUtil.execSql("UPDATE mostrarlistadoms SET idstock = " + idStockBueno + " WHERE idstock = " + idStockMalo, cx);
			AQUtil.execSql("UPDATE sincrostockstienda SET idstock = " + idStockBueno + " WHERE idstock = " + idStockMalo, cx);
			AQUtil.execSql("UPDATE stocksptes SET idstock = " + idStockBueno + " WHERE idstock = " + idStockMalo, cx);
			if(cx == "default"){
				AQUtil.execSql("UPDATE eg_sincrostockweb SET idstock = " + idStockBueno + " WHERE idstock = " + idStockMalo, cx);
				AQUtil.execSql("UPDATE eg_sumamovtransito SET idstock = " + idStockBueno + " WHERE idstock = " + idStockMalo, cx);
				AQUtil.execSql("UPDATE eg_sumamovtransitottd SET idstock = " + idStockBueno + " WHERE idstock = " + idStockMalo, cx);
				AQUtil.execSql("UPDATE eg_sumamovtransitotto SET idstock = " + idStockBueno + " WHERE idstock = " + idStockMalo, cx);
				AQUtil.execSql("UPDATE eg_stocksfecha SET idstock = " + idStockBueno + " WHERE idstock = " + idStockMalo, cx);
				AQUtil.execSql("UPDATE eg_stockspacks SET idstock = " + idStockBueno + " WHERE idstock = " + idStockMalo, cx);
			}
		}

		AQUtil.execSql("DELETE FROM atributosarticulos WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
		AQUtil.execSql("DELETE FROM stocks WHERE barcode = '" + aAA[i]["barCodeMalo"] + "'", cx);
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	return true;
}

function elgansoCtr_crearXSDTlog(dirTlog, nombreFicheroXsd)
{
	var _i = this.iface;

	var ficheroTlog = new File(dirTlog + "/" + nombreFicheroXsd);
	ficheroTlog.open(File.WriteOnly);
	ficheroTlog.write("<xs:schema attributeFormDefault='unqualified' elementFormDefault='qualified' xmlns:xs='http://www.w3.org/2001/XMLSchema'>\n<xs:element name='POSLog'>\n<xs:complexType>\n<xs:sequence>\n<xs:element name='Transaction' maxOccurs='unbounded' minOccurs='0'>\n<xs:complexType>\n<xs:sequence>\n<xs:element minOccurs='0' ref='ixretail:OrganizationId'/>\n<xs:element ref='ixretail:RetailStoreId'/>\n<xs:element ref='ixretail:WorkstationID'/>\n<xs:element ref='ixretail:Date'/>\n<xs:element ref='ixretail:TillID'/>\n<xs:element minOccurs='0' ref='ixretail:SequenceNumber'/>\n<xs:element minOccurs='0' ref='ixretail:BusinessDayDate'/>\n<xs:element minOccurs='0' ref='ixretail:BeginDateTime'/>\n<xs:element minOccurs='0' ref='ixretail:EndDateTime'/>\n<xs:element minOccurs='0' ref='ixretail:OperatorID'/>\n<xs:element minOccurs='0' ref='ixretail:LoyaltyCardNumberId'/>\n<xs:element minOccurs='0' ref='ixretail:CurrencyCode'/>\n<xs:element minOccurs='0' ref='ixretail:total'/>\n<xs:element minOccurs='0' ref='ixretail:totalTaxableAmount'/>\n<xs:element minOccurs='0' ref='ixretail:totalAmount'/>\n<xs:element minOccurs='0' ref='ixretail:PosTransactionProperties'>\n<xs:complexType>\n<xs:sequence>\n<xs:element ref='ixretail:PosTransactionPropertyCode'/>\n<xs:element ref='ixretail:PosTransactionPropertyValue'/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\n<xs:element ref='ixretail:RetailTransaction' minOccurs='0'>\n<xs:complexType>\n<xs:sequence>\n<xs:element ref='ixretail:LineItem' maxOccurs='unbounded' minOccurs='0'>\n<xs:complexType>\n<xs:sequence>\n<xs:element ref='ixretail:LineItemAction'/>\n<xs:element ref='ixretail:SequenceNumber'/>\n<xs:element ref='ixretail:BeginDateTime'/>\n<xs:element ref='ixretail:EndDateTime'/>\n<xs:element name='Layaway'>\n<xs:complexType>\n<xs:sequence>\n<xs:element ref='ixretail:AccountNumber'/>\n<xs:element ref='ixretail:ItemID'/>\n<xs:element ref='ixretail:SKU'/>\n<xs:element ref='ixretail:Description'/>\n<xs:element ref='ixretail:PriceWithoutTax'/>\n<xs:element ref='ixretail:UnitListPrice'/>\n<xs:element ref='ixretail:RegularSalesUnitPrice'/>\n<xs:element ref='ixretail:ActualSalesUnitPrice'/>\n<xs:element ref='ixretail:PercentageDiscount'/>\n<xs:element ref='ixretail:LineDiscount'/>\n<xs:element ref='ixretail:ExtendedAmount'/>\n<xs:element ref='ixretail:Quantity'/>\n<xs:element ref='ixretail:Associate'>\n<xs:complexType>\n<xs:sequence>\n<xs:element ref='ixretail:AssociateID'/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\n<xs:element ref='ixretail:PercentageOfItem'>\n<xs:complexType>\n<xs:sequence>\n<xs:element ref='ixretail:AssociateIDPercentage'/>\n<xs:element ref='ixretail:Percentage'/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\n<xs:element name='Tax'>\n<xs:complexType>\n<xs:sequence>\n<xs:element ref='ixretail:TaxAuthority'/>\n<xs:element ref='ixretail:TaxableAmount'/>\n<xs:element ref='ixretail:Amount'/>\n<xs:element ref='ixretail:Percent'/>\n<xs:element ref='ixretail:TaxLocationId'/>\n<xs:element ref='ixretail:TaxGroupId'/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\n<xs:element ref='ixretail:GiftReceiptFlag'/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\n<xs:element ref='ixretail:DiscountQuantity'/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\n<xs:element minOccurs='0' ref='ixretail:Payments'>\n<xs:complexType>\n<xs:sequence>\n<xs:element ref='ixretail:totalTenderAmount'/>\n<xs:element ref='ixretail:CashPayment'/>\n<xs:element ref='ixretail:BankCardPayment'/>\n<xs:element ref='ixretail:GiftCertificatePayment'/>\n<xs:element ref='ixretail:GiftCertificatePaymentNumber'/>\n<xs:element ref='ixretail:loyaltyCard'/>\n<xs:element ref='ixretail:LoyaltyCardNumber'/>\n<xs:element ref='ixretail:totalTransactionAmount'/>\n<xs:element ref='ixretail:TenderType'/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\n<xs:element  minOccurs='0' ref='ixretail:Customer'>\n<xs:complexType>\n<xs:sequence>\n<xs:element ref='ixretail:Name'/>\n<xs:element ref='ixretail:ActiveFlag'/>\n<xs:element ref='ixretail:Address'>\n<xs:complexType>\n<xs:sequence>\n<xs:element ref='ixretail:AddressLine1'/>\n<xs:element ref='ixretail:City'/>\n<xs:element ref='ixretail:Territory'/>\n<xs:element ref='ixretail:PostalCode'/>\n<xs:element ref='ixretail:Country'/>\n<xs:element ref='ixretail:Contact'/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\n<xs:element ref='ixretail:Telephone'>\n<xs:complexType>\n<xs:sequence>\n<xs:element ref='ixretail:FullTelephoneNumber'/>\n<xs:element ref='ixretail:ContactFlag'/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\n<xs:element ref='ixretail:eMail'/>\n<xs:element ref='ixretail:CustomerID'/>\n<xs:element ref='ixretail:AlternateID'/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\n<xs:element ref='ixretail:EmployeeSaleId'/>\n<xs:element minOccurs='0' ref='ixretail:LayawaySetupTotal'/>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\n</xs:sequence>\n</xs:complexType>\n</xs:element>\n</xs:schema>");
	ficheroTlog.close();

	return true;
}


function elgansoCtr_revisarHuecosFacturaTienda()
{
	var _i = this.iface;

	var dialog = new Dialog(sys.translate("Introduzca el ejercicio y la fecha a partir de la cual quiere comprobar si hay huecos en las facturas."));
	dialog.OKButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var hoy = new Date();
	var fecha = new DateEdit;
	fecha.date = hoy;
	fecha.label = sys.translate("Fecha:");
	dialog.add(fecha);

	var codEjercicio = new LineEdit;
	codEjercicio.label = "Ejercicio:";
	dialog.add(codEjercicio);

	if (!dialog.exec()) {
		return false;
	}

	var rellenarHuecos = flfactppal.iface.preguntaMsg("¿Rellenar huecos?", "info", this, MessageBox.Yes, MessageBox.No) == MessageBox.Yes;

	_i.revisionSeriesFacturasTienda(fecha.date, codEjercicio.text, rellenarHuecos);

	return true;
}

function elgansoCtr_envioEmailHuecosFactura(listaHuecos)
{
	var _i = this.iface;

	var datosMail = [];
	datosMail["subject"] = sys.translate("Huecos de facturas de ventas.");
	datosMail["body"] = listaHuecos;
	datosMail["from"] = flfactppal.iface.pub_valorDefectoEmpresa("email");
	datosMail["to"] = flfact_tpv.iface.pub_valorDefectoTPV("emaillogs");
	datosMail["server"] = flfact_tpv.iface.pub_valorDefectoTPV("hostcorreosaliente");
	flfact_tpv.iface.pub_enviarMailLog(datosMail);

	return true;
}

function elgansoCtr_genFacturaEciEdi()
{
	var _i = this.iface;

	var silent = true;

	var codEjercicio = "";
	var hoy = new Date();
  
   	var where = AQUtil.sqlSelect("param_parametros","valor","nombre = 'WHERE_FRA_ECIS'");
   	if(!where || where == "") {
   		flfactppal.iface.ponMsgError(sys.translate("Debe establecer los parametros de configuracion en el modulo de sistema."),"warn",this);     
		return false;	
   	}
	
	var ediIface = formedi_esquemas.iface;
	var msg = sys.translate("Proceso finalizado") + "\n\n";

   	if(AQUtil.sqlSelect("facturascli","count(*)",where) > 0) {
		if(!ediIface.pub_genEdiFile("CABFAC_ECIS", where, silent)) {
			return false;
		}
		if(!ediIface.pub_genEdiFile("LINFAC_ECIS", where, silent)) {
			return false;
		}
		if(!ediIface.pub_genEdiFile("OBSLFAC_ECIS", where, silent)) {
			return false;
		}
		//msg += ediIface.pub_genEdiFile("IMPFAC_ECIS", where, silent) + "\n";

		if(!AQUtil.sqlUpdate("facturascli","enviadoeciedicom","true",where)) {
			return false;
		}
	}

	return true;
}

function elgansoCtr_genBarcodesAmazon()
{
	var _i = this.iface;

	var preFijoBarcode = flfactalma.iface.pub_valorDefectoAlmacen("prefijobarcode");
	var barCodeNuevo = "";
	var dc = "";

	var q = new FLSqlQuery();
	q.setSelect("barcodeviejo");
	q.setFrom("barcodesamazon");
	q.setWhere("barcodenuevo IS NULL ORDER BY barcodeviejo");
	
	if (!q.exec()) {
		return false;
	}

	while(q.next()){
		barCodeNuevo = preFijoBarcode + q.value("barcodeviejo").toString().mid(7,5); 
		dc = formRecordarticulos.iface.digitoControlEAN(barCodeNuevo);

		barCodeNuevo = barCodeNuevo + dc.toString();

		debug("////////////////////// barcodeViejo: " + q.value("barcodeviejo").toString());
		debug("////////////////////// dc: " + dc);
		debug("////////////////////// barCodeNuevo: " + barCodeNuevo);

		AQUtil.execSql("UPDATE barcodesamazon SET barcodenuevo = '" + barCodeNuevo + "' WHERE barcodeviejo = '" + q.value("barcodeviejo") + "'");

		barCodeNuevo = "";
		dc = "";		
	}

	return true;
}

function elgansoCtr_firmarFacturasSAFT()
{
	var _i = this.iface;

	var hoy = new Date();
	var empresaPortugal = AQUtil.sqlSelect("facturac_general","idempresaedicom","1=1");
	if(!empresaPortugal) {
		return false;
	}

	var codEjercicio = AQUtil.sqlSelect("ejercicios", "codejercicio", "idempresa = 7 AND fechainicio <= '" + hoy + "' AND fechafin >= '" + hoy + "'");

	var curFactura = new FLSqlCursor("facturascli");
	curFactura.select("codejercicio = '" + codEjercicio + "' and tpv = true and (hashedicom is null or hashedicom = '')");

	var curSaft = new FLSqlCursor("eg_saftportugal");
	while(curFactura.next()){
		curFactura.setModeAccess(curFactura.Edit);
		curFactura.refreshBuffer();
		curSaft.select("codcomanda = '" + curFactura.valueBuffer("codigo") + "'");
		if(curSaft.first()){
			curSaft.setModeAccess(curSaft.Browse);
			curSaft.refreshBuffer();
			curFactura.setValueBuffer("hashedicom", curSaft.valueBuffer("hashedicom"));
			curFactura.setValueBuffer("certificadoedicom", curSaft.valueBuffer("certificadoedicom"));
			curFactura.setValueBuffer("codfraedicom", curSaft.valueBuffer("codfraedicom"));
		}
		if(!curFactura.commitBuffer()){
			continue;
		}
	}

	return true;
}

function elgansoCtr_revisarArticulosIdl()
{
	var _i = this.iface;

	var fecha = new Date();
	var hora = fecha.toString().right(8);

	AQUtil.sqlUpdate("idl_articulos", ["fecha", "hora", "ok", "idlog", "error"], [fecha, hora, false, "NULL", "NULL"], "referencia IN (SELECT i.referencia FROM idl_articulos i INNER JOIN atributosarticulos aa ON i.referencia = aa.referencia WHERE (i.fecha < aa.fechamod) OR (i.fecha = aa.fechamod and i.hora <= aa.horamod) GROUP BY i.referencia)");

	return true;
}

function elgansoCtr_dameHoraXMinutosAntes(minutos)
{
	var _i = this.iface;

	var t = AQUtil.quickSqlSelect("empresa", "current_time + (" + minutos + " * interval '1 minute')", "1 = 1");
	t = t.toString().right(8)
	return t;
}

function elgansoCtr_comprobarVentasSincronizadas()
{
	var _i = this.iface;

	var fecha = flfactppal.iface.pub_dameFechaActual();
	var desde = AQUtil.addDays(fecha, -7);
	var hora = _i.dameHoraXMinutosAntes(-60);

	var dialog = new Dialog;
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");


	var gB = new GroupBox;
	gB.title = sys.translate("Tiendas a comprobar");
	dialog.add( gB );
	var tiendas = new LineEdit;
	gB.add( tiendas );

	var dFechaD = new DateEdit;
	dFechaD.date = desde;
	dFechaD.label = sys.translate("Desde:");
	gB.add(dFechaD);

	var dFecha = new DateEdit;
	dFecha.date = fecha;
	dFecha.label = sys.translate("Hasta:");
	gB.add(dFecha);

	var dHora = new TimeEdit;
	dHora.time = hora;	
	dHora.label = sys.translate("Hora:");
	gB.add(dHora);

	if(!dialog.exec() ) {
		return;
	}
	var tiendas = tiendas.text;
	fecha = dFecha.date;
	desde = dFechaD.date;
	hora = dHora.time;

	debug("fecha " + fecha);
	debug("hora " + hora);

	msg = _i.comprobarVentasSincro(tiendas,desde,fecha,hora);

	if(msg && msg != "") {
		sys.infoMsgBox(msg);
	}
	else {
		sys.infoMsgBox("No se hizo ninguna comprobación");
	}

	return true;
}

function elgansoCtr_comprobarVentasSincro(tiendas,desde,fecha,hora)
{
	var _i = this.iface;
	var msg = "";

	if(!fecha || fecha == "") {
		fecha = flfactppal.iface.pub_dameFechaActual();
	} 
	if(!hora || hora == "") {
		hora = _i.dameHoraXMinutosAntes(-60);
	}
	
	if(!desde || desde == "") {
		desde = AQUtil.addDays(fecha, -7);
	}

	if (!formtpv_tiendas.iface.abreLogEsquema("COMPROBAR_VENTAS_OBJETO")) {
		return false;
	}

	fecha = fecha.toString().left(10);
	fechaIni = desde.toString().left(10);

	hora = hora.toString().right(8);

	formLOG.appendTextToLogFile("COMPROBAR_VENTAS_OBJETO", sys.translate("Comprobando ventas desde %1 hasta %2 a las %3").arg(fechaIni).arg(fecha).arg(hora));

	//formtpv_tiendas.iface.log("COMPROBACION DE SINCRO " + fecha + " - " + hora);
	if(!tiendas) {
		formLOG.appendTextToLogFile("COMPROBAR_VENTAS_OBJETO", sys.translate("No ha especificado las tiendas a comprobar"));
		msg += "No ha especificado las tiendas a comprobar";
		//formtpv_tiendas.iface.log("No ha especificado las tiendas a comprobar");
		return msg;
	}

	var listaTiendas = formtpv_tiendas.iface.dameTiendasSincro(tiendas);
	if(!listaTiendas || listaTiendas == "") {
		msg += "No se encontraron las tiendas a comprobar";
		formLOG.appendTextToLogFile("COMPROBAR_VENTAS_OBJETO", sys.translate("No se encontraron las tiendas a comprobar"));
		//formtpv_tiendas.iface.log("No se encontraron las tiendas a comprobar");
		return msg;	
	}
	var aTiendas = listaTiendas.split(",");
	


	var numCoNoSinc = AQUtil.sqlSelect("so_comandassincro", "count(*)", "fecha >= '" + fechaIni + "' AND estado = 'ERROR'");

	if(numCoNoSinc > 0) {
		msg += "Hay " + numCoNoSinc + " comandas en estado ERROR\n";
		formLOG.appendTextToLogFile("COMPROBAR_VENTAS_OBJETO", sys.translate("Hay %1 comandas en estado ERROR").arg(numCoNoSinc));
		//formtpv_tiendas.iface.log("Hay " + numCoNoSinc + " comandas que no han podido sincronizarse");;
	}

	var ventasC = 0;
	var ventasT = 0;
	var lineasC = 0;
	var lineasT = 0;
	var pagosC = 0;
	var pagosT = 0;

	var oTienda = new Object();
	var codTienda = "";
	for (var i = 0; i < aTiendas.length; i++) {
		codTienda = aTiendas[i];
		formLOG.appendTextToLogFile("COMPROBAR_VENTAS_OBJETO", sys.translate("Tienda %1 ------------------------- %2 de %3").arg(codTienda).arg(i).arg(aTiendas.length));
		
		oTienda.codTienda = codTienda;
		if (!formtpv_tiendas.iface.conectar(codTienda, true)) {
			msg += "Error al conectar con la tienda " + codTienda + "\n";
			formLOG.appendTextToLogFile("COMPROBAR_VENTAS_OBJETO", sys.translate("Error al conectar con la tienda %1").arg(codTienda));
			//formtpv_tiendas.iface.log("Error al conectar con la tienda " + codTienda);
		}

		ventasC = parseFloat(AQUtil.sqlSelect("tpv_comandas","count(*)","((fecha >= '" + fechaIni + "' AND fecha < '" + fecha + "') OR (fecha = '" + fecha + "' AND hora < '" + hora + "')) AND codtienda = '" + codTienda + "'"));
		ventasT = parseFloat(AQUtil.sqlSelect("tpv_comandas","count(*)","((fecha >= '" + fechaIni + "' AND fecha < '" + fecha + "') OR (fecha = '" + fecha + "' AND hora < '" + hora + "')) AND codtienda = '" + codTienda + "'","tpv_comandas",codTienda));
		if(ventasC != ventasT) {
			msg += codTienda + ": Num Ventas. Central: " + ventasC + " Tienda: " + ventasT + "\n";
			formLOG.appendTextToLogFile("COMPROBAR_VENTAS_OBJETO", sys.translate("%1: Num Ventas. Central: %2 Tienda: %3").arg(codTienda).arg(ventasC).arg(ventasT));
		}

		lineasC = parseFloat(AQUtil.sqlSelect("tpv_lineascomanda","count(*)","codtienda = '" + codTienda + "' AND idtpv_comanda IN (SELECT idtpv_comanda FROM tpv_comandas WHERE (fecha >= '" + fechaIni + "' AND fecha < '" + fecha + "') OR (fecha = '" + fecha + "' AND hora < '" + hora + "'))"));
		lineasT = parseFloat(AQUtil.sqlSelect("tpv_lineascomanda","count(*)","codtienda = '" + codTienda + "' AND idtpv_comanda IN (SELECT idtpv_comanda FROM tpv_comandas WHERE (fecha >= '" + fechaIni + "' AND fecha < '" + fecha + "') OR (fecha = '" + fecha + "' AND hora < '" + hora + "'))","tpv_lineascomanda",codTienda));
		if(lineasC != lineasT) {
			msg += codTienda + ": Num Lineas. Central: " + lineasC + " Tienda: " + lineasT + "\n";
			formLOG.appendTextToLogFile("COMPROBAR_VENTAS_OBJETO", sys.translate("%1: Num Lineas. Central: %2 Tienda: %3").arg(codTienda).arg(lineasC).arg(lineasT));
			//formtpv_tiendas.iface.log(codTienda + ": Num Lineas. Central: " + lineasC + " Tienda: " + lineasT);
		}

		pagosC = parseFloat(AQUtil.sqlSelect("tpv_pagoscomanda","count(*)","codtienda = '" + codTienda + "' AND idtpv_comanda IN (SELECT idtpv_comanda FROM tpv_comandas WHERE (fecha >= '" + fechaIni + "' AND fecha < '" + fecha + "') OR (fecha = '" + fecha + "' AND hora < '" + hora + "'))"));
		pagosT = parseFloat(AQUtil.sqlSelect("tpv_pagoscomanda","count(*)","codtienda = '" + codTienda + "' AND idtpv_comanda IN (SELECT idtpv_comanda FROM tpv_comandas WHERE (fecha >= '" + fechaIni + "' AND fecha < '" + fecha + "') OR (fecha = '" + fecha + "' AND hora < '" + hora + "'))","tpv_pagoscomanda",codTienda));
		if(pagosC != pagosT) {
			msg += codTienda + ": Num Lineas. Central: " + pagosC + " Tienda: " + pagosT + "\n";
			//formtpv_tiendas.iface.log(codTienda + ": Num Lineas. Central: " + pagosC + " Tienda: " + pagosT);
			formLOG.appendTextToLogFile("COMPROBAR_VENTAS_OBJETO", sys.translate("%1: Num Pagos. Central: %2 Tienda: %3").arg(codTienda).arg(pagosC).arg(pagosT));
		}

		formtpv_tiendas.iface.desconectar(codTienda);
	}

	if(!msg || msg == "") {
		msg += "Está todo sincronizado correctamente";
		//formtpv_tiendas.iface.log("Está todo sincronizado correctamente");
		formLOG.appendTextToLogFile("COMPROBAR_VENTAS_OBJETO", sys.translate("Está todo sincronizado correctamente"));
	}
	else {
		formLOG.appendTextToLogFile("COMPROBAR_VENTAS_OBJETO", sys.translate("Proceso finalizado"));
	}

	debug(msg);
	return msg;
}

function elgansoCtr_dameNombreFicheroLog(prefijo)
{
	var _i = this.iface;
	var cursor = this.cursor()
							 
	var fecha = new Date();
	var dia = fecha.getDate().toString();
	if(dia.length < 2){
		dia = "0" + dia;
	}
	var mes = fecha.getMonth().toString();
	if(mes.length < 2){
		mes = "0" + mes;
	}
	var anyo = fecha.getYear().toString();
	var hora = fecha.getHours().toString();
	if(hora.length < 2){
		hora = "0" + hora;
	}
	var minuto = fecha.getMinutes().toString();
	if(minuto.length < 2){
		minuto = "0" + minuto;
	}

	var nombreFichero = prefijo + dia + mes + anyo + hora + minuto;

	return nombreFichero;
}

function elgansoCtr_crearTrgTlog(dirTlog, nombreFicheroTrg)
{
	var _i = this.iface;

	var ficheroTlog = new File(dirTlog + "/" + nombreFicheroTrg);
	ficheroTlog.open(File.WriteOnly);
	ficheroTlog.write(".");
	ficheroTlog.close();

	return true;
}

function elgansoCtr_creaFicheroBarcodes(oParam)
{
	var dialog = new Dialog;
	dialog.caption = "Seleccione opción de prefijo:";
	dialog.okButtonText = sys.translate("OK");
	dialog.cancelButtonText = sys.translate("Cancelar");
	
	var bgroup = new GroupBox;
	dialog.add(bgroup);
	
	var opt1 = new RadioButton;
	opt1.text = sys.translate("Escribir prefijo de 12 caracteres con el que empezar");
	opt1.checked = false;
	bgroup.add(opt1);
	
	var opt2 = new RadioButton;
	opt2.text = sys.translate("Continuar con la secuencia de eg_tpv_tarjetasregalo");
	opt2.checked = true;
	bgroup.add(opt2);
	
	if (!dialog.exec())
		return true;

	var prefijo = "";			
	if (opt1.checked == true) {
		prefijo = Input.getText(sys.translate("Prefijo de 12 dígitos"));
	}
	else {
		if (opt2.checked == true) {
			prefijo = AQUtil.sqlSelect("eg_tpv_tarjetasregalo", "MAX(barcode)", "1=1");
			prefijo = prefijo.toString().left(12);
			prefijo = parseFloat(prefijo) + 1;
		}
	}

	if (!prefijo) {
		return false;
	}
	if (prefijo.toString().length != 12) {
		sys.warnMsgBox(sys.translate("La longitud no es 12") );
		return false;
	}
	var filename = FileDialog.getSaveFileName( "*.*", sys.translate("Guardar fichero de barcodes"));
	if (!filename) {
		return false;
	}
	var f = new File(filename);	
	try {
		f.open(File.WriteOnly);
	} catch(e) {
		sys.warnMsgBox(sys.translate("Error al abrir el fichero:\n%1").arg(filename));
		return false;
	}

	var numBarcodes = Input.getNumber("Cantidad de barcodes");
	var barCode, aux, dc, n = parseFloat(prefijo);

	var curBarCodesTarjeta = new FLSqlCursor("eg_tpv_tarjetasregalo");	
	
	AQUtil.createProgressDialog(sys.translate("Generando EAN 13..."), numBarcodes)
	for (var i = 0; i < numBarcodes; i++) {
		AQUtil.setProgress(i);
		aux = flfactppal.iface.pub_cerosIzquierda(n, 12);
		dc = formRecordarticulos.iface.digitoControlEAN(aux.toString());
		barCode = aux.toString() + dc.toString();
		
		f.writeLine(barCode);
		
		curBarCodesTarjeta.setModeAccess(curBarCodesTarjeta.Insert);
		curBarCodesTarjeta.refreshBuffer();
		curBarCodesTarjeta.setValueBuffer("barcode", barCode);
		if (!curBarCodesTarjeta.commitBuffer()){
			AQUtil.destroyProgressDialog();
			return false;	
		}

		n++;
	}

	AQUtil.destroyProgressDialog();
	f.close();
	return true;
}

function elgansoCtr_insertRegularizacionesCeroDic2017()
{
	var dictCriterios = {};
	dictCriterios.tdbFamilias = "codfamilia";
	dictCriterios.tdbSubfamilias = "codsubfamilia";
	dictCriterios.tdbGruposTC = "codgrupotc";
	dictCriterios.tdbTiposPrenda = "codtipoprenda";
	dictCriterios.tdbAnnosTC = "anno";
	dictCriterios.tdbTemporadas = "codtemporada";
	dictCriterios.tdbGruposModa = "codgrupomoda";
	dictCriterios.lblReferencia = "referencia";

	var q = new FLSqlQuery();
	q.setSelect("filtrotablas, idsincro, fecha, hora, codalmacen");
	q.setFrom("eg_inventarios");
	q.setWhere("enviado = false and stocknegativo = false and total = true");
	
	if (!q.exec()) {
		return false;
	}

	var sql;
	var sqlComponentes;
	var filtro;
	var filtroTablas;
	var idSincro;
	var fecha;
	var hora;
	var codAlmacen;

	while(q.next()){
		filtro = "";
		filtroTablas = q.value("filtrotablas");
		idSincro = q.value("idsincro");
		fecha = q.value("fecha");
		hora = q.value("hora").toString().right(8);
		codAlmacen = q.value("codalmacen");

		if (filtroTablas && filtroTablas != "") {
			var aTablas = filtroTablas.split(";");
			for (var i = 0; i < aTablas.length; i++) {
				debug("Procesando " + aTablas[i]);
				var aValores = aTablas[i].split(",");
				if (aValores.length < 2) {
					continue;
				}

				if (!(aValores[0] in dictCriterios)) {
					continue;
				}

				filtro += " AND a." + dictCriterios[aValores[0]] + " IN (";
				for (var j = 1; j < aValores.length; j++) {
					filtro += (j > 1) ? ", " : "";
					filtro += ("'" + aValores[j] + "'");
				}

				filtro += ")";
			}
		}

		filtro = "l.id IS NULL AND al.codalmacen = '" + codAlmacen + "'" + filtro; 
		//debug("filtro: " + filtro);

		sql = "INSERT INTO lineasregstocks (idstock, fecha, cantidadini, cantidadfin, motivo, referencia, talla, barcode, hora, sincronizado, ptecalculo, egidsincroinv, desarticulo) (SELECT s.idstock, '" + fecha + "', s.cantidad, 0, 'insertRegularizacionesCeroDic2017', s.referencia, s.talla, s.barcode, '" + hora + "', true, false, '" + idSincro + "', a.descripcion FROM stocks s INNER JOIN atributosarticulos aa on s.barcode = aa.barcode INNER JOIN articulos a ON s.referencia = a.referencia INNER JOIN almacenes al on s.codalmacen = al.codalmacen left outer join lineasregstocks l on (s.idstock = l.idstock AND l.egidsincroinv = '" + idSincro + "') WHERE " + filtro + ");UPDATE eg_inventarios SET enviado = true where idsincro = '" + idSincro + "';";

		debug("////////////////sql: " + sql);
		AQUtil.execSql(sql);

		sqlComponentes = "INSERT INTO lineasregstocks (idstock, fecha, cantidadini, cantidadfin, motivo, referencia, talla, barcode, hora, sincronizado, ptecalculo, egidlineapack, desarticulo,referenciapack, idstockpack) (SELECT s.idstock, '" + fecha + "', s.cantidad, 0, 'insertRegularizacionesCeroDicPack2017', s.referencia, s.talla, s.barcode, '" + hora + "', true, false, l.id, a.descripcion, l.referencia, ep.idstockpack FROM lineasregstocks l INNER JOIN articuloscomp ac ON ac.refcompuesto = l.referencia INNER JOIN stocks s ON (ac.barcode = s.barcode and s.codalmacen = '" + codAlmacen + "') INNER JOIN articulos a ON s.referencia = a.referencia INNER JOIN eg_stockspacks ep on (s.idstock = ep.idstock and ep.referenciapack = l.referencia) INNER JOIN articulos a2 on l.referencia = a2.referencia WHERE l.egidsincroinv = '" + idSincro + "' and a.stockcomp = false and a2.stockcomp = true)";
		AQUtil.execSql(sqlComponentes);

	}

	return true;
}

function elgansoCtr_recalcularRegistrosJornadas()
{
	var _i = this.iface;

	var dialog = new Dialog;
	dialog.caption = "Introduzca el código de la tienda a corregir";
	dialog.okButtonText = sys.translate("OK");
	dialog.cancelButtonText = sys.translate("Cancelar");
	
	var codTienda = new LineEdit;
	codTienda.label = "Introduzca el código de la tienda a corregir";
	dialog.add(codTienda);
	
	if (!dialog.exec()) {
		return false;
	}

	var listaTiendas = formtpv_tiendas.iface.dameTiendasSincro(codTienda.text);
	var idJornada;
	var idTramo;
	
	var aTiendas = listaTiendas.split(",");
	
	for (var i = 0; i < aTiendas.length; i++) {
		var q = new FLSqlQuery();
		q.setSelect("j.idjornada,t.idtramo");
		q.setFrom("cp_tramosjornada t inner join cp_jornadas j on (substring(t.idsincro from 1 for (select position('/' in t.idsincro) - 1)) = j.idsincro)");
		q.setWhere("t.idjornada <> j.idjornada and t.idsincro is not null and t.idsincro <> '' and t.idsincro <> 'NULL' and t.idsincro LIKE '%/%' AND j.codtienda = '" + aTiendas[i] + "'");
		debug(q.sql())
		if (!q.exec()) {
			return false;
		}

		flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Recalculando IDJORNADA de los tramos de jornadas."), q.size());
		var p = 0;
		while(q.next()){
			AQUtil.setProgress(p++);
			idTramo = q.value("t.idtramo");
			idJornada = q.value("j.idjornada");

			if (!AQUtil.execSql("UPDATE cp_tramosjornada SET idjornada = " + idJornada + " WHERE idtramo = '" + idTramo + "'")) {
				continue;
			}
		}

		sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	}

	return true;
}

function elgansoCtr_crearFacturaAbonoListado()
{
	var _i = this.iface;

	var dialog = new Dialog;
	dialog.okButtonText = sys.translate("Aceptar");
	dialog.cancelButtonText = sys.translate("Cancelar");

	var gB = new GroupBox;
	gB.title = sys.translate("Pegue el listado de facturascli a crear su rectificativas");
	dialog.add( gB );
	var teTabla = new TextEdit;
	gB.add( teTabla );

	if(!dialog.exec() ) {
		return;
	}
	var texto = teTabla.text;
	
  	var aL = texto.split("\n");
  	if (!aL || aL.length <= 1) {
    	return;
  	}
  	var nL = aL.length - 1;

	var qLineas = new FLSqlQuery();
	qLineas.setSelect("f.codigo, f.idfactura, l.idlinea");
	qLineas.setFrom("lineasfacturascli l inner join facturascli f on l.idfactura = f.idfactura");
	qLineas.setWhere("f.codigo in ('" + aL.join("','") + "') ORDER BY f.codigo, f.idfactura, l.idlinea");

	debug("////////////////// consulta qLineasBonos: " + qLineas.sql());

	if(!qLineas.exec()) {
		return false;
	}

	if(qLineas.size() <= 0){
		sys.infoMsgBox(sys.translate("No hay registros que cumplan los filtros."));
		return true;
	}

	var idFactura = false;
	var _f = formfacturascli.iface;

  	if (!_f.curFactura) {
    	_f.curFactura = new FLSqlCursor("facturascli");
  	}

  	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Generando facturas rectificativas"), qLineas.size());
	var p = 0;
	var hoy = new Date();

	var idFacturaAnt = false;
	while (qLineas.next()) {
		AQUtil.setProgress(p++);

		if (idFacturaAnt != qLineas.value("f.idfactura")) {
			if (idFactura) {
				if (!_i.totalizaFactura(idFactura)) {
					sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
					return false;
				}
			}
	  		_f.curFactura.setModeAccess(_f.curFactura.Insert);
	  		_f.curFactura.refreshBuffer();

	  		var curFacturaOriginal = new FLSqlCursor("facturascli");
			curFacturaOriginal.select("idfactura = " + qLineas.value("f.idfactura"));
			if(!curFacturaOriginal.first()) {
				continue;
			}
			curFacturaOriginal.setModeAccess(curFacturaOriginal.Browse);
			curFacturaOriginal.refreshBuffer();

	  		if (!_f.copiadatosFactura(curFacturaOriginal)) {
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	    		return false;
	  		}
			_f.curFactura.setValueBuffer("idfacturarect", qLineas.value("f.idfactura"));
			_f.curFactura.setValueBuffer("deabono", true);
			_f.curFactura.setValueBuffer("codigorect", qLineas.value("f.codigo"));
			_f.curFactura.setValueBuffer("tpv", true);
			_f.curFactura.setValueBuffer("observaciones", sys.translate("Factura rectificativa %1").arg(qLineas.value("f.codigo")));

	  		if (!_f.curFactura.commitBuffer()) {
				sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
	    		return false;
	  		}
	  
	  		idFactura = _f.curFactura.valueBuffer("idfactura");
	  		idFacturaAnt = qLineas.value("f.idfactura");
		}  
  		if (!_i.copiarLineaRecAbonoListado(qLineas, idFactura)) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
    		return false;
  		}
  	}
	if (idFactura) {
		if (!_i.totalizaFactura(idFactura)) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	return true;
}


function elgansoCtr_totalizaFactura(idFactura)
{
	debug("elgansoCtr_totalizaFactura " + idFactura);
	var _f = formfacturascli.iface;
	_f.curFactura.select("idfactura = " + idFactura);

	if (!_f.curFactura.first()) {
		return false;
	}

	if (!formRecordfacturascli.iface.pub_actualizarLineasIva(_f.curFactura)) {
		return false;
	}

	_f.curFactura.setModeAccess(_f.curFactura.Edit);
	_f.curFactura.refreshBuffer();

	formalbaranescli.iface.curFactura = _f.curFactura;
	debug("elgansoCtr_totalizaFactura " + idFactura + " TOTALIZANDO " + _f.curFactura.valueBuffer("codigo"));
	if (!formalbaranescli.iface.totalesFactura()) {
    	return false;
	}


	if (!_f.curFactura.commitBuffer()) {
		return false;
	}
	debug("elgansoCtr_totalizaFactura " + idFactura + " OK");
	return true;
}


function elgansoCtr_copiarLineaRecAbonoListado(qLineas, idFactura)
{
	var _i = this.iface;

	var curLineaOriginal = new FLSqlCursor("lineasfacturascli");
	var curLineaRect = new FLSqlCursor("lineasfacturascli");
	var aCamposLinea = AQUtil.nombreCampos("lineasfacturascli");
  	var totalCampos = aCamposLinea[0];

	curLineaOriginal.select("idlinea = " + qLineas.value("l.idlinea"));
	if(curLineaOriginal.first()) {
		curLineaOriginal.setModeAccess(curLineaOriginal.Browse);
		curLineaOriginal.refreshBuffer();
		curLineaRect.setModeAccess(curLineaRect.Insert);
		curLineaRect.refreshBuffer();
	
	  	for (var i = 1; i <= totalCampos; i++) {
	  		if(aCamposLinea[i] == "cantidad" || aCamposLinea[i] == "pvptotal" || aCamposLinea[i] == "pvptotaliva" || aCamposLinea[i] == "pvpsindto" || aCamposLinea[i] == "pvpsindtoiva"){
				curLineaRect.setValueBuffer(aCamposLinea[i], curLineaOriginal.valueBuffer(aCamposLinea[i]) * (-1));
	  		}
	  		else if(aCamposLinea[i] == "idlinea" || aCamposLinea[i] == "idsubcuenta" || aCamposLinea[i] == "codsubcuenta"){
	  			continue;
	  		}
	  		else{
				curLineaRect.setValueBuffer(aCamposLinea[i], curLineaOriginal.valueBuffer(aCamposLinea[i]));
			}
		}

		curLineaRect.setValueBuffer("idfactura", idFactura);

		if (!curLineaRect.commitBuffer()) {
			return false;
		}
	}

	return true;
}

function elgansoCtr_eliminaVentasLafayette()
{
	//var where = "fecha >= '2019-02-13' AND codtienda = 'ALFF'";
	var where = "c.fecha >= '2018-11-30' AND c.fecha <= '2019-02-18' AND c.codtienda = 'AECF' AND v.idcomanda is null";
	
	//select count*) from tpv_comandas where fecha >= '2018-11-30' AND fecha <= '2019-02-18' AND codtienda = 'AECF' AND idtpv_comanda NOT IN (SELECT idcomanda from eg_ventaseci)
	//select count(idtpv_comanda) from tpv_comandas c LEFT OUTER JOIN eg_ventaseci v ON c.idtpv_comanda = v.idcomanda where c.fecha >= '2018-11-30' AND fecha <= '2019-02-18' AND codtienda = 'AECF' AND v.idcomanda is null;

	var qV = new FLSqlQuery();
	qV.setFrom("tpv_comandas c LEFT OUTER JOIN eg_ventaseci v ON c.idtpv_comanda = v.idcomanda");
	qV.setSelect("c.idtpv_comanda");
	qV.setWhere(where);
	
	if (!qV.exec()) {
		return false;
	}

	var curVenta = new FLSqlCursor("tpv_comandas");

	flfactppal.iface.pub_creaDialogoProgreso(sys.translate("Eliminando ventas lafayette"), qV.size());
	var p = 0;
	
	while(qV.next()) {
		AQUtil.setProgress(p++);
		if(!AQUtil.sqlUpdate("tpv_comandas",["estado","editable","sincronizada"],["Abierta",true,false], "idtpv_comanda = " + qV.value("c.idtpv_comanda"))) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

		curVenta.select("idtpv_comanda = " + qV.value("c.idtpv_comanda"));
		if(!curVenta.first()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}

		curVenta.setModeAccess(curVenta.Del);
		curVenta.refreshBuffer();
		if(!curVenta.commitBuffer()) {
			sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);
			return false;
		}		
	}

	sys.AQTimer.singleShot(0, AQUtil.destroyProgressDialog);

	return true;
}

function elgansoCtr_gestionarFacturasVentaIDL()
{
	var _i = this.iface;

	_i.imprimirFacturasVentaIDL();
	_i.eliminarFacturasVentaIDLEnviadas();

	return true;
}

function elgansoCtr_imprimirFacturasVentaIDL()
{
	var _i = this.iface;

	var ruta = AQUtil.sqlSelect("param_parametros","valor","nombre = 'RUTA_FRA_IDL'");
   	if(!ruta || ruta == "") {
   		flfactppal.iface.ponMsgError(sys.translate("Debe establecer los parametros de configuracion en el modulo de sistema."),"warn",this);     
		return false;	
   	}

	var q = new FLSqlQuery();
	q.setSelect("e.id, e.idtpv_comanda, e.codcomanda, c.egcodfactura");
	q.setFrom("idl_ecommerce e INNER JOIN tpv_comandas c ON c.idtpv_comanda = e.idtpv_comanda");
	q.setWhere("e.imprimirfactura = TRUE AND e.facturaimpresa = FALSE AND c.egcodfactura IS NOT NULL AND c.egcodfactura <> ''");
	
	if(!q.exec()) {
		return false;
	}

	var codFactura;
	
	while(q.next()) {
		codFactura = q.value("c.egcodfactura");

		var oParamInforme = formtpv_comandas.iface.dameParamInformeComanda(q.value("e.idtpv_comanda"));
		if (!oParamInforme) {
			return false;
		}

		oParamInforme["datosPdf"] = new Object;
		oParamInforme["datosPdf"]["pdf"] = true;
		oParamInforme["datosPdf"]["ruta"] = ruta + "/T" + q.value("e.codcomanda") + ".pdf";	

		oParamInforme["nombreInforme"] = "i_ventasfacturascli";

		var curImprimir = new FLSqlCursor("tpv_i_comandas");
		curImprimir.setModeAccess(curImprimir.Insert);
		curImprimir.refreshBuffer();
		curImprimir.setValueBuffer("descripcion", "temp");
		curImprimir.setValueBuffer("d_tpv__comandas_codigo", codFactura);
		curImprimir.setValueBuffer("h_tpv__comandas_codigo", codFactura);
		if(!flfactinfo.iface.pub_lanzaInforme(curImprimir, oParamInforme)){
			continue;
		}

		if (!AQUtil.execSql("UPDATE idl_ecommerce SET facturaimpresa = true WHERE id = '" + q.value("e.id") + "'")) {
			continue;
		}
	}

	return true;
}

function elgansoCtr_eliminarFacturasVentaIDLEnviadas()
{
	var _i = this.iface;

	var ruta = AQUtil.sqlSelect("param_parametros","valor","nombre = 'RUTA_FRA_IDL'");
   	if(!ruta || ruta == "") {
   		flfactppal.iface.ponMsgError(sys.translate("Debe establecer los parametros de configuracion en el modulo de sistema."),"warn",this);     
		return false;	
   	}

	var q = new FLSqlQuery();
	q.setSelect("e.codcomanda");
	q.setFrom("idl_ecommerce e");
	q.setWhere("e.imprimirfactura = TRUE AND e.facturaimpresa = TRUE AND e.envioidl = TRUE AND e.idlogenvio <> 0 AND e.idlogenvio IS NOT NULL");
	
	if(!q.exec()) {
		return false;
	}
	
	while(q.next()) {
		var fraIdl = ruta + "/T" + q.value("e.codcomanda") + ".pdf";
		var file = new File(fraIdl);
		
		file.remove();
	}

   	return true;
}

function elgansoCtr_procesarRegistrosEcommerce()
{
	var _i = this.iface;

	if(!_i.procesarRegistrosIdlEcommerce()){
		return false;
	}

   	return true;
}

function elgansoCtr_procesarRegistrosIdlEcommerce()
{
	var _i = this.iface;

	var q = new FLSqlQuery();
	q.setSelect("c.idtpv_comanda");
	q.setFrom("idl_ecommerce e INNER JOIN tpv_comandas c ON e.idtpv_comanda = c.idtpv_comanda INNER JOIN tpv_lineascomanda lc ON c.idtpv_comanda = lc.idtpv_comanda");
	q.setWhere("(e.confirmacionenvio = 'Si' OR e.confirmacionenvio = 'Parcial') AND c.idfactura IS NULL AND c.egcodfactura = '' AND c.codtienda = 'AWEB' AND c.codigo LIKE 'WDV%' GROUP BY c.idtpv_comanda");

	debug("////Consulta: " + q.sql());
	if(!q.exec()){
		return false;
	}

	if(q.size() == 0){
		return true;
	}
	
	while(q.next()){
		debug("//////////////////idTpvComanda: " + q.value("c.idtpv_comanda"));
		if(!_i.regenerarMovimientoStockIdlEcommerce(q.value("c.idtpv_comanda"))){
			return false;
		}
	}

   	return true;
}

function elgansoCtr_regenerarMovimientoStockIdlEcommerce(idTpvComanda)
{
	var _i = this.iface;

	var curLA = new FLSqlCursor("tpv_lineascomanda");
	curLA.select("idtpv_comanda = " + idTpvComanda + " AND cantidad > 0");
	while(curLA.next()){
		curLA.setModeAccess(curLA.Browse);
		curLA.refreshBuffer();
		debug("///////////////////curLA- ID: " + curLA.valueBuffer("idtpv_linea"));
		if (!flfactalma.iface.borrarEstructura(curLA)) {
			debug("///////////////False 1");
			return false;
		}

		if (!flfactalma.iface.generarEstructura(curLA)) {
			debug("///////////////False 2");
			return false;
		}

	}

	
   	return true;
}

//// ELGANSOCTR /////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

/** @class_definition head */
/////////////////////////////////////////////////////////////////
//// DESARROLLO /////////////////////////////////////////////////

//// DESARROLLO /////////////////////////////////////////////////
////////////////////////////////////////////////////